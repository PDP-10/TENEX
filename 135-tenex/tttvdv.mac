;Removed the IFKA <EXTERN NVTSTD,STADYN,LCKTTY,ULKTTY>
;HWM, 8-Jul-82
;
;Remove the IFKA from around TCOBN definition
;Remove the IFKA from around NVTMO definition
;Remove the IFKA from around the END and TNXEND
;Remove the IFKA from around the SEARCH PROLOG and TTITLE TTTVDV
;Remove the IFKA's from around the global EXTERNS
;HWM, 7-Jul-82
;
;Jump over the SNDTV7 code.
;HWM, 24-May-82
;
;Change TVTCH8 to a BUGCHK, and return +1, saying line was
;not initialized.
;HWM, 20-May-82.
;
;Conditionialize DMOVEM's if KA, KI or F3.
;HWM, 18-May-82
;
;<TCP-4>TTTVDV.MAC.41094, 27-Apr-82 01:05:26, Edit by BILLW
; added code (SNDTV7) to check for output freezing
;| Updates for tenex compatability
;ISIMON:<ISI.TCP>TTTVDV.MAC.3370 15-Sep-81 10:37:54, Edit by CHASE
;#337 BBN updates:
; Fix: Zero TSALC when cancelling a SNDALL, TVTOSP returns sum of
; regular & sendall buffers, TVTCLS does a listen if EFP+^D7 & no TVTL,
; Added TVSBE1 to check for sendall characters
;ISIMON:<ISI.TCP>TTTVDV.MAC.2730 30-Jun-81 13:09:39, Edit by CHASE
;#273 Fix ;#271 to get right byte count
;ISIMON:<ISI.TCP>TTTVDV.MAC.2710 30-Jun-81 13:03:52, Edit by CHASE
;#271 In TVTOSP, count Sndall bytes if appropriate
;#270 Replace bad jrst to nvt code (NVTDT2) with TVTDT2.
;ISISRC:<4.TCP>TTTVDV.MAC.2560 21-May-81 14:35:56, Edit by CHASE
;#256 In TVTDOB, make TCB have extended address (INTSEC)
;ISISRC:<4.TCP>TTTVDV.MAC.2510  1-May-81 19:00:16, Edit by CHASE
;#251 BBN made many edits to this module, so unincorporated isi mods (below)
;#251	were edited into their source instead of vice versa.
;ISISRC:<4.BBNC-TCP>TTTVDV.MAC.41082 22-Apr-81 19:13:04, Edit by CHASE
;#6 Stopgap fix to ASNTVT- If TCJOB says a line is the controlling tty
;#6  for a job, double check with JOBPT, because it's sometimes wrong(?)
;#4 Remove Ptvt defstr to tcppar for access by tcpjs
	SEARCH	INPAR,TCPPAR
	SEARCH	PROLOG
	TTITLE TTTVDV

	SUBTTL	TVT DEPENDENT CODE


COMMENT	!

These routines support TCP Virtual Terminals, which are very similar
to ARPANET NVTs.  They speak "new" TELNET protcol.  TVTs are
operated by the TCP portion of the Internet fork.  This fork
does the listen, etc. and there is no usermode equivalent of
NETSER.  The listen is special in that it is marked as a TVT,
which means that the buffers involved are TTYSRV buffers in
monitor space and not user-supplied buffers in some user's
space.  Further, no PSI are generated for buffer completions.
Allocation (window) is set by the number of bytes available in
the TTY buffers.
TVTs use the TELNET protocol through TCP connections.  Most of the
TELNET code is in TTNTDV and this module uses that code.

 #TVSBE1 ...  4 ...... See if send-all has any output too
 #TVMSNT ...  4 ...... See if send-all should be done
* TVMNTR ...  4 ...... Clear all TVT Send-all requests

  ASNTVT ...  5 ...... Assign a TCP Virtual Terminal
* TVTCSO ...  6 ...... TVT Console start output routine
 #TVTDOB ...  7 ...... TVT Dismiss until output buffer empty routine
 #TVTCOB ...  8 ...... TVT lear output buffer routine

* TVTNCK ...  9 ...... Check for overdue TELNET negotiations on TVTs
* SNDTVT ... 10 ...... Send bytes to TVT
* PRCTVT ... 11 ...... Process bytes received from TVT

* CHKTVT ... 12 ...... Check to see if line is a TVT
* TVTCHK ... 12 ...... Check for TVT and lock line if so.

* TVTISP ... 13 ...... Get number of holes in TVT input buffer
* TVTOSP ... 13 ...... Get number of bytes in TVT output buffer

 #TVTDTS ... 15 ...... Close TCP connection upon carrier-off condition
 #TVTDET ... 15 ...... Detach job from TVT

 #TVTIGA ... 16 ...... Input TELNET Go-Ahead

* TVTOPR ... 17 ...... Main routine to operate TVTs
  LISTEN ... 17 ...... TELNET server listen routine
* TVTOPN ... 18 ...... Handle TVT connection as it is opening
* TVTCLS ... 19 ...... Handle TVT connection as it is closing

  OPSCAN ... 20 ...... Scan all TVTs for possible output
	!

	OPDEF %OPEN% [JSYS 742]		; 'Cause MACRO is finding CALLI nowdays

IFNKA <IFE TTNTVT-TTDMVT,<PRINTX ? TVTs require TTNTDV to be included>>
IFNKA <IFNDEF %%REL4,<
	PRINTX % %%REL4 NOT SET IN PROLOG0.MAC.  ASSUMED TRUE.
	%%REL4==1
>>
IFNDEF %%MODS,<%%MODS==0>

EXTERN ABTCON,CKNNVT,CLOSE1,DMCH,FRCPKT,LCKCAL,NEGTM0,NEGTMO,NEWNVB ;|
EXTERN NVTCOF,NVTOPF,NVTRRR,NVTRSV,NVTSSP,RETJCN,TTBRKC ;|
EXTERN INSKED,INTFLG,JOBPT,NVTDOB,NVTPAR,TCOBQ,TCPFLG,TODCLK ;|
EXTERN TTBFRC,TTCHI,TTCIBF,TTCOBI,TTFLGS,TTFORK,TTICT,TTNETW ;|
EXTERN TTOCT,TTPSI,TTSND,TTSOBE,TTYPE,TVTLSN,TVTNOF,TVTNTM,TVTPTR ;|

IFNKA <
;TVT VECTOR TABLE ENTRYS

	RESCD
TTTVVT=.
	TVTLEN			;LENGTH OF DYNAMIC DATA FOR THIS TYPE
	-1			;FIRST LINE OF THIS TYPE/-1 NO LINES
	IFIW!R			;00 - INITALIZATION
	IFIW!R			;01 - RESTART
	IFIW!TVTCOB		;02 - CLEAR OUTPUT BUFFER
	IFIW!R			;03 - SET LINE SPEED
	IFIW!TTRSP2		;04 - READ TTY SPEED
	IFIW!TTSNT2		;05 - SET NON-TERM STATUS
	IFIW!TTRNT1		;06 - READ NON-TERM STATUS
	IFIW!TTSTO5		;07 - REMOVE CHAR FROM OUTPUT BUFFER
	IFIW!TVTPAR		;08 - STPAR JSYS
	IFIW!R			;09 - CHECK PHYSICAL LINE
	IFIW!TTXON2		;10 - XON
	IFIW!TVTDET		;11 - DEASIGN DYNAMIC DATA
	ANDI T1,177		;12 - TTY OUTPUT PARITY OFF
	IFIW!TVTCSO		;13 - START OUTPUT LINE
	IFIW!R			;14 - XOFF
	IFIW!R			;15 - XON
	IFIW!TTCQ1		;16 - EMPTY BUFFER
	IFIW!R			;17 - CARRIER ON
	IFIW!TVTCOF		;18 - CARRIER OFF
	IFIW!TVTDTS		;19 - HANGUP
	IFIW!R			;20 - ^S
	IFIW!TVC7SN		;21 - NO LOGINS
	IFIW!R			;22 - STORE CHARACTER
	IFIW!R			;23 - SEND CHARACTER
	IFIW!TVDAL6		;24 - DEALLOCATE LINE
	IFIW!DLSSX2		;25 - BUFFER OVERFLOW
	IFIW!R			;26 - EMPTY BUFFER
	IFIW!RSKP		;27 - SENDALL TO SINGLE LINE
	IFIW!R			;28 - ENABLE/DISABLE DATASETS
	IFIW!R			;29 - INIT
	IFIW!R			;30 - CLEAR INPUT BUFFER
	IFIW!TVTDOB		;31 - DOBE
	IFIW!TVTIGA		;32 - INPUT GA
	IFIW!TVSET1		;33 -  SET INIT. VALUES FOR A LINE
	IFIW!TVSBE1		;34 - SOBE
	IFIW!TVOBE1		;35 -  WAKEUP IF OUTPUT BUFFER EMPTY
	IFIW!TVMSNT		;36 - SENDALL TO SINGLE LINE
	IFIW!TVMSNT		;37 - SENDALL TO ALL LINES
	JFCL			;38 - ADJUST WAKEUP CLASS
	IFIW!R			;39 - STOP LINE
	IFIW!R			;40 - XOFF RECOGNITION
IFN %%MODS,<
	IFIW!TTNOAC		;41 - NO ACCTING
	IFIW!R			;42 - OR LINE USAGE LOGGING
>
   IFN <.-TTVTMX>-TTTVVT,<PRINTX %%INVALID DEVICE DEPENDENT TABLE SIZE>
> ; end ifnka

; TVT Block length is same as NVT:

IFNKA	<TVTLEN==NVTLEN>

; Routines in TTNTDV which are suitable for TVTs:

IFNKA <TVSET1==TTSET1>
TVTPAR==NVTPAR
IFNKA <TVC7SN==TTC7SN>
IFNKA <TVDAL6==TTDAL6>
;IFNKA <TVSBE1==TTSBE1>		;#337 Use internal routine for to sendall
IFNKA <TVOBE1==TTOBE1>
IFNKA <TVTCOF==NTYCOF>		;|
IFKA <TVTCOF=NVTCOF>		;|
IFKA <RCTOPT==7>		;| RCTE option
IFKA <WILOPT==10>		;| Offset for requests

TVTCHI==TTCHI
	TTCOBN==TTCOBI
	TCOBN==TCOBQ

IFKA <	INTERN TVTCIB,TVTCOB,TVTDOB,TVTCAP,TVTDET>


	NTTTVT==TVTHI-TVTLO+1
	NVTMO==NEGTMO_^D18



; Structure analagous to PTNTO and PTNTI:
;#4 Remove defstr to tcppar

;#4 DEFSTR(PTVT,TTNETW,35,18)	; Holds pointer to a TVT TCB


IFKA <	; Note: Some of these definitions must parallel those in MIMPDV

DEFSTR TTTYP,TTYPE,35,18	; Terminal type
DEFSTR TCJOB,TTFORK,17,18	; Controlling job number
DEFSTR TIMAX,TTBFRC,26,9	; Max bytes in input buffer
DEFSTR PBRCT,TTBRKC,8,9		; Outstanding BREAKS count
DEFSTR TTOTP,TTFLGS,0,1		; Output active flag
DEFSTR NVSTP,TTNETW,14,3	; Current NVT state
>


; TCP Parameters:

LSNPRT==27		; Port TELNET listens on
LSNTMO==^D<5*60>		; Timeout
TVTRXP==1001,,3		; TVT Retransmission parameters
			; (no backoff, constant 3 seconds)

IFNKA <
;DOES SKIPE TTOCT(B) AND SKIPE TSALC(B) FOR TVTS
;SKIPS ONLY IF ABSOLUTELY NO CHARS TO BE HANDLED FOR LINE
;ACCEPTS DYN LINE # IN B
;RETURNS TTOCT+TSALC IN T1

TVSBE1::CALL TTSBE1		;#337
	 JRST TVSBE2		;#337 NO SKIP IF NORMAL OUTPUT TO BE DONE
	OPSTR <SKIPN>,TSALC,(B) ;#337 NO SKIP IF SENDALL TO BE DONE
	 RETSKP			;#337 SKIP ONLY IF ABSOLUTELY NO CHARS
TVSBE2:	OPSTR <ADD A,>,TSALC,(B) ;#337
	RET			;#337 NO-SKIP, COUNT IN A

;TVMSNT - TEST TO SEE IF SEND ALL SHOULD BE DONE

;	FNCALL OFF TTVT37

;ACCEPTS:
;	T2/ LINE NUMBER

;RETURNS: +1 DO NOT SEND MESSAGE
;	  +2 SEND MESSAGE

SWAPCD

TVMSNT:	PUSH P,T2		;SAVE LINE NUMBER
	CALL LCKTTY		;GET DYNAMIC DATA ADDRESS IF IT EXIST
	JRST TTMSN1		;NO DYNAMIC DATA DO NOT SEND
	SKIPG TTNETW(T2)	;ANY CONNECTIONS?
	JRST TTMSN1		;NO DO NOT SEND MESSAGE
	CALL ULKTTY		;YES UNLOCK TTY DATABASE
	AOS TVTNOF		;INDICATE OUTPUT FOR TVTS
	MOVE T2,TTMSCT		;GET COUNT OF CHARACTERS IN MESSAGE
	IMULI T2,TMSNTT		;MULTIPLY BY ALLOWABLE TIME PER CHAR.
	ADD T2,TODCLK		;GET TIME MESSAGE TO BE DISCARDED
	MOVEM T2,TVMSTM		;SAVE TIME FOR TCP FORK
	POP P,T2		;RESTORE T2
	RETSKP			;SEND MESSAGE


TVMSN1:	CALL ULKTTY		;UNLOCK TTY
	POP P,T2		;RESTORE T2
	RETBAD			;NO DO NOT SEND MESSAGE


;TVMNTR - ROUTINE TO CLEAR ALL TVT SNDALL REQUEST
;CALLED NOSKED FROM TVTTS

RESCD

TVMNTR::MOVE T3,TVTPTR		;GET AOBJN COUNTER FOR TVT'S
	JRST TMSNR1		; Use code in TTNTDV
> ; end IFNKA

;ASNTVT - ASSIGN A TCP VIRTUAL TERMINAL

;ACCEPTS:
;	T1/ JCN (WITH AN%NTP flag for new protocol)

;	CALL ASNNVT

;RETURNS +1: FAILURE
;	 +2: SUCESS
;		T1/ LINE NUMBER
;		T2/ ADDRESS OF DYNAMIC DATA AND DATA BASE LOCKED

SWAPCD

ASNTVT::STKVAR <TVTJCN,TVLIN>
	MOVEM T1,TVTJCN
	HRRZ T1,TVTPTR		;GET FIRST TVT LINE NUMBER
	SETZ T3,		;START WITH FIRST TVT
	NOSKED
ASNTV1:	MOVE T2,T1		;GET FIRST TVT OFFSET
	ADD T2,T3		;ADD CURRENT TVT
	MOVEM T2,TVLIN		;SAVE LINE NUMBER
	CALL STADYN		;IS IT INITIALIZED
	 JUMPE T2,ASNTV4	;NO. NO DYNAMIC DATA
	SKIPG TTNETW(T2)	;FREE?
	 JRST ASNTV3		;YES.
ASNTV2:	CAIGE T3,NTTTVT-1	;LOOKED AT ALL TVT'S?
	 AOJA T3,ASNTV1		;NO
	OKSKED			;YES,
	RETBAD			;RETURN BAD

ASNTV3:	LOAD T2,TCJOB,(T2)	;GET JOB FOR WHICH THIS IS A CNTRL TTY.
	CAIN T2,-1		;#6 IS THERE ONE
	 JRST ASNTV4		;#6 No, use this one
	HLRZ T2,JOBPT(T2)	;#6 Yes, is it really there?
	CAMN T2,TVLIN		;#6 Skip if TCJOB had obsolete data
	 JRST ASNTV2		;YES. TTY ALREADY ATTACHED?
ASNTV4:	IFNKA <
	MOVE T2,TVLIN		;GET LINE NUMBER BACK
	CALL TTYASC		;ASSIGN TVT
	 JRST ASNTV6		;COULD NOT ASSIGN IT
	>
	MOVE T2,TVLIN		;GET LINE NUMBER
	CALL LCKTTY		;AND LOCK DATA BASE
	 JRST ASNTV5		;CANNOT LOCK DATA BASE. SHOULD'NT HAPPEN
	SETONE TCJOB,(T2)	;INDICATE NO CONTROLLING JOB FOR TERM.
IFNKA <	SETONE TTPRM,(T2)>	;MAKE DATA PERMANENT UNTIL NVT CLOSED
	MOVE T1,TVTJCN		; Get arg back
	TXNN T1,AN%NTP		;NEW TELENET PROTOCOL REQUEST?
	 TLZA T3,-1		;NO, MAKE ZEROES
IFNKA <	 MOVX T3,NVNNV>		;YES, MAKE NEW NVB BIT
IFKA <	 MOVSI T3,NEWNVB>	;| YES, MAKE NEW NVB BIT
	HLLZM T3,TTNETW(T2)	;CLEAR TTNETW EXCEPT FOR NVNNV
	SETZM NVTOPF(T2)	;CLEAR OPTION STATUS
	HRRZ T1,TVTJCN		; Get the JCN
	HRRZ T1,JCNTCB(T1)	; Get the TCB
	STOR T1,PTVT,(T2)	;REMEMBER UNIT
	SETONE TT%DUM,TTFLGS(T2) ;SET DUPLEX MODE
	MOVEI T1,.TTIDL		;SET TO BE AN "IDEAL" TERMINAL
	STOR T1,TTTYP,(T2)
IFKA <	CALL TTCOBI		;| Clear input,output buffers
	CALL TTCIBF >		;| End of IFKA
	MOVE T1,TVLIN		;RETURN LINE NUMBER
	OKSKED
	RETSKP


ASNTV5:	CALL ULKTTY		;UNLOCK DATA BASE
ASNTV6:	HRRZ T1,TVTPTR		;GET FIRST TVT
	MOVE T3,TVLIN		;SET UP TO TRY NEXT LINE
	SUB T3,T1		;GET TVT NUMBER IN 3
	JRST ASNTV2		;AND TRY NEXT TVT

;TVTCSO - START OUTPUT TO A LINE CALLED FROM STRTOU

;	FNJRST OF TTVT13

;RETURNS +1: ALWAYS

	RESCD

TVTCSO::IFNKA <IFN %%REL4,<	OKSKD1>>	;RESTART SCHEDULER
	AOS TVTNOF		;REQUEST TTY SCAN
	AOS TCPFLG		; Say it is TCP that needs to run
	AOS INTFLG		; Get the Internet fork to run it
	RET

;TVTDOB - TVT dismiss until output buffer empty

;FNCALL off of TTVT31
;
;Avoid doing a TELNET timing mark option negotiation if the connection
;is closing since the other end will not respond.

	SWAPCD

TVTDOB:	LOAD TCB,PTVT,(T2)	; Get TCB if exists
	 JUMPE TCB,R		; Return if none
	SETSEC TCB,INTSEC	;#256 Get section ptr
	LOAD T1,TSSYN,(TCB)	; Get send state
	CAIE T1,SYNCED		; Can we send?
	 RET			; No
	LOAD T1,TRSYN,(TCB)	; Get receive side state
	CAIE T1,SYNCED		; Can other end reply?
	 RET			; No
	JRST NVTDOB		; Yes and yes.  Do normal TELNET stuff

;TVTCOB - TVT CLEAR OUTPUT BUFFER CALLED FROM TTCBF2

;ACCEPTS:
;	T2/ ADDRESS OF DYNAMIC DATA

;	FNJRST OFF TTVT02

;RETURNS +1: ALWAYS


	RESCD

TVTCOB:	CHNON DLSCHN
	SKIPE INSKED		;IN SCHEDULER
	 RET			;YES RETURN IMMEDIATELY
IFNKA <	OKSKED>
	SKIPG TTNETW(T2)	;STILL CONNECTED TO NETWORK?
	 JRST TVTCO3		;NO.  RETURN
	NOINT			;PROTECT POSSIBLE ILOCKS
	CALL CKNNVT		;NEW STYLE NVT?
	 JRST TVTCO1		;OLD STYLE
	MOVEI T1,DMCH		;DATA MARK CHARACTER
	CALL NVTSSP		;SEND NEW DM
	JRST TVTCO2

TVTCO1:	MOVEI T1,1		;RESERVE ONE CHARACTER
	CALL NVTRSV		;GO REESERVE IT
	 JRST TVTCO2		;NONE AVAILABLE CANNOT WAIT
	MOVEI T1,200
	CALL TCOBN		;SEND CHARACTER
	OKSKD1
TVTCO2:	OKINT
TVTCO3:	IFNKA <	CALL TTXON>	;REACTIVATE OUTPUT IF NECESSARY
	RET

;CHECK OVERDUE NEGOTIATIONS

	RESCD

TVTNCK::STKVAR <TVTCTR>
	MOVE T2,TVTPTR		;POINTER TO TVTS
TVTNCL:	MOVEM T2,TVTCTR		;SAVE TVT COUNTER
	HRRZ T2,T2		;GET JUST RIGHT HALF
	CALL LCKTTY		;GET ADDRESS OF DYAMIC DATA AND LOCK
	 JRST TVTNCE		;NOT ACTIVE
	SKIPGE TTNETW(T2)	;ATTACHED?
	 JRST TVTNCE		;NO, SKIP IT
	MOVX T3,NVTMO		;TIME OUT
	HLLZ T1,NVTOPF(T2)	;GET OUTSTANDING OPTIONS
	 JUMPE T1,[ANDCAM T3,TTNETW(T2) ;NONE, CANCEL TIME-OUT IF ANY
		JRST TVTNCE]
	XORB T3,TTNETW(T2)	;YES, COUNT COUNTER
	TXNN T3,NVTMO		;COUNT FROM 1 TO 0?
	 HRRZS NVTOPF(T2)	;YES, CANCEL OUTSTANDING OPTION
TVTNCE:	CALL ULKTTY		;UNLOCK DATA BASE
	MOVE T2,TVTCTR		;GET AOBJ COUNTER
	AOBJN T2,TVTNCL		;ANY MORE TVT'S
	MOVE T1,TODCLK		;NO.  GET TIME OF DAY
	ADDI T1,NEGTM0		;ADD TIME OUT QUANITY
	MOVEM T1,TVTNTM		;SAVE TIME FOR NEXT CHECK
	RET

; SNDTVT		; Send virtual terminal data

;TCB/	Locked connection block
;PKT/	Pointer to Internet portion of packet being filled
;TPKT/	Pointer to TCP portion of packet
;T1/	Max number of characters to send
;T2/	Line block address
;
;	CALL SNDTVT
;Ret+1:	Always.  Terminal data moved into packet. T1 has number of chrs.

SNDTVT::
	LOCAL <XFRCNT,LINBLK,PKTPTR,CNT>
	ife	kaflg!kiflg!f3flg,<	;[hwm]
	DMOVEM T1,XFRCNT	; T1,2 to XFRCNT and LINBLK
>
	ifn	kaflg!kiflg!f3flg,<	;[hwm]
	movem	t1,xfrcnt	;[hwm]
	movem	t2,linblk	;[hwm]
>
	LOAD PKTPTR,PTDO,(TPKT)	; Get TCP data offset
	HRLI PKTPTR,(<POINT 8,.-.(TPKT)>) ; Pointer to data area
	MOVEI CNT,0		; Init number moved to packet
	MOVEI T3,(1B<RCTOPT+WILOPT>) ;| RCTE-on bit
	TDNE T3,NVTOPF(T2)	; Have we said we will do RCTE?
	CALL CKNNVT		; And is this a "new" TELNET terminal?
	 JRST SNDTV1		; No.
	JE PBRCT,(T2),SNDTV1	; Check the break count
	CALL NVTRRR		; Try to send
;begin [wew]
;[hwm]SNDTV7:	skipge	TTMOD2##(2)	; output frozen ?
;[hwm]	 jrst SNDTV9		; wait for unfreeze then...
;end [wew]
SNDTV1:	SKIPG TTNETW(T2)	; Still connected?
	 JRST SNDTV2		; No
	JE TERR,(TCB),SNDTV3	; Error on connection (retrans timeout)?
SNDTV2:	CALL TTCOBN		; Flush output buffer
	JRST SNDTV9		; And return

SNDTV3:	SETONE TTOTP,(T2)	; Indicate output active

; Move characters from the terminal output buffer(s) into the packet.
; XFRCNT has space left in packet and CNT will be left with number
; moved.

SNDTV4:	SOJL XFRCNT,SNDTV5	; Jump if packet filled
	MOVE T2,LINBLK		; Restore address of data area
	NOSKD1
IFNKA <	CALL TTSND>		; Get a chr from output buf to T3
IFKA <	JSP T4,TTSND>		; Get a chr from output buf to T3
	OKSKD1
	JE TTOTP,(LINBLK),SNDTV6 ; Jump if we did not get it
	IDPB T3,PKTPTR		; Add to packet
	AOJA CNT,SNDTV4		; Count it up and try for another

SNDTV5:	SETZRO TTOTP,(LINBLK)	; Clear output active bit
SNDTV6:
SNDTV9:	MOVE T1,CNT		; Return number in packet

SNDTVX:	RESTORE
	RET

; PRCTVT		Process TCP Virtual Terminal data

;T1/	Byte pointer into packet where to begin (index by TPKT)
;T2/	Pointer to dynamic line data block
;T3/	Maximum number of characters to do
;PKT/	Pointer to Internet portion of packet
;TPKT/	Pointer to TCP portion of packet
;TCB/	Locked connection block
;
;	CALL PRCTVT
;Ret+1:	Always.  Given number of characters have been moved.

PRCTVT::
	LOCAL <LINBLK,XFRCNT,PKTPTR>
	MOVEM T1,PKTPTR
	ife	kaflg!kiflg!f3flg,<	;[hwm]
	DMOVEM T2,LINBLK
>				;[hwm]
	ifn	kaflg!kiflg!f3flg,<	;[hwm]
	movem	t2,linblk	;[hwm]
	movem	t3,xfrcnt	;[hwm]
>				;[hwm]
PRCTV1:	SOJL XFRCNT,PRCTVX	; Jump if all done
	ILDB T1,PKTPTR		; Get a character
	MOVE T2,LINBLK		; Line block address
	LOAD T3,NVSTP,(T2)	; Current Telnet command state
	SETZRO NVSTP,(T2)	; Reset for normal dispatch next time
	PUSH P,LINBLK		; Some of these are crashed by TTYSRV
	PUSH P,XFRCNT		; or TELNET
	PUSH P,PKTPTR
	CALL @NVTSTD(T3)	; Dispatch to Telnet routine
	POP P,PKTPTR
	POP P,XFRCNT
	POP P,LINBLK
	JRST PRCTV1		; Do another
PRCTVX:	RESTORE
	RET

;CHKTVT - SEE IF THIS LINE NUMBER IS A TVT

;ACCEPTS:
;	T2/ INTERNAL LINE NUMBER

;	CALL CHKTVT

;RETURNS +1: IF NOT TVT
;	 +2: IF TVT

	RESCD

CHKTVT::
IFNKA <	ACVAR <W1>		;GET AN AC TO WORK WITH
	LOAD W1,TTSTY,(T2)	;GET LINE TYPE FOR THIS LINE
	CAIE W1,TT.TVT		;IS IT A TVT?
	RETBAD			;NO. FAILURE
	RETSKP			;RETURN SUCCESS
>

IFKA <	CAIL T2,TVTLO
	CAILE T2,TVTHI
	 RETBAD
	RETSKP
>



;	SWAPCD
	rescd

; TVTCHK	See if this line is a TCP Virtual terminal

;T2/	Internal line number
;
;	CALL TVTCHK
;Ret+1: Line not initialized.	T2  0	Inactive	Not locked, okint
;				T2 -1	Becoming active	Not locked, okint
;				T2 adr	Non-standard blk Locked, noint
;   +2:	Line initialized.	T2 adr	Std dynamic data Locked, noint

TVTCHK::
IFNKA <	CAIL T2,NLINES		; Legal terminal line number?
	 JRST TVTCH8		; TCP Never calls with non-TVT
	LOAD T1,TTSTY,(T2)	; Line type for this line
	CAIE T1,TT.TVT		; Is it a TVT?
	 JRST TVTCH8		; No.
>
IFKA <	CAIL T2,TVTLO
	CAILE T2,TVTHI
	 JRST TVTCH8
>
	CALL LCKTTY		; Get addr of dynamic data and lock
	 RET			; Line not initialized
	JRST TVTCHX		; Return with line blk addr in T2
;[hwm]TVTCH8:	TCPBUG(HLT,<TVTCHK called with non-TVT>,TVTNTV)
TVTCH8:	TCPBUG(chk,<TVTCHK called with non-TVT>,TVTNTV)
	setz	t2,		;[hwm]	say line not inited
	ret			;[hwm]	and return
TVTCHX:	RETSKP

; TVTISP	Get number of holes in input buffer
	swapcd

;T2/	Pointer to line block
;
;	CALL TVTISP
;Ret+1:	Always.  Space available in T1

TVTISP::LOAD T1,TIMAX,(T2)	; Max capacity of line
	SUB T1,TTICT(T2)	; Less what is already there
	RET			; Gives amount left



; TVTOSP	Get number of bytes in output buffer

;T2/	Line block pointer
;
;	CALL TVTOSP
;Ret+1:	Always.  Number in T1.

TVTOSP::MOVE T1,TTOCT(T2)	;#273 Get normal byte count
IFNKA <	JE TTSAL,(T2),TVTOS1	;#271 Jump if not doing sndall
	OPSTR <ADD T1,>,TSALC,(T2) ;#271 Include sndall count

TVTOS1:	JE <TTSFG,TTSHT>,(T2),TVTOSX ;#271 Check for ^S
	MOVEI T1,0		; Hung on ^S, say no avail for output
> ; End of IFNKA
TVTOSX:	RET

; TVTDTS	Close a full duplex TCP virtual terminal connection
;		upon carrier-off
;
;T2/	Line number
;
;	CALL TVTDTS	(FNJRST off off TTVT19)
;Ret+1:	Always
	
	RESCD

TVTDTS:	CALL TVTDET		; Detach the TVT
	 RET			; Ignore errors
	RET			; Success

; TVTDET	Detach a job from a TCP virtual terminal connection

IFNKA <
;	Called from HLTJB when a job logs off

;T2/	Line number
;
;	CALL TVTDET	(FNCALL off of TTVT11)
;Ret+1:	Failure.  T1/	1B0 + Addr of routine if dismiss needed
;		  or,   Error code if failed
;Ret+2:	Success


TVTDET:	SE1CAL			; Enter section 1
	SAVEPQ			; Save local ACs
	STKVAR <TVTDLN,TVTDAD>	; Space for line number and block addr
	MOVEM T2,TVTDLN		; Save the line number
	CALL TVTCHK		; See if this is a TVT
	 RETSKP			; Not assigned.  Return.
	MOVEM T2,TVTDAD		; Save addr of dynamic data area
	CALL CLRPRM		; Clear permanent bit, allowing deassign
	SKIPG TTNETW(T2)	; Is there a connection?
	 JRST TVTDE1		; No
	PUSH P,TCB
	LOAD TCB,PTVT,(T2)	; Get the TCB
	SETSEC TCB,INTSEC	; Make extended address
	JE TSUOP,(TCB),TVTDE0	; Already closed?
	XMOVEI T1,TCBLCK(TCB)	; Lock to lock
	XMOVEI T2,CLOSE1	; Function to call
	CALL LCKCAL		; Do a cross-job close
TVTDE0:	SETZRO TVTL,(TCB)	; Prevent OPSCAN from finding this TCB
	POP P,TCB
	MOVE T2,TVTDAD		; Restore pointer to data block
TVTDE1:	SETZM TTNETW(T2)	; Flush the connection
	LOAD T3,TCJOB,(T2)	; Get owning job
	CAIN T3,-1		; Is there one?
	 JRST TVTDT2		;#270 No. Just go deallocate data block.
	MOVE T2,TVTDLN		; Get TTY line number
	MOVEI T1,.TTDES(T2)	; Make into device designator
	CALL CHKDES		; Get index to device tables
	 JRST [	MOVE T2,TVTDAD	; Get dynamic data address back
		CALL ULKTTY
		RETBAD]		; Invalid device designator?????
	SETZRO DV%OPN,DEVCHR(T2) ; Permit RELD at LGOUT to win
	MOVE T2,TVTDAD		; Dynamic data block address
	MOVE T1,TVTDLN		; Terminal line number
	CAMN T1,CTRLTT		; Controlling terminal for this job?
	 JRST TVTDT2		; Yes.  Go deassign database
	LOAD T3,TCJOB,(T2)	; Get owning job
	HLRZ T3,JOBPT(T3)	; Get controlling terminal of job
	CAME T1,T3		; Is this a controlling terminaL
	 JRST TVTDT2		; No.  Go detach it
	
; A job exists on this line and the net connection has been broken.
; Generate a carrier off PSI for the top fork.  This will cause the
; terminal data block to be deassigned.

	MOVE T2,TVTDLN		; Get line number
	NOSKD1
	CALL TVTCOF		; Start the carrier off action
	OKSKD1
	MOVE T2,TVTDAD		; Get address
	CALL ULKTTY		; Unlock the data block
	RETSKP			; And give a good return

; Deassign the terminal's data block

TVTDT2:	JE TTSAL,(T2),TVTDT3	; Doing a Send-All?
	SETZRO TTSAL,(T2)	; No longer.
	SOS SALCNT		; Now one less line doing it
	SETZRO TSALC,(T2)	;#337 Clear send-all count
	SETZRO TSALP,(T2)	; Clear send-all pointer
TVTDT3:	CALL ULKTTY		; Unshare the data block
	MOVE T2,TVTDLN		; TVT Line number
	MOVEI T1,.TTDES(T2)	; Form device designator
	CALL CHKDES		; Get index to device tables
	 RETBAD			; Invalid device designator????
	MOVEM T2,TVTDAD		; Save index to device tables
	MOVE T2,TVTDLN		; Get terminal line number
	CALL TTYDE0		; Deallocate the line
	 RETBAD			; Return error or test routine

	MOVE T2,TVTDAD		; Device table index
	HRROS DEVUNT(T2)	; Set owning job to -1
	SETZRO DV%ASN!DV%OPN,DEVCHR(T2) ; Not assigned or openned
	MOVE T2,TVTDLN		; Get line number
	CAME T2,CTRLTT		; Controlling terminal
	 RETSKP			; No.
	SETOM CTRLTT		; Yes. Indicate no terminal
	MOVE T2,JOBNO		; Get job number
	HRROS JOBPT(T2)		; This nob no longer has a terminal
	RETSKP
> ; end IFNKA

IFKA <

TVTDET:	PUSH P,T2
	SKIPL TTFORK(T2)	; Line attached?
	 CALL TVTCOF		; Yes, initiate carrier off psi
	MOVE T2,0(P)
	SKIPG TTNETW(T2)	; Reasonable units?
	 JRST TVTDT1		; No
	PUSH P,TCB
	LOAD TCB,PTVT,(T2)
	SETSEC TCB,INTSEC
	JE TSUOP,(TCB),TVTDE0
	XMOVEI T1,TCBLCK(TCB)
	XMOVEI T2,CLOSE1
	CALL LCKCAL
TVTDE0:	SETZRO TVTL,(TCB)
	POP P,TCB
TVTDT1:	POP P,T2
	SETZM NVTOPF(T2)
	SETOM TTNETW(T2)
	SETZM TTPSI(T2)
	CALL TTCOBI
	CALL TTCIBF
	RET
> ; end IFKA

IF1 <PRINTX %TVTIGA ABSENT
>
TVTIGA:	RET
IFKA <

  IF1 <PRINTX %TVTCAP ABSENT
  >

TVTCAP::RET


  IF1 <PRINTX %TVTCIB ABSENT
  >

TVTCIB::RET
>; END IFKA

; TVTOPR	Main routine to operate TVTs

;(no args)
;
;	CALL TVTOPR
;Ret+1:	Always.

TVTOPR::SKIPL TVTLSN		;#337 Need to do a listen?
	 CALL LISTEN		; Yes, do it.
	SKIPLE TVTNOF		; Output scan needed?
	 CALL OPSCAN		; Yes.  Signal PZ where possible
	MOVE T1,TODCLK		; Now
	CAML T1,TVTNTM		; Time for check on overdue
	 CALL TVTNCK		; Telnet negotiations
	RET




; LISTEN	Set up a TCB listening on the TELNET port

;(No args)
;
;	CALL LISTEN
;Ret+1:	Always.  TVTLSN set ge 0 if error,  le 0 if OK.

LISTEN:	MOVE T1,[TCP%PS+TCP%VT+[LSNPRT	; This local port
				0	; Any Foreign host
				0]]	; Any Foreign port
	MOVEI T2,LSNTMO		; Timeout
	MOVX T3,TVTRXP		; Default retransmission parameters
	%OPEN%			; Do the listen
	 TCPBUG(INF,<TCP Virtual Terminal Listen failed>,TCPVLF)
	MOVEM T1,TVTLSN		; Note: bit-0 on for success
	RET

; TVTOPN	Open a TCP Virtual Terminal

;TCB/	Pointer to TCB
;
;	CALL TVTOPN
;Ret+1:	Always

TVTOPN::LOAD T1,TJCN,(TCB)	; Get the JCN
	TXO T1,AN%NTP		; Say it will speak new Telnet
	CALL ASNTVT		; Assign a virtual terminal
	 JRST TVTOP9		; Failed (not available, etc)
	STOR T1,TVTL,(TCB)	; Save in connection block
	PUSH P,T2		; Save line block address
	MOVE T2,T1		; Put line number in right place
	MOVEI T1,"C"-100	; Get a control-C to awaken the job
	NOSKD1
	CALL TVTCHI		; Type it for the guy
	 JFCL			; Ignore error return
	OKSKD1
	SETZM TVTLSN		; Get another listen done
	SETZM TVTNTM		; Get done quickly
	POP P,T2		; Restore line block address
	CALL ULKTTY		; Block now stable
	JRST TVTOPX

TVTOP9:	MOVEI T1,ELT+^D4	;#337 Out of resources error
	CALL ABTCON		; Abort the connection
TVTOPX:	RET

; TVTCLS	Close a TCP Virtual Terminal

;T1/	Code for reason
;TCB/	Pointer to connection block
;
;	CALL TVTCLS
;Ret+1:	Always.

	RESCD
TVTCLS::LOCAL <CCODE>
	MOVEM T1,CCODE
	CAIE CCODE,XFP+^D12	;#337 Make like he closed
	CAIN CCODE,EFP+^D7	;#337 Connection reset (other end restarted)
	CAIA			;#337
	 JRST TVTCL1		;#337 No.  Something else

; Here when other end restarted and we received a RESET.  ABTCON was
; called from PRCRST.  Beware: it may be THE listening connection.

; Here when remote end is closing. We are in the process of sending
; and ACK for his FIN, but maynot be done sending everything from
; this end yet -- for instance, "Detached job N ..." msg.
; So, get the job to clean itself up and call TVTDTS via TTHNGU
; (from FLOGO1 as called from JOBCOF by top fork of the job), or
; via TTYDEA as called from TTYDAS from LDTACH or HLTJB.

	LOAD T2,TVTL,(TCB)	;#337 Get the line number
	JUMPE T2,TVTCL2		;#337 TVT maybe not assigned if during open
	NOSKD1			;#337     (if so, need another listen)
	CALL TVTCOF		;#337 Start the carrier off sequence
	OKSKD1			;#337
	JRST TVTCLX		;#337

TVTCL1:	CAIE CCODE,ELP+^D14	;#337 Retransmission timeout?
	 JRST TVTCL3		;#337 No.

; Here when we have suffered a retransmission timeout on an open
; connection.  ABTCON was called by the retransmitter and it called
; us via USREVT.  The connection is dead at this point (state is
; NOTSYN in both directions) and all that remains is to get the job
; detached.   Note that the job may or may not be logged in.
; The "said open" bit tells whether the timeout happened while
; the connection was opening (must do another listen) or after it
; had opened (next listen is already in progress).

TVTCL2:	SETZRO TSUOP,(TCB)	;#337 Don't send a FIN
	JN TSOPN,(TCB),TVTCL3	; Jump if next listen already done
	SETZM TVTLSN		; Get another listen done
	SETZM TVTNTM		; Now.
	JRST TVTCL4		;#337 Join common code

TVTCL3:	CAIE CCODE,XLP+3	;#337 "Closed"
	 JRST TVTCLX		;#337 Something else.  Ignore it.
TVTCL4:	LOAD T2,TVTL,(TCB)	;#337 Get line number
	SKIPE T2		; TVT not assigned if during open
	 CALL TVTDTS		; Detach owning job
	LOAD T1,TJCN,(TCB)	; Get our (Job-0) handle on the TCB
	CALL RETJCN		; Release it

TVTCLX:	RESTORE
	RET
	SWAPCD

; OPSCAN	Get packets sent on each connection with output waiting

;(no args)
;
;	CALL OPSCAN
;Ret+1:	Always.

; Note: TVT TCBs are owned by job-0 which includes the Internet fork
; which runs this code.  Therefore, NOSKED or setting of TCBHLK is
; not required.

OPSCAN:	LOCAL <JCN,LINADR>
	PUSH P,TCB
	SETZM TVTNOF		; Clear the run request flag
	MOVSI JCN,-MAXJCN	; Set to scan JCNTCB in JSB
	AOBJN JCN,OPSCA1	; JCN 0 is never used

OPSCA1:	HRRZ TCB,JCNTCB(JCN)	; Get pointer to TCB
	JUMPE TCB,OPSCA9	; Jump if not used
	SETSEC TCB,INTSEC	; Make extended address
	JE TTVT,(TCB),OPSCA9	; Jump if not a TVT
	LOAD T2,TVTL,(TCB)	; Get the line number
	JUMPE T2,OPSCA9		; USREVT released the TVT line
	CALL LCKTTY		; Lock and get dynamic area to T2
	 JUMPLE T2,OPSCA8	; Non standard block
	MOVE LINADR,T2		; Save the terminal block ptr
	CALL TTSOBE		; Any output waiting?
	 CAIA			; Yes.  Get PZ to call TVTTCS
	 JRST OPSCA7		; No.
	XMOVEI T1,TCBLCK(TCB)	; The lock to lock
	XMOVEI T2,FRCPKT	; The function to call
	CALL FRCPKT		; Lock the lock and call the function
OPSCA7:	MOVE T2,LINADR		; Restore address of terminal block
OPSCA8:	CALL ULKTTY		; Decrease reference count
OPSCA9:	AOBJN JCN,OPSCA1	; Loop over all job-0 TCBs

IFNKA <	SKIPE T2,TVMSTM		; Any TTMSG's out?
	CAMLE T2,TODCLK		; Yes, time to flush yet?
	 JRST OPSCAX		; No, return.
	NOSKED			; Prevent anyone from changing data
	CALL TVMNTR		; Flush all TTMSG's to TVTs
	OKSKED
	SETZM TVMSTM		; Clear timer
>
OPSCAX:	POP P,TCB
	RESTORE
	RET
	TNXEND
	END



