;ISIMON:<ISI.TCP>TCPPAR.MAC.3370 15-Sep-81 10:29:58, Edit by CHASE
;#337 BBN update: Multiple host addresses
;ISIMON:<ISI.TCP>TCPPAR.MAC.3260 24-Jul-81 15:37:01, Edit by CHASE
;#326 New AC1 jsys bits for STAT: Connection index => TCB
;<3A.TCP>TCPPAR.MAC.3146    29-Jul-80 16:13:05    EDIT BY CHASE
;#1 New AC1 jsys bits for STAT: TVT=>TCB
	UNIVER	TCPPAR
	SUBTTL	TCP Parameters, William W. Plummer, 2Mar79
	SEARCH	INPAR,IMPPAR,PROLOG,MACSYM

SYN INBUG,TCPBUG		; Use Internet bug macro

;#337 Make sure MNET switch = 0, if not defined
IFNDEF MNET,<MNET==0>		;#337

; Check consistency of IMPPAR with TCPPAR:

IF1 <	IFDEF .TCPFM,<
	  IFN .TCPFM-6,<PRINTX % .TCPFM defined wrong in IMPPAR
			.TCPFM==6
	  >
	>
	IFNDEF .TCPFM,<;;;PRINTX % .TCPFM not defined in IMPPAR
			.TCPFM==6
	>
>


; TCP Header (indexed by TPKT):

.P==0
DEFSTR(PSP,\<.P+0>,15,16)	; PACKET.SOURCE.PORT
DEFSTR(PDP,\<.P+0>,31,16)	; PACKET.DESTINATION.PORT
DEFSTR(PSEQ,\<.P+1>,31,32)	; PACKET.SEQUENCE
DEFSTR(PACKS,\<.P+2>,31,32)	; PACKET.ACK.SEQUENCE

DEFSTR(PCTL,\<.P+3>,35,36)	; Word containing control flags
; Substructures and overlays for above:
  DEFSTR(PTDO,\<.P+3>,3,4)	; PACKET.TCP.DATAOFFSET ( 32-BIT UNITS)
  ; 4 Unused bits
  DEFSTR(PTCTL,\<.P+3>,15,8)	; PACKET.TCP.CONTROLS
    ; 2 Unsed bits
    DEFSTR(PURG,\<.P+3>,10,1)	; PACKET.CONTROL.URGENT
    DEFSTR(PACK,\<.P+3>,11,1)	; PACKET.CONTROL.ACK
    DEFSTR(PEOL,\<.P+3>,12,1)	; PACKET.CONTROL.EOL
    DEFSTR(PRST,\<.P+3>,13,1)	; PACKET.CONTROL.RST
    DEFSTR(PSYN,\<.P+3>,14,1)	; PACKET.CONTROL.SYN
    DEFSTR(PFIN,\<.P+3>,15,1)	; PACKET.CONTROL.FIN
DEFSTR(PWNDO,\<.P+3>,31,16)	; PACKET.WINDOW
DEFSTR(PTCKS,\<.P+4>,15,16)	; PACKET.CHECKSUM
DEFSTR(PURGP,\<.P+4>,31,16)	; PACKET.URGENT.POINTER
	MINTHS==4*5		; Minimum TCP header size (bytes)

; TCP Options (if any) are here:

MINTOS==10			; Minimum # Option bytes to cope with

; Derive some useful numbers from the above:

MAXDSZ==4*<<M2+3>/4>-<4*<<MINIHS+3>/4>>-<4*<<MINTHS+3>/4>>
				; Max. number of TCP data bytes
MINDSZ==MAXDSZ-<4*<<MINIOS+3>/4>>-<4*<<MINTOS+3>/4>>
				; Min. number of bytes per Pkt estimated
MINPSZ==PKTELI+<<MINIHS+3>/4>+<<MINIOS+3>/4>+<<MINTHS+3>/4>+<<MINTOS+3>/4>

; Options.

; General form of options is 1 byte of "kind", 1 byte of total length,
; and N-2 bytes of data, where N is read from the length byte.

; ENDOPT is and must be 0.  This marks the end of the option list.
; NOPOPT is and must be 1.  This is one byte long and has no purpose.

; All options are included under the appropriate checksum.

DEFINE OPTION(NAME,CLASS,NUMBER,LENGTH<0>)<
	NAME'OPT==CLASS*40+NUMBER
	NAME'LEN==LENGTH
>


OPTION(END,0,0)			; End of options (IN, TCP)
OPTION(NOP,0,1,1)		; NOP (IN, TCP)
OPTION(RBS,1,5,4)		; Receive Buffer Size (TCP)
OPTION(LTS,3,4,6)		; Local Timestamp (TCP)
OPTION(LBL,1,1,4)		; Packet Label (TCP)

; TCP Parameters:

MAXSEQ==1_^D32			; 32 bit sequence numbers
SEQMSK==MAXSEQ-1		; Mask for doing mod MAXSEQ by AND op.
DEFINE MODSEQ(A)<TLZ A,(-MAXSEQ)>

CYCTIM==^D<2*60*60>			; Network cycle time in seconds
MLIFET==30*60			; Assumed message lifetime in seconds
SNSTEP==MAXSEQ/CYCTIM		; A tick's worth of sequence numbers
SNMARG==MLIFET*SNSTEP/2		; Half width of forbidden zone

;#1 Structure used to extract TCB from tty-dynamic-data-block

IFNKA < DEFSTR(PTVT,TTDEV,35,18)> ;#1 Holds pointer to TVT TCB
IFKA <	DEFSTR(PTVT,TTNETW,35,18) ;| Tenex TCB ptr
	EXTERN TTNETW >		;| Defined in Impdv

; TCB (connection block) structure:

TCBQ==0					; TCB Queue (TCBH, DeadQ, etc)
TCBLCK==TCBQ+QSZ				; TCB.LOCK
.T==TCBLCK+LOCKSZ

DEFSTR(TOWNR,\<.T+0>,17,18)		; TCB.OWNER
DEFSTR(TJCN,\<.T+0>,35,18)		; TCB.JCN
DEFSTR(TFH,\<.T+1>,35,36)		; TCB.FH
  ; Overlays for above
  DEFSTR(TFHN,\<.T+1>,11,8)		; TCB.FH.NET
  DEFSTR(TFHT,\<.T+1>,35,24)		; TCB.FH.TCP

DEFSTR(TLH,\<.T+2>,35,36)		;#337 TCB.LH
  ; Overlays for above
  DEFSTR(TLHN,\<.T+2>,11,8)		;#337 TCB.LH.NET
  DEFSTR(TLHT,\<.T+2>,35,24)		;#337 TCB.LH.TCP

DEFSTR(TFP,\<.T+3>,35,36)		;#337 TCB.FP
DEFSTR(TLP,\<.T+4>,35,36)		;#337 TCB.LP

;DEFSTR(TFLAG,\<.T+5>,17,18)		;#337 TCB.Flags
  ; Substructures for the above:
  DEFSTR(TERR,\<.T+5>,7,8)		;#337 TCB.ERROR
  DEFSTR(TWLDN,\<.T+5>,8,1)		;#337 OPEN with Net wild
  DEFSTR(TWLDT,\<.T+5>,9,1)		;#337 OPEN with TCP wild
  DEFSTR(TWLDP,\<.T+5>,10,1)		;#337 OPEN with Port wild
  DEFSTR(TSFP,\<.T+5>,11,1)		;#337 TCB.SEND.FORCE-PACKET
  DEFSTR(TSEP,\<.T+5>,12,1)		;#337 TCB.SEND.ENCOURAGE-PACKET
  DEFSTR(TRPB,\<.T+5>,13,1)		;#337 TCB.RECV.PARTIAL-BUFFER
  DEFSTR(TRPP,\<.T+5>,14,1)		;#337 TCB.RECV.PARITAL-PACKET
  DEFSTR(TSCR,\<.T+5>,15,1)		;#337 TCB.SECURE-CONNECTION
  DEFSTR(TTVT,\<.T+5>,16,1)		;#337 TCB.TCV-Virtual-terminal
  ; 4 Unused bits

DEFSTR(TSTAT,\<.T+5>,35,15)		;#337 TCB.STATE
  ; Overlays for above
  ; 6 Unused bits
  DEFSTR(TRSYN,\<.T+5>,23,3)		;#337 TCB.STATE.RECV-SYNC
  DEFSTR(TSSYN,\<.T+5>,26,3)		;#337 TCB.STATE.SEND-SYNC
  DEFSTR(TSUOP,\<.T+5>,27,1)		;#337 TCB.STATE.USER-OPEN
  DEFSTR(TSOPN,\<.T+5>,28,1)		;#337 TCB.STATE.SAID-OPEN
  DEFSTR(TSPRS,\<.T+5>,29,1)		;#337 TCB.STATE.PERSISTENT
  DEFSTR(TSABT,\<.T+5>,30,1)		;#337 TCB.STATE.ABORT
  DEFSTR(TSSV,\<.T+5>,31,1)		;#337 TCB.STATE.SEQUENCE-VALID
  ; 2 Unused bits
  DEFSTR(TSURG,\<.T+5>,34,1)		;#337 TCB.SEND.URGENT-MODE
  DEFSTR(TRURG,\<.T+5>,35,1)		;#337 TCB.RECV.URGENT-MODE

DEFSTR(TSLFT,\<.T+6>,35,36)		;#337 TCB.SEND.LEFT
DEFSTR(TSSEQ,\<.T+7>,35,36)		;#337 TCB.SEND.SEQUENCE
DEFSTR(TSURP,\<.T+10>,35,36)		;#337 TCB.SEND.URGENT-POINTER
DEFSTR(TSWND,\<.T+11>,17,18)		;#337 TCB.SEND.WINDOW
DEFSTR(TSCB,\<.T+11>,35,18)		;#337 TCB.SEND.CURRENT-BUFFER
DEFSTR(TSTO,\<.T+12>,35,36)		;#337 TCB.SEND.TIME-OUT
TCBSBQ==.T+13				;#337 TCB.SEND.BUFFER-QUEUE
TCBRXQ==TCBSBQ+QSZ			; TCB.SEND.REXMIT-QUEUE
.T==TCBRXQ+QSZ

DEFSTR(TRIS,\<.T+0>,35,36)		; TCB.RECV.INITIAL-SEQUENCE
DEFSTR(TRLFT,\<.T+1>,35,36)		; TCB.RECV.LEFT
DEFSTR(TRURP,\<.T+2>,35,36)		; TCB.RECV.URGENT-POINTER
DEFSTR(TRWND,\<.T+3>,17,18)		; TCB.RECV.WINDOW
DEFSTR(TRCB,\<.T+3>,35,18)		; TCB.RECV.CURRENT-BUFFER
DEFSTR(TRCBY,\<.T+4>,35,36)		; TCB.RECV.CURRENT-BYTE
DEFSTR(TRBS,\<.T+5>,35,36)		; TCB.RECV.BUFFER-SPACE
TCBRBQ==.T+6				; TCB.RECV.BUFFER-QUEUE
TCBRPQ==TCBRBQ+QSZ			; TCB.RECV.PACKET-QUEUE

TCBPIC==TCBRPQ+QSZ			; TCB.PSI-CHANNELS
DEFSTR(TPSIC,TCBPIC,35,36)		; All PSI channels
  ; Overlays for above:
  DEFSTR(TPICU,TCBPIC,5,6)		; URGENT DATA ARRIVED
  DEFSTR(TPICR,TCBPIC,11,6)		; RECV DONE
  DEFSTR(TPICS,TCBPIC,17,6)		; SEND DONE
  DEFSTR(TPICE,TCBPIC,23,6)		; ERROR
  DEFSTR(TPICX,TCBPIC,29,6)		; STATE CHANGE
  DEFSTR(TPICA,TCBPIC,35,6)		; EOL ACK

TCBPIF==TCBPIC+1			; TCB.PSI-FORKS
DEFSTR(TPIFU,TCBPIF+0,17,18)		; URGENT DATA ARRIVED
DEFSTR(TPIFR,TCBPIF+0,35,18)		; RECV DONE
DEFSTR(TPIFS,TCBPIF+1,17,18)		; SEND DONE
DEFSTR(TPIFE,TCBPIF+1,35,18)		; ERROR
DEFSTR(TPIFX,TCBPIF+2,17,18)		; STATE CHANGE
DEFSTR(TPIFA,TCBPIF+2,35,18)		; EOL ACK
.T==TCBPIF+3

DEFSTR(TOPNF,\<.T>,8,9)			; TCB.OPEN.WAIT FLAG INDEX
DEFSTR(TERRF,\<.T>,17,9)		; TCB.ERROR.FLAG index
DEFSTR(TOFRK,\<.T>,35,18)		; TCB.OWNING-FORK
DEFSTR(TMNRT,\<.T+1>,35,36)		; TCB.MIN-ROUND-TRIP
DEFSTR(TMXRT,\<.T+2>,35,36)		; TCB.MAX-ROUND-TRIP
DEFSTR(TRXI,\<.T+3>,35,36)		; TCB.RETRANSMIT-INTERVAL
DEFSTR(TRXP,\<.T+4>,35,36)		; TCB.Retransmission.Parameters
  ;Substructures of the above:
  DEFSTR(TRXPN,\<.T+4>,8,9)		; Numberator of backoff fraction
  DEFSTR(TRXPD,\<.T+4>,17,9)		; Denominator thereof
  DEFSTR(TRXPI,\<.T+4>,35,18)		; Initial interval

; Queues and wakeup times for various processes:

TCBQRA==.T+5				; Reassembler queue
TCBTRA==TCBQRA+QSZ			; When RA needed
TCBQPZ==TCBTRA+1			; Packetizer
TCBTPZ==TCBQPZ+QSZ
TCBQRX==TCBTPZ+1			; Retransmitter
TCBTRX==TCBQRX+QSZ
TCBQDG==TCBTRX+1			; Delay Actions
TCBTDG==TCBQDG+QSZ
.T==TCBTDG+1


; 10 Unused bits
DEFSTR(TTOS,\<.T+0>,17,8)		; TCB.Type-of-service
DEFSTR(TABTFX,\<.T+0>,35,18)		; Forkx of ABORTER

DEFSTR(TSLVN,\<.T+1>,17,18)		; Next Security level
DEFSTR(TSLVC,\<.T+1>,35,18)		; Current Security Level
; 27 Unused bits
DEFSTR(TVTL,\<.T+2>,35,9)		; Virtual terminal line number
TCBSIZ==.T+3				; Size of a TCB


; State codes for connections (in TRSYN and TSSYN):

SYNABL==4			; SYNCHABLE: Activated by user call
SYNSNT==<SYNRCV==5>		; SYN sent or received
SYNCED==7			; SYN acked
FINSNT==<FINRCV==2>		; FIN sent or received but not ACKd
NOTSYN==0			; Connection fully closed or not open

; Flag bit definitions:

TCP%ER==1B0			; ERROR
TCP%DN==1B12			; DONE
TCP%UR==1B15			; URGENT DATA
TCP%EL==1B16			; END OF LETTER
TCP%WM==1B17			; WORD MODE

; BUFFER Structure:

BFRQ==0				; BUFFER QUEUE

BFRSUI==BFRQ+QSZ		; BUFFER START USER INFORMATION
BFRFLG==BFRSUI			; BUFFER FLAG WORD
DEFSTR(BURG,BFRFLG,^L<TCP%UR>,1); BUFFER URGENT
DEFSTR(BEOL,BFRFLG,^L<TCP%EL>,1); BUFFER END-OF-LETTER
DEFSTR(BWM,BFRFLG,^L<TCP%WM>,1)	; BUFFER WORD-MODE
BFRDAD==BFRFLG+1
DEFSTR(BDADR,BFRDAD,35,36)	; BUFFER DATA ADDRESS
BFRCNT==BFRDAD+1
DEFSTR(BCNT,BFRCNT,35,36)	; BUFFER.COUNT
BFREUI==BFRCNT+1		; BUFFER END USER INFO

.B==BFREUI
DEFSTR(BHADR,\<.B+0>,35,36)	; BUFFER HEADER ADDRESS
DEFSTR(BICNT,\<.B+1>,35,36)	; BUFFER INITIAL COUNT
DEFSTR(BFRKX,\<.B+2>,17,18)	; BUFFER.FORKX

DEFSTR(BUPAG,\<.B+2>,35,18)	; BUFFER.USER PAGE
DEFSTR(BBLIP,\<.B+3>,17,18)	; BUFFER.BYTESLEFTINPAGE
DEFSTR(BMPAG,\<.B+3>,35,18)	; BUFFER.MONITORPAGE

BFRPTR==.B+4
DEFSTR(BPTR,BFRPTR,35,36)	; BUFFER POINTER
  ; Overlays for above:
  DEFSTR(BPTRP,BFRPTR,5,6)	; Size field
  DEFSTR(BPTRS,BFRPTR,11,6)	; Position field
  DEFSTR(BPTRA,BFRPTR,35,18)	; Address field

DEFSTR(BTCB,\<.B+5>,17,18)	; BUFFER.TCB
DEFSTR(BIDX,\<.B+5>,35,18)	; BUFFER.INDEX
DEFSTR(BTS,\<.B+6>,35,36)	; BUFFER.TIMESTAMP
	BFRSIZ==.B+7

; AC1 Bits for TCP JSYSs

TCP%JS==1B0			; JCN Supplied
TCP%WT==1B1			; Wait for completion
TCP%FS==1B5			; Force Synchronization
TCP%PS==1B6			; Persistent open
TCP%ST==1B7			; Return statistics (STAT)
TCP%SC==1B8			; Secure connection (OPEN, SEND)
TCP%HP==1B9			; High priority (OPEN, SEND)
TCP%VT==1B10			; TCP Virtual Terminal (OPEN))
TCP%TV==1B11			;#1 TVT Supplied (STAT)
TCP%NT==1B12			;#1 Return aobjn ptr over TVTs (STAT)
TCP%IX==1B13			;#326 Conn index supplied (STAT)
TCP%NI==1B14			;#326 Return aobjn ptr over conns (STAT)

; Event codes:

E.BIT==200			; ERROR bit
L.BIT==100			; LOCAL condition bit
P.BIT==040			; PERMANENT condition bit

OK==0*E.BIT+0*L.BIT+0*P.BIT	; General success code
XFT==0*L.BIT+0*P.BIT		; Temporary Foreign condition
XFP==0*L.BIT+1*P.BIT		; Permanent Foreign condition
XLP==1*L.BIT+1*P.BIT		; Permanent Local condition
EFT==1*E.BIT+0*L.BIT+0*P.BIT	; Temporary Foreign Error
EFP==1*E.BIT+0*L.BIT+1*P.BIT	; Permanent Foreign Error
ELT==1*E.BIT+1*L.BIT+0*P.BIT	; Temporary Local Error
ELP==1*E.BIT+1*L.BIT+1*P.BIT	; Permanent Local Error

; Other codes:

IGN==100		; Packet is to be ignored
DUP==10			; Packet is a duplicate (in TCPIP)
ERR==1			; Packet is in error (in TCPIP)

; Process block

PRCQ==0				; Input queue (TCBs, etc)
PRCLCK==1			; Lock
.F==PRCLCK+LOCKSZ
PRCROU==.F			; Address of routine
PRCWAK==.F+1			; -1 or TODCLK of wakeup
PRCQOF==.F+2			; TCB,,m	Pointer to queue in TCB
PRCWOF==.F+3			; TCB,,n	Pointer to wakeup in TCB
PRCSGT==.F+4			; TODCLK of most recent signal
PRCRNC==.F+5			; Pointer to run counter
PRCTMR==.F+6			; Pointer to timer
	PROCSZ==.F+7	; Size of a process block


; Macro which expands into code to cause a process to run after
; a specified delay.  The interesting case is 0 delay in which
; the routine may be called directly, without the overhead of locking
; and unlocking the process Q twice, and locking the TCB again etc.

DEFINE $SIGNL(TPROC,DELTA,%TAGX,%TAGA,%TAGZ)<
IFKA <	MOVEI T1,TPROC		; Avoid stack overflow on KA
	MOVX T2,DELTA
	CALL SIGNAL
>
IFNKA <
  IFN DELTA,<	MOVEI T1,TPROC	; Process to signal
		MOVX T2,DELTA	; Number of milliseconds
		CALL SIGNAL
  >
  IFE DELTA,<	MOVEI T1,TPROC	; Target process
		SKIPL T2,PRCWAK(T1) ; Wakeup already set for this task?
		CAMLE T2,TODCLK	; Yes.  It task due now?
		 JRST %TAGA	; No.  We can run now.
		MOVEI T2,0	; Yes.  Get in Q for FIFO behavior
		CALL SIGNAL
		JRST %TAGZ

	 %TAGA:	PUSH P,PROC	; Save this process's ID
		MOVEM T1,PROC	; Say that is running now
		SKIPN STATF	; Taking statistics?
		 JRST %TAGX	; No.  Do it the fast way.
		MOVEI T1,ACDLAY	; Activate delay histogram
		MOVEI T2,0	; 0 delay from signal to run!
		CALL DOHIST	; Count up in histogram
		MOVE T1,TPROC+PRCTMR	; Pointer to run timer
		MOVE T2,TPROC+PRCROU	; Pointer to routine
		CALL TIMCAL		; Time this call
		SKIPA			; Avoid direct call
	%TAGX:	CALL @TPROC+PRCROU	; Call routine
		AOS @TPROC+PRCRNC	; Count up runs of that process
		AOS TASKCT		; Count tasks run
		POP P,PROC		; Restore our ID as running process
	%TAGZ:
  >
>
> ; end DEFINE $SIGNL
	END

