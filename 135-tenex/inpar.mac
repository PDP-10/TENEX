;Upped MAXNET to octal 200 (128 decimal)
;HWM, 14-Jul-82
;
;Added F4FLG and F5FLG
;HWM, 7-Jul-82
;
;<TCP-4>INPAR.MAC;42027		17 March 1982 16:15, edit by BillW
; Add F3 processor conditional assembly flags (change KAFLG to KAFLG!F3FLG)
;ISISRC:<4.TCP>INPAR.MAC.2550 15-May-81 15:39:10, Edit by CHASE
;#255 Support for Tenex
;ISISRC:<4.TCP>INPAR.MAC.2520  1-May-81 18:32:36, Edit by CHASE
;ISISRC:<4.BBNC-TCP>INPAR.MAC.42024 20-Apr-81 17:40:31, Edit by CHASE
;#252 Add Source Routing indicator in Pkt

	UNIVER	INPAR
	SUBTTL	Internet Parameters, William W. Plummer, 2Mar79
	SEARCH	IMPPAR,PROLOG,MACSYM

;FR			; Flags, preserved by routines
;T1			; Temporary ACs.  Maybe freely clobbered.
;T2			; Subrs never expected to preserve these.
;T3			; Used to send args to subrs.
;T4			; Functions return value in T1
NTEMPS==4		; Number of temps. (used only in TEMP macro)
;Q1			; Locals.  Always preserved by subrs.
;Q2
;Q3
;P1			; More locals.
NLOCLS==4		; Number of locals (used only in LOCAL macro)
FR==0			; Be sure that AC0 is what we use for flags
DEFAC(BFR,P2)		; Global ACs.  Implicit args to lower level
DEFAC(TPKT,P3)		; Subrs.  Changed only with great care.
DEFAC(PKT,P4)
DEFAC(TCB,P5)		; Pointer to connection (TCP)
;P6			; Frame base used by .TRSET
;CX			; Scratch AC used by Jxxx macros and stack stuff
;P			; Push pointer.  Always covers the stack.



; Set processor flags since -20 PROLOG lacks KAFLG and TENEX lacks SMFLG
IFNDEF KAFLG,<KAFLG==0>
IFNDEF KIFLG,<KIFLG==0>
IFNDEF KLFLG,<KLFLG==0>
IFNDEF SMFLG,<SMFLG==0>
IFNDEF F3FLG,<F3FLG==0>
IFNDEF F4FLG,<F4FLG==0>
IFNDEF F5FLG,<F5FLG==0>
IFE KAFLG!F3FLG+KIFLG+KLFLG+SMFLG+F4FLG+F5FLG,<PRINTX ? Processor not defined>

DEFINE IFNKA(STUFF)<IFE KAFLG!F3FLG!KIFLG,<STUFF>>
DEFINE IFKA(STUFF)<IFN KAFLG!F3FLG!KIFLG,<STUFF>>	; KI and KA are the same
DEFINE IFSM(STUFF)<IFN SMFLG,<STUFF>>
DEFINE IFKL(STUFF)<IFN KLFLG,<STUFF>> ;#255

IFKA <	DEFINE SETSEC (AC,SECTION)<>>
IFKL <	DEFINE SETSEC (AC,SECTION) <	HRLI AC,SECTION>>
IFSM <	DEFINE SETSEC (AC,SECTION) <>>


IFKL <DEFINE GIW (ADDR,X<0>,I<0>) < <I>B1!<X>B5!<ADDR>B35>>
IFSM <DEFINE GIW (ADDR,X<0>,I<0>) < <I>B13!<X>B17!<ADDR>B35>>
IFKA <DEFINE GIW (ADDR,X<0>,I<0>) < <I>B13!<X>B17!<ADDR>B35>>

IFKA <	IFIW==:1B0
	TCPSEC==:0
	OPDEF XMOVEI [SETMI]
>

; Macro to handle bugs in the TCP.; Monitor-independent BUG macro:


DEFINE INBUG(TYPE,STRING,TAG) <
	IFKA <	IFIDN <TYPE>,<INF>,<BUG(NTE,<STRING>)>
		IFDIF <TYPE>,<INF>,<BUG(TYPE,<STRING>)>
	>
	IFNKA <	BUG(TAG)>	;v4
>



; Some auxilliary macros to be used by local variable stuff

DEFINE $INIT <
	DEFINE $INFO(X,Y)<X
Y>
$ACVNM==0
$STVNM==0
$TMVNM==0
>

DEFINE $REMOTE(Z)<$INFO(<DEFINE $INFO(X,Y)><X
Z,Y>)>

DEFINE $HERE <
	$INFO
	$INIT
>


DEFINE $POP(L) <
	OPDEF %POP% [POP P,]
	$REMOTE (<%POP% L>)
>

DEFINE $PURGE (L)<$REMOTE (<PURGE L>)>

; Macro to be used at entry to subroutine to define local variables
;  and assign ACs to them.

DEFINE LOCAL(LIST) <
	IFG $ACVNM,<	PRINTX ?LOCAL: MISSING RESTORE
			$ACVNM==0
	>
	IRP LIST,<	IFGE $ACVNM-NLOCLS,<PRINTX ?TOO MANY LOCALS>
			$DFACL(LIST,\<$ACVNM>)
			$ACVNM==$ACVNM+1
	>
>

DEFINE $DFACL(N,V) <
	IFDEF N,<PRINTX ?AC LOCAL N ALREADY DEFINED>
	PUSH P,T1+NTEMPS+V
	N==T1+NTEMPS+V
	$PURGE N
	$POP T1+NTEMPS+V
>


; Macro for giving names to temporary AC's

DEFINE	TEMP(LIST) <
	IFG $TMVNM+$STVNM+$STVNM,<	PRINTX ?TEMP: MISSING RESTORE
					$STVNM==0
					$TMVNM==0
					$ACVNM==0
	>
	IRP LIST,<	IFGE $TMVNM-NTEMPS,<PRINTX ?TOO MANY TEMPS>
			$DFTMP(LIST,\<$TMVNM>)
			$TMVNM==$TMVNM+1
	>
>

DEFINE $DFTMP(N,V) <
	IFDEF N,<PRINTX ?TEMP N ALREADY DEFINED>
	N==T1+V
	$PURGE N
>

; Macro for allocating locals on the stack
DEFINE	STACKL(LIST) <
	IFG $ACVNM+$STVNM,<	PRINTX ?STACKL: MISSING RESTORE
				$ACVNM==0
				$STVNM==0
	>
	IRP LIST,<	$STKL1(LIST)>
	JSP CX,.TRSET##
	$STVNM,,$STVNM
>

DEFINE $STKL1(PAIR)<	$STKL2(PAIR)>

DEFINE $STKL2(NAME,SIZE) <
	$STKL3(NAME,\$STVNM)
	IFB <SIZE>,<$STVNM==$STVNM+1>
	IFNB <SIZE>,<$STVNM==$STVNM+SIZE>
>

DEFINE $STKL3(NAME,LOC) <
	IFDEF NAME,<PRINTX ?STACK LOCAL NAME ALREADY DEFINED>
	DEFINE NAME<^O'LOC+1(P6)>
	$PURGE NAME
>


; Macro to restore all locals
DEFINE RESTORE <
	IFLE $ACVNM+$STVNM+$TMVNM,<PRINTX ?EXTRA RESTORE MACRO>
	$HERE
>

$INIT


; Macro to leave a subroutine.
; Assembles as a RET if no RESTORE is needed.

DEFINE EXIT(TAG) <
	IFN $ACVNM,<JRST TAG>
	IFE $ACVNM,<RET>
>

; Check consistency of IMPPAR so that IMPPHY, INGWAY, and TCP agree.

IF1 <	IFDEF .INTVR,<
	  IFN .INTVR-4,<PRINTX % .INTVR defined wrong in IMPPAR
			.INTVR==4
	  >
	>
	IFNDEF .INTVR,<PRINTX % .INTVR not defined in IMPPAR
			.INTVR==4
	>
>

; Internet Gateway Parameters -- determine buffer and packet sizes:

MF==^D<512/8>	; Fragments are a multiple of this size.
		;  Must be power of 2.
M0==^D144	; Segment size guaranteed not to require Internet
		;  fragmentation.  Net input buffer must be this big.
M1==4*M0	; Smallest segment size all Internet reassemblers
		;  guarantee to handle.
M2==M1		; Largest segment that a particular Internet layer is
		;  able to receive, independent of reassembly.  Local
		;  implementation limitation.
M3==M1		; Largest seg size a particular protocol implementation
		;  will accept.  Determined by mutual agreement.
M4==^D<2_14>	; Largest segment Internet level can talk about

; Constraints on the above:
; MF le M0 le M1 le M2 le M3  and M2 le M4.

; M0 chosen to so that one subtype-3 ARPANET packet can contain an



; Internet fragment.

; Where to get interface number from GWAY or LCLHID word

DEFSTR INTNUM,,3,4

; Parameters for this system:

MAXNET==200		; Maximum size of net-indexed tables


; Figure out what interfaces we have on this machine and
; what they connect to.  This will be automatic in the future.

IFKA <
  IFDEF NIIS,<	; TENEX with MIMPDV

	;Interface codes

	ARPA==0
	BBNRCC==1
	;BOSPRN==2
	;....
	%NETS==2		; Number of nets we are connected to
  > ; end IFDEF NIIS

  IFNDEF NIIS,<		; Old TENEX with IMPDV

	;Interface codes

	ARPA==0
	;BBNRCC==1
	;BOSPRN==2
	;....
	%NETS==1		; Number of nets we are connected to
  > ; end IFNDEF NIIS
>; end IFKA




IFNKA <				; All else
	;Interface codes

	ARPA==0
	;BBNRCC==1
	;BOSPRN==2
	;....
	%NETS==1		; Number of nets we are connected to
> ; end IFNKA

; PACKET structure (indexed by PKT):

PKTQ==0				; Offset of Packet queue
PKTFLG==1			; Packet flags -- internal use only
.P==PKTFLG
DEFSTR(PFLGS,\<.P+0>,35,36)
  ; Specific flags:
  DEFSTR(PPROG,\<.P+0>,0,1)	; non-0 means program still needs Pkt
  DEFSTR(PINTL,\<.P+0>,1,1)	; non-0 means int. level still has Pkt
  DEFSTR(PFSIZ,\<.P+0>,2,1)	; non-0 if this is a full size TCP pkt
  DEFSTR(PRXD,\<.P+0>,3,1)	; non-0 means packet has been retrans'd
  DEFSTR(PSCR,\<.P+0>,4,1)	; non-0 if packet on a secure connection
  DEFSTR(PNLCL,\<.P+0>,5,1)	; non-0 to prevent local delivery
  DEFSTR(PSROU,\<.P+0>,6,1)	;#252 non-0 if user is source routing
PKTSII==PKTFLG+1		; Start of internal information
.P==PKTSII
DEFSTR(PTG,\<.P+0>,35,36)	; PACKET.TIME-GENERATED
DEFSTR(PXT,\<.P+1>,35,36)	; PACKET.XMIT-TIME
DEFSTR(PRXI,\<.P+2>,35,36)	; PACKET.REXMIT-INTERVAL
DEFSTR(PDCT,\<.P+3>,35,36)	; PACKET.DISCARD-TIME
DEFSTR(PTS,\<.P+4>,35,36)	; PACKET.TIMESTAMP
DEFSTR(PESEQ,\<.P+5>,35,36)	; PACKET.END-SEQUENCE (for TCP)

LCLPKT==.P+6		; Marks start of local substructure
;  Area between LCLPKT and PKTELI must be big enough to hold the
;  biggest possible local leader including fake free header.
; The first word of all local packets is a fake IMPPHY-style free
; storage header.
IMP96L==.P+6		; 96-bit ARPANET Leader
PKTELI==.P+12	; End Local Information 

.P==PKTELI

; Internet Header:
; Word offsets:

.IPKVR==0		; Word with version, type of service, etc
.IPKSG==1		; Word with segmentation info
.IPKPR==2		; Word with time to live, checksum, protocol
.IPKSH==3		; Word with source host
.IPKDH==4		; Word with destination host

DEFSTR(PIVER,PKTELI+.IPKVR,3,4)		; PACKET.INTERNET.VERSION
DEFSTR(PIDO,PKTELI+.IPKVR,7,4)		; PACKET.INTERNET.DATA-OFFSET
DEFSTR(PITOS,PKTELI+.IPKVR,15,8)	; PACKET.INTERNET.TYPE-OF-SERVICE
  ; Overlays for the above:
  DEFSTR(PIPRI,PKTELI+.IPKVR,9,2)	; PACKET.INTERNET.PRIORITY
  DEFSTR(PISVD,PKTELI+.IPKVR,10,1)	; PACKET.INTERNET.STREAM-VS-DATAGRAM
  DEFSTR(PIREL,PKTELI+.IPKVR,12,2)	; PACKET.INTERNET.RELIABILITY
  DEFSTR(PISVR,PKTELI+.IPKVR,13,1)	; PACKET.INTERNET.SPEED-VS-RELIABILITY
  DEFSTR(PISPD,PKTELI+.IPKVR,15,2)	; PACKET.INTERNET.SPEED-OF-DELIVERY
DEFSTR(PIPL,PKTELI+.IPKVR,31,16)	; PACKET.INTERNET.PACKET-LENGTH
DEFSTR(PISID,PKTELI+.IPKSG,15,16)	; PACKET.INTERNET.SEGMENT-ID
DEFSTR(PIFLG,PKTELI+.IPKSG,18,3)	; PACKET.INTERNET.FLAGS
  ; Overlays for the above:
  ; Unused bit
  DEFSTR(PIDF,PKTELI+.IPKSG,17,1)	; PACKET.INTERNET.DONT-FRAGMENT
  DEFSTR(PIMF,PKTELI+.IPKSG,18,1)	; PACKET.INTERNET.MULTIFRAGMENT
DEFSTR(PIFO,PKTELI+.IPKSG,31,13)	; PACKET.INTERNET.FRAGMENT-OFFSET
DEFSTR(PITTL,PKTELI+.IPKPR,7,8)		; PACKET.INTERNET.TIME-TO-LIVE
DEFSTR(PIPRO,PKTELI+.IPKPR,15,8)	; PACKET.INTERNET.PROTOCOL
  .GGPFM==3				; Gateway-gateway protocol
  .TCPFM==6				; TCP format
  .SCRFM==2				; Secure TCP format
DEFSTR(PICKS,PKTELI+.IPKPR,31,16)	; PACKET.INTERNET.HEADER-CHECKSUM
DEFSTR(PISH,PKTELI+.IPKSH,31,32)	; PACKET.INTERNET.SOURCE-HOST
  ; Overlays for above:
  DEFSTR(PISHN,PKTELI+.IPKSH,7,8)	; PACKET.INTERNET.SOURCE.NET
  DEFSTR(PISHT,PKTELI+.IPKSH,31,24)	; PACKET.INTERNET.SOURCE.HOST
DEFSTR(PIDH,PKTELI+.IPKDH,31,32)	; PACKET.INTERNET.DESTINATION-HOST
  ; Overlays for above:
  DEFSTR(PIDHN,PKTELI+.IPKDH,7,8)	; PACKET.INTERNET.DESTINATION.NET
  DEFSTR(PIDHT,PKTELI+.IPKDH,31,24)	; PACKET.INTERNET.DESTINATION.HOST
	MINIHS==4*5		; Minimum Internet Header size (bytes)

; Internet options, if any, are here.
MINIOS==10			; Minimum # Option bytes to cope with


; Some related numbers:

PACKSZ==PKTELI-LCLPKT+<M2+3>/4	; Num. words in IMPPHY Pkt
MAXPSZ==LCLPKT+PACKSZ		; Maximum packet size

; Packet Printer Buffer

; Size and layout of the Packet Printer Buffer
; Must make assumption about the size of the per-protocol
; area in the packet:

MINTHS==4*5		; Minimum TCP header size
MINTOS==10		; Minimum number of TCP option bytes

MINPSZ==PKTELI+<<MINIHS+3>/4>+<<MINIOS+3>/4>+<<MINTHS+3>/4>+<<MINTOS+3>/4>

; Size of a packet header including options:

PPBFSZ==MINPSZ-LCLPKT

; Size of the Packet Printer Buffer including control words:

PPBWDS==PPBFSZ+3

DEFSTR(DFLAG,PPBFSZ+0,35,36)	; PPB.FLAGS
DEFSTR(DSS,PPBFSZ+1,17,18)	; PPB.SOURCESTATE
DEFSTR(DDS,PPBFSZ+1,35,18)	; PPB.DESTINATIONSTATE
DEFSTR(DTIME,PPBFSZ+2,35,18)	; PPB.REPORTTIME


; Flag bits in PPFLAG cell (Kept in F locally):

PP%MT==1B0	; Buffer is empty
PP%SK==1B1	; Source address is known
PP%DK==1B2	; Destination address is known
PP%SNT==1B3	; Packet has been sent
PP%RCV==1B4	; Packet has been received
PP%REX==1B5	; Packet retransmitted
PP%PZ==1B6	; Packet passed through Packetizer
PP%RA==1B7	; Packet passed through Reassembler
PP%GSS==1B8	; Got Source state (LH of PPSTAT valid)
PP%GDS==1B9	; Got Dest state (RH of PPSTAT valid)
PP%DUN==1B10	; Packet printable

; Options.

; General form of options is 1 byte of "kind", 1 byte of total length,
; and N-2 bytes of data, where N is read from the length byte.

; ENDOPT is and must be 0.  This marks the end of the option list.
; NOPOPT is and must be 1.  This is one byte long and has no purpose.

; All options are included under the appropriate checksum.

DEFINE OPTION(NAME,CLASS,NUMBER,LENGTH<0>)<
	NAME'OPT==CLASS*40+NUMBER
	NAME'LEN==LENGTH
>
; Class 0: Control

OPTION(END,0,0)			; End of options (IN, TCP)
OPTION(NOP,0,1,1)		; NOP (IN, TCP)
OPTION(DN2,0,2,4)		; Autodin II security (IN)
OPTION(SRT,0,3)			; Source Routing (IN)
OPTION(SOP,1,2,4)		; Secure Open (IN)
OPTION(SCL,1,3,2)		; Secure Close (IN)

; Class 1: Internet Error

OPTION(ERR,1,1)			; Error (IN)

; Class 2: Experimental debugging and measurement


; Class 3: Reserved for future use


; QUEUE structure:

DEFSTR(QNEXT,0,35,18)		; QUEUE.NEXT
DEFSTR(QPREV,0,17,18)		; QUEUE.PREVIOUS
	QSZ==1			; Number of words in a QUEUE structure




; LOCK Structure:

DEFSTR(LWORD,0,35,36)		; LOCK.WORD
DEFSTR(LIDX,1,35,36)		; LOCK.WAITBIT INDEX
DEFSTR(LLOKR,2,35,36)		; LOCK.LOCKER
DEFSTR(LCCNT,3,35,36)		; LOCK.CONFLICT COUNT
DEFSTR(LOLKR,4,17,18)		; LOCK.CONFLICT.OLDLOCKER
DEFSTR(LNLKR,4,35,18)		; LOCK.CONFLICT.NEWLOCKER
	LOCKSZ==5		; Number of words in a LOCK structure


; Histogram structure

DEFSTR(HTOTL,0,35,36)		; HISTOGRAM.TOTAL
DEFSTR(HSMPL,1,35,36)		; HISTOGRAM.SAMPLES
DEFINE IHBIN(X,I)<
	MOVEI CX,2(X)
	ADDI CX,0(I)
	AOS 0(CX)
>
NHBINS==^D14		; Number of real bins, not incl garbage bin
HISTSZ==2+NHBINS+1	; Number of words in a histogram


; Internet user queue definitions:

; Queue descriptor block for ASNIQ:

.IQPRV==0		; Internet version,,protocol value word
.IQFHV==1		; Internet foreign host value word
.IQSHV==2		; Internet source host value word
.IQPTV==3		; Local,,Foreign ports value word
.IQPRM==4		; Mask words corresponding to the above
.IQFHM==5
.IQSHM==6
.IQPTM==7

QDBLEN==8		; Length of a queue descriptor block
	END

