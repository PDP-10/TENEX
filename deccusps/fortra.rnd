.SP 1;.LM 0;.RM 70;.PS 58,70;.F;.J

.SPACING 1
.LEFT MARGIN 0
.NOFILL
.NOJUSTIFY
.TAB STOPS 7
^^FORTRA.DOC, VERSION 4(210)
SEPTEMBER, 1974\\
.SKIP 1
.FILL
.JUSTIFY
***^COPYRIGHT 1973,1974, ^DIGITAL ^EQUIPMENT ^CORP., ^MAYNARD,
^MASSACHUSETTS***
.SKIP 3
1.0	^^SUMMARY\\
.SKIP 1
.LEFT MARGIN 7

^THE MAJOR GOAL OF ^^FORTRAN\\-10 VERSION 1 WAS TO IMPROVE THE EXECUTION
TIME PERFORMANCE OF PRODUCTION ^^FORTRAN\\ PROGRAMS - 
ACCOMPLISHED THROUGH A WIDE RANGE OF LOCAL AND GLOBAL OPTIMIZATIONS.
^IN ADDITION ^^FORTRAN\\-10 VERSION 1 PROVIDED A RANGE OF LANGUAGE FEATURES EXCEEDING
THE ^^ANSI\\ STANDARD AND COMPATIBLE WITH MOST INDUSTRY IMPLEMENTATIONS.
.B 1
^VERSION 4 NOW ADDS SEVERAL NEW OPTIMIZATIONS AND LANGUAGE FEATURES,
AND EXTENSIONS TO SOME OLD ONES.  ^NEW OPTIMIZATIONS INCLUDE THE AREAS OF
^^I/O\\ CALLS AND INTRA-STATEMENT REGISTER USAGE - NEW FEATURES INCLUDE
THE ^^PARAMETER, INCLUDE, \\AND ^^PROGRAM\\ STATEMENTS.  ^THERE HAS ALSO BEEN SUBSTANTIAL IMPROVEMENT IN THE
OVERALL RELIABILITY AND HUMAN ENGINEERING OF THE COMPILER.
.SKIP
^SECTION 3 OF THIS DOCUMENT DETAILS THE DIFFERENCES BETWEEN VERSION
1 AND VERSION 4 OF ^^FORTRAN\\-10.  ^THE VERSION NUMBER
HAS BEEN PROMOTED TO 4 IN ORDER TO MAINTAIN CONSISTANCY ACROSS ALL
^^FORTRAN-10\\ RELATED SOFTWARE.
.SKIP
.TEST PAGE 3
.INDENT -7
1.1	^BIBLIOGRAPHY
.SKIP
.NOFILL
.NOJUSTIFY
^^DEC-10-LFORA-B-D\\ ^SECOND ^EDITION ^^FORTRAN-10\\ ^LANGUAGE ^MANUAL
(WITH THE ^OCTOBER  1974 UPDATES )
.SKIP
.INDENT -7
1.2	^MONITORS
.SKIP
.FILL
.JUSTIFY
^THE ^^FORTRAN-10\\ COMPILER WILL RUN WITH ANY MONITOR SUPPORTED BY
^^DEC\\ FOR THE ^^DEC\\SYSTEM-10.
.SKIP
^^FORTRAN-10\\ COMPILED PROGRAMS WILL EXECUTE ONLY ON MONITORS WHICH
SUPPORT ^^FOROTS\\.
.INDENT -7
.SKIP
1.3	^RELATED ^SYSTEM ^PROGRAMS
.SKIP
^THE FOLLOWING PROGRAMS ARE REQUIRED TO RUN ^FORTRAN-10 VERSION 4 AND
^FORTRAN-10 COMPILED PROGRAMS:
.SKIP
.NOFILL
.NOJUSTIFY
^^LOADER 57(151) \\OR ^^LINK-10 1^A
COMPIL 22B(236)
FOROTS 4(402)
FORLIB 4(402)
CREF 51(20)
FORDDT 4(46)
\\
.SKIP
.PAGE
.INDENT -7
2.0	^PERFORMANCE CHARACTERISTICS
.SKIP
.FILL
.JUSTIFY
.LEFT MARGIN 12
.INDENT -5
1.###^EXTENSIVE LOCAL OPTIMIZATION AND OPTIONAL GLOBAL
OPTIMIZATION OF GENERATED CODE.
.SKIP
.INDENT -5
2.###^FAST COMPILATION IN TERMS OF ^^CPU\\ USAGE.
.SKIP
.INDENT -5
3.###^MULTI-PHASE ORGANIZATION MEANS THAT REAL-TIME
COMPILATION THROUGHPUT CAN BE LOW. ^THE REAL-TIME
SPEED IS A FUNCTION OF CORE SIZE, NUMBER OF USERS,
AMOUNT OF SHARING, SWAPPING DEVICE, ETC.
.SKIP
.INDENT -5
4.###^THERE ARE SEVEN SHARABLE HIGH SEGMENTS IN THE COMPILER.
 ^EACH COMPILATION INVOKES FIVE OF THE
HIGH SEGMENTS WITH THE CHOICE DEPENDING ON THE /^^OPTIMIZE\\
SWITCH.
^THE LARGEST HIGH SEGMENT SIZE IS 20K NON-OPTIMIZED AND 27K OPTIMIZED.
^THE LOW SEGMENT SIZE IS 4K BUT EXPANDS AS A FUNCTION OF
SOURCE PROGRAM SIZE. ^TYPICAL COMPILATIONS WILL REQUIRE 30 TO 40K
OF USER CORE.
.B 1
^SYSTEM PERFORMANCE WILL SUFFER IF TOTAL USER CORE IS LESS THAN
TWO OR THREE TIMES THAT REQUIRED BY THE ^FORTRAN-10 USER. ^THE LARGE
TOTAL SIZE WILL ALSO AFFECT SYSTEMS NOT HAVING SUFFICIENT SPACE ON
A FAST SWAPPING DEVICE.
.BR
.SP 1;.LM 0;.RM 70;.PS 58,70;.F;.J
.PAGE
3.0##^^FORTRAN-10 VERSION 4\\
.B 3
3.1##^^INTRODUCTION\\
.B 1
^THIS SECTION DESCRIBES THE DIFFERENCES BETWEEN THE ^^FORTRAN-10\\
^VERSION 4 COMPILER AND ^VERSION 1^A. ^VERSION 4 PROVIDES SEVERAL
NEW OPTIMIZATIONS AND LANGUAGE FEATURES, AND MANY
EXTENSIONS TO OLD ONES. ^THERE ARE ALSO A FEW MINOR INCOMPATABILITIES
BETWEEN VERSIONS WHICH ARE DISCUSSED IN ^SECTION 4. ^IT MAY
BE ASSUMED THAT ANY LANGUAGE FEATURES NOT MENTIONED IN THIS SECTION
STILL FUNCTION AS DESCRIBED IN THE VERSION 1^A ^^FORTRAN-10\\
LANGUAGE MANUAL (SECOND EDITION ^^DEC-10-LFORA-B-D)\\.
.B 3
3.2##^^LINE INPUT AND STATEMENT FORMATS\\
.B 1
^VERSION 1 WAS SOMEWHAT DEFICIENT IN ITS HANDLING OF LINES, NULLS,
CARRIAGE RETURNS, LOWER CASE ALPHABETIC, ETC. ^ALL OF THESE
PROBLEMS HAVE BEEN RESOLVED IN ^VERSION 4.
.B 3
3.2.1##^CHARACTER ^SET
.B 1;.LM 36;.TS 36;.I -31
^NULL	ALWAYS IGNORED.
.B 1;.I -31
^LINE#TERMINATORS	LINE FEED, FORM FEED AND VERTICAL TAB
ARE THE RECOGNIZED LINE TERMINATION CHARACTERS. ^ANY INSTANCE,
REGARDLESS OF CONTEXT, WILL TERMINATE A LINE.
.B 1;.I -31
^CARRIAGE#RETURN	IGNORED WITH THE EXCEPTION THAT ONE NOT ASSOCIATED
WITH A LINE TERMINATION CHARACTER WILL ELICIT A WARNING MESSAGE.
.B 1;.I -31
^LOWER#CASE#ALPHABETIC	INTERPRETED AS UPPER CASE OUTSIDE THE
CONTEXT OF LITERAL OR COMMENT TEXT.
.B 1;.I -31
^NON-^^FORTRAN#ASCII\\#CHARACTERS	ANY ^^ASCII\\ CHARACTER IS ACCEPTABLE WITHIN LITERAL OR COMMENT
TEXT WITH THE EXCEPTION OF LINE TERMINATORS, CARRIAGE RETURNS
AND NULLS.
.B 3;.I -36
3.2.2##^LINE#FORMATS
.B 1;.I -31
^INITIAL#LINES	AN INITIAL LINE IS DEFINED TO BE ANY LINE OTHER
THAN A CONTINUATION, COMMENT OR UN-^^INCLUDE\\D DEBUG LINE. ^NOTE
THAT THIS INCLUDES BLANK LINES AND IMPLIES THAT BLANK LINES
COULD HAVE CONTINUATION LINES.
.B 1;.I -31
^CONTINUATION#SEQUENCE	SUCH SEQUENCES ARE NOW TERMINATED BY
AN INSTANCE OF A COMMENT LINE, OR UN-^^INCLUDE\\D DEBUG LINE, AS WELL
AS ANOTHER INITIAL LINE. ^NOTE THAT A BLANK LINE WILL NOW ALSO
TERMINATE A CONTINUATION SEQUENCE.
.B 1;.I -31
^^DEBUG\\#LINES	LINES WITH A ^D(OR D) IN CHARACTER POSITION 1
ARE TREATED AS COMMENTS UNLESS THE /^^INCLUDE\\ COMPILATION SWITCH
IS SPECIFIED. ^ALL LINES (INCLUDING ANY CONTINUATIONS) OF
"^^DEBUG"\\ STATEMENTS MUST HAVE A ^D (OR D) IN CHARACTER POSITION 1.
.B 1;.I -31
^COMMENT#LINES	ANY LINE WITH ONE OF THE CHARACTERS ^C (OR C),
$, /, *, OR _! IN CHARACTER POSITION 1 OF THE LINE IS DEFINED
TO BE A COMMENT LINE. ^COMMENT LINES TERMINATE CONTINUATION
SEQUENCES AND MAY NOT THEMSELVES BE CONTINUED.
.B 3;.I -36
3.2.3##^STATEMENTS
.B 1;.I -31
^STATEMENT#LABELS	^^FORMAT\\ STATEMENT LABELS MAY NOW ONLY BE
REFERENCED AS ^^FORMAT\\S IN ^I/^O STATEMENTS. ^REFERENCE IN ANY OTHER
CONTEXT IS NO LONGER ACCEPTABLE. ^HOWEVER, ALL LABELS IN A PROGRAM
UNIT MUST STILL BE UNIQUE.
.B 1;.I -31
^NULL#STATEMENTS	^IF THE STATEMENT FIELDS OF SOME INITIAL
LINE AND ANY CONTINUATION LINES CONTAIN ONLY BLANKS/TABS IT
IS DEFINED TO CONTAIN A NULL STATEMENT. ^NULL STATEMENTS ARE ACCEPTED
AND IGNORED BY THE COMPILER. ^THEY MAY NOT BE LABELED.
.B 3;.LM 0
3.2.4##^ORDERING OF ^^FORTRAN-10 S\\TATEMENTS
.B 1
^^FORTRAN-10\\ EXPECTS THAT INPUT STATEMENTS WILL BE ORDERED
ACCORDING TO THE FOLLOWING DIAGRAM.
.B3;.LM 0;.TS 12,30,45,69;.NF;.NJ
!--------------------------------------------------------------------!
!	!			!
!	!      ^^PROGRAM, FUNCTION, SUBPROGRAM, \\OR	!
!	!             ^^BLOCK DATA\\ ^STATEMENT	!
!	!			!
!	!--------------------------------------------------------!
!	!	!		!
!	!	!      ^^IMPLICIT\\ ^STATEMENTS	!
!	!	!		!
!	!	!--------------------------------------!
!	!	!		!
!	!	!      ^^PARAMETER S\\TATEMENTS	!
!	!	!		!
!	!	!--------------------------------------!
!	!	!		!
!  ^COMMENT	!    ^^FORMAT\\	!      ^OTHER ^SPECIFICATION	!
!    ^LINES	!  ^STATEMENTS	!           ^STATEMENTS	!
!	!	!		!
!	!	!--------------------------------------!
!	!	!	!	!
!	!	!	!   ^STATEMENT	!
!	!	!	!   ^FUNCTION	!
!	!	!	!   ^DEFINITIONS	!
!	!	!	!	!
!	!	!    ^^DATA\\	!-----------------------!
!	!	!  ^STATEMENTS	!	!
!	!	!	!   ^EXECUTABLE	!
!	!	!	!   ^STATEMENTS	!
!	!	!	!	!
!--------------------------------------------------------------------!
!				!
!	             ^^END\\ ^STATEMENT		!
!				!
!--------------------------------------------------------------------!
.B 4;.LM 0;.F;.J
^VERTICAL LINES DELINEATE VARIETIES OF STATEMENTS WHICH
MAY BE INTERSPERSED. ^THUS, ^^FORMAT\\ STATEMENTS MAY BE INTERSPERSED,
FOR EXAMPLE, WITH SPECIFICATION STATEMENTS AND EXECUTABLE
STATEMENTS. ^HORIZONTAL LINES DELINEATE VARIETIES OF STATEMENTS
WHICH MAY NOT BE INTERSPERSED. ^THUS, SPECIFICATION STATEMENTS
MAY NOT BE INTERSPERSED WITH STATEMENT FUNCTION DEFINITIONS,
AND STATEMENT FUNCTION DEFINITIONS MAY NOT BE INTERSPERSED WITH
EXECUTABLE STATEMENTS.
.B 1
^F10 WILL EXPECT THIS ORDERING AND ISSUE WARNING MESSAGES WHEN
STATEMENTS ARE OUT OF PLACE. ^F10 WILL PROCESS THE STATEMENTS IN ANY
CASE AND IN MOST INSTANCES, IF THE USER HAS FOLLOWED THE GENERAL
RULE OF DEFINITION BEFORE REFERENCE, THE PROGRAM WILL COMPILE
AS EXPECTED. ^THIS STRUCTURING IS MAINLY INCLUDED TO AID USERS
IN STRUCTURING THEIR PROGRAMS TO ASSURE THE DESIRED EFFECTS.
^THERE IS HOWEVER, NO GUARANTEE AS TO WHAT THE COMPILER WILL DO IF
THIS ORDERING IS NOT ADHERED TO.
.B 1
^OTHER SPECIFICATION STATEMENTS CONSIST OF:
.B 1;.LM 10;.NF;.NJ
TYPE
^^DIMENSION
COMMON
EQUIVALENCE
EXTERNAL
NAMELIST\\
.B 1;.LM 0;.F;.J
^THE ^^INCLUDE\\ STATEMENT IS ACCEPTABLE ANYWHERE. ^IT IS THE
STATEMENTS ^^INCLUDE\\D WHICH DICTATE THE ACCEPTABLE POSITIONS
FOR ANY GIVEN ^^INCLUDE\\ STATEMENT.
.B 1
^THE ^^ENTRY\\ STATEMENT IS ANOTHER SPECIAL CASE. ^IT IS ALLOWED
ONLY IN ^FUNCTIONS AND ^SUBROUTINES AND IN ADDITION ALL EXECUTABLE
REFERENCES TO ANY OF ITS DUMMY PARAMETERS WHICH DO NOT APPEAR IN
THE SUBROUTINE OR FUNCTION DEFINITION STATEMENT OR A PRECEDING
^^ENTRY\\ STATEMENT, MUST FOLLOW THE ^^ENTRY\\ STATEMENT. ^THE LATTER IS
THE RESPONSIBILITY OF THE USER - THE COMPILER WILL NOT CHECK FOR
NOR GUARANTEE THE RESULTS OF A VIOLATION OF THIS RULE.
.B 1
^^BLOCKDATA\\ SUBPROGRAMS DO NOT ALLOW OCCURRENCES OF ANY EXECUTABLE
STATEMENT, STATEMENT FUNCTION, ^^FORMAT\\ STATEMENT, ^^EXTERNAL\\
STATEMENT, OR ^^NAMELIST\\ STATEMENT.
.B 3
3.3##^^END S\\TATEMENT
.B 1
^^END\\ STATEMENTS MAY NOW BE LABELED IF DESIRED. ^HOWEVER, "^^END\\"
MAY NOT FUNCTION AS THE TERMINAL STATEMENT OF A ^^DO\\ LOOP.
.B 3
3.4##^^PROGRAM S\\TATEMENT
.B 1
^THE ^^PROGRAM\\ STATEMENT IS AVAILABLE FOR THE USER WHO WISHES
TO GIVE THE MAIN PROGRAM UNIT A NAME OTHER THAN "^^MAIN\\.".
^THE GENERAL FORM IS:
.B 1;.I 10
^^PROGRAM\\#NAME
.B 1
WHERE NAME IS A STANDARD USER DEFINED IDENTIFIER. ^IF USED,
A ^^PROGRAM\\ STATEMENT MUST BE THE FIRST STATEMENT IN THE PROGRAM UNIT.
.B 1
^FOR COMPATABILITY PURPOSES, IF THE REMAINDER OF THE STATEMENT FOLLOWING
THE PROGRAM NAME IS NON-NULL IT WILL BE IGNORED AND A USER WARNING MESSAGE 
ISSUED.
.B 3
3.5##^^INCLUDE S\\TATEMENT
.B 1
^THIS STATEMENT ALLOWS THE USER TO COMPILE SETS OF ^^FORTRAN\\
SOURCE STATEMENTS WITHIN A PROGRAM UNIT WITHOUT HAVING THEM RESIDE
IN THE SAME PHYSICAL FILE AS THE PRIMARY PROGRAM UNIT SOURCE.
^THE GENERAL FORM OF THE STATEMENT IS:
.B 1;.I 10
^^INCLUDE\\#'DEV:FILE.EXT[PPN]/^^NOLIST\\'
.B 1
WHERE
.B 1;.LM 25;.TS 25;.I -15
DEV:	IS AN OPTIONAL DISK DEVICE NAME, WHICH DEFAULTS TO
"^^DSK\\:" IF NOT SPECIFIED.
.B 1;.I -15
FILE	IS THE NAME OF THE DISK FILE. ^THE FILE NAME MUST BE
SPECIFIED AND IT MUST RESIDE ON DISK. ^WILD CARDING IS NOT 
ALLOWED IN FILE OR EXTENSION NAMES.
.B 1;.I -15
EXT	IS THE OPTIONAL FILE NAME EXTENSION. ^IF ".EXT" IS NOT
SPECIFIED AN ATTEMPT WILL BE MADE TO ACCESS "FILE.^^FOR\\".
^IF THIS IS NOT SUCCESSFUL "FILE." WILL BE ASSUMED.
.B 1;.I -15
[PPN]	IS THE OPTIONAL PROJECT-PROGRAMMER NUMBER OF THE
FORM [ PROJECT, PROGRAMMER ],
 WHICH IF NOT SPECIFIED WILL DEFAULT TO THE USER'S PPN.
 ^SUB DIRECTORY INFORMATION IS NOT
ACCEPTED.
.B 1;.I -15
_/^^NOLIST\\	IS AN OPTIONAL SWITCH SPECIFYING THAT THE STATEMENTS
IN THE FILE ARE NOT TO BE INCLUDED IN THE LISTING. ^WHEN THE
SWITCH IS NOT SPECIFIED THE FILE WILL BE INCLUDED IN THE LISTING
WITH AN "*" NEXT TO THE LINE NUMBER OF EACH INCLUDED LINE.
.B 1;.LM 0
^INCLUDED FILES MAY CONTAIN ANY SEQUENCE OF LEGAL ^^FORTRAN-10\\
STATEMENTS WITH THE EXCEPTION OF ANOTHER ^^INCLUDE\\ STATEMENT
OR A STATEMENT WHICH TERMINATES THE CURRENT PROGRAM UNIT
(I.E., ^^END, PROGRAM, FUNCTION, SUBROUTINE\\ OR ^^BLOCKDATA\\).
.B 3;.LM 0
3.6##^^DIMENSION STATEMENT\\
.B 1;.LM 36;.TS 36;.I -31
^LOWER#DIMENSION#BOUND	A ":" (COLON) MAY BE USED IN PLACE OF
THE "_/" (SLASH) WHEN SPECIFYING A LOWER ARRAY DIMENSION BOUND.
.B 1
(^^NOTE\\:##^THIS FORM IS PREFERRED FOR REASONS OF POSSIBLE FUTURE DEVELOPMENT.)
.B 2;.LM 36;.TS 36;.I -31
^VARIABLE#DIMENSION	THE VARIABLE DIMENSIONS OF AN ARRAY
MAY NOW BE PASSED IN ^^COMMON\\ IN ADDITION TO AS ROUTINE PARAMETERS.
.B 3;.LM 0;.RM 70;.F;.J
3.7##^^DATA TYPE STATEMENTS\\
.B 1
^THE "*N" DATA TYPE SIZE MODIFIER IS NOW ACCEPTED FOLLOWING THE
INDIVIDUAL VARIABLE, ARRAY, OR FUNCTION NAMES. ^ITS EFFECT
IS TO OVERRIDE, FOR THE PARTICULAR ELEMENT, THE SIZE MODIFIER
(EXPLICIT OR IMPLICIT) OF THE PRIMARY TYPE. ^FOR EXAMPLE:
.B 1;.I 10
^^REAL*4###R1,##R2*8,##R3*8 (-1:8),##R4(3)\\
.B 1
^R1 AND ^R4 ARE SINGLE PRECISION REAL BUT ^R2 AND ^R3 ARE NOW
DOUBLE PRECISION.
.B 1
^THE FOLLOWING ADDITIONAL SIZE MODIFIERS ARE NOW ACCEPTED:
.B 1;.LM 25;.TS 25;.I -15
^^INTEGER*2\\	TREATED AS ^^INTEGER\\,
.I -15
^^LOGICAL*1	\\TREATED AS ^^LOGICAL\\, AND
.I -15
^^COMPLEX*16	\\TREATED AS ^^COMPLEX\\.
.B 1;.LM 0;.F;.J
^THESE ARE ACCEPTED ONLY FOR COMPATABILITY PURPOSES AND WILL
ELICIT WARNING MESSAGES. ^THESE MODIFIERS ARE ACCEPTABLE IN
^^IMPLICIT\\ AND ^^FUNCTION\\ STATEMENTS AS WELL AS TYPE STATEMENTS.
.B 3
3.8##^^EXTERNAL STATEMENT\\
.B 1
^THE FORM OF THE EXTERNAL STATEMENT HAS BEEN EXPANDED TO ALLOW
DIFFERENTIATION BETWEEN:
.B 1;.LM 9;.I -4
1.##^THE USER WISHING TO PASS THE NAME OF SOME ^^FORTRAN\\
DEFINED(1)
.FOOTNOTE 4
.B 1
---------------
.BR
(1)^THE CATEGORIES OF ^^INTRINSIC\\ AND ^^BASIC EXTERNAL\\
FUNCTIONS HAVE BEEN COMBINED AND ARE NOW REFERED TO AS ^^FORTRAN\\
DEFINED FUNCTIONS. ^REFER TO SECTION 3.12.2 FOR A COMPLETE DESCRIPTION
OF ^^FORTRAN\\ DEFINED AND GENERIC FUNCTIONS.
!
FUNCTION AS AN ACTUAL ROUTINE PARAMETER AND,
.B 1;.I -4
2.##^THE CASE WHERE THE USER WISHES TO DEFINE A ROUTINE WITH THE
SAME NAME AS SOME ^^FORTRAN\\ DEFINED FUNCTION.
.B 1;.LM 0
^IF THE USER WISHES TO REFERENCE A ROUTINE WHOSE NAME IS THE SAME
AS SOME ^^FORTRAN\\ DEFINED FUNCTION, THE NAME MUST BE PREFIXED
BY AN "*" OR "_&" WITHIN THE EXTERNAL STATEMENT. ^FOR EXAMPLE:
.B 1;.I 10
^^EXTERNAL####*SIN, _&COS\\
.B 1
^IF A ^^FORTRAN\\ DEFINED FUNCTION NAME APPEARS IN AN ^^EXTERNAL\\
STATEMENT WITHOUT A PRECEDING "*" OR "_&", IT IS ASSUMED TO REFERENCE
THE ^^FORTRAN\\ DEFINED FUNCTION (FOR THE PURPOSE OF PASSING
IT AS AN ACTUAL ROUTINE PARAMETER).
.B 1
^PREFIXING NON-^^FORTRAN\\-DEFINED FUNCTION NAMES HAS NO EFFECT.
.B 3
3.9##^^PARAMETER STATEMENT\\
.B 1
^THIS ALLOWS THE USER TO SYMBOLICALLY DEFINE COMPILE TIME 
CONSTANTS. ^THE GENERAL FORM OF THE STATEMENT IS:
.B 1;.I 10
^^PARAMETER####P1=C1,#P2=C2\\,...
.B 1
WHERE
.B 1;.LM 25;.TS 25;.I -15
EACH#^PI	IS A STANDARD USER DEFINED IDENTIFIER, AND
.B 1;.I -15
EACH#^CI	MAY BE ANY TYPE OF CONSTANT (INCLUDING LITERAL) OTHER THAN COMPLEX OR LABEL.
.B 1;.LM 0
^VALID OCCURRENCES OF PARAMETER NAMES WILL BE REPLACED
AT COMPILE TIME BY THEIR ASSOCIATED CONSTANT. ^A PARAMETER NAME:
.B 1;.LM 9;.I -4
1.##IS RECOGNIZED ONLY WITHIN STATEMENT FIELDS OF INITIAL AND
CONTINUATION LINES,
.B 1;.I -4
2.##IS NOT RECOGNIZED WITHIN COMMENT OR LITERAL TEXT,
.B 1;.I -4
3.##MAY APPEAR ONLY WHERE A CONSTANT MAY VALIDLY APPEAR,
.B 1;.I -4
4.##CANNOT BE USED AS PART OF SOME LARGER SYNTACTICAL CONSTRUCT
(SUCH AS A HOLLERITH CONSTANT COUNT, DATA TYPE SIZE MODIFIER, ETC.),
.B 1;.I -4
5.##REFERENCE MUST FOLLOW ITS ^^PARAMETER\\ STATEMENT DEFINITION,
.B 1;.I -4
6.##MUST BE UNIQUE WITH RESPECT TO ALL OTHER NAMES IN THE PROGRAM
UNIT, AND
.B 1;.I -4
7.##MAY NOT BE REDEFINED IN A SUBSEQUENT ^^PARAMETER\\ STATEMENT.
.B 3;.LM 0
3.10##^^DATA STATEMENT\\
.B 1
^SIGNED COMPLEX CONSTANTS ARE NOW ACCEPTED, E.G., -(3.1, 4.2).
.B 1
^THE FATAL ERROR MESSAGE ISSUED WHEN THE LIST OF VARIABLES
WAS LONGER THAN THE LIST OF CONSTANTS HAS BEEN REPLACED
BY A WARNING MESSAGE WHICH WILL BE ISSUED WHENEVER THE LENGTHS 
OF THE VARIABLE AND CONSTANT LISTS DIFFER.
.B 3
3.11##^^FORMAT STATEMENT\\
.B 3
3.11.1##^R ^FORMAT ^FIELD ^DESCRIPTOR
.B 1
^THE ^R FIELD DESCRIPTOR HAS BEEN ADDED ALLOWING THE USER TO
INPUT AND OUTPUT RIGHT JUSTIFIED, ZERO FILLED ^^ASCII\\ DATA. ^THE GENERAL FORM OF THE DESCRIPTOR IS:
.B 1;.I 10
^RW
.B 1
WHERE W IS THE WIDTH OF THE INPUT/OUTPUT DATA FIELD.
.B 1
^THE ACTIONS PERFORMED ARE DEFINED AS FOLLOWS:
.B 1;.LM 25;.TS 21,25;.I -15
GIVEN:	W	FIELD WIDTH, AND
.I -15
	N	NUMBER OF CHARACTERS POSSIBLE FOR THE VARIABLE
(I.E., 10 FOR DOUBLE PRECISION AND 5 OTHERWISE)
.B 1;.LM 25;.TS 25;.I -15
^^INPUT#\\W>=N	THE RIGHTMOST N CHARACTERS OF THE FIELD ARE
READ IN AND STORED RIGHT JUSTIFIED, ZERO FILLED IN THE ASSOCIATED VARIABLE.
.B 1;.I -15
^^OUTPUT\\#W>=N	N CHARACTERS ARE OUTPUT AND RIGHT JUSTIFIED IN
THE FIELD. ^THE REMAINDER OF THE FIELD IS BLANK FILLED.
.B 1;.I -15
^^INPUT\\#W<N	W CHARACTERS ARE READ IN AND STORED RIGHT JUSTIFIED,
ZERO FILLED IN THE ASSOCIATED VARIABLE.
.B 1;.I -15
^^OUTPUT\\#W<N	THE RIGHT MOST W CHARACTERS OF THE ASSOCIATED
VARIABLE ARE OUTPUT.
.B 3;.LM 0
3.11.2##^DELINEATION OF ^FIELD ^DESCRIPTORS
.B 1
^COMMAS ARE NOW OPTIONAL WHENEVER NO AMBIGUITY EXISTS. ^THE
INTERPRETATION OF FIELD DESCRIPTORS IS LEFT ASSOCIATIVE. ^FOR
EXAMPLE:
.B 1;.I 10
(3^X, ^A2)
.B 1
CAN BE WRITTEN AS
.B 1;.I 10
(3^X^A2)
.B 1
WITH NO AMBIGUITY. ^HOWEVER
.B 1;.I 10
(^I1,5^A2)
.B 1
MUST INCLUDE THE COMMA, SINCE
.B 1;.I 10
(^I15^A2)
.B 1
WOULD BE INTERPRETED AS
.B 1;.I 10
(^I15,^A2)
.B 3;.LM 0
3.12##^^SUBPROGRAMS\\
.B 3
3.12.1##^^FUNCTION S\\TATEMENT
.B 3
3.12.1.1##^FUNCTION ^TYPE ^SIZE ^MODIFIERS
.B 1
^ANY OF THE DEFINED DATA TYPE SIZE MODIFIERS ARE NOW ACCEPTED
FOLOWING THE FUNCTION NAME AS WELL AS THE FUNCTION DATA TYPE. ^FOR EXAMPLE:
.B 1;.I 10
^^REAL*4##FUNCT*8#(J)\\
.B 1
^IF A SIZE MODIFIER IS SPECIFIED FOLLOWING THE FUNCTION NAME, A
^^FUNCTION\\ DATA TYPE MUST BE EXPLICITLY SPECIFIED. ^THE GIVEN SIZE
MODIFIER OVERRIDES ANY EXPLICIT OR IMPLICT SIZE MODIFIER ASSOCIATED
WITH THE ^^FUNCTION\\ TYPE DECLARATOR. ^IN THE EXAMPLE THIS TYPE
OF ^^FUNCT\\ WOULD BE DOUBLE PRECISION.
.B 3
3.12.1.2##^EQUIVALENCE OF ^^FUNCTION\\ AND ^^ENTRY\\ NAMES
.B 1
^THE LOCAL STORAGE FOR THE VARIABLES ASSOCIATED WITH THE NAMES OF A ^^FUNCTION\\
AND ITS ^^ENTRY\\ POINTS IS NOW EQUIVALENCED. ^IN OTHER WORDS
THE RETURN VALUE OF A ^^FUNCTION\\ CAN BE DEFINED BY DEFINING
ANY OF THE AFOREMENTIONED VARIABLES, REGARDLESS OF THE POINT
OF ENTRY INTO THE ^^FUNCTION\\.
.B 3
3.12.2##^^FORTRAN D\\EFINED ^FUNCTIONS
.B 1
^THE CATEGORIES OF ^^INTRINSIC\\ AND ^^BASIC EXTERNAL\\
FUNCTIONS HAVE BEEN COMBINED. ^THIS SET OF FUNCTIONS IS NOW SIMPLY REFERRED
TO AS ^^FORTRAN\\ DEFINED FUNCTIONS.
.B 1
^A FUNCTION REFERENCE REFERS TO ^^FORTRAN\\ DEFINED FUNCTION
IF AND ONLY IF IT CONFORMS TO THE FOLLOWING:
.B 1;.LM 9;.I -4
1.##^THE FUNCTION NAME MUST APPEAR IN THE LIST OF ^^FORTRAN\\
DEFINED FUNCTION NAMES (^^FORTRAN LANGUAGE M\\ANUAL ^^DEC\\-10-^^LFORD-B-D, 
INTRINSIC\\ AND ^^BASIC EXTERNAL\\ FUNCTIONS).
.B 1;.I -4
2.##^IF THE FUNCTION NAME APPEARS IN A DATA TYPE STATEMENT THE
RESULTING DEFINITION MUST NOT CONFLICT WITH THE ^^FORTRAN\\
DEFINED DATA TYPE OF THE FUNCTION.
.B 1;.LM 15;.RM 55;.C
^^NOTE\\
.B 1
^IF THERE IS A CONFLICT IT IS ASSUMED THAT THE USER WISHES TO
REFERENCE A FUNCTION WITH THE SAME NAME AS SOME ^^FORTRAN\\
DEFINED FUNCTION.
.B 1;.LM 9;.RM 70;.F;.J;.I -4
3.##^IF THE FUNCTION NAME APPEARS IN AN ^^EXTERNAL\\ STATEMENT, IT MUST NOT BE
PREFIXED BY AN "_&", OR "*", AND
.B 1;.I -4
4.##^THE FUNCTION NAME MAY NOT BE SPECIFIED AS A DUMMY ROUTINE PARAMETER.
.B 3;.LM 0
3.12.3##^^GENERIC F\\UNCTIONS
.B 1
^THE GENERIC FUNCTIONS, AS LISTED IN THE ^^FORTRAN-10\\ LANGUAGE
MANUAL, RESULT IN CODE COMPILED ACCORDING TO THE DATA TYPE OF
THE ACTUAL PARAMETERS.
.B 1
^FOR A FUNCTION REFERENCE TO POSSESS THIS GENERIC QUALITY IT MUST
CONFORM TO THE FOLLOWING:
.B 1;.LM 9;.I -4
1.##^IF THE FUNCTION NAME APPEARS IN AN ^^EXTERNAL\\ STATEMENT
IT MUST NOT BE PREFIXED BY "*", OR "_&",
.B 1;.I -4
2.##^THE FUNCTION NAME MAY NOT APPEAR IN AN EXPLICIT TYPE STATEMENT, AND
.B 1;.I -4
3.##^THE FUNCTION NAME MAY NOT BE SPECIFIED AS A DUMMY ROUTINE PARAMETER.
.B 1;.LM 0
^SUCH FUNCTION NAMES, WHEN USED AS ACTUAL ROUTINE PARAMETERS, DO
NOT POSSESS ANY GENERIC PROPERTIES. ^IN OTHER WORDS THE NAME IS
ASSUMED TO REFERENCE THE ^^FORTRAN\\ DEFINED FUNCTION
OF THE SAME NAME OR IF NONE EXISTS, A USER DEFINED FUNCTION.
.B 1
^THE ^^IMPLICT\\ STATEMENT HAS NO EFFECT UPON THE DATA TYPE OF
^^FORTRAN\\ DEFINED OR GENERIC FUNCTION NAMES UNLESS THE NAME
HAS BEEN REMOVED FROM ITS CLASS VIA THE ^^EXTERNAL\\ STATEMENT.
.B 3
3.13##^ERROR ^MESSAGES
.B 1
^THE DISPLAY FORMAT AND SUMMARY OF ERROR MESSAGES HAVE BEEN
IMPROVED IN ^VERSION 4.
.B 1;.LM 9;.I -4
1.##^THE STATEMENT IN ERROR WILL NOW BE DISPLAYED ON THE USER ^^TTY\\
ALONG WITH THE ASSOCIATED ERROR MESSAGE, (PROVIDING THE
ERROR IS DETECTED DURING THE SYNTACTICAL ANALYSIS PHASE OF THE
COMPILER).
.B 1;.I -4
2.##^THE FORM OF THE INDIVIDUAL MESSAGE HAS BEEN MODIFIED TO
CONFORM TO THE STANDARD FOR ^^DEC\\SYSTEM-10 ERROR MESSAGES.
^THE NEW FORM IS AS FOLLOWS:
.B 1;.I 5
^^?FTN\\XXX#^^LINE\\:#NNNNN#FATAL ERROR MESSAGE TEXT
.I 10
OR
.I 5
^^%FTN\\XXX#^^LINE:\\#NNNNN#^WARNING MESSAGE TEXT
.B 1
^WHERE "?"/"%" INDICATES A FATAL/WARNING MESSAGE, XXX IS A 3
LETTER CODE FOR THE MESSAGE, AND NNNNN IS THE NUMBER OF THE LINE
WITHIN WHICH THE ERROR WAS DETECTED.
.B 1;.LM 9;.I -4
3.##^IF THERE WERE MESSAGES OUTPUT FOR A PROGRAM UNIT THEY WILL
BE SUMMARIZED ON THE LISTING AND USER ^^TTY\\ AS FOLLOWS:
.B 1;.I 5
NAME##NUMBER##^^FATAL#ERRORS#AND#\\NUMBER ^^WARNINGS\\
.B 1
WHERE NAME IS THE NAME OF THE PROGRAM UNIT. ^THIS MESSAGE WILL
BE PRECEDED BY
.B 1;.I 5
^^?FTNFTL\\#-#FOR FATAL ERRORS
.I 10
OR
.I 5
^^%FTNWRN\\#-#WHEN ONLY WARNINGS WERE ISSUED
.B 1
^IF NO ERRORS WERE DETECTED OR WARNINGS GIVEN THE FOLLOWING
MESSAGE WILL BE OUTPUT TO THE LISTING FILE:
.B 1;.I 5
NAME##[^^NO#ERRORS#DETECTED]\\
.B 1
^ONLY THE NAME WILL BE OUTPUT TO THE CONTROLLING TTY:.
.B 3;.LM 0
3.14##^SOURCE ^INPUT ^FILES
.B 1
^IF MORE THAN ONE SOURCE FILE IS SPECIFIED IN A .^R ^^FORTRA\\
COMMAND OR VIA THE COMPILE CLASS COMMAND "+" CONSTRUCT, THE FILES
WILL BE LOGICALLY CONCATINATED. ^FOR EXAMPLE:
.B 1;.LM 10
^^.R FORTRA
.BR
*T.REL,T.LST__IN1.FOR,IN2.FOR,IN3.FOR\\
.B 1;.I 5
OR
.B 1
^^.COMPILE IN1.FOR+IN2.FOR+IN3.FOR/F10\\
.B 1;.LM 0
^THERE ARE NO RESTRICTIONS ON THE CONTENT OF THE FILES - PROGRAM
UNITS MAY BE COMPRISED OF 2 OR MORE FILES AS DESIRED.
.B 3;.LM 0
3.15##^^CREF\\
.B 1
^F10 VERSION 4, ALONG WITH VERSION 51 OF ^^CREF\\, NOW PRODUCES
A CROSS REFERENCE LISTING WHICH SPECIFIES DEFINITION AND REFERENCE, OF ALL
IDENTIFIERS AND STATEMENT LABELS. ^A SEPARATE TABLE IS PRODUCED
FOR EACH INDIVIDUAL PROGRAM UNIT. ^THE LINE NUMBERS IN THE TABLE
ARE THE ^^FORTRAN\\ GENERATED (OR IF SPECIFIED, USER) LINE SEQUENCE
NUMBERS AND INDICATE THE INITIAL LINE NUMBER OF THE STATEMENT
IN WHICH THE GIVEN IDENTIFIER OR LABEL APPEARED.
.B 3
3.16##^^COMPILATION SWITCHES\\
.B 1
^VERSION 4 HAS A NEW COMPILATION SWITCH WHICH
PROVIDES SEVERAL RUN TIME DEBUGGING FEATURES. ^THERE ARE 5 REQUESTABLE 
FEATURES , TWO OF WHICH ARE SPECIFICALLY DESIGNED FOR USE
WITH THE ^^FORTRAN-10\\ DEBUGGER - ^^FORDDT\\.
^THE NAME OF THE SWITCH IS ^^DEBUG\\ AND IT HAS THE FOLLOWING 
MODIFIERS:
.B 1
.LM 9
.I -5
^^DIMENSIONS\\ - GENERATE, FOR ^^FORDDT\\, DIMENSION INFORMATION FOR
ALL ARRAYS DEFINED IN THE PROGRAM
.B 1;.I-5
^^TRACE\\ - GENERATE THE REFERENCES TO ^^FORDDT\\ REQUIRED FOR ITS
^^TRACE\\ FEATURES.  ^REFERENCES ARE GENERATED BEFORE EACH
EXECUTABLE SOURCE LINE AND AT THE BEGINNING OF EACH SUBPROGRAM.
.B 1;.I-5
^^LABELS\\ - GENERATE A LABEL FOR EACH EXECUTABLE STATEMENT OF 
THE FORM "LINE-NUMBER^L".  ^NOTE THAT IF MORE THAN ONE STATEMENT IS
INCLUDED ON A GIVEN LINE ONLY THE FIRST STATEMENT WILL RECEIVE A LABEL.
.B 1;.I -5
^^INDEX\\ - FORCE ^^DO\\ LOOP INDICES TO BE STORED IN THEIR RESPECTIVE
VARIABLES AT THE BEGINNING OF EACH LOOP ITERATION.
^NORMALLY LOOP INDICES ARE HELD IN REGISTERS FOR THE DURATION OF LOOPS
AND ARE THUS INACCESSABLE TO ^^FORDDT\\ DURING DEBUGGING.
.B 1;.I -5
^^BOUNDS\\ - GENERATE BOUNDS CHECKING CODE FOR ALL ARRAY REFERENCES.
^BOUNDS VIOLATIONS WILL PRODUCE RUN TIME ERROR MESSAGES AT THE
USER TERMINAL. ^NOTE THAT THE TECHNIQUE OF SPECIFYING  DIMENSIONS OF
1 FOR SUBROUTINE ARRAYS WILL CAUSE BOUNDS CHECK ERRORS.
.B 2;.LM 0
^WHEN SPECIFYING MODIFIERS, ALL
THAT IS REQUIRED IS ENOUGH LETTERS TO MAKE THE NAME UNIQUE.
^THE FORMAT OF THE /^^DEBUG\\ SWITCH AND ITS MODIFIERS IS AS FOLLOWS:
.B 2;.LM 10;.I -5
^NO DEBUG FEATURES - EITHER DO NOT SPECIFY THE ^^DEBUG\\ SWITCH OR SPECIFY IT AS /^^DEBUG:NONE\\
.B 1;.I-5
^ALL ^^DEBUG\\ FEATURES - EITHER /^^DEBUG\\ OR /^^DEBUG:ALL\\
.B 1;.I-5
^SELECTED FEATURES - EITHER A SERIES OF MODIFIED SWITCHES (IE .../^^DEBUG:B/DEBUG:L\\...) OR A LIST OF MODIFIERS (IE .../^^DEBUG:(B,L)\\...)
.B 1;.I -5
^EXCLUSION OF FEATURES - PREFIX THE MODIFER TO BE EXCLUDED BY ^^NO\\
(IE .../^^DEBUG:NOLABELS\\...). ^THERE MAY BE MORE THAN ONE SUCH SWITCH,
HOWEVER THE ^^NO\\ MODIFIER CANNOT BE USED IN THE LIST FORM.  
^IF ONLY ^^DEBUG\\ EXCLUSIONS ARE SPECIFIED THE OTHER FEATURES ARE
IMPLICITLY INCLUDED.
.B 3;.LM 0
3.17##^^IMPROVED OPTIMIZATIONS IN VERSION 4\\
.B 1
^ONE OF THE MAIN GOALS OF VERSION 4 WAS TO IMPROVE THE QUALITY
OF THE CODE GENERATED BY THE COMPILER. ^NEW AND IMPROVED OPTIMIZATIONS
ARE AVAILABLE, BOTH WITH AND WITHOUT THE _/^^OPTIMIZE\\ SWITCH.
.B 1
^LOCAL ^OPTIMIZATIONS INCLUDE:
.B 1;.LM 9;.I -4
1.##^BETTER REGISTER UTILIZATION BETWEEN STATEMENTS AND FOR THE
SAVE/RESTORE SEQUENCE IN SUBPROGRAMS.
.B 1;.I -4
2.##^MORE LIBRARY FUNCTIONS GENERATE IN LINE CODE. ^INCLUDED ARE:
.B 1;.LM 13;.I -4
A.##^^DABS
.B 1;.I -4
\\B.##^^COMPLEX\\
.B 1;.I -4
C.##EXPONENTIATIONS TO AN INTEGER POWER REQUIRING LESS
THAN 8 MULTIPLICATIONS
.B 1;.LM 9;.I -4
3.##^^REL\\ FILE SIZE WAS DECREASED.
.B 1;.I -9
^GLOBAL ^OPTIMIZATIONS ENHANCED:
.B 1;.I -4
1.##^OPTIMIZATIONS AVAILABLE IN VERSION 1 WERE EXTENDED TO HANDLE
MORE AND MORE GENERAL CASES. ^THIS INCLUDES THE REMOVAL OF RESTRICTIONS ON
SIZE OF PROGRAMS THAT COULD BE OPTIMIZED IN VERSION 1.
.B 1;.I -4
2.##^NEW OPTIMIZATIONS WERE ADDED. ^ONE OF THE MOST VISIBLE
OF THESE IS 2 NEW FORMS OF ^I/^O LIST CALLS TO ^^FOROTS\\.
^THIS PERMITS MANY TYPICAL ^I/^O LISTS WITH IMPLIED ^D^O
LOOPS TO BE PROCESSED BY A SINGLE CALL TO ^^FOROTS\\.
^OTHER NEW OPTIMIZATIONS ARE LESS SIMPLY EXPLAINED BUT INCLUDE
TEST REPLACEMENT AND SUBSUMPTION.
.B 3;.LM 0
3.18##^^CLOSE STATEMENT\\
.B 1
^THE ^^CLOSE \\STATEMENT NOW RELEASES THE UNIT. ^IN OTHER WORDS
^^CLOSE(UNIT=1) \\IS EQUIVALENT TO ^^CALL RELEASE(1).\\
.B 3;.LM 0
3.19##^^SCALARS AND ARRAYS\\ LISTING
.B 1
^THE LISTING OF SCALARS AND ARRAYS FOLLOWING THE SOURCE STATEMENT
PORTION OF THE LISTING HAS BEEN ENHANCED.
^AN "*" PREFIX INDICATES THAT THE GIVEN SYMBOL WAS NEVER EXPLICITLY
DEFINED AND A "%" PREFIX INDICATES THAT THE SYMBOL WAS DEFINED
BUT NEVER REFERENCED.
^NOTE THAT UNREFERENCED SYMBOLS ARE NOT ALLOCATED.
.B 3;.LM 0
3.20##^^DO LOOP TERMINAL STATEMENTS
.B 1
\\^THE TERMINAL STATEMENT OF A ^^DO\\ LOOP MAY BE A LOGICAL
^^IF\\ AS LONG AS ITS OBJECT STATEMENT IS NOT ANOTHER LOGICAL ^^IF\\ OR
A ^^DO\\ STATEMENT.
^IN OTHER WORDS, THE OBJECT STATEMENT OF A LOOP TERMINATING LOGICAL
^^IF\\ CAN BE A ^^RETURN, GOTO, STOP, PAUSE, \\OR AN ARITHMETIC ^^IF\\
EVEN THOUGH THESE STATEMENTS THEMSELVES CANNOT BE THE TERMINAL STATEMENT
OF A ^^DO\\ LOOP.
.BR
.PAGE
4.0##^^FORTRAN-10 VERSION 1 - VERSION 4 INCOMPATIBILITIES\\
.B 3
4.1##^^INTRODUCTION\\
.B 1
^EVERY EFFORT WAS MADE TO KEEP VERSION 4 COMPLETELY COMPATIBLE WITH
VERSION 1 HOWEVER, A FEW MINOR INCOMPATIBILITIES WERE INTRODUCED
FOR REASONS OF COMPLIANCE WITH THE ^^ANSI\\ STANDARD, COMPATIBILITY
WITH OTHER IMPLEMENTATIONS, AND OVERALL CONSISTANCY OF THE
^^FORTRAN-10\\ LANGUAGE IMPLEMENTATION.
.B 3
4.2##^^BLANK LINES\\
.B 1
^IN VERSION 1 BLANK LINES WERE SIMPLY IGNORED BY THE COMPILER AND
A CONTINUATION LINE FOLLOWING A BLANK LINE WOULD BE ASSOCIATED
WITH THE LAST NON-BLANK LINE PRECEDING THE GIVEN BLANK LINE.
^IN VERSION 4 BLANK LINES ARE DEFINED TO BE INITIAL LINES AND
AS SUCH TERMINATE ANY PRECEDING CONTINUATION SEQUENCE. ^A
CONTINUATION LINE FOLLOWING A BLANK LINE WILL NOW BE ASSOCIATED
WITH THE BLANK LINE.
.B 3
4.3##^^COMMENT LINES\\
.B 1
^IN VERSION 1, COMMENT LINES WERE SIMPLY IGNORED AND DID NOT
AFFECT CONTINUATION SEQUENCES. ^IN VERSION 4 COMMENT LINES TERMINATE
CONTINUATION SEQUENCES AND CANNOT BE FOLLOWED BY A CONTINUATION LINE.
.B 3
4.4##^^EXTERNAL STATEMENT - FORTRAN DEFINED FUNCTIONS\\
.B 1
^IN VERSION 4 THE UN-PREFIXED OCCURRENCE OF A ^^FORTRAN\\
DEFINED FUNCTION NAME IN AN ^^EXTERNAL\\ STATEMENT ALLOWS THE
USER TO SPECIFY THAT ^^FORTRAN\\ DEFINED FUNCTION NAME AS AN ACTUAL ROUTINE PARAMETER.
^HOWEVER, CONTRARY TO VERSION 1, THE FUNCTION NAME STILL REFERENCES
THE ^^FORTRAN\\ DEFINED FUNCTION.
^IN ORDER TO OBTAIN THE EFFECT PRODUCED IN VERSION 1 - THAT OF
ALLOWING THE USER TO REFERENCE A FUNCTION WITH THE SAME NAME
AS THAT OF A ^^FORTRAN\\ DEFINED FUNCTION - THE NAME MUST BE PREFIXED
WITH "*" OR "_&" IN THE ^^EXTERNAL\\ STATEMENT.
.B 3
4.5##^^FUNCTION RETURN VALUES\\
.B 1
^IN VERSION 4 THE VARIABLES ASSOCIATED WITH THE NAME OF A ^^FUNCTION\\
AND ITS ^^ENTRY\\ POINTS ARE ALLOCATED TO THE SAME STORAGE LOCATION.
^THE RETURN VALUE OF A ^^FUNCTION\\ MAY BE SPECIFIED BY DEFINING
ANY OF THE AFOREMENTIONED VARIABLES REGARDLESS OF THE POINT
OF ENTRY INTO THE ^^FUNCTION.\\
.B 3
4.6##^^SUBPROGRAM PARAMETERS\\
.B 1
^THE LOCAL VALUES OF THE ROUTINE PARAMETERS BECOME UNDEFINED
UPON RETURN TO THE CALLING PROGRAM UNIT.
.B 3
4.7##^^STATEMENT LABELS\\
.B 1
^^FORMAT\\ STATEMENT LABELS MAY NO LONGER BE REFERENCED IN EXECUTABLE
STATEMENTS, THEY MAY ONLY BE REFERENCED AS ^^FORMAT\\S IN ^I/^O
STATEMENTS. ^HOWEVER, ALL LABELS IN A PROGRAM UNIT MUST STILL
BE UNIQUE.
.B 3
4.8##^^STATEMENT LABEL CONSTANTS\\
.B 1
^THOUGH UNDOCUMENTED, VERSION 1 ACCEPTED LABEL CONSTANTS OF
THE FORM "*LABEL" IN ACTUAL ARGUMENT LISTS. ^VERSION 4 NO LONGER ACCEPTS THESE,
ONLY "$" AND "_&" MAY BE USED AS PREFIXES.
.B 3
4.9##^^CLOSE STATEMENT\\
.B 1
^THE ^^CLOSE\\ STATEMENT NOW RELEASES THE UNIT.  ^AN ^^OPEN\\ IS REQUIRED IN ORDER TO REFERENCE THE UNIT AGAIN.
.BR
.LEFT MARGIN 7
.SKIP
.PAGE
.TS 7
.INDENT -7
5.0	^^KNOWN DEFICIENCIES\\
.SKIP
.INDENT -7
5.1	^IMPLEMENTATION RESTRICTIONS
.SKIP
.LEFT MARGIN 12
.INDENT -5
1.###^THE CORE REQUIREMENTS TO COMPILE LARGE SOURCE PROGRAMS MAY
EXCEED AVAILABLE CORE.  ^THERE IS NO EXPLICIT RESTRICTION ON NUMBER
OF STATEMENTS OR SYMBOLS.
^THE ACTUAL LIMIT DEPENDS UPON THE AMOUNT OF CORE
AVAILABLE AT THE GIVEN INSTALLATION.
.SKIP
.INDENT -5
2.###^LARGE EXPRESSIONS OR DEEPLY NESTED SUBSCRIPTS MAY EXCEED
THE INTERNAL COMPILER STACK SPACE.  ^THIS WILL PRODUCE ONE OF THE FOLLOWING ERRORS DEPENDING UPON THE CIRCUMSTANCES:
1. ^^EDN\\ - ^EXPRESSION TOO DEEPLY NESTED TO COMPILE, 2. ^INTERNAL COMPILER ERROR, OR 3. ^STACK EXHAUSTED.
.SKIP;.I -5
3.###^^/OPT\\ CAN CAUSE THE ONES COMPLEMENT OF A REAL NUMBER (IE. ^^.NOT. A)\\
   TO BE FOLDED AT COMPILATION TIME IN A DIFFERENT WAY THAN IT WOULD
   HAVE BEEN EVALUATED AT RUN-TIME. 
.SKIP;.I -5
4.###^A TRANSFER OF CONTROL INTO THE SCOPE OF A ^D^O LOOP WHICH IS NOT
A RETURN TO A LOOP, ENTERED AT ITS
INITIAL POINT AND THEN PREMATURELY EXITED ( EXTENDED ^D^O ), IS AN
ILLEGAL PROGRAM CONSTRUCTION.
^SUCH A CONSTRUCTION CANNOT BE DETECTED BY THE COMPILER
AND THUS WILL NOT PREVENT COMPILATION.
^HOWEVER THE RESULTS OF EXECUTION ARE UNPREDICTABLE AND MAY
CAUSE THE PROGRAM TO TERMINATE PREMATURELY WITH AN ILLEGAL ^^UUO\\
AT 0.
.SKIP;.I -5
5.###^^NOTE-\\ ^THE GLOBAL OPTIMIZER USES ABSOLUTE LOW SEGMENT
ADDRESSES IN CERTIAN OF ITS HASH ALGORITHMS. 
^DUE TO THIS A VARIATION IN THE NUMBER OR SIZE OF THE INPUT/OUTPUT
BUFFERS MAY PRODUCE DIFFERENT, BUT EQUALLY CORRECT, SEGMENTS OF
CODE FOR THE SAME SOURCE PROGRAM (E.G. REQUESTING OR NOT REQUESTING
A LISTING FILE COULD PRODUCE THE EFFECT).
.SKIP
.INDENT -12
5.2	^DEFICIENCIES
.SKIP
^NO KNOWN DEFICIENCIES
.SKIP
.INDENT -12
5.3	^POSSIBLE INCOMPATIBILITIES WITH OTHER IMPLEMENTATIONS OF ^^FORTRAN\\
.SKIP
.INDENT -5
1.###^THE NON-STANDARD ^^RETURN\\ GOES TO THE ITH ASTERISK RATHER
THAN THE ITH DUMMY ARGUMENT.
.SKIP
.INDENT -5
2.###^EXPONENTIATION GROUPING IS FROM RIGHT TO LEFT RATHER THAN
LEFT TO RIGHT. (E.G. ^A**^B**^C IS EVALUATED AS ^A**(^B**^C))

.SKIP
.INDENT -5
3.###^THE ^^DO\\ LOOP INDEX IS UNDEFINED UPON NORMAL LOOP TERMINATION.
.SKIP
.INDENT -5
4.###^THE ^^CHAIN\\ OVERLAY FACILITY IS NOT SUPPORTED BY ^FORTRAN-10.
  ^AN OVERLAY FACILITY IS PROVIDED AS A SEPARATELY AVAILABLE FEATURE OF ^^LINK-10\\ VERSION 2.
.SKIP
.INDENT -5
5.###^INITIALIZATION OF DOUBLE PRECISION AND COMPLEX VARIABLES WITH
OCTAL OR  LITERAL DATA IS
DONE INCOMPATIBLY WITH ^F40. (^REFER TO THE ^FORTRAN-10
^LANGUAGE ^MANUAL, ^^DEC-FORLA-B-D\\)

.SKIP
.INDENT -5
6.###^COMMENT LINES AND DEBUG LINES MAY NOT BE FOLLOWED BY CONTINUATION LINES (SEE SECTION 3.2.2).
.SKIP
.INDENT -5
7.###^OCTAL CONSTANTS IN DATA STATEMENTS CANNOT BE PRECEDED BY ^O
AS IN ^F40. ^THEY MUST BE PRECEEDED BY A DOUBLE QUOTE (").
.SKIP
.INDENT -5
8.###^NAMES RESERVED FOR THE ^FORTRAN DEFINED FUNCTIONS CANNOT
BE USED TO REFERENCE USER FUNCTIONS UNLESS SPECIFIED WITH A PRECEEDING "*" OR "_&" IN AN
^^EXTERNAL\\ STATEMENT.
.SKIP;.I -5
9.###^THE DATA TYPE ^^SUBSCRIPT INTEGER\\ IS NOT SUPPORTED.
.SKIP
.PAGE
.INDENT -7
6.0    ^^INSTALLATION\\
.SKIP
^SEE DOCUMENT ^^FORTRA.^^FIG.\\
.SKIP
.INDENT -7
7.0    ^^SUPPORT PLAN\\
.SKIP
^FORTRAN-10 IS WRITTEN IN ^^BLISS\\-10, VERSION 5(124), AND
CAN BE CREATED DIRECTLY FROM THE ^^REL\\-FILE OUTPUT OF
^^BLISS\\-10.
^EDITS ISSUED TO FIX PROBLEMS IN ^FORTRAN-10 WILL BE IN TERMS
OF ^^BLISS\\-10.
.BR
.B 3
.LM 0
^^[END FORTRA.DOC]
.BR
