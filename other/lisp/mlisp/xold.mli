EXPR DUMP();
	BEGIN
	DUMPBEL('BELO);
	DUMPPAT('PATO);
	END;
EXPR DUMPBEL(FILE);
	BEGIN 
	FILOUT('OCHAN,FILE);
	FOR NEW I IN BELL DO CTERPRI('OCHAN, CPRINC('OCHAN,
	  I CONS GET(I,'OTRUTH) CONS GETBEL(I) ));
	ORELEASE('OCHAN);
	END;
EXPR GETBEL(BEL);  % BEL IS A BELIEF NAME %
	FOR NEW I IN GET(BEL,'FORM) COLLECT
	  < IF BELP I THEN GETBEL(I) ELSE I >;
EXPR DUMPPAT(FILE);
	BEGIN
	FILOUT('OCHAN,FILE);
	FOR NEW I IN NAMEL DO
	  CTERPRI('OCHAN,CPRINC('OCHAN, <I,GET(I,'PAST), GET(I,'PRESENT),
	    GET(I,'FUTURE) APPEND GET(I,'CONCLUDE) > )) ;
	ORELEASE('OCHAN);
	END;

BEGIN
EXPR FOO(A); ATOM A;
EXPR TLIST(FN,L);
  WHILE L AND APPLY(FN,CAR L) DO NOT L_CDR L;
EXPR BAZ(I);
  PRINT TLIST(FUNCTION(ATOM),I);
END.
EXPR IMATCH2(L); % L IS THE INPUT FORM %
	BEGIN NEW A,B,C,D,E,B2,C2;
	% WANT TO ACTIVATE SANJOSE IN (LOC BANA SANJOSE), OR L=HELLO %
	IF ATOM L THEN IF A_GET(L,'BEL)
	   THEN NACTIVEL_LOOKUPTOP(L) CONS NACTIVEL ALSO  RETURN <L,A> ELSE RETURN L;
	B_IMATCH(CADR L); IF CDDR L THEN C_IMATCH(CADDR L);
	IF NOT A_GET(CAR L,'FORMS) THEN RETURN NIL;
	FOR NEW I IN A DO  BEGIN
	  D_GET(I,'FORM); %NOW MATCH D TO B AND C%
	  IF B2_(CADR D MEMQA B) AND 
	    C2_(C IMP (CDDR D IMP  (CADDR D MEMQA C)))
	  THEN NACTIVEL_I CONS NACTIVEL
	  ALSO E_I CONS E
	  ALSO (B2_IF B2 EQ T THEN C2 ELSE B2)
	  ALSO IF NOT(B2 EQ T) THEN PUTPROP(I,B2,'INVARS);
	  END;
	RETURN E;
	END;
EXPR PERCM(NAME);  % INPUT IS A PATTERN NAME %
 % TESTS FOR MATCH OF REST OF ANTECEDENTS UNDER PROP CALLED FORMS %
	BEGIN NEW A,L;
	IF NOT (L_CADR NAME %GET(NAME,'FORMS)% ) THEN RETURN T;
	FOR NEW I IN L DO  IF (A_PERCMATCH(I)) AND NOT ATOM A 
	  THEN ADDPROP(NAME,A,'VARVALS) UNTIL NOT A;
	RETURN A;
	END;
EXPR PERCMATCH(FORM);  %FORM IS A FORM LIKE (LOC I HOSP) %
 % MATCHES ONLY TO ACTIVATED BELIEFS; RETURN VARLIST IF MATCHED %
	BEGIN NEW A,B;
	  % FORM MAY ALREADY BE A BELIEF NAME %
	IF ATOM FORM AND BNAME FORM THEN RETURN MEMQ(FORM,PACTIVEL);
	FOR NEW I IN PACTIVEL DO 
	  IF BELP I AND (B_GET(I,'FORM)) THEN A_PERCM3(FORM,B) UNTIL A;
	RETURN A;
	END;
EXPR PERCM3(F,BEL);  % F IS A FORM, BEL IS A FORM %
	BEGIN NEW A,L,QUIT;
	FOR NEW I IN F  FOR NEW J IN BEL  DO
	  IF NOT A_PERCM4(I,J) THEN QUIT_T
	  ELSE IF NOT(A EQ T) THEN L_A CONS L  UNTIL QUIT;
	RETURN((NOT QUIT) ANDV (L ORV T));
	END;
EXPR PERCM4(I,J);  
 % I,J ARE ELEMENTS OF A FORM; I MAY HAVE VARIABLES IN IT %
	IF ATOM I THEN
	  (IF MEMQ(I,VARL) THEN I CONS J  ELSE I EQ J)
	ELSE  (IF ATOM J THEN NIL  ELSE PERCM3(I,J) );
% AFTER PERCOLATE, ACTIVEL IS A LIST OF ALL ACTIVE PATTERNS %
% THOSE THAT HAD VARS MATCHED IN FORMS, HAVE THE VAR BINDINGS %
%   ON THE PROPERTY VARVALS ON THE PATTERN NAME %

EXPR STRINGATE(L); %RETURNS A STRING WITH THE QUOTE MARKS, FASTER THAN STR%
	BEGIN NEW A,B;  A_EXPLODEC(L);  A_CDR STRINGATE2(A);
	A_'?" CONS A; B_READLIST A; RETURN B;
	END;
EXPR STRINGATE2(A);
	IF NULL A THEN NIL ELSE IF NULL CDR A THEN < CR, '?" >
	  ELSE CAR A CONS STRINGATE2(CDR A);

EXPR NOFALSE(L); %L IS A LIST OF FORMS OR BELS%
	BEGIN NEW A; A_L; BUG_'NOFALSE;
	RETURN (NOT A OR (WHILE A AND NOTFALSE(CAR A) DO NOT A_CDR A) );
	END;
EXPR NOTFALSE(I);
	IF ATOM I THEN NOT TRUE(GET(LOOKUP(I),'OPPOS))
	ELSE IF CAR I EQ 'NOT THEN NOT TRUE(LOOKUP(CADR I))
	ELSE ERRORS('(ILLEGAL BEL),I) ALSO NIL;
