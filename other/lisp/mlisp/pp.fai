	TITLE S
define outstr (addr)
{hrroi 1,addr
 psout}

 ARRAY PDL[20]	; STACK
 ; SET UP REGISTER NAMES
A_1B_2C_3D_4
E_5F_6G_7
PTR_10
BPTR_11	; POINTS TO CHAR IN BUF
P_13	; STACK POINTER

loadav: 0
prime: 0	; ones if its prime time
loadlm: 6	; cant run unless load ave is less than this
 ; START OF PROGRAM
beg9: calli 12
START:
 RESET
 MOVE	P,[IOWD 20,PDL]	; SET UP STACK
 movei	a,exit9
 push	p,a
 move	a,beg9
 movem	a,start
; outstr ([asciz /s... /])

 pushj	p,chgst	; returns ones if guest
 jumpe	a,cont	; no guest, go to continue

; guest - test time, load ave, other parrys
 pushj	p,loadd
 movem	a,loadav
 pushj	p,datime	; get date,time - set prime
 outstr	([asciz /Guest 
/])
 skipe	prime
 jrst  [outstr ([asciz/Cant run 9-5 Mon to Fri /])  jrst swapno]
 move	a,loadav
 caml	a,loadlm	; skip if loadav less than limit
 jrst  [outstr ([asciz/Load ave too high /])  jrst swapno]

 move	a,[sixbit /PARRY2/]
 pushj	p,nump
 jumpn	a,tooman	; too many
 move	a,[sixbit /PARRY3/]
 pushj	p,nump
 jumpe	a,cont	; no parrys - continue
tooman:
 outstr ([asciz /Already a parry running /])
 jrst	swapno

swapno:	; dont run parry
 hrroi	a,[asciz /
Cant run parry right now.

Current restrictions:  If you are a GUEST, then
  if the time is between 9am and 5pm on a weekday (Mon-Fri),
  or the load average is greater than 4,
  or there is already one user running a Parry program,
then you may not run.
/]
 psout
 calli	12
 haltf
cont:
 hrroi	a,[asciz/
Parry2, Parry3, Doctor, or Help and Info [2, 3, D, or ?] /]
 psout
 pbin
 move	e,a
 outstr ([asciz /...
/])
 cain	e,"2"
 jrst	swap2
 cain	e,"3"
 jrst	swap3
 cain	e,"D"
 jrst	swapd
 cain	e,"d"
 jrst	swapd
 cain	e,"V"
 jrst	swapv
 cain	e,"v"
 jrst	swapv
 cain	e,"T"
 jrst	swapt
 cain	e,"t"
 jrst	swapt
 cain	e,"U"
 jrst	swapu
 cain	e,"u"
 jrst	swapu
 cain	e,"?"
 jrst	help
 jrst	cont
help:
 hrroi	a,[asciz / Two simulation models of paranoia are available for interviewing:
PARRY2 - developed in 1974
PARRY3 - developed in 1976-7

Send comments and questions to FAUGHT. (use SNDMSG)
/]
 psout
 hrroi a,[asciz /
 For information on the trace of internal processes 
in Parry3 type T else type carriage return (T or cr) /]
 psout
 movei a,101
 cfibf	; clear tty input buffer
 pbin
 move	e,a
 outstr ([asciz /...
/])
 cain	e,"T"
 jrst	tracei
 cain	e,"t"
 jrst	tracei
 jrst cont
tracei:  ; info on p3 trace internal processes
 hrroi a,[asciz /
Input parameters:
NON-VERBAL ACTIONS - the parenthesized expressions in Parry's output.
VERSION - weakly, mildly, or strongly paranoid
TRACE INTERNAL PROCESSES - see below.

 Comments on the Parry3 trace of internal processes:
    Roughly the first half refer to the language recognizer,
the second half to the psychological model.

For each input, the language recognizer prints the following:
 Getquestion: cleans up the teletype input.
 Findwords: looks up words in the dictionary.
 Phrase: condenses short idiomatic phrases.
 Bracket: locates and marks noun phrases.
 Relative: locates and eliminates certain relative clauses.
 Auxiliary: parses the verb phrase and its auxiliaries,
            also simplifies flexible idioms.
 Clause: locates and marks clauses.
 Compound: embeds clauses.
 Speechact: classifies type of input.
 Ellipses: locates and resolves ellipses.

In the psychological model:
  For each loop in the production system, the main action is printed.
  After each linguistic output, the following is printed:
    Affects:  (SHame ANger FeaR DistresS INterest Joy)
     The affects range from 0 to 10, 0 being no fear, anger, etc.
    Beliefs which have been Added to.
    Beliefs which have been Concluded as true.
    Current Intents (goals, as opposed to non-anticipatory actions).
/]
	psout
	jrst cont
parry3:	; returns ones in a if parry3 available
 setz	d,
 hrlzi	a,1
 hrroi	b,[asciz /<PARRY>PARRY3.NO/]
 gtjfn
 jrst	p3d2	; file not there - parry3 available
 movem	a,jfn3
 movsi	b,70000
 hrri	b,200000
 openf
 jrst	p3d2
 move	a,jfn3
 bin
 caie	b,"N"	; N = dont run
 seto	d,
 move	a,jfn3
 closf
 jrst	p3d2
 move	a,jfn3
 rljfn
 jrst	p3d2
 jrst	p3d
p3d2:
 seto	d,
p3d:
 move	a,d
 popj	p,
jfn3: 0
parry2:	; returns string ptr to parry2.sav in d
 hrroi	d,[asciz /<SUBSYS>PARRY2.SAV/]
 hrlzi	a,1
 hrroi	b,[asciz /<PARRY>PARRY2.NO/]
 gtjfn
 jrst	p2d2	; file not there - parry2 available on subsys
 movem	a,jfn2
 movsi	b,70000
 hrri	b,200000
 openf
 jrst	p2d2
 move	a,jfn2
 bin
 cain	b,"P"	; skip if not P,  P = on <parry>
 hrroi	d,[asciz /<PARRY>PARRY2.SAV/]
 move	a,jfn2
 closf
 jrst	p2d2
 move	a,jfn2
 rljfn
 jrst	p2d2
p2d2:
 popj	p,
jfn2: 0
swapd:	; start up doctor
 jrst swapd2
 move	a,guest
 jumpe	a,swapd2	; if not guest, continue
 hrroi	a,[asciz /Sorry, guests can only run Parry3.
/]
 psout
 jrst	cont	;loop
swapd2:
 move	a,[sixbit /DOCTOR/]
 setnm
 outstr ([asciz /Starting Doctor.../])
 outstr ([asciz /
Do not type ahead.  Type input followed by 2 cr's.
/])
 move	d,[point 7,swapdm]
 movei	a,100	; tty input
swapd3:
 ildb	b,d	; get char
 cain	b,0	; skip if non zero
 jrst	swapd4	; zero, quit
 sti	; put into tty input buffer
 jrst	swapd3	; loop
swapd4:
 haltf
 hrroi	d,[asciz /<PARRY>DOCTOR.SAV/] ; not there, use subsys
 reset
 move	b,d
 movei	e,2	; parry2 starter
 pushj	p,staddr
 jrst	cont
swapdm: asciz /RAISE
CONT
(WORKER)
/
swapt:	; start up talk program
 move	a,guest
 jumpe	a,swapt2	; if not guest, continue
 hrroi	a,[asciz /Sorry, guests can only run Parry3.
/]
 psout
 jrst	cont	;loop
swapt2:
 move	a,[sixbit /TLK/]
 setnm
 outstr ([asciz /Starting.../])
 hrroi	d,[asciz /<FAUGHT>TLK.SAV/] ; core dump
 reset
 move	b,d
 movei	e,3	; parry3 starter
 pushj	p,staddr
 jrst	cont
swapu:	; start up parry2 program
 move	a,guest
 jumpe	a,swapu2	; if not guest, continue
 hrroi	a,[asciz /Sorry, guests can only run Parry3.
/]
 psout
 jrst	cont	;loop
swapu2:
 move	a,[sixbit /PTLK/]
 setnm
 outstr ([asciz /Starting.../])
 hrroi	a,[asciz /
DOC[Y OR N]*Y
DOC
/]
 psout
 hrroi	e,[asciz /OK 3 /]	; will make parry2 sleep
 pushj	p,qparry	; set up file called qparry
 pushj	p,parry2	; loads name of parry2.sav file into d
 reset
 move	b,d
 movei	e,2	; parry2 starter
 pushj	p,staddr
 jrst	cont
swap2:	; start up parry2
 jrst	swap22	; let guests run parry2
 move	a,guest
 jumpe	a,swap22	; if not guest, continue
 hrroi	a,[asciz /Sorry, guests can only run Parry3.
/]
 psout
 jrst	cont	;loop
swap22:
 move	a,[sixbit /PARRY2/]
 skipn	guest ; skip next inst if guest
 move	a,[sixbit /(PRIV)/]
 setnm
 outstr ([asciz /Starting Parry2.../])
 hrroi	e,[asciz /OK 9 /]	; will not make parry2 sleep
 pushj	p,qparry	; set up file called qparry
 pushj	p,parry2	; loads name of parry2.sav file into d
 reset
 move	b,d
 movei	e,2	; parry2 starter
 pushj	p,staddr
 jrst	cont
swap3:	; start up parry3
; movei	a,-1
 pushj	p,parry3	; see if available
 jumpn	a,swap33	; yes
 outstr  ([asciz /Parry3 not available right now.
 /])
 jrst	cont
swap33:
 move	a,[sixbit /PARRY3/]
 skipn	guest ; skip next inst if guest
 move	a,[sixbit /(PRIV)/]
 setnm
 hrroi	a,[asciz / New version - /]
 psout
 hrlzi	a,1
 hrroi	b,[asciz /<faught>ml3.sav/]
 gtjfn	; get file version
 pushj	p,error
 movem	a,vers
 move	b,a
 hrroi	a,versd
 movei	c,10000	; to get creation date
 jfns
 hrroi	a,versd
 psout	; print the creation date of parry3
 move	a,vers
 rljfn	; release
 pushj	p,error
 outstr ([asciz /
Starting Parry3.../])
 hrroi	b,[asciz /<FAUGHT>ML3.SAV/]
 reset
 movei	e,3	; parry3 starter
 pushj	p,staddr
 jrst	cont
swapv:	; votrax parry3
 skipe	guest ; skip next inst if not guest
 jrst cont
 outstr ([asciz /
Starting Votrax Parry3.../])
 hrroi	b,[asciz /<FAUGHT>ML4.SAV/]
 reset
 movei	e,3	; parry3 starter
 pushj	p,staddr
 jrst	cont
vers: 0
versd: block 7
foo57:	xwd 6,load
prgjfn:	0
foo42:
 asciz /that subsystem not currently available   /
staddr:  ; swap in the subsys in b
   HRLZI 1,100001   
   GTJFN   
  jrst [pushj p,error
	hrroi a,[asciz / Exotic bug: try again from the top level ... /]
	psout
	jrst foo53] ;JRST foo53   
   MOVEM 1,PRGJFN   
   MOVS 1,foo57   
   BLT 1,15   
   JRST 6   
load:
   HRLZI 1,400000   
   HRR 1,PRGJFN   
   GET   
 cain	e,2	; if not parry2 then skip
 jrst 140	; parry2 starter
 hrrz 1,120
 jrst @1 ; parry3 starter
 0
foo53:
   HRROI 1,foo42   
   PSOUT   
 calli 12
qparry: 	; set up qparry file, input string in ac-e
 hrroi	b,[asciz /<PARRY>QPARRY/]	; file name
 hrlzi	a,400001	; output file
 gtjfn
 pushj	p,error
 hrrzm	a,jfno	; save jfn
 move	a,jfno
 movsi	b,70000	; byte size 7
 hrri	b,100000	; write access
 openf
 pushj	p,error
 move	a,jfno	; destination
 move	b,e	; string ptr
 setz	c,	; clears ac c
 sout
 move	a,jfno
 closf	; close and release file
 pushj	p,error
 popj	p,
jfno: 0
chgst:	; return ones in a and guest if this is a guest
 gjinf
 movem	a,dirnum	; dir num of this job
 movei	a,1
 hrroi	b,[asciz /GUEST/]
 stdir	; translate string to dir num
 jrst	error	; no match
 jrst	error	; ambig
 hrrz	b,a	; dir num
 setz	a,
 camn	b,dirnum	; compare, skip if not eq
 setob	a,guest
 popj	p,
dirnum: 0
guest: 0 ; is ones if job is guest

datime:	; gets time and day - sets prime if prime time
 seto	b,
 setz	d,
 odcnv	; get normal date and time
 hrrz	e,c	; get day of week
 cail	e,5	; skip if < 5 - weekday
 jrst	dat2	; weekend - not prime
 hrrz	a,d	; seconds since midnite
 idivi	a,=3600	; get hours
 caige	a,=9	; skip if at least 9am
 jrst	dat2	; not prime
 caige	a,=17	; skip if at least 5pm
 setom	prime
dat2:
 popj	p,

nump:	; gets number of parrys running, sixbit name in a
 movem	a,numpnm	; save name
 move	a,[sixbit/JOBRT/]
 sysgt
 hrrzm	b,run	; table num
 hlrom	b,g	; g has neg length
 setz	d,
 sub	d,g
; pushj	p,octal
 move	a,[sixbit /JOBNAM/]
 sysgt
 hrrzm	b,nam	; save table num
 move	a,[sixbit /SNAMES/]
 sysgt
 hrrzm	b,snam
; now have 3 tables nums, f is num of other parrys, g is neg length
 movei	e,1
 setz	f,
 addi	g,1
numpl: 	;loop
 hrr	a,run
 hrl	a,e
 getab	; get cpu time
 pushj	p,error
 jumpl	a,nump3	; if < 0, no job
 hrr	a,nam
 hrl	a,e
 getab	; get jobname index
 pushj	p,error
 move	b,a
 hrl	a,b
 hrr	a,snam
 getab	; get sixbit jobname
 pushj	p,error
 camn	a,numpnm	; test to desired name, skip if not eq
 addi	f,1	; incr count
nump3:	; next job
 addi	g,1
 addi	e,1
 jumpl	g,numpl	; if g still neg, loop
 move	d,f
; pushj	p,octal
 move	a,f	; get num of other parrys
 popj	p,
run: 0
nam: 0
snam: 0
numpnm: 0

loadd:	; get load ave
 move	a,[sixbit/SYSTAT/]
 sysgt
 hrr	a,b	; tbl num
 hrli	a,15	; 5 min ld ave
 hrli	a,14	; 1 min ld ave
 getab
 pushj	p,error
 move	e,a
 move	d,a
; pushj	p,octal
 move	a,e
 lsh	a,2	; knock off excess exp bit
 lsh	a,-35	; =-29 now have exponent
 move	b,e
 lsh	b,=9	; get rid of exp
 lsh	b,-22	; =-18 back by 9 bits more
 lsh	b,1
 sojg	a,.-1	; shift exp times
 lsh	b,=9	; back to binary pt after bit 8
 lsh	b,-33	; =-27 integer
 move	e,b
; outstr  ([asciz /Load ave = /])
 move	d,e
; pushj	p,octal
 move	a,e
 popj	p,
octal:		; print the octal contents of a word
 movei	a,101
 movei	c,=12
oc2:
 rot	d,3
 move	b,d
 andi	b,=7
 ori	b,"0"
 bout
 sojg	c,oc2
 movei	b," "
 bout
 popj	p,

error:	; universal error routine
 hrroi	a,[asciz /Error: /]
 psout
 hrrzi	a,101
 move	b,[xwd 400000,777777]
 movei	c,0
 erstr		; translate error to string and print
 jrst 	exit8
 jrst	exit8
 psout
 jrst	exit8
exit8: popj p,
exit:
exit9:
	haltf
	end start
