




THROW THIS PAGE AWAY


TENEX PROCEDURES
Table of Contents


                     Table of Contents
                     _____ __ ________




Introduction


Identification of Software


Quality Control


Installation of Software


Monitor Changes


On-line System Status Reporting


On-line Software performance Reporting


On-line Documentation



TENEX PROCEDURES
Introduction


                        INTRODUCTION
                        ____________






With the number of TENEX sites increasing  and  the  varying

number  versions  of  software  on  each  one, it has become

critical to establish a set of  procedures  to  control  the

standardization, installation, quality control and status of

software of each  TENEX  system  at  the  TENEX  sites.   In

addition,  procedures  are required for on-line reporting of

system status, software problems,  and  documentation.   The

procedures to accomplish this are contained in this manual.


NOTE: The procedures described in this manual were developed

for  the  BBN-TENEX  site,  but are adaptable to other TENEX

sites.  


TENEX PROCEDURES
Identification of Software


                   FUNCTIONAL DEFINITION
                   __________ __________






Many variants of TENEX and 10/50 software  packages  are  in

use  in  the  TENEX  community.  Lack of standardization has

introduced problems that are best solved by  establishing  a

reliable  method of identifying a particular program version

as "standard" or otherwise.  This will be done by  attaching

logical  version  numbers  to  programs  (as  distinct  from

physical file version numbers), declaring  certain  versions

to  be  "standard",  and allowing the logical version number

scheme  to  cover  the  positive  identification  of   local

variation   from   standard.   The  basic  mechanism  is  an

adaptation of a 10/50 version number strategy that has  been

quite successful within that community.


TENEX PROCEDURES
Identification of Software


                  PROCEDURE SPECIFICATION
                  _________ _____________


Standard and Non-standard Software
________ ___ ____________ ________

A "standard" program, for purposes of  identification  only,
                      ___ ________ __  ______________  ____
is  defined  to  be  one  of  the  following  (in  order  of
increasing precedence):

     A "DEC-standard" (as  defined  by  DEC)  10/50  program
     distributed  via the DEC software distribution service.
     Examples: FOROTS, COBOL, ALGLIB, F40, GLOB, CREF, SORT.

     A 10/50 program modified for TENEX use and  distributed
     as   part   of   TENEX   "standard"  software  (below).
     Examples: MACRO.

     A TENEX program distributed as part of TENEX "standard"
     software  via  the  BBN  distribution tapes (or via the
     equivalent network mechanism  for  sites  without  tape
     drives).   Examples:  TENEX  monitor,  EXEC, INTERLISP,
     TENEX TECO, COPYM, DELVER.


A "non-standard" program is any program that does  not  meet
the criteria above.

Standard software will always carry a program version number
that  readily  identifies  the program as being a particular
"standard" version.  All DEC-distributed 10/50  programs  in
current  use  already have such a version number, completely
compatible with this procedure.


Local Variants of Standard Software
_____ ________ __ ________ ________

A "local variant" is a version of the standard program  with
any  differences  from  the  standard version, no matter how
___
trivial the difference.  Local variants are non-standard.

Whenever any local variant is  made  available  for  use  by
people   other  than  just  the  individual  developing  the
variant, local variant information should be  added  to  the
program   version   number   so  that  the  program  may  be
distinguished  from  the  standard  version  in  a  positive
manner.   This  should be done regardless of how the program
is made accessable to its users  -  <SYSTEM>,  <SUBSYS>,  or
from a private directory.

TENEX PROCEDURES
Identification of Software


Program Version Numbers
_______ _______ _______

All new programs, regardless  of  their  current  scope  and
probable  future,  should be assigned version numbers in the
style specified for "standard" software.  The reasoning here
is  that  many  programs receive "special" distribution that
results  in  the  need  for  the  same  kind   of   positive
identification that programs on the "standard" list require.

Version number information  is  to  be  assembled  into  the
program  in  locations  related to the entry vector (below).
In the case of separate  subprograms  combined  together  to
form  a  single  entity, the version number information will
describe the  "end  product",  rather  than  any  individual
module.   It  is  anticipated that the version number scheme
will be expanded to  cover  module  identification  if  this
becomes necessary.



Detailed information on internal version number formats  are
to be found in appendices A and B of this section.  Appendix
A details the DEC version number scheme, and  is  the  basis
for  Appendix B, which gives the detailed specifications for
TENEX program version numbers.  These Appendices are  to  be
rewritten  to  conform  to  the  procedure format, but their
content will be unchanged.

TENEX PROCEDURES
Identification of Software


                    USE OF THE PROCEDURE
                    ___ __ ___ _________




Examples of use of version numbers is currently on the  last
page  of  Appendix  B  of  this  section, under the heading,
"Complete Examples".  An enlarged version will  be  included
in  this  section,  along  with  macros  for  generating the
correct version number format.  


TENEX PROCEDURES
Identification of Software - Appendix A


                         APPENDIX A

             DEC PROGRAM VERSION NUMBER SCHEME


                  Internal Representation
                  ________ ______________

User location 136:
     Local  variant  information,  currently  undefined   in
     format.

User location 137:
     xyyyzz,,eeeeee

x - bits 0-2            Local version 

yyy-bits 3-11           DEC's major release number.  Usually
                         incremented   by   one   for  every
                         release with new features.

zz-bits 12-17           DEC's minor release version  number.
                         Incremented  by  one  for  releases
                         containing bug  fixes  but  no  new
                         features.   Reset  to zero when the
                         major  release  number   (yyy)   is
                         incremented.               External
                         representation of this field  is  a
                         letter (1=A, 2=B, etc.)

eeeeee - bits 18-35     Highest edit number.  Each  official
                         change   to   the  source  code  is
                         assigned to  edit  #.   This  field
                         allows DEC development to retain an
                         unchanged LH,  while  generating  a
                         unique program version number.


                  External Representation
                  ________ ______________

User location 136:
     Currently undefined in format

User location 137:
     xyyyzz,,eeeeee is conventionally typed as:

                       yyyzz(eeeee)-x

with all fields octal, except zz, which is mapped  into  the
alphabet.  Zero fields are omitted.

Some examples follow.

TENEX PROCEDURES
Identification of Software - Appendix A


            DEC PROGRAM VERSION NUMBER EXAMPLES
 
     INTERNAL       EXTERNAL           COMMENTS
     ________       ________           ________
 
1)   000100,,170    1(170)      Release 1. Highest edit #
                                is 170; a major release.
 
2)   000101,,212    1A(212)     Release 1A. Highest edit #
                                is 212. DEC fixed some 
                                bugs in version 1, but
                                added no new features.
 
3)   000103,,252    1C(252)     Release 1C. Still more
                                bug fixes. No new features.
 
4)   000200,,341    2(341)      Release 2. A major release.
 
5)   300200,,341    2(341)-3    Release 2, local version 3.
                                Same as above, but modified 
                                locally. Note that the edit
                                field has not changed.
                                with new features.

Let's say the last release  of  program  FUBAR  was  22(67).
Eighteen  harried programmers labor continuously for 6 weeks
to fix bugs, Quality Control  approves  it,  the  beta  test
sites  in  the  field  report  it to be good, and with minor
fanfare,  version  22A(372)  is  released!  Within  DEC  the
versions crept thusly:

      22(67)
      22(70)
      22(71)
        .
        .
        .
      22(371)
      22(372)

Whereupon it was released as FUBAR 22A.   In  practice,  the
edit # tends to jump a few notches at a time, rather than as
shown.

University of Lower Slobbovia slips in a few local  mods  or
fixes   some   bugs.    At  ULS,  FUBAR  22A  becomes  FUBAR
22A(372)-1.

TENEX PROCEDURES
Identification of Software - Appendix B


                         APPENDIX B

           TENEX PROGRAM VERSION NUMBER PROCEDURE

Version number information is stored in two  consecutive  words
in  the  user address space.  If the length of the entry vector
is 254000, the information is in user locations  136  and  137;
otherwise  the information will be in the first two words after
                                                          _____
the entry vector.


               STANDARD INFORMATION - Word 2

Word 2 is identical to DEC user location 137 (see  appendix  A)
in  both  internal format and external typeout.  TENEX-standard
software  will  use  this  word  for  primary  version   number
information  in  the  same  manner that DEC currently uses user
location 137.

For DEC-developed software that has been modified from the  DEC
standard  version  to  become the TENEX standard version, field
"x" (bits 0-2) will be used  to  indicate  the  standard  TENEX
release version.  Note that this field is currently used by DEC
and 10/50 installations for "local version".

Examples:

     INTERNAL       EXTERNAL    COMMENTS
     ________       ________    ________

1)   000200,,117    2(117)      Unmodified DEC
                                release 2.
 
2)   100200,,117    2(117)-1    DEC release 2, 
                                modified to be
                                TENEX standard
                                release 1.
 
3)   000304,,220    3D(220)     TENEX standard
                                program, release
                                3D (bug fixes 
                                against version 3C
                                but no new features)


TENEX PROCEDURES
Identification of Software - Appendix B


             LOCAL VARIANT INFORMATION - Word 1

Corresponds to DEC user location 136 (see appendix A).

Standard DEC release and TENEX standard  software  will  always
have  Word  1 contain zero to indicate a complete lack of local
modifications.  Since field "x" (bits 0-2) of word 2  has  been
preempted  to  indicate  the  TENEX  standard  release level of
modified DEC  software,  all  local  modifications  are  to  be
indicated by the block pointed to by word 1.


                  Internal Representation
                  ________ ______________

                            0,,0

indicating a complete lack of local modification; or:

                         -n,,BLOCK

where BLOCK is the starting address of an n-word  block  (n  is
currently 3) whose format is:

              BLOCK: DDDDDD,,VVVVVV
                     PPPPPP,,UUUUUU
                     AAAAAA,,BBBBBB

DDDDDD -- Local variant DDT patch identifier, typed out  as  an
          octal field, "#DDDDDD", and suppressed if zero.

VVVVVV -- Local variant source edit identifier, typed out as an
          octal field, ",VVVVVV", or "," if zero.  

PPPPPP -- User name flag.   If  -1,  use  UUUUUU  as  indicated
          below.   Otherwise,  the  full  word is a 10/50 style
          project/programmer number, to be typed out  in  octal
          as "[PPPPPP,UUUUUU]" (to match 10/50 conventions).

UUUUUU -- If PPPPPP is -1, UUUUUU is  a  pointer  to  an  ASCIZ
          string  representing the name of the user who created
          the variant.  Typed as "<username>" (to  match  TENEX
          conventions), or "<?>" if zero.

AAAAAA  --  Pointer  to  an  ASCIZ  string   representing   the
          organization  ID  of  the  site where the variant was
          created.  Typed  as  "@organizationID",  or  "@?"  if
          zero.

BBBBBB -- Pointer to an ASCIZ string representing the system ID
          of  the  site where the variant was created.  This is
          to allow a distinction for sites with more  than  one
          system.   Typed  as  "-systemID",  and  suppressed if
          zero.

TENEX PROCEDURES
Identification of Software - Appendix B


                  External Representation
                  ________ ______________

The external representation of the local variant information in
Word 1 is:

      ,VVVVVV#DDDDDD<username>@organizationID-systemID
                             or
   ,VVVVVV#DDDDDD[PPPPPP,UUUUUU]@organizationID-systemID

For compactness, the MACRO-10 construct "[ASCIZ /FOO/]" will be
represented below as "/FOO/".

Examples:

INTERNAL          EXTERNAL              COMMENTS
________          ________              ________

0,,3              ,3<Smith>@ULS-A        U. of Lower Slobbovia
-1,,/Smith/                              system A, local source
/ULS/,,/A/                               edit version 3, created by
                                         Smith.


5,,3              ,3#5<Smith>@ULS-A     Same as above, with the
-1,,/Smith/                             addition of 5 DDT patches.
/ULS/,,/A/


6,,0              ,#6[10,175]@HARV-10    Harvard 10/50 site,
10,,175                                  local version, no source
/HARV-10/,,0                             edits, 6 DDT patches
                                         done by user [10,175].

                  Note that there is nothing preventng
                  user [10,175] from using his name, but if
                  he does, it will come out TENEX style.


15,,3             ,3#<Jones>@?            Site  is missing!
-1,,/Jones/                               Bad news.
0,,0                                    


15,,3             ,3#15<?>@?              Unknown origin. 
0,,0                                      Don't do it.
0,,0

TENEX PROCEDURES
Identification of Software - Appendix B


                     COMPLETE EXAMPLES
                     ________ ________


BLOCK       Word 2       External          Comments
_____       ____ _       ________          ________


  *         003300,,122  33(122)     DEC or TENEX standard
                                     version 3, edit 122.


  *         302700,,222  27(222)-3   DEC version 27, modified
                                     to be TENEX standard release 3


0,,3        207102,,117  71B(117)-2,3<SMITH>@ULS-A
-1,,/Smith                           DEC release 71B,modified
/ULS/,,/A/                           to be TENEX standard release
                                     2, with local edits at 
                                     ULS-A by SMITH, for local
                                     source version 3.


5,,0        000600,,147  6(147),#5<Jones>@ULS-EXP 
-1,,/Jones/                          TENEX standard version
/ULS/,,/EXP/                         6, with 5 DDT patches
                                     by Jones at ULS, on ULS-EXP.


0,,3        0,,0         ILLEGAL,3<?>@?
0,,0                                 !!! Word 2 must never
0,,0                                    be zero!!



 The example given in appendix A, where ULS (let's assume ULS-EXP)
 slips a few local mods into DEC's program FUBAR 22A, now results
 in:

              FUBAR 22A(372),1<SMITH>@ULS-EXP












-------------------------------------------------------------
* - Word 1 contains zero. BLOCK is not relevant.

TENEX PROCEDURES
Quality Control


                   FUNCTIONAL DEFINITION
                   __________ __________






Reliability of the TENEX Software is one of the major goals  of  the

TENEX  Research  Project.   In  order to satisfy this goal, a set of

Quality Control Procedures has been established.  In the development

of  these  procedures,  two  types of TENEX Sites have been defined:

Research and Development  Sites  and  Service  Sites.   The  quality

Control Procedures are distinguished for the two types of sites with

those for the Service Site being more  rigorous.   Included  in  the

procedures   are  control  of  source  and  object  files,  required

documentation, modification of software, and testing procedures.


TENEX PROCEDURES
Quality Control


                  PROCEDURE SPECIFICATION
                  _________ _____________


Section to be written


TENEX PROCEDURES
Quality Control


                    USE OF THE PROCEDURE
                    ___ __ ___ _________


Section to be written 


TENEX PROCEDURES
Installation of Software


                   FUNCTIONAL DEFINITION
                   __________ __________






As a further step in maintaining the reliability of TENEX Systems, a

set of procedures has been defined for the installation of software,

whether "standard", "non-standard", or "local variant", on  a  TENEX

System.   The  procedures  define  when  and  how  software  can  be

installed and include a description of the INSTAL Subsystem which is

designed  to  aid  in  the  installation of both TENEX-developed and

DEC-developed Subsystems.  Where  appropriate,  the  distinction  is

made  between  a  TENEX  Research  and  Development Site and a TENEX

Service Site.


TENEX PROCEDURES
Installation of Software


                  PROCEDURE SPECIFICATION
                  _________ _____________


Section to be written


TENEX PROCEDURES
Installation of Software


                    USE OF THE PROCEDURE
                    ___ __ ___ _________


Section to be written 


TENEX PROCEDURES
Monitor Changes


                   FUNCTIONAL DEFINITION
                   __________ __________






The most crucial item of software on a TENEX System is the  Monitor.

It  controls  the  overall  flow  and utilization of the system.  As

modifications and enhancements  are  made  to  the  Monitor,  it  is

essential  that  the  Monitor  still  retain  the  highest  level of

reliability.  To assist in this goal, a set of procedures  has  been

established for making changes to the Monitor on both a Research and

Development Site and a Service Site.   The  rigorous  standards  are

required  for a Service Site where the Monitor must function at 100%

reliability.


TENEX PROCEDURES
Monitor Changes


                  PROCEDURE SPECIFICATION
                  _________ _____________


Section to be written


TENEX PROCEDURES
Monitor Changes


                    USE OF THE PROCEDURE
                    ___ __ ___ _________


Section to be written 


TENEX PROCEDURES
On-Line System Status Reporting


                   FUNCTIONAL DEFINITION
                   __________ __________






To isolate hardware and software problems, as well as  to  keep  the

users  informed  of  the status of a given TENEX System, information

will be collected on the time and reason for  each  Monitor  Service

Interruption  or  Restart, Error Status Data, and Device Performance

Statistics.  The Procedure Specification includes a  description  of

the  STATUS  Subsystem  which  allows  information to be selectively

requested and listed by the TENEX user.  The data provided  will  be

selectively based on the privelege level of the requestor.


TENEX PROCEDURES
On-Line System Status Reporting


                  PROCEDURE SPECIFICATION
                  _________ _____________


Section to be written


TENEX PROCEDURES
On-Line System Status Reporting


                    USE OF THE PROCEDURE
                    ___ __ ___ _________


Section to be written 


TENEX PROCEDURES
On-Line Software performance Reporting


                   FUNCTIONAL DEFINITION
                   __________ __________






To facilitate Software Performance Reporting  for  TENEX  users,  an

on-line  report  system  will  be made available.  The SPR Subsystem

will essentially follow the format of the DEC  Software  Performance

Report,  so  that it can be used for both TENEX and DEC Software and

will essentially follow a question and answer format.  When used  on

DEC software, the standard DEC form may be used as the output medium

for hardcopy terminals.


TENEX PROCEDURES
On-Line Software performance Reporting


                  PROCEDURE SPECIFICATION
                  _________ _____________


Section to be written


TENEX PROCEDURES
On-Line Software performance Reporting


                    USE OF THE PROCEDURE
                    ___ __ ___ _________


Section to be written 


TENEX PROCEDURES
On-Line Documentation


                   FUNCTIONAL DEFINITION
                   __________ __________






As  a  further  aid  to  the  TENEX  user,  a  new  directory  named

<DOCUMENTATION>  has been defined for each TENEX System.  Procedures

have been developed  for  maintaining  critical  system  information

on-line,  as  well  as  software  change  notices,  how-to-aids  for

contacting  the   operator,   using   the   system   and   obtaining

documentation, and mini subsystem manuals.


TENEX PROCEDURES
On-Line Documentation


                  PROCEDURE SPECIFICATION
                  _________ _____________


Section to be written


TENEX PROCEDURES
On-Line Documentation


                    USE OF THE PROCEDURE
                    ___ __ ___ _________


Section to be written

