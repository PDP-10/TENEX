
	    OPERATING THE DUAL PROCESSOR TENEX SYSTEM


A. Bringing Up the System

      The Dual Processor Tenex System may run on one or two processors.
 The processor with the I/O bus (hereafter referred to as CPU0), is
 required.  The other processor (CPU1) may be started anytime after the
 monitor has been read in.  

      To start the system do the following:

	1. Push STOP then RESET on both CPU's.
	2. If CPU1 is being used, set the SEL/DES switch for port 3
	    to SEL in each memory box.
	3. Clear core by CLEARing the ADDRESS and DATA registers,
	    turning off the EXEC and USER paging switches and pressing
	    the REPEAT button, then the DEPOSIT-NEXT button.  When the
	    ADDRESS register completes a cycle, press RESET.  (This can
	    be done on either CPU.)
	4. Read in the paper-tape bootstrap program on CPU0 as follows:
	
		a. Set the READ-IN DEVICE switches to 104 and turn OFF
		    all the SENSE SWITCHES (for a normal start using
		    the monitor on area 1).
		b. Put the readin tape in the paper-tape reader and 
		    press the READIN button.

	5. In about 30 seconds the message "TENEX RESTARTING, WAIT ..."
	    will be typed.  At this time, start CPU1 by placing 107 in 
	    the ADDRESS register and pushing the START button.  There 
	    will be little activity on CPU1 until checkdsk finishes. 
		(NOTE:  CPU1 may be started at 107 anytime the system
		is running; however, once it has been started it can
		only be stopped by the procedure described in Part D.)

B. Comments about the system while it is running:

	1. DO NOT use the console TTY on CPU1.  It is only used during
	    crash conditions or for running diagnostics.
	2. Placing 21 in the ADDRESS register with the EXEC paging
	    switch set will cause the memory data lights to display
	    the job # of the job running on CPU0 in the left half
	    and the job # of the job running in CPU1 in the right half.
	3. It is good policy to run with the CONSOLE-LOCK and the
	    CONSOLE-DATALOCK switches "ON".
	4. DO NOT turn on the PARity STOP or the ADDRESS BREAK switches
	    when running with two processors because this disables the
	    crucial read-modify-write feature.

C. Handling BUGHLT's, BUGCHK's, or system-hangs.

	1. When the system crashes or fails to respond to any terminal,
    	    first check the console TTY's on both CPU's for a BUGHLT
	    or BUGCHK message.  On the Dual Processor System, the CPU
	    that encounters the error condition first will notify the 
	    other processor and then enter EDDT at the BUGHLT/BUGCHK
	    breakpoint.
		In this situation do the following:

		a. On the console TTY that typed the breakpoint, type
		    "=" to see the location of the BUGHLT.  Then type
		    103$G ($ means esc) to save the registers.
		b. On the other CPU, push STOP then RESET; then place
	    	    103 in the ADDRESS register and push START to save
	    	    the registers on THIS CPU.  (Both processors stop
	    	    immediately after saving their registers.)
		c. On CPU0 enter EDDT by placing 100 in the ADDRESS
		    register and pressing STOP then RESET then START.
		    Now take a core dump by typing $$Y.
		d. Reload the system as described in Part A.

	    (NOTE:  It is possible to continue the system on a BUGCHK
	    condition by typing $P after the EDDT breakpoint instead  
	    of doing a,b,c, and d above.  This should only be done by
	    someone who is knowledgeable of the situation since some
	    BUGCHK's may cause the system to run improperly after 
	    proceeding.)
	2. If there is no breakpoint message, (be sure neither console
	    TTY responds to "=") fill out one of the CPU-lights forms
	    (which should be next to the log book) for each CPU (take
	    as much information as possible and then stop the
	    processors to read the program location counters); save the
	    registers of BOTH CPU's as described in Section 1.b above;
	    then perform steps 1.c and 1.d.
	3. Soft Restart
		The Soft Restart may be used after crashes and hangs in
	    an attempt to continue running the system without losing the
	    users' jobs.  The procedure is as follows:

		a. Record all information on the CPU-lights form and 
	    	    take a core dump as described in Sections 1 and 2
		    above. 
		b. Push STOP then RESET on both CPU's.
		c. Put 101 in the ADDRESS registers of both CPU's.
		d. Push START on CPU0 and then push START on CPU1 (the 
	    	    order is important).
		e. Verify that the system is running properly by logging
	    	    in and out, etc.  If the system appears to be in a 
	    	    bad state, push STOP on both CPU's and reload as 
	    	    described in Part A.

D. How to take CPU1 down after the system is already running.

      Location 110 contains a flag indicating if CPU1 is allowed to run
 jobs.  It is normally set to 0, which means that CPU1 can be used.
 Depositing any non-zero number in this location will cause CPU1 to
 dismiss its current job and go into a loop in its registers.  Setting
 location 110 back to 0 will cause CPU1 to resume running jobs.
      
      While CPU1 is looping in its registers, it may be stopped by 
 pushing STOP.  To run the processor again, do one of the following:

	1. If nothing was done to change the state of the processor,
	    merely push CONTinue.
	2. If anything has been done to the processor (such as pushing
	    RESET), start the processor by putting 107 in the ADDRESS
	    register and pressing STOP then RESET then START in that
	    order.  (NOTE:  In any case, no jobs will be run by CPU1
	    until 110 is set back to 0)
	3. If the processor is to be taken offline, the memory ports
    	    should be disabled.  To avoid any "noise" on the memory
	    bus that could affect CPU0, do the following:

		a. Deposit a nonzero number in location 110 to dismiss
	    	    the job in CPU1, and push STOP then RESET.
		b. Push STOP on CPU0.
		c. Set the SEL/DES switch on port 3 of each memory box
	    	    to DES.
		d. Push CONTinue on CPU0.
