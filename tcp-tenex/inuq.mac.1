;Remove previous patch: no longer needed
;HWM, 14-Jul-82
;
;In INQCHK, Increment a global variable INQCK1 to test
;how many times this code gets executed
;HWM, 2-Jun-82
;
;Conditionialize DMOVEM's if KA, KI or F3.
;HWM, 18-May-82
;
;ISIMON:<ISI.TCP>INUQ.MAC.3370 15-Sep-81 10:25:27, Edit by CHASE
;#337 BBN update:
; AT SNDIN0+24. CAILE T2,<MINIHS+3>/4 -> CAIGE
;4T:<CHASE>INUQ.MAC.2523 26-Jun-81 15:41:48, Edit by CHASE
;#mmm Add support to compile from same sources for Tenex or Tops20
;[USC-ISIF]<ISI.TCP>INUQ.MAC.2522,  2-Jun-81 23:45:35, Ed: DALE
;ISISRC:<4.TCP>INUQ.MAC.2520  1-May-81 17:24:08, Edit by CHASE
;ISISRC:<4.BBNC-TCP>INUQ.MAC.42049 20-Apr-81 18:47:07, Edit by CHASE
;#252 GGP support
;#245 Don't assign/release internet queues unless INTON is non-zero
;ISISRC:<4.TCP>INUQ.MAC.2350 13-Apr-81 16:38:28, Edit by CHASE
;#235 In RELIQ, add fork (mulitple) handle as possible argument in T1,
;#235  requesting release of all queues assigned by the fork(s).
;<3A.TCP>INUQ.MAC.3161    28-Feb-81 15:23:33    EDIT BY CHASE
;#5 In SNDIN0, don't try to return a packet when we didn't get one
;<3A.TCP>INUQ.MAC.3155    11-Nov-80 08:57:02    EDIT BY CHASE
;#4 Check for bad size (<= 0) from user buffer in .SNDIN
;<3A.TCP>INUQ.MAC.3152    30-Sep-80 14:50:28    EDIT BY CHASE
;#3 Undo edit #2, which was causing port matching to fail!
;<3A.TCP>INUQ.MAC.44	20-Mar-80 11:30:12	Edit by CHASE
;#1 In RELIQ0, fix problem where ^C out of XNET4 left internet
;    	queues assigned [Plummer@BBNF].
;#2 In INQDSP, fix problem with port matching [Dave Reed@MIT]

	SEARCH	INPAR,TCPPAR,PROLOG
	TTITLE	INUQ
	SUBTTL 	Internet User Queues, William W. Plummer, 27Feb79

	SWAPCD

	COMMENT !

These routines implement the user interface to the Internet world.
Once assigned, an Internet queue may be used to send and receive
messages to Internet hosts.  The buffer in user space has only
a count word, an Internet header and Internet text.  The gateway
selects an appropriate hardware interface, generates the required
local header for that network and sends the packet out.


* .ASNIQ ...  3 ...... Assign Internet queue JSYS
  ASNIQ0 ...  4 ...... Guts of ASNIQ
* .RELIQ ...  6 ...... Release Internet queue JSYS
  RELIQ0 ...  6 ...... Innards of RELIQ
  REL1IQ ...  7 ...... Release packets from one Internet queue
* .SNDIN ...  8 ...... Send an Internet segment JSYS
* .RCVIN ...  9 ...... Receive an Internet segment JSYS
  INQGET ... 10 ...... Get next segment off of a queue
  CHKIQ  ... 10 ...... Check user's access to queue
* INTDSP ... 11 ...... Dispatch incoming Internet segments
  INQDSP ... 12 ...... Dispatch segments to user queues
* INQCHK ... 14 ...... Periodic check for abandonned queues
* INQINI ... 15 ...... Internet queue initialization
* INTLGO ... 15 ...... Internet job logout routine

		!

; Local parameters:

INTQT0==^D30000			; Inactivity timeout on Internet queues
INTQMX==8			; Maximum space on a queue

IFKA <EXTERN ASNSX2,BLTMU,BLTUM,CLRLCK,DISL,DQ,FORKX,GETBLK> ;|
IFKA <EXTERN GGPFLG,GGPIPQ,INETID,INETLB,INITQ,INTFLG,INTON> ;|
IFKA <EXTERN INTQFK,INTQHD,INTQJB,INTQLK,INTQM0,INTQM1,INTQM2> ;|
IFKA <EXTERN INTQM3,INTQSP,INTQTM,INTQV0,INTQV1,INTQV2,INTQV3> ;|
IFKA <EXTERN LCKCAL,MAPFKH,MRETN,MRETNE,NQ,PRWAKE,RCVGAT,RETBLK> ;|
IFKA <EXTERN RETPKT,SNDGAT,SNDIX2,SNDIX4,SQX1,TCPFLG,TCPIFG> ;|
IFKA <EXTERN TCPIPQ,TCPON,TODCLK> ;|

; Assign Internet Queue JSYS

;T1/	Flags,,pointer to QDB
	AQ%SCR==1B0	; B0: Use secure interface.
	AQ%SPT==1B1	; B1: Single(local) port protocol
;	(Other flag bits must be 0)
;T2/	(Not currently used.  Must be 0)
;T3/	(Not currently used.  Must be 0)
;
;	ASNIQ
;Ret+1:	 Failed.  Error code in T1.  Owning job # in T2 if ASNSX2.
;Ret+2:	OK.  Internet queue handle in T1.  Max buffer count in T2.

.ASNIQ::MCENT			; Enter monitor
	SKIPN INTON		;#245 Internet initialized?
	 RETERR(ASNSX1)		;#245 No, can't have any till then.
	MOVX T4,SC%NWZ		; Capability bit for network wizard
	TDNN T4,CAPENB		; Caller has it enabled?
	 RETERR(NTWZX1)		; No.
	DMOVE T3,T1		; Place for call via locked call
	MOVEI T1,INTQLK		; The lock to lock
	XMOVEI T2,ASNIQ0	; Function to call
	CALL LCKCAL		; Call work routine while lock set
	JUMPL T1,IQFAIL		; Finish up and give error return
	UMOVEM T1,T1		; Pass queue handle to caller
	MOVEI T2,MAXPSZ-PKTELI+1 ; Biggest count word user can give
	UMOVEM T2,T2		; Tell him this size
	SMRETN			; Give success return

; Guts of ASNIQ JSYS

;T1/	From user
;T2/	From user
;T3/	From user
;INTQLK/locked
;
;	CALL ASNIQ0
;Ret+1:	Always.  T1 has queue handle or -1 if error

ASNIQ0:	STACKL <<USRQDB,QDBLEN>> ; Stack space for copy of user's QDB
	LOCAL <QDB,IQ,FQ,FLGS>
	MOVEM T1,QDB
	MOVEM T1,FLGS
	MOVE T2,T1
	MOVEI T3,USRQDB
	MOVEI T1,QDBLEN		; Length of a queue descriptor
	CALL BLTUM		; Copy from user into monitor
	MOVEI QDB,USRQDB	; Reference only our copy now

	MOVSI T1,-QDBLEN	; Set to scan the QDB
	HRR T1,QDB
	MOVEI T2,17		; Right four bits must be cleared
	ANDCAM T2,0(T1)
	AOBJN T1,.-1

	MOVSI T1,(-1B15)	; Mask for single port
	TLNE FLGS,(AQ%SPT)	; Single port protocol?
	 ANDM T1,.IQPTM(QDB)	; Yes.  Flush comparison on other port

	MOVSI IQ,-NIQ		; Set to scan the queue tables
	MOVEI FQ,0		; Indicate no free slot found yet
ASNIQ1:	MOVE T1,INTQJB(IQ)	; Get owner
	CAME T1,[-1]		; Free?
	 JRST ASNIQ2		; No.  Go check for conflicts.
	SKIPN FQ		; Already know of a free slot?
	 MOVE FQ,IQ		; No so save this one.
	JRST ASNIQ8		; And loop to next queue

ASNIQ2:	MOVE T1,.IQPRM(QDB)	; Get protocol mask word from user's blk
	AND T1,INTQM0(IQ)	; Compute least specific mask
	MOVE T2,.IQPRV(QDB)	; Get value word
	XOR T2,INTQV0(IQ)	; Compare against this queue
	TDNE T1,T2		; But only in the bits that matter
	 JRST ASNIQ8		; Difference is OK.  Try next.
	MOVE T1,.IQFHM(QDB)	; Same for foreign host
	AND T1,INTQM1(IQ)
	MOVE T2,.IQFHV(QDB)
	XOR T2,INTQV1(IQ)
	TDNE T1,T2
	 JRST ASNIQ8
	SETCM T2,INETLB		; Real (non-logical) host bits
	TDNE T2,.IQSHM(QDB)	; Cannot be called logical bits by user
	 JRST ASNIQS		; Since conflicts with the system
	MOVE T1,.IQSHM(QDB)	; Same for local host
	AND T1,INTQM2(IQ)
	MOVE T2,.IQSHV(QDB)
	XOR T2,INTQV2(IQ)
	TDNE T1,T2
	 JRST ASNIQ8
	MOVE T1,INTQJB(IQ)	; Get flags
	XOR T1,FLGS		; Compare with request
	TLNE T1,(AQ%SPT)	; Differ in single/double port spec?
	 JRST ASNIQF		; Yes.  Not allowed
	MOVE T1,.IQPTM(QDB)	; Compare port word
	AND T1,INTQM3(IQ)
	MOVE T2,.IQPTV(QDB)
	XOR T2,INTQV3(IQ)
	TDNN T1,T2
	 JRST ASNIQF		; Give fail return
ASNIQ8:	AOBJN IQ,ASNIQ1
	JUMPE FQ,ASNIQN		; All slots full

	MOVE T1,.IQPRM(QDB)	; Copy into queue tables
	MOVEM T1,INTQM0(FQ)
	AND T1,.IQPRV(QDB)
	MOVEM T1,INTQV0(FQ)

	MOVE T2,.IQFHM(QDB)
	MOVEM T2,INTQM1(FQ)
	AND T2,.IQFHV(QDB)
	MOVEM T2,INTQV1(FQ)

	MOVE T3,.IQSHM(QDB)
	MOVEM T3,INTQM2(FQ)
	AND T3,.IQSHV(QDB)
	MOVEM T3,INTQV2(FQ)

	MOVE T4,.IQPTM(QDB)
	MOVEM T4,INTQM3(FQ)
	AND T4,.IQPTV(QDB)
	MOVEM T4,INTQV3(FQ)

	MOVE T1,JOBNO		; Our job number
	HLL T1,FLGS		; Merge in the flags
	MOVEM T1,INTQJB(FQ)	; Say we are the owner
	MOVE T1,FORKX		;#235 Get running fork
	HRROM T1,INTQFK(FQ)	;#235 as owning Remember fork
	HRRZ T1,FQ		; Get the queue handle for user
	JRST ASNIQX

ASNIQF:	HRRZ T1,INTQJB(IQ)	; Get job number owning this queue
	UMOVEM T1,T2		; Give it to user
ASNIQS:	SKIPA T1,[ASNSX2]	; "Queue already in use"
ASNIQN:	MOVEI T1,ASNSX1		; "All queues in use"
	HRROS T1		; Make neg. left half to signal error
ASNIQX:	RESTORE
	RET

; Release Internet Queue JSYS

;T1/	Internet Queue Handle or -1 for all owned by this job
;#235			      or (multiple) fork handle for all owned
;#235				by requested fork(s).
;
;	RELIQ
;Ret+1:	 Failure.  Error code in T1
;Ret+2:	Success

.RELIQ::MCENT			; Enter monitor
	SKIPN INTON		;#245 Internet initialized?
	 RETERR(SQX2)		;#245 No, can't have any assigned
	MOVE T3,T1		; Place arg for LCKCAL
	AOSE T1			;#235 Check for -1, is it?
	 JRST [ HRRZ T1,T3	;#235 No, check rh only now
		CAIL T1,NIQ	;#235 Is it iq handle?
		 JRST RELIQ5	;#235 No, go check for fork handle
		JRST .+1 ]	;#235 Yes, back to normal code
	MOVEI T1,INTQLK		; The lock to lock
	XMOVEI T2,RELIQ0	; Function to call
	CALL LCKCAL
	JUMPL T1,IQFAIL
	SMRETN


; Innards of RELIQ

;T1/	IQ handle or -1 for all
;INTQLK/set
;
;	CALL RELIQ0
;Ret+1:	Always.  T1 ge 0 if successful or -1,,errorcode if not

RELIQ0:	LOCAL <IQ>
	MOVEM T1,IQ
	AOSE T1			; Asked to do all for this job?
	 TLOA IQ,-1		; No.  Set AOBJN ptr to do just one
	 MOVSI IQ,-NIQ		; Yes.  Set up for all
RELIQ2:	MOVE T1,IQ		; Get the handle
	CALL CHKIQ		; Check access.
	JUMPL T1,RELIQ8		;#1 Jump if no access (different job)
	HRRZ T1,IQ
	CALL REL1IQ		; Release this one
	SETOM INTQJB(IQ)	; Deassign the queue
RELIQ8:	AOBJN IQ,RELIQ2		;#1

RELIQ9:	SETZ T1,		; Always successful
	RESTORE
	RET


RELIQ5:	CAIGE T1,-5		;#235 Check fork handle, multiple?
	 JRST [ CAIL T1,.FHSLF	;#235 No, relative fork handle?
		 CAIL T1,.FHSLF+NLFKS ;#235 ...
		 JRST RELIQ7	;#235 No, garbage.
		JRST .+1 ]	;#235 Yes, continue
IFKL <				;#mmm
	CALL FLOCK		;#235 Lock fork structure
	MOVX T2,<CALL RLIQFK>	;#235 Do this...
	CALL MAPFKH		;#235  for each fork requested
	 NOP			;#235 Never blocks
	CALL FUNLK		;#235 Unlock fork structure
>				;#mmm End of ifkl
IFKA <				;#mmm
	CALL MAPFKH		;#mmm For each requested fork...
	 CALL RLIQFK		;#mmm  Do this
>				;#mmm End of ifka
	SMRETN			;#235 Done.

RELIQ7:	HRRZ T1,SQX1		;#235 Give bad iq handle error
	JRST MRETNE		;#235 ...


;#235 Lock intqlk and do the real work per fork; LCKCAL needed to be
;#235  pushed down to this level for fork handles so that MAPFKH
;#235  wouldn't itrap with INTQLK locked.

RLIQFK:	MOVE T3,T1		;#235 Place arg for LCKCAL
	MOVEI T1,INTQLK		;#235 The lock to lock
	XMOVEI T2,RLIQF0	;#235 The function to call
	CALL LCKCAL		;#235 Lock and call
	RET			;#235 Done

RLIQF0:	LOCAL <IQ,FKN>		;#235 Do the work per fork
	HRRZ FKN,SYSFK(T1)	;#235 Get sys fork# (Mapfkh gives job relative#)
	MOVSI IQ,-NIQ		;#235 Loop thru all
RLIQF1:	MOVE T1,IQ		;#235 Get current handle
	CALL CHKIQ		;#235 Check access
	JUMPL T1,RLIQFX		;#235 Not this job
	HRRZ T1,INTQFK(IQ)	;#235 Get owning fork
	CAME T1,FKN		;#235 Owned by current fork?
	 JRST RLIQFX		;#235 No
	HRRZ T1,IQ		;#235 Yes, get back iq handle
	CALL REL1IQ		;#235 Release it
	SETOM INTQJB(IQ)	;#235  and deassign it
RLIQFX:	AOBJN IQ,RLIQF1		;#235 Loop till done
	RESTORE			;#235 
	RET			;#235 Done.


; Routine to release one Internet queue if it is owned by calling job

;T1/	Internet Queue handle
;INTQLK/Set
;
;	CALL REL1IQ
;Ret+1:	Always.

REL1IQ:	LOCAL <IQ>
	PUSH P,PKT
	MOVEM T1,IQ
	HRRZ T2,INTQJB(IQ)	; Which job owns this one
	CAME T2,JOBNO		; Us?
	 JRST REL1IX		; No.

REL1I1:	HRRZ T1,IQ		; Get the handle
	CALL INQGET		; Get a message if possible
	JUMPL T1,REL1IX		; Jump if queue now empty.
	CALL RETBLK		; Return the storage to free area
	JRST REL1I1		; Loop til queue empty

REL1IX:	POP P,PKT
	RESTORE
	RET

; Send an Internet Segment JSYS

;T1/	Flags,,Internet Queue Handle (No flags defined.  Must be 0)
;T2/	Buffer Address
;T3/	(Not currently used.  Must be 0)
;
;	SNDIN
;Ret+1:	 Failed.  Error code in T1.
;Ret+2:	Success.

.SNDIN::MCENT			; Enter monitor
	CALL SNDIN0		; Do the work
	JUMPL T1,IQFAIL
	SMRETN


; Workhorse for SNDIN:

SNDIN0:	
	LOCAL <IQ,BUF,SIZ>
	NOINT
	ife	kaflg!kiflg!f3flg,<	;[hwm]
	DMOVEM T1,IQ
>
	ifn	kaflg!kiflg!f3flg,<	;[hwm]
	MOVEM	T1,IQ
	MOVEM	T2,IQ+1
>					;[HWM]
	XCTU [HRRZ SIZ,0(BUF)]	; Get size of user's buffer area
	HRRZ T1,IQ		; The queue handle
	CALL CHKIQ		; See if we have access to it
	JUMPL T1,SNDINX		; Jump if not
	HRROI T1,SNDIX1		; Anticipate fail return
	CAILE SIZ,0		;#4 Must be > 0
	 CAILE SIZ,MAXPSZ-PKTELI+1 ; Must fit in our biggest packets
	 JRST SNDINX		; Give fail return
	MOVEI T1,PKTELI-1(SIZ)	; Size of buffer needed here
	CALL GETBLK		; Get a chunk of free storage
	SKIPG PKT,T1		; OK?
	 JRST SNDIN8
	MOVEI T1,-1(SIZ)	; Number of words in user's area
	MOVEI T2,1(BUF)		; First address in user's area
	XMOVEI T3,PKTELI(PKT)	; First address in monitor area
	CALL BLTUM		; Move it into the monitor

	LOAD T1,PIPL,(PKT)	; Packet length in bytes
	ADDI T1,3		; Set to round up
	ASH T1,-2		; Number of words which must be present
	CAIL T1,0(SIZ)		; Must be in what we were given
	 JRST SNDIN9		; No.  Length error
	LOAD T2,PIDO,(PKT)	; Get data offset in 32-bit words
	CAIGE T2,<MINIHS+3>/4	;#337 Must be atleast a full header
	 JRST SNDIN9
	SKIPE INTQM3(IQ)	; Filtering on ports?
	CAIL T2,0(T1)		; Yes.  Pkt must include ports.
	CAIG T2,0(T1)		; Pkt must always include min header
	CAIA
	 JRST SNDIN9

	LOAD T1,PIVER,(PKT)	; Pick up the Internet version
	CAIE T1,.INTVR		; Is that right?
	 JRST SNDIN9
	LOAD T1,PIPRO,(PKT)	; Protocol
	LSH T1,^D4
	XOR T1,INTQV0(IQ)	; Compare with queue spec.
	TDNE T1,INTQM0(IQ)
	 JRST SNDIN9
	MOVE T2,PKTELI+.IPKDH(PKT) ; Destination address
	XOR T2,INTQV1(IQ)
	TDNE T2,INTQM1(IQ)
	 JRST SNDIN9
	MOVE T1,PKTELI+.IPKSH(PKT) ; Source address word
	MOVE T2,INETLB		; Logical host bit mask
	LSH T2,4		; Align 32-bit wise
	ANDB T1,T2		; 2 copies of what logical host he want to be
	XOR T1,INTQV2(IQ)	; Compare with logical host value
	TDNE T2,INTQM2(IQ)
	 JRST SNDIN9
	MOVE T1,INETID		; Form source for packet
	LSH T1,4		; Conflicts against non-INETLB
	IOR T1,T2		; bits already checked in ASNIQ
	MOVEM T1,PKTELI+.IPKSH(PKT) ; Put as source host

	SKIPN INTQM3(IQ)	; Filtering on ports?
	 JRST SNDIN5		; No.  Skip checks.
	LOAD T4,PIDO,(PKT)	; Get Internet data offset
	ADD T4,PKT		; Get address of port word
	MOVE T3,PKTELI(T4)	; Get the port word
	XOR T3,INTQV3(IQ)
	TDNE T3,INTQM3(IQ)
	 JRST SNDIN9

SNDIN5:	SETZM PKTFLG(PKT)	; Clear all internal flags
	SKIPL INTQJB(IQ)	; Queue through Raw Packet Interface(s)?
	 JRST SNDIN6		; No
	SETONE PSCR,(PKT)	; Flag the packet for that interface
SNDIN6:	XCTU [SKIPN T3]		;#337 Address in T3?
	 JRST SNDINS		;#337 No, go send
	SETONE PSROU,(PKT)	;#337 Flag to do source routing
SNDINS:	CALL SNDGAT		;#337 Send it.  Low lvl code will return stg
	SETZ T1,		; Tell caller all is ok
	JRST SNDINX

SNDIN7:	HRROI T1,SNDIX1		;#5 Length problem
	JRST SNDINE

SNDIN8: HRROI T1,SNDIX2		;#5 No storage error
	JRST SNDINX		;#5 Don't return what we didn't get

SNDIN9:	HRROI T1,SNDIX4
SNDINE:	PUSH P,T1
	CALL RETPKT		; Return storage used for packet
	POP P,T1
SNDINX:	RESTORE
	RET

; Receive an Internet Segment JSYS

;T1/	Flags,,Internet Queue Handle
;		Bit-0: On to give error return instead of waiting
;T2/	Buffer pointer
;T3/	(Not currently used.  Must be 0)
;
;	RCVIN
;Ret+1:	 Failed.  Code in T1.
;Ret+2:	Success.

.RCVIN::MCENT			; Enter the monitor
	LOCAL <IQ,BUF>
RCVIN1:	NOINT
	UMOVE IQ,T1		; Get the queue handle
	UMOVE BUF,T2		; And user's buffer address
	HRRZ T1,IQ		; Get the handle
	CALL CHKIQ		; See if we have access to it
	JUMPL T1,IQFAIL		; Jump if not
	HRRZ T1,IQ
	CALL INQGET		; Try to get a segment from that queue
	JUMPGE T1,RCVIN2	; Jump if we did

	SKIPGE IQ		; Check the "don't wait" flag
	 RETERR()
	MOVE T1,FORKX		; Must wait.  Get our fork number
	HRLM T1,INTQFK(IQ)	;#235 Leave it for when segment arrives
	OKINT
	XMOVEI T1,INTQFK(IQ)	; The cell to wait on
	CALL DISL		; Wait for it to be gronked
	JRST RCVIN1		; Go try again

RCVIN2:	MOVE PKT,T1		; Put packet pointer in proper place
	LOAD T1,PIPL,(PKT)	; Get the Internet pkt length in bytes
	ADDI T1,4+3		; Allow for bfr length word.  Round up.
	ASH T1,-2		; Number of words required.
	XCTU [HRRZ T2,0(BUF)]	; Get user's buffer size
	XCTU [HRLM T1,0(BUF)]	; Tell him what's needed/present
	CAMG T1,T2		; Enough space available?
	 JRST RCVIN3		; Yes
	MOVE T1,T2		; No.  Give him what we can.
	SETO IQ, 		; Remember to give error return

RCVIN3:	SOSG T1			; Don't count the count word
	 JRST RCVIN4		; User area too small
	XMOVEI T2,PKTELI(PKT)	; First word in Internet part
	MOVEI T3,1(BUF)		; First word in user's data area
	CALL BLTMU		; Transfer it to the user
RCVIN4:	CALL RETPKT		; Return the packet storage
	CAMN IQ,[-1]		; Give error return?
	 RETERR(SNDIX1)		; Yes.
	RESTORE
	SMRETN			; No.

; Get a message (Internet segment) from specified queue

;T1/	Internet Queue Handle
;
;	CALL INQGET
;Ret+1:	Always.  T1 has pointer to message if any, or is -1 if none

INQGET:	LOCAL <IQ>
	MOVEM T1,IQ
	MOVE T2,TODCLK		; "Now"
	ADDI T2,INTQT0		; Bump no-activity time out
	MOVEM T2,INTQTM(IQ)

	NOSKED			; Prevent simultaneous access to Q
	ADD T1,INTQHD		; Compute address of queue head
	MOVE T2,T1
	LOAD T1,QNEXT,(T2)	; Get first thing on queue
	CAIN T1,0(T2)		; If that is the queue head itself,
	 JRST INQGE9		; The queue is empty
	SETSEC T1,INTSEC	; Make extended address
	CALL DQ			; Dequeue the message and return in T1
	SOS INTQSP(IQ)		; Credit space to queue
	SKIPA			; Success return. T1 has the message
INQGE9:	 SETO T1,		; Fail return.
	OKSKED
	RESTORE
	RET



; Check that the calling job has access an Internet Queue

;T1/	Internet Queue Handle
;
;	CALL CHKIQ
;Ret+1:	Always.  T1 ge 0 if ok, -1,,error code if not

CHKIQ:	HRRZS T2,T1
	CAIL T2,NIQ		; Range check the handle
	 JRST CHKIQ9		; Bad
	HRRZ T2,INTQJB(T2)	; Get job which owns this queue
	CAMN T2,JOBNO		; Is that this job?
	 RET			; Yes.  T1 still has the Q index
	SKIPA T1,[-1,,SQX2]	; Owned by some other job
CHKIQ9:	HRROI T1,SQX1		; Bad handle
	RET



; Common exit when T1 has -1,,error code

IQFAIL:	HRRZS T1
	JRST MRETNE

; Dispatch messages from the gateway to the right Internet Queue

;	(No args)
;
;	CALL INTDSP
;Ret+1:	Always.  Internet Input Queue empty.

INTDSP::PUSH P,PKT

INTDS0:	CALL RCVGAT		; Get a message from the gateway
	JUMPE PKT,INTDS9	; None available.  We're done for now.
	LOAD T1,PIPRO,(PKT)	; Internet protocol
	CAIE T1,.GGPFM		; Gateway-Gateway Protocol?
	 JRST INTDS1		; No.  Try others.
	MOVE T1,PKT		; What to enqueue
	MOVE T2,GGPIPQ		; Where to enqueue it
	NOSKED			; In case GGP run by different fork
	CALL NQ
	OKSKED
	AOS GGPFLG		; Tell GGP it has pkts waiting
	AOS INTFLG		; And keep this fork running
	JRST INTDS0		; Process another message

INTDS1:	CAIE T1,.TCPFM		; For TCP?
	 JRST INTDS2		; No.  Give it to user queue
	SKIPE TCPON		; Is TCP turned on right now?
	SKIPN TCPIFG		; And completely initialized?
	 JRST INTDS2		; No.  Let user get segment.

	MOVE T1,PKT		; What to enqueue
	MOVE T2,TCPIPQ		; Where to enqueue it
	NOSKED			; In case TCP run by different fork
	CALL NQ
	OKSKED
	AOS TCPFLG		; Tell TCP it has pkts waiting
	AOS INTFLG		; And keep this fork running
	JRST INTDS0		; Process another message

INTDS2:	MOVEI T1,INTQLK		; Internet queue lock
	XMOVEI T2,INQDSP	; Routine to call
	MOVE T3,PKT		; Arg for that routine
	CALL LCKCAL		; Call routine while lock set

INTDS9:	SKIPG TCPFLG		; Did we poke the TCP?
	 JRST INTDSX		; No.  Get out.
;;;	MOVE T1,TCPFRK		; TCP fork number
;;;	CAMN T1,FORKX		; Is that this fork?
;;;	 JRST INTDSX		; Yes.  We are already running.
;;;	PUSH P,7		; Protect critical AC
;;;	MOVE 7,TCPFRK		; Which fork to wakeup
;;;	CALL PRWAKE		; Tell scheduler to run it
;;;	POP P,7

INTDSX:	POP P,PKT
	RET

; Dispatch an Internet message to a user-assigned queue

;T1/	Pointer to packet
;INTQLK/set
;
;	CALL INQDSP
;Ret+1:	Always.  Packet queued or flushed.

INQDSP:	LOCAL <IQ>
	PUSH P,PKT
	MOVE PKT,T1
	MOVSI IQ,-NIQ		; Set to scan them
INQDS2:	MOVE T1,INTQJB(IQ)	; Get owner of queue
	CAMN T1,[-1]		; Assigned?
	 JRST INQDS5		; No.  Go try next.
	LSH T1,-^D35		; Form 0 or 1 as queue class
	LOAD T2,PSCR,(PKT)	; Get interface class (secure or not)
	CAME T1,T2		; Packet class matches queue?
	 JRST INQDS5		; No.  Try next.
	LOAD T1,PIPRO,(PKT)	; Get Internet Protocol number
	LSH T1,^D4
	XOR T1,INTQV0(IQ)	; Compare
	TDNE T1,INTQM0(IQ)	; But only in bits that matter
	 JRST INQDS5		; Not for this queue
	MOVE T2,PKTELI+.IPKSH(PKT) ; Source address
	XOR T2,INTQV1(IQ)
	TDNE T2,INTQM1(IQ)
	 JRST INQDS5
	LOAD T1,PIDH,(PKT)	; Destination address
	LSH T1,^D4		; Position 32-bit wise
	XOR T1,INTQV2(IQ)	; Compare with source logical host
	TDNE T1,INTQM2(IQ)	; In the bits which matter
	 JRST INQDS5
	LOAD T3,PIPL,(PKT)	; Get packet length in bytes
	LOAD T4,PIDO,(PKT)	; Get IN hdr length in words
	SKIPE INTQM3(IQ)	; Filtering on ports?
	 ADDI T4,1		; Ports take another word
	ASH T4,2		; Convert to bytes
	CAMGE T3,T4		; Enough in packet?
	 JRST INQDS5		; Maybe more luck on a different queue
	SKIPN INTQM3(IQ)	; Should we do the port compare?
	 JRST INQDS6		; No.  We found the right queue
	LOAD T4,PIDO,(PKT)	; Get Internet Data Offset
	ADD T4,PKT		; Add base of packet
	MOVE T3,PKTELI(T4)	; Get FP.LP and 4 extra bits
	MOVE T1,INTQJB(IQ)	; Get flags
	LDB T4,[POINT 16,T3,15]	; Save foreign port
	TLNN T1,(AQ%SPT)	; Single port protocol?
	 LSH T3,^D16		;#3 No, move local port
	DPB T4,[POINT 16,T3,31]	; Plop in the foreign port
	XOR T3,INTQV3(IQ)
	TDNE T3,INTQM3(IQ)
INQDS5:	 AOBJN IQ,INQDS2
	JUMPGE IQ,INQDS8	; Flush it if no queue found

INQDS6:	MOVE T1,INTQSP(IQ)	; Number of messages on this queue
	CAIL T1,INTQMX		; Less than number allowed?
	 JRST INQDS8		; No.  Flush this one.
	AOS INTQSP(IQ)		; Count space
	MOVE T3,TODCLK		; "Now"
	ADDI T3,INTQT0		; Deadman timeout
	HRRZ T2,IQ		; Queue index
	ADD T2,INTQHD		; Get pointer to the queue head
	LOAD T1,QNEXT,(T2)	; Get first thing on queue
	CAIN T1,0(T2)		; If the head itself, queue is empty.
	 MOVEM T3,INTQTM(IQ)	; Keep away the grim reaper
	MOVE T1,PKT		; What to enqueue.  T2 has where
	NOSKED
	CALL NQ
	OKSKED
	PUSH P,7		; Protect critical AC
	SKIPGE 7,INTQFK(IQ)	; See if a fork is waiting on this queue
	 JRST INQDS7		; No
	HRROS INTQFK(IQ)	;#235 Forget that and make its wait complete
IFKA <	CALL PRWAKE>		; Get scheduler to run him no
INQDS7:	POP P,7
	JRST INQDSX		; Try for another segment

INQDS8:	CALL RETPKT		; Return the storage

INQDSX:	POP P,PKT
	RESTORE
	RET

; Periodic check for lack of activity on Internet Queues

;T1/	TODCLK of when next check is needed by checkers run so far
;
;	CALL INQCHK
;Ret+1:	Always.  T1 has TODCLK when to check next.

INQCHK::
;[hwm]	aos	inqck1		;[hwm]	increment counter
	MOVE T3,T1		; Place arg for call via locked call
	MOVEI T1,INTQLK		; Lock to lock
	XMOVEI T2,INQCH0	; Function to call
	CALLRET LCKCAL



; Work routine for INQCHK

INQCH0:	LOCAL <IQ,TOD,NC>
	MOVEM T1,NC		; When caller needs to wake next
	MOVE TOD,TODCLK		; "Now"
	MOVSI IQ,-NIQ		; Set to scan all queues
INQCH1:	MOVE T1,INTQJB(IQ)	; Get owner
	CAMN T1,[-1]		; Is this queue assigned?
	 JRST INQCH9		; No.  Try next.
	CAMG TOD,INTQTM(IQ)	; Has user forgotten it?
	 JRST INQCH8		; No
INQCH2:	HRRZ T1,IQ		; Get the queue handle
	CALL INQGET		; Get a message from that queue
	JUMPL T1,INQCH8		; Jump if none left
	CALL RETBLK		; Flush it
	JRST INQCH2		; Loop over the whole queue

INQCH8:	CAMLE NC,INTQTM(IQ)	; Min next check against timeout
	 MOVE NC,INTQTM(IQ)
INQCH9:	AOBJN IQ,INQCH1		; Loop over all queues
	MOVE T1,NC		; Value to return
	RESTORE
	RET

; Internet Queue Initialization:

INQINI::LOCAL <IQ>
	MOVEI T1,NIQ		; Number of queues
	CALL GETBLK		; Get a block of free storage for heads
	SKIPG T1
	 INBUG(HLT,<INQINI: Freestorage gone?>,INGWA1)
	NOSKED
	MOVEM T1,INTQHD		; Save pointer to the area

	MOVSI IQ,-NIQ		; Set to scan the queue heads
INQIN1:	HRRZ T1,IQ		; Current index
	ADD T1,INTQHD		; Plus base is the queue head
	CALL INITQ		; Initialize that queue
	SETOM INTQJB(IQ)	; Say queue not owned
	AOBJN IQ,INQIN1		; Loop through all

	MOVEI T1,INTQLK		; Pointer to the lock
	CALL CLRLCK		; Initialize it
	OKSKED
	RESTORE
	RET


; Internet logout routine -- called by each job as it logs out

INTLGO::SETO T1,		; Say all Internet Queues
	RELIQ			; Release them
	 JFCL
	RET

	TNXEND
	END

