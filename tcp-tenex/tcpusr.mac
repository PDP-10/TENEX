;ISIMON:<ISI.TCP>TCPUSR.MAC.3370 15-Sep-81 10:36:40, Edit by CHASE
;#337 BBN updates:
; Fix: Return error code even if abort in progress in USRBF*,
; No room return for USRINI
;[USC-ISIC]<3A.TCP>TCPUSR.MAC.3161,  3-Mar-81 19:15:43, Ed: CHASE
;#2 In USRBFE (& USRBFF), call USTTUM before BFRDUN to prevent possible
;#2	NSKDIS bughlt.
;<3A.TCP>TCPUSR.MAC.3161    19-Feb-81 18:05:35    EDIT BY CHASE
;#1 In USRABD, add check for zero abort count before decrementing it.




	SEARCH	INPAR,TCPPAR,PROLOG
	TTITLE	TCPUSR
	SUBTTL	TCP User Responses from TCP, William W. Plummer, 21MAR77
	SWAPCD

COMMENT	!

	Routines in this file are called from within the TCP to
	inform the user of various events that have occurred such as
	a connection opening or closing, or a buffer completion.

* USREVT ...  3 ...... User Event (Open/close)
* USRERR ...  4 ...... User Error condition (ReXmit timeout etc)
* USRURG ...  4 ...... Urgent data has arrived
* USRBFE ...  5 ...... User Buffer Empty
* USRBFF ...  6 ...... User Buffer Full
* USRABD ...  7 ...... User ABORT Done
  BFRDUN ...  7 ...... Handle completed buffer

* USRINI ...  8 ...... Initialize the user interface
	!

IFKA <EXTERN ABTPTR,CLRWTB,GETBLK,INITQ,NQ,RETBLK> ;|
IFKA <EXTERN SETTUM,SETWTB,TVTCLS,TVTOPN,USTTUM,DWNSHR,FKPGS,PSIRQ,TCPBDQ> ;|

; USREVT(EVENT, TCB)		Connection open or close

;T1/	Event Code
;TCB/	(Extended) Locked Connection block
;
;	CALL USREVT
;Ret+1:	Always

USREVT::LOCAL <CODE>
	MOVEM T1,CODE
	JN TSABT,(TCB),USREVX	; Ignore if ABORT in progress
	LOAD T1,TOPNF,(TCB)	; Index of open/close wait bit index
	LOAD T2,TSSYN,(TCB)	; Send state
	LOAD T3,TRSYN,(TCB)	; Recv state
	CAIN T2,NOTSYN		; Both NOT SYNCHRONIZED?
	CAIE T3,NOTSYN
	 JRST USREV1
	CALL CLRWTB		; Yes. Clear the wait bit

USREV1:	LOAD T2,TSSYN,(TCB)	; Get States again
	LOAD T3,TRSYN,(TCB)
	CAIN T2,SYNCED		; Both fully synchronized?
	CAIE T3,SYNCED
	 JRST USREV2		; No
	JN TSOPN,(TCB),USREVX	; Jump if we have already said its open
	SETONE TSOPN,(TCB)	; Indicate that is now true
	LOAD T1,TOPNF,(TCB)
	CALL SETWTB		; Set the wait bit.

USREV2:	JE TTVT,(TCB),USREV4	; Jump if not a virtual terminal
	CAIE CODE,OK		; What kind of event is this?
	 JRST USREV3		; Must be something to do with closing
	CALL TVTOPN		; Open a TCP Virtual Terminal
	JRST USREVX

USREV3:	MOVE T1,CODE
	CALL TVTCLS		; Go close the Virtual terminal
	JRST USREVX


; Here for non-TVT actions

USREV4:	LOAD T1,TPICX,(TCB)	; Get Status-Change channel
	LOAD T2,TPIFX,(TCB)	; And FORKX to PSI
	CAIE T1,77		; No channel named
	CAIN T2,-1		; or fork went away,
	EXIT USREVX		; Means no PSI
	 CALL PSIRQ		; Set off the PSI
USREVX:	RESTORE
	RET

; USRERR(Code)		Indicate TCP error condition to user

;T1/	TCP-style event code
;TCB/	(Extended) Locked Connection block
;
;	CALL USRERR
;Ret+1:	Always

USRERR::NOSKED
	STOR T1,TERR,(TCB)	; Save the event code for user to see
	JN TSABT,(TCB),USRER1	; Forget PSI if ABORT in progress
	LOAD T1,TPICE,(TCB)	; Get the error channel
	LOAD T2,TPIFE,(TCB)	; Get the error FORKX
	CAIE T1,77		; No channel named
	CAIN T2,-1		; or fork went away
	CAIA			; Skip the PSI
	 CALL PSIRQ		; Poke that fork's channel
USRER1:	LOAD T1,TERRF,(TCB)	; Index of the error flag
	CALL SETWTB		; Set it to wake up waiting process(es)
	OKSKED
	RET



; USRURG(TCB)		Alert user that Urgent data is to be read

;TCB/	(Extended) Locked Connection Block
;
;	CALL USRURG
;Ret+1:	Always.

USRURG::JN TSABT,(TCB),USRURX	; Forget if ABORT in progress
	LOAD T1,TPICU,(TCB)	; Get the URG channel
	LOAD T2,TPIFU,(TCB)	; and FORKX
	CAIE T1,77		; None named
	CAIN T2,-1		; or fork went away
	EXIT USRURX		; Skip the PSI
	 CALL PSIRQ		; Request the PSI in that fork
USRURX:	RET

; USRBFE(BFR)			User buffer empty condition (SEND, etc)

;T1/	TCP-style event code and flags
;TCB/	(Extended) Locked Connection Block
;BFR/	(Extended) Buffer descriptor
;
;	CALL USRBFE
;Ret+1:	Always

USRBFE::PUSH P,T1		; Save the code for a second
	CALL SETTUM		; Make map user into our user space (NOSKED)
	POP P,T1		; Recover the code
	JE TSABT,(TCB),USRBE2	;#337 Different error if ABORT in progress
	MOVX T1,<<ELP+^D14>B7>	;#337 Connection reset
USRBE2:	LOAD T2,BHADR,(BFR)	;#337 Origin of the Buffer Header
	LOAD T3,BCNT,(BFR)	; Get the count
	UMOVEM T3,BFRCNT(T2)	; Store into user space
	TXO T1,TCP%DN		; Buffer done bit
	MOVX T3,<-1B7+TCP%DN>	; Bits changed here
	AND T1,T3		; Flush stray bits
	XCTU [ANDCAM T3,BFRFLG(T2)]	; Clear in user space
	XCTU [IORM T1,BFRFLG(T2)]	; Set to tell the user it has finished
	CALL USTTUM		;#337 ;#2 Unmap the user space
	LOAD T1,TPICS,(TCB)	;#2 Get the SEND done PSI Channel
	LOAD T2,TPIFS,(TCB)	;#2 And forkx
	CALLRET BFRDUN		;#2 Dispose of the buffer

; USRBFF(FLAGS,BFR)	User buffer filled (RECV)

;T1/	TCP-style event code and flags (TCP%EL, TCP%UR, etc.)
;BFR/	(Extended) Buffer desciptor which is completing
;TCB/	(Extended) Locked Connection Block
;
;	CALL USRBFF
;Ret+1:	Always.

USRBFF::PUSH P,T1		; Save the code
	CALL SETTUM		; Map the user into our user space (NOSKED)
	POP P,T1		; Recover the code
	JE TRURG,(TCB),USRBFA	; Jump if not in receive urgent mode
	TXO T1,TCP%UR		; Give urgent flag in buffer
USRBFA:	JE TSABT,(TCB),USRBF2	; Different error if ABORT in progress
	MOVX T1,<<ELP+^D14>B7>	; Connection reset
USRBF2:	LOAD T2,BHADR,(BFR)	; Get address of header in user space
	LOAD T3,BCNT,(BFR)	; Get count from monitor copy of header
	UMOVEM T3,BFRCNT(T2)	; Store into user copy
	LOAD T4,TRBS,(TCB)	; Amount of RECV buffer space
	SUB T4,T3		; The whole buffer is going back!
	STOR T4,TRBS,(TCB)	; Leave what is left for window setting.
	TXO T1,TCP%DN		; Set the done bit
	MOVX T3,<-1B7+TCP%EL+TCP%UR+TCP%DN> ; Bit we change
	AND T1,T3		; Flush stray bits
	XCTU [ANDCAM T3,BFRFLG(T2)]		; Clear in user space
	XCTU [IORM T1,BFRFLG(T2)]	; Merge with user's header
USRBF9:	CALL USTTUM		;#2 Unmap the user space & OKSKED CWL
	LOAD T1,TPICR,(TCB)	;#2 Get the RECV done PSI Channel
	LOAD T2,TPIFR,(TCB)	;#2 And forkx
	CALLRET BFRDUN		;#2 Dispose of the buffer

; USRABD(TCB)		User ABORT Done

;TCB/	(Extended) Locked Connection Block
;
;	CALL USRABD
;Ret+1:	Always

USRABD::NOSKED
	LOAD T1,TABTFX,(TCB)	; Get FORKX of ABORTer
IFKA <	CALL ABTPTR>		; Simulate the ADJBP ...
IFNKA <	ADJBP T1,FKABCP> 	; Get pointer to that fork's count
	LDB T2,T1
	SKIPE T2		;#1 Shouldn't be 0, but check anyway
	 SUBI T2,1		;#1 Ok to decrement
	DPB T2,T1
	OKSKED
	RET




; BFRDUN(Channel, Forkx, Buffer, TCB)	Handle buffer done condition

;T1/	PSI Channel
;T2/	FORKX to PSI
;BFR/	(Extended) Buffer
;TCB/	(Extended) Locked connection block
;
;	CALL BFRDUN
;Ret+1:	Always

BFRDUN:	NOSKED
	CAIE T1,77		; No channel named?
	CAIN T2,-1		; Or fork went away?
	CAIA			; Means no PSI
	 CALL PSIRQ		; Set off the PSI
	LOAD T1,BFRKX,(BFR)	; Fork wherein buffer lives
	HLRZ T1,FKPGS(T1)	; Get SPT index of UPT for that fork
	CALL DWNSHR		; Decrement share count
	JE BIDX,(BFR),BFRDU5	; Jump if no fork will be waiting
	MOVE T1,BFR		; The item to enqueue
	MOVE T2,TCPBDQ		; The buffer done queue
	CALL NQ			; Leave it for user to pick up later
	LOAD T1,BIDX,(BFR)	; Get the wait bit index
	CALL SETWTB		; Make the user wake up now
	OKSKED
	EXIT BFRDUX

BFRDU5:	OKSKED
	MOVE T1,BFR		; What to release
	CALL RETBLK		; Return the free storage
BUFDUX:	RET

; USRINI			Initialize the user interface

USRINI::MOVEI T1,QSZ		; Size of a queue head
	CALL GETBLK		; Get space from INTSEC
	JUMPE T1,USRINX		;#337 No room
	MOVEM T1,TCPBDQ		; Save for all to find
	CALL INITQ		;#337 Initialize it
	SETO T1,		;#337 All ok
USRINX:	RET			;#337

	TNXEND
	END

