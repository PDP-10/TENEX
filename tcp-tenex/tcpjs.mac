;Put .SEND back into SWAPCD, problem was solved.
;HWM, 14-Jul-82
;
;Temporarily put .SEND in RESCD so it can be breakpointed
;in EDDT
;HWM 17-MaY-82
;
;| Tenex support
;ISIMON:<ISI.TCP>TCPJS.MAC.3610 28-Oct-81 15:55:56, Edit by CHASE
;#361 Fix INTQ2 bughlts:  Make sure buffer really queued before dequeueing.
;ISIMON:<ISI.TCP>TCPJS.MAC.3370 15-Sep-81 10:23:16, Edit by CHASE
;#337 BBN update:
; Fix: wait bit usage in MAKBFR & FREBFR
; Put multinet stuff in master file under a conditional
;ISIMON:<ISI.TCP>TCPJS.MAC.3260 24-Jul-81 15:35:51, Edit by CHASE
;#326 Stat can now return aobjn ptr over all connections and will accept
;#326	connection indices.
;ISISRC:<4.TCP>TCPJS.MAC.2510  1-May-81 19:47:37, Edit by CHASE
;#251 BBN made many edits to this module, so unincorporated isi mods (below)
;#251	were edited into their source instead of vice versa.
;ISISRC:<4.BBNC-TCP>TCPJS.MAC.41147 21-Apr-81 14:42:06, Edit by CHASE
;#4 Stat will now return aobjn ptr for TVTs in AC2 if requested
;#3 Stat will now accept a TVT # in AC1
;SNARK:<401-TCP>TCPJS.MAC.1 27-Mar-81 18:12:50, Edit by CLYNN
; ABTTCB: Don't let abort counter overflow
; ABTTCB: Don't DISMS into NOSKED via $SIGNL(PZ,0)
	SEARCH	INPAR,TCPPAR,PROLOG
	TTITLE	TCPJS
	SUBTTL	TCP JSYS Service Routines, William W. Plummer, 25FEB77
	SWAPCD


COMMENT	!

	This file contains the routines which service user
	calls on the TCP.

* .SEND ...  3 ...... SEND JSYS
  SEND1 ...  4 ...... SEND, second phase
  SETURG ..  5 ...... Set send urgent pointer
* .RECV ...  6 ...... RECV JSYS
  RECV1 ...  7 ...... RECV, second phase
* .OPEN ...  8 ...... OPEN JSYS
  OPEN1 ...  9 ...... OPEN, second phase
* .CLOSE .. 10 ...... CLOSE JSYS
* CLOSE1 .. 11 ...... CLOSE, second phase
* .ABORT .. 12 ...... ABORT JSYS
  ABORT1 .. 12 ...... ABORT, second phase
* ABTJCS .. 13 ...... Abort JCNs for fork and inferiors
  ABTJC1 .. 13 ...... Second phase of above
  ABTJCN .. 14 ...... Abort a JCN
* ABTTCB .. 15 ...... Abort a connection
* TCPABT .. 16 ...... ABORT done test for scheduler
* .STAT ... 17 ...... STAT JSYS
  STATS ... 17 ...... Returns TCP statistics
  STAT1 ... 18 ...... STAT, second phase
* .CHANL .. 19 ...... CHANL JSYS
  CHANL1 .. 19 ...... CHANL, second phase
* .SCSLV .. 20 ...... SCSLV JSYS
  SCSLV1 .. 20 ...... SCSLV, second phase

  ACTTCB .. 21 ...... Activate a connection
  CHKARG .. 22 ...... Check arguments to a TCP JSYS
  CHKJCN .. 23 ...... Check validity of a JCN
  GETJCN .. 24 ...... Assign a JCN
  RETJCN .. 24 ...... Release a JCN
  MAKBFR .. 25 ...... Form a buffer descriptor block
  FREBFR .. 27 ...... Release resources used by a buffer
	!
; Local parameters:

MAXSTO==^D<5*60>	; Max number of seconds of persistence

IFKA <EXTERN ASNWTB,BLTMU,CHKADD,CHKTVT,CHKWND,CLRWTB,DQ,ENCPKT> ;|
IFKA <EXTERN FKPGS,FORKX,FRCPKT,GETBLK,INETID,INTFRK,INTOOT,INTZOT> ;|
IFKA <EXTERN LCKCAL,MRETN,NQ,NUWNDO,PZ,RA,RELWTB> ;|
IFKA <EXTERN RETBLK,RSTBFR,RXPARS,SETLCK,SIGNAL> ;|
IFKA <EXTERN SKIIFA,STAT0,STATZZ,TCBCNT,TCBH,TCBHLK,TCBHUC> ;|
IFKA <EXTERN TCPABC,TCPIFG,TCPON,TODCLK,TTNETW>	;|
IFKA <EXTERN TVTCHK,TVTPTR,ULKTTY,UNLCK,UPSHR> ;|


; .SEND		Send a buffer

;T1/	Flags,,JCN (or Pointer to Connection Descriptor)
;T2/	Pointer to buffer header
;T3/	Timeout (in seconds)
;
;	SEND
;Ret+1:	 Error, Code in T1
;Ret+2:	Success

.SEND::	MCENT			; Enter monitor context
	XMOVEI T1,SEND1		; Routine to call via CHKARG
	CALL CHKARG		; Check arguments, set TCB, call SEND1
	JUMPL T1,TCPERR		; Error.
	UMOVE T1,T1		; Get the Flags
	TLNN T1,(TCP%WT)	; Supposed to wait?
	 JRST SKMRTN		; No.  Give immediate skip return
SENDW:	LOAD T1,BIDX,(BFR)	; Buffer Done Flag Index
	LOAD T2,TERRF,(TCB)	; Error Flag index
	ROT T2,-<WID(TERRF)>	; Put in high bits of T2
	LSHC T1,^D18+<WID(TERRF)>	; Put indexes in LH
	HRRI T1,INTOOT		; Select SEND Done Test routine
	MDISMS			; Wait for either to come on
	JN TERR,(TCB),TCPBER	; Jump if there was an error
	JN TSUOP,(TCB),TCPSKP	; That's all if connection open
	LOAD T1,TOPNF,(TCB)	; Get ID of Open Flag for this TCB
	LOAD T2,TERRF,(TCB)	; Error Flag index
	ROT T2,-<WID(TERRF)>	; Put in high bits of T2
	LSHC T1,^D18+<WID(TERRF)>	; Put indexes in LH
	HRRI T1,INTZOT		; Select Close Done Test
	MDISMS
	JE TERR,(TCB),TCPSKP

TCPBER:	CALL FREBFR		; Release resources used in buffer
	LOAD T1,TERR,(TCB)	; Pick up the error code

TCPERR:	ANDI T1,-1		; Save just the error code
	UMOVEM T1,T1		; Pass to user
	RETERR			; Give no-skip return


TCPSKP:	CALL FREBFR		; Release resources
	SMRETN			; And give skip return

; SEND1(TCB)		Second phase of SEND

;T1/	JCN specified by caller
;TCB/	(Extended) Pointer to locked connection block
;
;	CALL SEND1
;Ret+1:	Always, T1 has 0 and BFR has the buffer, or T1 has -1,,error

SEND1:	LOAD T2,TSSYN,(TCB)
	CAIE T2,NOTSYN
	CAIN T2,FINSNT		; Closed or closing?
	 JRST SEND6		; Give error
	CALL ACTTCB		; Try to activate the TCB (JCN in T1)
	JUMPE T1,SEND6		; Can't
	CALL MAKBFR		; Make a buffer descriptor
	SKIPGE BFR,T1		; Error?
	 EXIT SENDX		; Yes.  Code in T1.
	UMOVE T3,T3		; Get the Send Timeout from user
	JUMPE T3,SEND4		; He says infinite.  Don't set it.
	CAILE T3,MAXSTO		; Be sure it is reasonable for add to TODCLK
	 MOVEI T3,MAXSTO
	IMULI T3,^D1000		; Convert to milliseconds
	STOR T3,TSTO,(TCB)	; Set new value in TCB
SEND4:	UMOVE T1,T4		; Get Retrans. parameter word
	CALL RXPARS		; Change them in TCB

	MOVE T1,BFR		; What to Enqueue
	XMOVEI T2,TCBSBQ(TCB)	; Queue head for send buffers
	CALL NQ			; Enqueue it for Packetizer.
	MOVE T1,BFRFLG(BFR)	; Get the buffer flags
	TXNN T1,TCP%UR		; URGENT send?
	 JRST SEND43		; No.
	CALL SETURP		; Yes.  Set the send urgent pointer

SEND43:	LOAD T1,TSLFT,(TCB)	; Current Send Left
	LOAD T2,TSSEQ,(TCB)	; Current Send Sequence
	LOAD T3,TSWND,(TCB)	; Current Send Window
	ADD T3,T1		; Current Right
	MODSEQ T3
	CALL CHKWND		; See if there is space in the window
	JUMPE T1,SEND5		; Jump if not.  Recv'd ACK will restart.

	$SIGNL(PZ,0)		; Make Packetizer run now
SEND5:	TDZA T1,T1		; Say OK to caller
SEND6:	HRROI T1,ELP+^D12	; "Connection Closing"
SENDX:	RET

; SETURP		Set up the send urgent pointer

; An URGENT send is being done and the value of the send urgent pointer
; must be computed.  This is done by adding up all the queued data
; (on the send buffer queue) to get the current end of the urgent data,
; relative to the current send sequence.


;TCB/	Pointer to connection block
;	CALL SETRUP
;Ret+1:	Always.  TSURP setup and TSURG turned on.

SETURP:	PUSH P,BFR		; Need this global for scanning buffers
	TEMP <CNT,NXT>		; Give names to T1, T2
	MOVEI CNT,0		; Assume no partial buffer
	LOAD BFR,TSCB,(TCB)	; Get partial buffer if any
	JUMPE BFR,SETUR1	; Jump if none
	SETSEC BFR,INTSEC	; Make extended address
	LOAD CNT,BCNT,(BFR)	; Get number of unsent bytes from bfr

SETUR1:	MOVEI NXT,TCBSBQ(BFR)	; Pointer to send buffer queue head
SETUR2:	MOVE BFR,NXT		; Point bfr to what we will process
	CAIN BFR,TCBSBQ(BFR)	; Back to the queue head
	 JRST SETUR3		; Means done.  Go finish up.
	SETSEC BFR,INTSEC	; Make extended address
	LOAD NXT,QNEXT,+TCBSBQ(TCB) ; Get pointer to next item for next time
	LOAD T3,BCNT,(BFR)	; Get count from this buffer
	ADD CNT,T3		; Add into total
	JRST SETUR2		; Loop over entire queue, incl. bfr being sent

SETUR3:	LOAD T3,TSSEQ,(TCB)	; Next send seq. num. to be used
	ADD T1,T3		; Compute 1st non-urgent seq. num.
	MODSEQ T1		; Keep within the right number of bits
	STOR CNT,TSURP,(TCB)	; Set the urgent pointer into the TCB
	SETONE TSURG,(TCB)	; Say we are in send urgent mode
	POP P,BFR
	RESTORE
	RET

; .RECV		Receive a buffer

;T1/	Flags,,JCN (or pointer to CDB)
;T2/	Pointer to buffer header
;
;	RECV
;Ret+1:	 Error.  Code in T1
;Ret+2:	Success


.RECV::	MCENT			; Enter monitor context
	XMOVEI T1,RECV1		; Routine to call via CHKARG
	CALL CHKARG		; Check arguments, set TCB, call RECV1
	JUMPL T1,TCPERR		; Error.
	UMOVE T1,T1		; Get flags
	TLNN T1,(TCP%WT)	; Supposed to wait?
	 SMRETN			; No.  Give immediate skip return
RECVW:	LOAD T1,BIDX,(BFR)
	LOAD T2,TERRF,(TCB)	; Error Flag index
	ROT T2,-<WID(TERRF)>	; Put in high bits of T2
	LSHC T1,^D18+<WID(TERRF)>	; Put indexes in LH
	HRRI T1,INTOOT		; Select RECV done test routine
	MDISMS
	JN TERR,(TCB),TCPBER	; Jump if any error posted
	JRST TCPSKP

; RECV1(TCB)		Second phase of RECV

;T1/	JCN specified by caller
;TCB/	(Extended) Locked connection block
;
;	CALL RECV1
;Ret+1:	Always.  T1 has 0 and BFR has the buffer, or T1 has-1,,error

RECV1:	LOCAL <OLDWND>
	LOAD T2,TRSYN,(TCB)	; Get receive state
	CAIE T2,NOTSYN		; Not synchronized
	CAIN T2,FINRCV		; or FIN received?
	 JRST RECV9		; Yes.  Fail.
	CALL ACTTCB		; Try to activate the TCB (JCN in T1)
	JUMPE T1,RECV9		; Could not.
	CALL MAKBFR		; Make a buffer descriptor
	SKIPGE BFR,T1		; Check for error
	 EXIT RECVX		; There was one.
	LOAD T1,TRBS,(TCB)	; Current amount of receive buffer space
	LOAD T2,BICNT,(BFR)	; How much more is being made available
	ADD T1,T2
	STOR T1,TRBS,(TCB)	; New amount (for window setting)
	MOVE T1,BFR		; Item to enqueue
	XMOVEI T2,TCBRBQ(TCB)	; Receive buffer queue head
	CALL NQ			; Enqueue this buffer there
	LOAD OLDWND,TRWND,(TCB)	; Get the current (old) window
	CALL NUWNDO		; Setup the new window
	STOR T1,TRWND,(TCB)	; Set into the TCB
	JUMPN OLDWND,RECV4	; No ARQ needed if not opening from 0
	JUMPE T1,RECV4		; Must be actually opening to non-0
	CALL FRCPKT		; Make PZ send an ARQ

RECV4:	JN TRPP,(TCB),RECV5	; Jump if partially process pkt waiting
	LOAD T1,QNEXT,<+TCBRPQ(TCB)>	; Ptr to 1st thing on RA queue
	CAIN T1,TCBRPQ(TCB)	; Empty queue?
	 JRST RECV6		; Yes.  No use running RA
RECV5:	JN TRCB,(TCB),RECV6	; No signal if RA already has a BFR
	LOAD T3,QNEXT,<+TCBRBQ(TCB)> ; Get next buffer on the queue
	SETSEC T3,INTSEC	; Make extended address
	CAME T3,BFR		; Will this new buffer restart RA?
	 JRST RECV6		; No.  No need to run RA
	$SIGNL(RA,0)		; Make Reassembler run now

RECV6:	LOAD T1,TSSYN,(TCB)	; Get send state
	LOAD T2,TRSYN,(TCB)	; Get receive side state
	CAIE T1,SYNSNT		; SYN sent?
	CAIN T1,SYNCED		; or Synchronized?
	CAIN T2,SYNABL		; And have heard something from other end?
	CAIA
	 CALL ENCPKT		; Announce the new window in due time
	TDZA T1,T1		; Say OK to caller
RECV9:	HRROI T1,ELP+^D12	; "Connection Closing"
RECVX:	RESTORE
	RET

; .OPEN		Open a connection

;T1/	Flags,,Pointer to Connection Descriptor Block (CDB)
;
;	OPEN
;Ret+1:	 Error.  T1 has the code.
;Ret+2:	Success.

.OPEN::	MCENT			; Enter the monitor context
	TLNE T1,(TCP%JS)	; JCN Supplied?
	 JRST OPENE		; That's a no-no
	XMOVEI T1,OPEN1		; Routine to call via CHKARG
	CALL CHKARG		; Check arguments, set TCB, call OPEN1
	JUMPL T1,TCPERR		; Jump if there was an error
	UMOVE T2,T1		; Get flags
	TLNE T2,(TCP%WT)	; Supposed to wait?
	 JRST OPENW		; Yes.
OPENOK:	TLO T1,(TCP%JS)		; Turn on JCN Supplied bit for him
	UMOVEM T1,T1		; Give JCN to user
	SMRETN

OPENW:	PUSH P,T1		; Save the JCN
	LOAD T1,TOPNF,(TCB)	; Get ID of Open Flag for this TCB
	LOAD T2,TERRF,(TCB)	; Error Flag index
	ROT T2,-<WID(TERRF)>	; Put in high bits of T2
	LSHC T1,^D18+<WID(TERRF)>	; Put indexes in LH
	HRRI T1,INTOOT		; Select OPEN Done Test
	MDISMS
	POP P,T1
	LOAD T2,TERR,(TCB)	; Get error code
	JUMPE T2,OPENOK		; Jump if no error
	SKIPA T1,T2		; Put error code in right place
OPENE:	MOVEI T1,ELP+6		; "Connection already exists"
	JRST TCPERR

; OPEN1(TCB)		Second phase of OPEN JSYS

;T1/	JCN specified by caller
;TCB/	(Extended) Locked connection block
;
;	CALL OPEN1
;Ret+1:	Always.  T1 has -1,,error or the JCN

OPEN1:	LOCAL <USRAC1,JCN>
	MOVEM T1,JCN
	UMOVE USRAC1,T1		; Get the flags
	TLNN USRAC1,(TCP%VT)	; Virtual terminal?
	 JRST OPEN1A		; Not a virtual terminal
	HRROI T1,ELP+^D30	; "Only Internet fork can run TVTs"
	MOVE T2,FORKX		; Which fork this is
	CAME T2,INTFRK		; The Internet fork?
	 JRST OPENX		; No.  Give error return
OPEN1A:	JN TSUOP,(TCB),OPEN6	; Jump if already open
IFN MNET,<			;#337 This code only if support multiple nets
	LOAD T1,TFH,(TCB)	;#337 Get foreign host
	ASH T1,-^D24		;#337 Shift over to get net
	SKIPG T1,LCLHID(T1)	;#337 Get address on that net if there is one
	 MOVE T1,NLHOST+0	;#337 Else get default address
>				;#337
IFE MNET,<			;#337 If only one name
	MOVE T1,INETID		;#337 Get it
>				;#337
	STOR T1,TLH,(TCB)	;#337 And stick it in the TCB
	MOVE T1,JCN
	CALL ACTTCB		; Try to activate the TCB 
	JUMPE T1,OPEN12		; Cannot
	SETONE TSUOP,(TCB)	; Mark the TCB as open
	UMOVE T2,T2		; Get the send timeout from user
	JUMPE T2,OPEN4		; Don't change if no specification
	CAILE T2,MAXSTO		; Be sure it is reasonable for add to TODCLK
	 MOVEI T2,MAXSTO
	IMULI T2,^D1000		; Make into milliseconds
	STOR T2,TSTO,(TCB)	; Set the new value into the TCB

OPEN4:	UMOVE T1,T3		; Get Retrans. parameter word
	CALL RXPARS		; Change them in TCB

	UMOVE T1,T1		; Get flags again
	TLNN USRAC1,(TCP%VT)	; Openning as a virtual terminal?
	 JRST OPEN3		; No
	SETONE TTVT,(TCB)	; Yes.  Mark TCB as such
OPEN3:	TLNE USRAC1,(TCP%FS)	; Supposed to force synchronization?
	 CALL FRCPKT		; Yes.  Packetizer will do that.
	TLNN USRAC1,(TCP%PS)	; Supposed to be persistent?
	 JRST OPEN2		; No.
	SETONE TSPRS,(TCB)	; Yes, mark the TCB as such.
OPEN2:	MOVE T1,JCN		; Value to return
	EXIT OPENX

OPEN6:	SKIPA T1,[-1,,ELP+6]	; "Connection already open"
OPEN12:	HRROI T1,ELP+^D12	; "Connection closing"
OPENX:	RESTORE
	RET

; .CLOSE		Close a connection

;T1/	Flags,,JCN
;
;	CLOSE
;Ret+1:	 Error, Code in T1
;Ret+2:	Success

.CLOSE::MCENT			; Enter the monitor context
	TLNN T1,(TCP%JS)	; JCN Supplied?
	 JRST CLOSER		; That's not right.
	HRRZS T1		; Save just the JCN part
	XMOVEI T2,CLOSE1	; Select CLOSE1 routine
	CALL CHKJCN		; Check access, set TCB, call CLOSE1
	JUMPL T1,TCPERR		; Jump if error.
	UMOVE T1,T1		; Get flags
	TLNN T1,(TCP%WT)	; Supposed to wait?
	 JRST CLOSEX		; No.  User will do ABORT to release JCN
	LOAD T1,TOPNF,(TCB)	; Get ID of Open Flag for this TCB
	LOAD T2,TERRF,(TCB)	; Error Flag index
	ROT T2,-<WID(TERRF)>	; Put in high bits of T2
	LSHC T1,^D18+<WID(TERRF)> ; Put indexes in LH
	HRRI T1,INTZOT		; Select Close Done Test
	MDISMS
	LOAD T1,TERR,(TCB)	; Get the error code
	JUMPN T1,TCPERR		; Jump if error code non-null
	LOAD T1,TJCN,(TCB)	; Get the JCN for this connection
	CALL RETJCN		; Release it
CLOSEX:	SMRETN

CLOSER:	MOVEI T1,ELP+1
	JRST TCPERR

; CLOSE1(TCB)		Second phase of CLOSE JSYS

;T1/	JCN Specified by caller (ignored here)
;TCB/	(Extended) Locked Connection Block
;
;	CALL CLOSE1
;Ret+1:	Always. T1 has 0 for OK, or -1,,error

CLOSE1::JE TSOPN,(TCB),CLOSE3	; Was it ever open?
	JE TSUOP,(TCB),CLOSE3	; Still Open?
	SETZRO TSUOP,(TCB)	; No longer
	CALL FRCPKT		; Get a FIN sent by Packetizer
	TDZA T1,T1		; Tell caller OK
CLOSE3:	HRROI T1,ELP+3		; "Connection not open"
	RET

; .ABORT		Abandon this end of a connection

;T1/	Flags,,JCN
;
;	ABORT
;Ret+1:	Error.  T1 has code.
;Ret+2:	Success.  Nothing more will be heard about this connection.

.ABORT::MCENT			; Enter monitor context
	TLNN T1,(TCP%JS)	; JCN supplied?
	 JRST ABORTR		; That's wrong
	HRRZS T1		; Save just the JCN
	XMOVEI T2,ABORT1	; Select the routine to run
	CALL CHKJCN		; Check arguement, set TCB, run ABORT1
	JUMPL T1,TCPERR		; Jump if some sort of error
	MOVEI T1,TCPABT		; Select wait routine
	HRL T1,FORKX		; For this fork
	MDISMS
	SMRETN

ABORTR:	HRROI T1,ELP+1
	JRST TCPERR



; ABORT1(TCB)		Second phase of ABORT JSYS

;T1/	JCN specified by caller (ignored here)
;TCB/	(Extended) Locked Connection Block
;
;	CALL ABORT1
;Ret+1:	Always.  T1 has 0 for passing to caller.

ABORT1:	CALL ABTTCB		; Abort the connection
	LOAD T1,TJCN,(TCB)	; Get user's handle
	CALL RETJCN		; Release that.
	MOVEI T1,0		; Say OK to caller
	RET

; ABTJCS			Abort JCNs for forks (part of CLZFF)

;T1/	Job fork number of fork being considered
;
;	CALL ABTJCS
;Ret+1:	Always.

ABTJCS::SKIPE TCPON		; TCP enabled?
	SKIPL TCPIFG		; TCP Initialized yet (JOB-0 startup)
	 RET			; No.
	SAVET			; CLZFF code requires this
	MOVE T3,T1		; Put in place for call via LCKCAL
	MOVEI T1,TCBHLK		; Stabilize JCNTCB table in JSB
	XMOVEI T2,ABTJC1	; and call function to abort JCNs
	NOINT			; Retain control during this
	CALL LCKCAL
	MOVEI T1,TCPABT		; Wait for all to be aborted
	HRL T1,FORKX		; The ones by this fork, that is.
	MDISMS
	OKINT			; State is clean again
	RET


; ABTJC1	Same as above, but called with TCBH Lock set

ABTJC1:	LOCAL <JCN,JOBFRK>
	PUSH P,TCB
	MOVEM T1,JOBFRK
	MOVSI JCN,-MAXJCN	; Set to scan table
ABTJC2:	HRRZ TCB,JCNTCB(JCN)	; Get pointer to TCB
	JUMPE TCB,ABTJC3	; Avoid non-pointers
	SETSEC TCB,INTSEC	; Make extended address
	XMOVEI T1,TCBLCK(TCB)	; Pointer to lock on that TCB
	XMOVEI T2,ABTJCN	; Function to abort a JCN
	MOVE T3,JOBFRK		; Argument for ABTJCN
	CALL LCKCAL		; Lock the TCB and Abort the JCN
ABTJC3:	AOBJN JCN,ABTJC2	; Loop over all
	POP P,TCB
	RESTORE
	RET

; ABTJCN(TCB)		; Abort a JCN (ie, the connection)

;T1/	Job fork number being considered
;TCB/	(Extended) Locked connection block
;TCBH/	Locked TCB Hash table
;
;	CALL ABTJCN
;Ret+1:	Always.

ABTJCN:	LOAD T2,TOWNR,(TCB)	; Get job number of owner
	CAME T2,JOBNO		; Better be ours
	 TCPBUG(CHK,<ABTJCN: TCP Conn not owned by aborting job>,TCPJS4)
	LOAD T2,TOFRK,(TCB)	; Get job fork handle of owning fork
	UMOVE T3,T1		; Get CLZFF flags from caller
	CAME T1,T2		; Was JCN created by the object fork?
	 JRST ABTJC4		; No.
	TXNN T3,CZ%NSF		; Yes. Are we supposed to abort there?
	 JRST ABTJC5		; Yes.  Go do it
	EXIT ABTJCX

ABTJC4:	EXCH T1,T2		; Get to right places for SKIIFA
	TXNN T3,CZ%NIF		; Abort inferiors' connections?
	CALL SKIIFA		; Check owner inferior to object fork
	 EXIT ABTJCX		; Should not kill it
ABTJC5:	NOSKED
	CALL ABTTCB		; Get the TCP fork to do the work
	LOAD T1,TJCN,(TCB)	; Get the JCN
	CALL RETJCN		; Release that
	OKSKED
ABTJCX:	RET

; ABTTCB(TCB)			Get the TCB aborted (by PZ)

;TCB/	Locked Connection Block
;
;	CALL ABTTCB
;Ret+1:	Always.

ABTTCB::NOSKED
	JN TSABT,(TCB),ABTTCX	; Already being aborted?
	SETONE TSABT,(TCB)	; No.  Make it so.
	SETZRO TSUOP,(TCB)	; Fake a CLOSE
	MOVE T1,FORKX		; Our fork number
	STOR T1,TABTFX,(TCB)	; Indicate which is killing the TCB
IFKA <	CALL ABTPTR>		; Simulate ADJBP ...
IFNKA <	ADJBP T1,FKABCP>	; Pointer to base of counters
	LDB T2,T1
	CAIGE T2,<1_ABTCBS>-1	; Do not allow count to wrap around (CWL)
	  ADDI T2,1		; Bump the number killed by this fork
	DPB T2,T1
	$SIGNL(PZ,1)		; Run packetizer (not now 'cause NOSKED)
ABTTCX:	OKSKED
	RET




; TCPABT(FORKX)			Scheduler test for ABORT(s) done

;T1/	a FORKX
;T4/	Return address
;
;	JSP T4,TCPABT
;Ret+1:	 One or more connections still being aborted
;Ret+2:	All ABORTs completed

	RESCD
TCPABT::IFKA <CALL ABTPTR>	; Simulate ADJBP ...
	IFNKA <ADJBP T1,FKABCP>
	LDB T2,T1
	JUMPE T2,1(T4)
	JRST 0(T4)


IFKA <
; ABTPTR(Number)	Get byte ptr to Nth abort counter

;T1/	The counter index (a FORKX)
;
;	CALL ABTPTR
;Ret+1:	Always.  Pointer in T1.

ABTPTR::PUSH P,T2		; Save an AC
	IDIVI T1,<^D36/ABTCBS>	; Divide by number of bytes/word
	ADD T1,ABTTAB(T2)	; Add word offset to pointer
	POP P,T2
	RET

	XX==ABTCBS
ABTTAB:	REPEAT <^D36/ABTCBS>,<	POINT ABTCBS,TCPABC,<-1+XX>
				XX==XX+ABTCBS
			      >
     >
	SWAPCD

; .STAT		Get status of a connection or the TCP

;T1/	Flags,,JCN or Pointer to CDB
;T2/	-N,,Offset	Number and beginning to return
;T3/	-M,,Address	Size and location in user space for results
;
;	STAT
;Ret+1:	 Error.  Code in T1
;Ret+2:	Success

.STAT::	MCENT			; Enter monitor context
	TLNE T1,(TCP%ST)	; Asking for TCP statistics?
	 JRST STATS		; Yes
	TLNE T1,(TCP%NT)	;#4 Aobjn ptr wanted?
	 JRST STATNT		;#4 Yes, handle
	TLNE T1,(TCP%NI)	;#326 Number of conns wanted?
	 JRST STATIX		;#326 Yes
	XMOVEI T1,STAT1		; Select routine to call
	CALL CHKARG		; Check arguments, set TCB, call STAT1
	JUMPL T1,TCPERR		; There was something wrong.
	SMRETN


; Just copy the statistics area to user space

STATS:	HLRE T1,T2		; Get count
	MOVNS T1		; As a positive number
	HLRE T4,T3		; Get size of user's area
	MOVNS T4		; As a positive number
	CAMLE T1,T4		; Take min as size of transfer
	 MOVE T1,T4
	MOVEI T4,0(T2)		; Start point
	ADD T4,T1		; End + 1
	CAILE T4,STATZZ-STAT0	; Compare with size of statistics area
	 JRST STATS8		; Tell him it is bad.
	PUSH P,T1		; Save for awhile
	MOVEI T2,STAT0(T2)	; Get start address in statistics area
	HRRZS T3		; Assume user section 0
	CALL BLTMU		; Transfer from monitor to user
	POP P,T4		; Recover size
	HRLS T4			; Make N,,N
	XCTU [ADDM T4,T2]	; Update user's pointers
	XCTU [ADDM T4,T3]
	SMRETN
STATS8:	HRROI T1,ELP+^D21	; Bad arg to STAT
	JRST TCPERR

;#4 Return aobjn ptr: -#tvts,,first tvt

STATNT:	MOVE T2,TVTPTR		;#4 Get aobjn ptr
	UMOVEM T2,2		;#4 Give it to caller
	SMRETN			;#4 Skip return

STATIX:	MOVN T2,TCBCNT		;#326 Get -count of connections
	HRLS T2			;#326  into LH
	HRRI T2,1		;#326 First conn always 1
	UMOVEM T2,2		;#326 Give it to user
	SMRETN			;#326 Return skip

; STAT1(TCB)			Second phase of STAT JSYS

;T1/	JCN specified by caller (ignored here)
;TCB/	(Extended) Locked connection block
;
;	CALL STAT1
;Ret+1:	Always.  T1 has 0 for OK, or -1,,error

STAT1:	LOCAL <XFRCNT>
	UMOVE T1,T1		; Get flags
	UMOVE T2,T2		; Get pointer
	UMOVE T3,T3		; Get pointer to user space
	JUMPGE T2,STAT9		; Strange pointer
	JUMPGE T3,STAT9		; Strange pointer
	HLRE T1,T2		; Get count
	MOVNS T1		; As a postive number
	HLRE XFRCNT,T3		; Get size of user's area
	MOVNS XFRCNT		; As a postive number
	CAMLE XFRCNT,T1		; Take min as size of transfer
	 MOVE XFRCNT,T1
	HRRZ T4,T2		; Start offset
	CAIL T4,TCBSIZ		; Must be within TCB
	 JRST STAT8		; Tell him "bad arg"
	ADD T4,XFRCNT		; Compute end+1
	CAILE T4,TCBSIZ		; Trying to read too much?
	 JRST STAT8		; Tell him arg is bad.
	HRRZS T2		; Flush the count
	ADD T2,TCB		; Start address within TCB
	HRRZS T3		; Flush the count (assume user sec 0)
	MOVE T1,XFRCNT		; Set up count
	CALL BLTMU		; Transfer from monitor to user
	HRLS XFRCNT
	XCTU [ADDM XFRCNT,T2]	; Update user's pointers
	XCTU [ADDM XFRCNT,T3]
	MOVEI T1,0		; Tell caller all is well
	EXIT STATX

STAT8:	SKIPA T1,[-1,,ELP+^D20]	; "Funny pointer to STAT"
STAT9:	HRROI T1,ELP+^D21	; "Bad transfer size to STAT"
STATX:	RESTORE
	RET

; .CHANL		Set TCP event interrupt channels

;T1/	Flags,,JCN (or pointer to CDB)
;T2/	Six 6-bit bytes (channel numbers)
;
;	CHANL
;Ret+1:	 Error, Code in T1.
;Ret+2:	Success

.CHANL::MCENT			; Enter monitor context
	XMOVEI T1,CHANL1	; Select routine to call via CHKARG
	CALL CHKARG		; Check arguments, set TCB, call CHANL1
	JUMPL T1,TCPERR		; Jump if something is wrong.
	SMRETN



; CHANL1(TCB)			Second phase of CHANL JSYS

;T1/	JCN specified by caller (ignored here)
;TCB/	(Extended) Locked Connection Block
;
;	CALL CHANL1
;Ret+1:	Always.  T1 has 0 if OK, or -1,,error

CHANL1:	TEMP <NEW,OLD,CNT,FORKID>
	LOCAL <NEWCHS,NEWPTR,OLDPTR,FRKPTR>
	UMOVE NEWCHS,T2		; Get channel word from user
	MOVE NEWPTR,[POINT 6,NEWCHS]	; Set to scan them
	MOVE OLDPTR,[POINT 6,TCBPIC(TCB)]; Set to scan current ones
	MOVE FRKPTR,[POINT 18,TCBPIF(TCB)]; Set to scan forks
	MOVEI CNT,6		; How many to scan
	MOVE FORKID,FORKX	; Who is setting the new channels

CHANL2:	ILDB NEW,NEWPTR		; Get a new setting
	ILDB OLD,OLDPTR		; and what was there before
	CAIE NEW,77		; No change mark?
	CAIG NEW,5		; OK number for the channel?
	 JRST CHANL3		; Take the good number
	CAIL NEW,^D24		; These are also OK
	CAILE NEW,^D35
	 JRST CHANL9		; Bad.  Tell user.

CHANL3:	CAIE NEW,77		; No change?
	 MOVE OLD,NEW		; No.  New will replace old
	DPB OLD,NEWPTR		; Construct the replacement set
	IBP FRKPTR		; Move to current fork slot
	CAIE NEW,77		; Changing the channel
	 DPB FORKID,FRKPTR	; Yes.  This fork gets the PSIs now.
	SOJG CNT,CHANL2		; Loop over all six bytes
	MOVEM NEWCHS,TCBPIC(TCB); Stash into TCB
	TDZA T1,T1		; Tell caller all is well
CHANL9:	HRROI T1,ELP+^D17	; "Bad arg to CHANL"
	RESTORE
	RET

; .SCSLV	Set connection security level

;T1/	Flags,,JCN or pointer to CDB
;T2/	Security Level
;
;	SCSLV
;Ret+1:	 Error.  Code in T1
;Ret+2:	Success.

.SCSLV::MCENT
	XMOVEI T1,SCSLV1	; Select routine to call via CHKARG
	CALL CHKARG		; Check args, set TCB, call SCSLV1
	JUMPL T1,TCPERR		; Give error return if appropriate
	SMRETN			; Otherwise, it was good.



; SCSLV1(TCB)		Second Phase of SCSLV JSYS

;T1/	JCN specified by caller (ignored here)
;TCB/	Locked connection block
;
;	CALL SCSLV1
;Ret+1:	Always.  T1 has 0 if OK, or -1,,error

SCSLV1:	UMOVE T2,T2		; Get arg from caller
	JN TSLVN,(TCB),SCSLVE	; Bad.  No changes allowed.
	STOR T2,TSLVN,(TCB)	; Set the new value
	TDZA T1,T1		; Get a 0 to indicate OK
SCSLVE:	HRROI T1,ELP+^D29	; "Can't change security levels"
	RET

; ACTTCB(TCB)		Activate a connection

; ACTTCB tries to move a connection from the completely unsynchronized
; (closed or brand new) state into the SYNABLE state, where it is
; able to send and/or repond to SYNs.  Activating a connection is the
; operation performed by user calls like SEND and RECV, and make the
; connection be "alive".  If the connection is already active, this
; results in a true value.  False is return if the connection is
; partially closed -- one side or the other is NOTSYN state.


;T1/	JCN
;TCB/	(Extended) Locked connection block
;
;	CALL ACTTCB
;Ret+1:	Always.  T1 has -1 if successfully activated, 0 otherwise

ACTTCB:	LOAD T2,TSSYN,(TCB)	; Get send state
	LOAD T3,TRSYN,(TCB)	; Get recv state
	CAIE T2,NOTSYN		; Unsynchronized?
	 JRST ACTTC7		; No.
	CAIE T3,NOTSYN
	 JRST ACTTC8		; Return FALSE
	STOR T1,TJCN,(TCB)	; Indicate this TCB is owned
	MOVE T2,TCB
	HRL T2,FORKX		; Form system fork,,TCB
	MOVEM T2,JCNTCB(T1)	; Store in job private table
	MOVE T2,JOBNO		; Our job number
	STOR T2,TOWNR,(TCB)	; Store this as TCB Owner
	MOVEI T1,SYNABL		; SYN Ok state
	STOR T1,TSSYN,(TCB)	; Set send side
	STOR T1,TRSYN,(TCB)	; and recv side
	SETZRO TSPRS,(TCB)	; Clear persistent SYN flag
	SETZRO TSUOP,(TCB)	; Clear OPEN has been done flag
	SETZRO TSOPN,(TCB)	; Clear "said it's open" bit
	SETZRO TSABT,(TCB)	; Clear ABORT requested flag
	MOVEI T1,MAXDSZ		; Maximum data size for a packet
	STOR T1,TSWND,(TCB)	; Is the default initial send window
	HRRZ T1,FORKN		; Our Job fork number
	STOR T1,TOFRK,(TCB)	; Say who owns the TCB
	MOVEI T1,2*MAXDSZ	; Twice the maximum packet data size
	STOR T1,TRWND,(TCB)	; is the default initial window.
	SETZRO TRBS,(TCB)	; No RECV buffer space yet

	SETO T1,
	STOR T1,TPSIC,(TCB)	; No PSI Channels named yet
	STOR T1,TPIFU,(TCB)	; No INTRP fork
	STOR T1,TPIFR,(TCB)	; No RECV DONE fork
	STOR T1,TPIFS,(TCB)	; No SEND DONE fork
	STOR T1,TPIFE,(TCB)	; No ERROR fork
	STOR T1,TPIFX,(TCB)	; No STATE CHANGE fork
	STOR T1,TPIFA,(TCB)	; No EOL ACK fork

	MOVEI T1,^D3000		; Good starting point for retrans
	STOR T1,TMNRT,(TCB)	; Minimum round trip time
	STOR T1,TMXRT,(TCB)	; Maximum round trip time
	STOR T1,TRXI,(TCB)	; Current RX interval
	SETZRO <TRXPN,TRXPD,TRXPI>,(TCB)	; Clear RX parameters

	MOVEI T1,OK		; General success code
	STOR T1,TERR,(TCB)	; Indicate no error on this connection
	LOAD T1,TERRF,(TCB)	; Index of the error event flag
	CALL CLRWTB		; Clear it
	SETZRO TVTL,(TCB)	; Clear TVT line number
	SETZRO TTVT,(TCB)	; Clear TVT flag
	JRST ACTTC9		; Return true to say it is now active

ACTTC7:	CAIN T3,NOTSYN		; Check receive side state
ACTTC8:	 TDZA T1,T1		; Return FALSE
ACTTC9:	 SETO T1,		; Return TRUE
	RET

; CHKARG(FUNC)		Check arg(s) of TCP call, set up TCB, call FUNC

;T1/	(Extended) Function address
;T2/	ARG for FUNC
;
;	CALL CHKARG
;Ret+1:	Always.  T1 has value of FUNC(JCN,ARG).  TCB has been setup.
;		Note:  TCB is locked during call to FUNC

CHKARG:	STACKL <<ARGBLK,10>>	; Room for args to CHKADD, if called
	LOCAL <PARAMS>		; A pointer to ARGBLK
	DEFINE LP<0(PARAMS)>
	DEFINE FH<1(PARAMS)>
	DEFINE FP<2(PARAMS)>
	DEFINE JCN<3(PARAMS)>
	DEFINE WILDOK<4(PARAMS)>
	DEFINE FUNC<5(PARAMS)>
	DEFINE ARG<6(PARAMS)>
	MOVEI PARAMS,ARGBLK	; Set the pointer
	MOVEM T1,FUNC		; Save function address
	MOVEM T2,ARG
	NOINT
	SKIPE TCPON		; TCP turned on?
	SKIPN TCPIFG		; TCP Initialized yet?
	 JRST CHKARI		; No.
	UMOVE T1,T1		; Get user's AC1 flags
	TLNE T1,(TCP%IX)	;#326 Conn index supplied?
	 JRST CHKAR3		;#326 Yes
	TLNN T1,(TCP%JS)	; JCN Supplied in right half?
	 JRST CHKAR1		; No.  Go translate into one
	HRRZS T1		; Save JCN part
	MOVE T2,FUNC		; Second arg to CHKJCN
	MOVE T3,ARG		; Argument to FUNC
	CALL CHKJCN		; See if this is a valid use
	EXIT CHKARX		; Return whatever result

CHKAR1:	TLNE T1,(TCP%TV)	;#3 TVT Supplied?
	 JRST CHKAR2		;#3 Yes, handle
	CALL GETJCN		; Reserve a JCN
	JUMPL T1,CHKARX		; Couldn't.  Tell caller
	MOVEM T1,JCN		; Save the JCN
	XCTU [HRRZ T1,T1]	; Get ptr to Connection Descriptor Blk
	UMOVE T2,0(T1)		; Copy the info from user area
	UMOVE T3,1(T1)
	UMOVE T4,2(T1)
	ANDX T2,.RTJST(-1,PSP)
	ANDX T4,.RTJST(-1,PDP)
	ANDX T3,.RTJST(-1,PISH)
	MOVEM T2,LP		; Store into ARGBLK for CHKADD
	MOVEM T3,FH
	MOVEM T4,FP
	SETZM WILDOK		; No OK to find listening connections
	MOVE T1,PARAMS		; Pointer to parameter block for CHKADD
	CALL CHKADD		; Find TCB, Lock it, Call FUNC
	JUMPGE T1,CHKARX	; Jump if all went well
	PUSH P,T1		; Save error result
	MOVE T1,JCN		; Get back the JCN
	CALL RETJCN		; Give it back
	POP P,T1		; Restore error code
	EXIT CHKARX


;#3 Handle case where argument is a TVT number

CHKAR2:	MOVEI T2,(T1)		;#3 Get line # into 2
	CALL CHKTVT		;#3 Check for valid TVT, is it?
	 JRST CHKART		;#3 No
	CALL TVTCHK		;#3 Get data base
	 JRST CHKART		;#3 Line not fully active
	LOAD TCB,PTVT,(T2)	;#3 Get ptr to TCB
	CALL ULKTTY		;#3 Unlock the data base
	JUMPE TCB,[ HRROI T1,ELP+1 ;#3 Illegal connection
		JRST CHKARX ]	;#3 ...
	SETSEC TCB,INTSEC	;#3 Insure section number there
	MOVE T3,T1		;#3 Make this first arg
	XMOVEI T1,TCBLCK(TCB)	;#3 This is the lock
	MOVE T4,ARG		;#3 Get 2nd arg if any
	MOVE T2,FUNC		;#3 Get function to call
	CALL LCKCAL		;#3 Call func with lock locked
	JRST CHKARX		;#3 Rejoin exit code

CHKART:	HRROI T1,ELP+1		;#3 Bad arg
	JRST CHKARX		;#3 exit


;#326 Find the Nth connection specified by T1

CHKAR3:	HRRZS T1		;#326 Just the conn index
	CAMLE T1,TCBCNT		;#326 Are there that many conns?
	 JRST CHKART		;#326 No, error
	MOVEM T1,JCN		;#326 Save conn index
	MOVEI T1,TCBHLK		;#326 Lock for TCBH hash table
	CALL SETLCK		;#326 Get it
	PUSH P,TCB		;#326 Save tcb
	MOVSI T2,-TCBHSZ	;#326 Make aobjn ptr over TCBH
CHKA30:	HRRZ TCB,T2		;#326 Current slot in TCBH
	ADD TCB,TCBH		;#326 Add base of table (includes section)
	HRRZ T3,TCB		;#326 Save head of this list
CHKA31:	LOAD TCB,QNEXT,(TCB)	;#326 Get next on list
	CAMN TCB,T3		;#326 Back to head?
	 JRST [ AOBJN T2,CHKA30	;#326 Yes, jump if any more lists in table
		SETZ TCB,	;#326 No more, indicate tcb not found
		JRST CHKA32 ]	;#326
	SETSEC TCB,INTSEC	;#326 Get section number
	SOSE JCN		;#326 Are we at the Nth tcb?
	 JRST CHKA31		;#326 No, loop

;#326 TCB points to the Nth conn or contains 0

CHKA32:	AOS TCBHUC		;#326 Bump TCBH use count
	MOVEI T1,TCBHLK		;#326 TCBH lock
	CALL UNLCK		;#326 Unlock with nonzero use count => reading
	HRROI T1,ELP+1		;#326 Prepare for error (bad arg)
	SKIPN TCB		;#326 Did we find Nth conn?
	 JRST CHKA33		;#326 No, return error code in 1
	XMOVEI T1,TCBLCK(TCB)	;#326 TCB lock
	MOVE T2,FUNC		;#326 Function to call
	MOVE T3,JCN		;#326 Restore these args also
	MOVE T4,ARG		;#326  for completeness
	CALL LCKCAL		;#326 Lock the lock and call the func
CHKA33:	SOS TCBHUC		;#326 Done reading TCB
	POP P,TCB		;#326
	JRST CHKARX		;#326 Finish cleaning up

CHKARI:	HRROI T1,ELT+^D31	; "TCP Not initialized yet"

CHKARX:	OKINT
	PURGE LP,FH,FP,JCN,WILDOK,FUNC,ARG
	RESTORE
	RET

; CHKJCN(JCN)			See if caller has access to JCN

;T1/	JCN in question
;T2/	(Extended) Function to call if OK
;T3/	Argument for function
;
;	CALL CHKJCN
;Ret+1:	Always.  T1 has -1,,error or value of FUNC(JCN,ARG)

CHKJCN::PUSH P,T1		; Save the JCN
	CAIL T1,1		; Reasonable number?
	CAIL T1,MAXJCN
	 JRST CHKJC9		; No.  Tell Caller
	HRRZ TCB,JCNTCB(T1)	; Get the TCB
	JUMPE TCB,CHKJC9	; Non-JCN, give error
	SETSEC TCB,INTSEC
CHKJC1:	LOAD T1,TOWNR,(TCB)
	CAME T1,JOBNO
	 TCPBUG(CHK,<CHKJCN: TCB ownership screwed up>,TCPJS3)
	XMOVEI T1,TCBLCK(TCB)	; Pointer to the connection lock
	MOVE T4,T3		; Put arg in right place
	MOVE T3,0(P)		; Get the JCN as first ARG to function
	CALL LCKCAL		; Lock the lock and call the function
	CAIA			; Use whatever value is returned
CHKJC9:	HRROI T1,ELP+1		; "Illegal Connection"
	SUB P,[1,,1]
	RET

; GETJCN			Assign a Job Connection Number

;	CALL GETJCN
;Ret+1:	Always.  T1 has the JCN (.GT.0) or -1,,error

GETJCN::NOSKED			; Prevent others from interfering
	MOVSI T2,-MAXJCN+1	; Max number of JCNs per job (ignore 0)
	SKIPE JCNTCB+1(T2)	; Empty slot?
	 AOBJN T2,.-1		; No.  Check next
	HRROI T1,ELT+4		; "No space for another connection"
	JUMPGE T2,GETJCX	; Return that if no empty slot found
	MOVE T3,FORKX		; Our identity.
	HRLZM T3,JCNTCB+1(T2)	; Reserve the slot for later use
	MOVEI T1,1(T2)		; The JCN as a result.
GETJCX:	OKSKED
	RET





; RETJCN(JCN)			Free a Job Connection Number

;T1/	JCN
;
;	CALL RETJCN
;Ret+1:	Always.

RETJCN::PUSH P,TCB		; Save so we can use this AC
	NOSKED
	CAIL T1,1
	CAIL T1,MAXJCN		; Reasonable number
	CAIA
	 JRST RETJC1
	TCPBUG(INF,<RETJCN: Impossible arg.>,TCPJS1)
	JRST RETJCX

RETJC1:	SETZ TCB,
	EXCH TCB,JCNTCB(T1)
	TRNN TCB,-1		; Just a reserved slot?
	 JRST RETJCX		; Yes.  Get out.
	SETSEC TCB,INTSEC	; Make extended address
	MOVNI T3,1
	STOR T3,TPSIC,(TCB)	; Disable all PSIs
	STOR T3,TPIFU,(TCB)	; Remove forks from TCB
	STOR T3,TPIFR,(TCB)
	STOR T3,TPIFS,(TCB)
	STOR T3,TPIFE,(TCB)
	STOR T3,TPIFX,(TCB)
	STOR T3,TPIFA,(TCB)
	STOR T3,TOFRK,(TCB)	; Forget owning fork
	SETZRO TJCN,(TCB)	; Disown the TCB
RETJCX:	OKSKED
	POP P,TCB
	RET

; MAKBFR		Make a buffer descriptor block

; Buffer descriptors ("Buffers") are the items which get queued for the
; Packetizer and Reassembler.  There is one for each SEND or RECV
; executed by the user.  Amoung other things, a buffer block contains
; an "index" which associates that buffer with a particular DONE bit
; which is stored in resident core; it is this bit that the scheduler
; tests to reactivate a process which is waiting for that particular
; buffer.

;	CALL MAKBFR
;Ret+1:	Always.  T1 has the buffer address (.GT.0) or -1,,error

MAKBFR:	STACKL <DATADR>
	LOCAL <HDRADR,FLAGS,COUNT,JCNFLG>
	PUSH P,BFR
	UMOVE JCNFLG,T1		; Get JCN control flags from user
	UMOVE HDRADR,T2		; Get address of header from user
	SUBI HDRADR,BFRSUI	; Make it into standard header ptr.
	MOVSI FLAGS,(TCP%DN!TCP%ER)	; Done and Error bits
	XCTU [ANDCAB FLAGS,BFRFLG(HDRADR)] ; Clear in user space, get others
	TXNE FLAGS,TCP%UR	; Urgent (send) bit on?
	 TXO FLAGS,TCP%EL	; Yes.  That implies a letter end.
	UMOVE T3,BFRDAD(HDRADR); Address of data area
	MOVEM T3,DATADR
	UMOVE COUNT,BFRCNT(HDRADR); Number of words/bytes in buffer
	JUMPL COUNT,MAKBF9	; Illegal
	MOVE T1,DATADR
	LSH T1,-PGSFT		; First page of buffer
	MOVE T2,DATADR
	MOVE T3,COUNT
	TLNE JCNFLG,(TCP%WM)	; Count is words?
	 JRST MAKBF1		; Yes.
	ADDI T3,3		; Round up to word boundary
	ASH T3,-2		; Number of words in the buffer
MAKBF1:	ADD T2,T3
	SUBI T2,1		; Last word in buffer
	LSH T2,-PGSFT		; Last page in buffer
	CAIL T2,1000		; Better fit in memory
	 JRST MAKBF9		; Give error
	TLNN JCNFLG,(TCP%WT)	; Will this fork wait for this buffer?
	 TDZA T1,T1		; No.  No wait bit index assigned
	 CALL ASNWTB		; Assign an index
	JUMPL T1,MAKBFX		; None available right now
	PUSH P,T1		; Save for a while
	SKIPE T1		;#337 No bit to clear
	 CALL CLRWTB		;#337 Clr it to make us hang at SENDW (e.g.)
	MOVEI T1,BFRSIZ		; Size of a buffer descriptor
	CALL GETBLK		; Get a block of free storage
	SKIPG BFR,T1		; Got it?
	 JRST MAKBF8		; No.  Release index and tell caller
	POP P,T1		; Get back the index
	SETZM BFRQ(BFR)		; Indicate buffer is not on a queue
	STOR T1,BIDX,(BFR)	; Put in Descriptor
	STOR TCB,BTCB,(BFR)	; Remember which TCB owns the buffer

	MOVEM FLAGS,BFRFLG(BFR)	; Store in monitor copy
	SETZRO BPTR,(BFR)	; Clear Index and Indirect fields
	MOVEI T1,^D8		; Assume byte-send
	TLNE FLAGS,(TCP%WM)	; Word mode?
	MOVEI T1,^D36		; Yes.  Byte size is 36
	STOR T1,BPTRS,(BFR)	; Set into size field of byte pointer
	MOVE T1,TODCLK		; Now in milliseconds
	STOR T1,BTS,(BFR)	; Set into buffer timestamp
	STOR COUNT,BICNT,(BFR)	; Remember the initial count
	STOR HDRADR,BHADR,(BFR)	; and header address in user space
	MOVE T3,DATADR		; Get the user's data address
	STOR T3,BDADR,(BFR)	; Remember it
	MOVEI T1,-1		; "Not mapped" indication
	STOR T1,BMPAG,(BFR)	; In the monitor window page number
	CALL RSTBFR		; Reset the buffer state
	MOVE T1,FORKX		; Our own System Fork Number
	STOR T1,BFRKX,(BFR)	; Remember for mapping user space
	HLRZ T1,FKPGS(T1)	; Our own UPT
	PUSH P,Q1		; Protect critical AC
	CALL UPSHR		; Keep UPT from going away
	POP P,Q1
	MOVE T1,BFR		; This is the value
	JRST MAKBFX

MAKBF8:	POP P,T1		; Get back index
	TLNE JCNFLG,(TCP%WT)	; Did we assign one?
	 CALL RELWTB		; Release it
	SKIPA T1,[-1,,ELT+^D16]	; "No space right now"
MAKBF9:	HRROI T1,ELP+^D15	; "Bad buffer arg(s)"
MAKBFX:	POP P,BFR
	RESTORE
	RET

; FREBFR(BFR)		Release resources used by a buffer

;			Called by a process doing a SEND, RECV
;			which waits for completion.  In this case USRBFE
;			(or USRBFF) places the complete buffer on the
;			TCPBDQ so it may be release by this routine in
;			the above JSYSs or by ABORT.

;BFR/	(Extended) Buffer
;
;	CALL FREBFR
;Ret+1:	Always

FREBFR:	NOSKED
	LOAD T1,BIDX,(BFR)	; Get the wait bit index
	SETZRO BIDX,(BFR)	; Indicate it has been released
	SKIPE T1		;#337 Have a bit to release?
	 CALL RELWTB		;#337 Actually release it
	MOVE T1,BFR		; Item to dequeue
	SKIPE (T1)		;#361 If buffer is still queued,
	 CALL DQ		;...Remove it from the done queue
	OKSKED
	CALLRET RETBLK		; Release the storage



	TNXEND
	END

