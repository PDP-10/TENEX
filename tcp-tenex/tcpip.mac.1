;Conditionialize DMOVEM's if KA, KI or F3.
;HWM, 18-May-82
;
;ISIMON:<ISI.TCP>TCPIP.MAC.3370 15-Sep-81 10:19:20, Edit by CHASE
;#337 BBN update:
; Fix: "No such TCB" check in INPRO4, TCP data test in PRCSY3,
; RX queue check at REMSE7, RSTADR, Treat RST to persistent
; open (w/timeout) as error at PRCRS1 [DMC] (supercedes temp edit #nnn)
; merge with multinet stuff
;ISIMON:<ISI.TCP>TCPIP.MAC.2 26-Jun-81 14:57:15, Edit by CHASE
;#nnn Don't be persistent after receiving a RST (so OPENs won't hang forever)
;<3A.TCP>TCPIP.MAC.3152    30-Sep-80 15:46:28    EDIT BY CHASE
;#1 In CKACKS, restore wildness of TCB bound by packet later found in error.


	SEARCH	INPAR,TCPPAR,PROLOG
	TTITLE	TCPIP
	SUBTTL	TCP Input Processor, Willaim W. Plummer, 27Jan77
	SWAPCD

COMMENT	!
	The INPUTPROCESSOR is called to process the queue
	of packets just input from the network.  Each packet is checked
	for proper format, protocol version, checksum, etc and if
	all is OK, the correct TCB is looked up.  IP may respond
	with an RST packet if the TCB is not there, it may ACK
	the packet if it is a duplicate, or it may process some
	things from the packet and queue it for the REASSEMBLER.
	In particular, IP processes the data acknowledged by the
	packet and sets the new window for PZ.

* INPROC ...  3 ...... Scan queue.  Check packet.  Lookup TCB.
  INPUT ....  5 ...... 2nd phase.  Called with valid TCB, PKT

  CHKSEQ ...  7 ...... Determine if packet should be processes
  CKSYNS ...  8 ...... Check sequence when synchronized
  CKACKS ...  9 ...... Check sequence when getting synchonized

  PRCPKT ... 10 ...... Process the packet
  REMCHK ... 14 ...... See if packet can be removed from RA queue
  PRCRST ... 15 ...... Process RST packet
  PRCWND ... 16 ...... Process Window information
* PRCACK ... 17 ...... Process ACK
  PRCURG ... 20 ...... Process URG
  PRCSYN ... 21 ...... Process SYN

  SNDRST ... 22 ...... Send and RST packet

* REMSEQ ... 23 ...... Delete packets from queue between two limits
* ABTCON ... 24 ...... Abort a connection
  ABTCO1 ... 25 ...... Scan TCP buffer done queue for ABTCON
  SYNAGN ... 26 ...... Put connection back in syncable state
  RSTADR ... 27 ...... Restore wild foreign adr fields after false start
  IPINI  ... 28 ...... Initialize Input Processor Process block
	!

IFKA <EXTERN BADPCT,CHKADD,CHKWND,CLEARQ,CLRBLK,DLAYPZ,DQ,DUPKCT,ENCPKT> ;|
IFKA <EXTERN FILHDR,FLSRBF,FLSSBF,FRCPKT,GETBLK,GETTSO,INITQ> ;|
IFKA <EXTERN INTSCR,IP,IPDLAY,IPPKCT,IPRNCT,IPUSE,LCKTTY,NQ> ;|
IFKA <EXTERN NULPKT,ONLCLT,OPDLAY,OPPKCT,OVRLAP,PKTEND>	;|
IFKA <EXTERN PRNPKT,PZPKCT,RA,RELWTB,RETBLK> ;|
IFKA <EXTERN RETPKT,RSTBFR,RSTRCT,RSTSCT,RX,SCRCLS,SIGNAL> ;|
IFKA <EXTERN SNDGAT,STATF,SYNRCT,TCPBDQ,TCPCKS,TCPIPQ,TODCLK> ;|
IFKA <EXTERN TRMPKT,TSTAMP,TVTOSP,ULKTTY,USRERR,USREVT,USRURG> ;|

; Process the input packet queue.
; Packets have been queue by IMPDV interrupt level.

;	CALL INPROC
;Ret+1:	always.


INPROC::STACKL<<ARGBLK,10>>	; Room for args to CHKADD
	PUSH P,PKT
	PUSH P,TPKT

; Top of main loop.  Get next packet to be processed.

INPRO0:	MOVE T1,TCPIPQ		; Get pointer to input queue head
;;;	NOSKED			; Interlock against Internet process
	LOAD PKT,QNEXT,(T1)	; Get pointer to first thing on queue
	CAIN PKT,0(T1)		; If that is the head itself
	 JRST INPROX		; Get out because it is empty (need OKSKED)
	SETSEC PKT,INTSEC	; Make extended address
	MOVE T1,PKT		; What to dequeue
	CALL DQ			; Remove from input queue
;;;	OKSKED
	SETZ TCB,		;#337 May be a bad packet
	LOAD T1,PIDO,(PKT)	; Internet Data Offset
	XMOVEI TPKT,PKTELI(PKT)	; Pointer to Internet packet
	ADD TPKT,T1		; Pointer to TCP packet
	CALL TCPCKS		; Compute checksum function
	JUMPE T1,INPRO2		; Jump if good

; Packet is bad in some way.  Flush it.

INPRO1:	AOS BADPCT		; Count bad packets
	MOVEI T1,5		; Code for "Flushed by IP"
	CALL PRNPKT
	CALL RETPKT		; Return the packet storage
	JRST INPRO0		; And hope for better luck next Pkt

; Packet is OK to process ...

INPRO2:	SKIPN STATF		; Taking statistics right now?
	 JRST INPRO4		; No
	CALL ONLCLT		; Source is using our time base too?
	JUMPE T1,INPRO3		; Cannot process its timestamp if not.
	CALL GETTSO		; Get the timestamp from the option
	STOR T1,PTS,(PKT)	; Store in better part of packet
	MOVEI T1,IPDLAY		; Select delay histogram
	CALL TSTAMP		; Process and reset the timestamp
	JRST INPRO4

INPRO3:	MOVE T1,TODCLK		; Current millisecond
	STOR T1,PTS,(PKT)	; Make timestamp OK for subsequent chks

INPRO4:	CALL PKTEND		; Get seq. number of End of Pkt plus 1
	STOR T1,PESEQ,(PKT)	; Keep in handy place

; Now setup for a call to CHKADD which looks up the TCB addressed
; by the pkt.  If it is found, CHKADD calls INPUT with said TCB locked.

	MOVEI T1,ARGBLK		; Arg area on stack (ref. via sec. 0)
	LOAD T2,PDP,(TPKT)	; Destination port
	MOVEM T2,0(T1)
	LOAD T3,PISH,(PKT)	; Source Host
	MOVEM T3,1(T1)
	LOAD T4,PSP,(TPKT)	; Source Port
	MOVEM T4,2(T1)
	SETZM 3(T1)		; No JCN.  Call is from IP.
	SETOM 4(T1)		; Wild TCB (Listen) is OK for match
	MOVE T2,[MSEC1,,INPUT]	; Function to call if found
	MOVEM T2,5(T1)
	SETZM 6(T1)		; No ARG1
	SETZM 7(T1)		; or ARG2
	CALL CHKADD		; Check the address of the packet
	CAMN T1,[-1]		; Packet disposed of successfully?
	 JRST INPRO0		; Yes. Do another one.
	PUSH P,T1
	MOVEI T1,5		; Code for "Flushed by IP"
	CALL PRNPKT
	POP P,T1
	JN PRST,(TPKT),INPRO5	; Don't respond to RST!
	HRRZ T2,T1		; Get just the error portion
	CAIE T2,EFP+7		;#337 Is it "No such TCB" ?
	 CAIN T2,ELP+7		;#337 Is it "No such TCB" ?
	  SETZ TCB,0		;#337 Yes.  TCB used as flag to SNDRST
	CALL SNDRST		; Reply with an RST Packet

; Done with packet.

INPRO5:	CALL RETPKT		; Give back the storage
	JRST INPRO0		; And process some more packets

; Packet queue completely processed.

INPROX:
;	OKSKED			;#337
	POP P,TPKT
	POP P,PKT
	RESTORE
	RET

; INPUT   2nd phase of InputProcessor.  Called via CHKADD from INPROC

;PKT/	(Extended) Internet Packet Pointer
;TPKT/	(Extended) TCP Packet Pointer
;TCB/	(Extended) Locked connection block
;
;	CALL INPUT
;Ret+1:	Always.  T1 has -1 if Pkt was handled OK, or error code if not

INPUT:	LOCAL <TESTB>
	LOAD T1,TSSYN,(TCB)	; State of Send synchronization
	LOAD T2,TRSYN,(TCB)	; State of Recv synchronization
	CAIN T1,NOTSYN
	CAIE T2,NOTSYN
	CAIA			; Still open in some respect
	 JRST INPUTF		; Packet on closed connection.
	CALL CHKSEQ		; See if properly sequenced
	MOVEM T1,TESTB		; Save the result
	HLRZ T2,TESTB
	CAMN TESTB,[-1]		; TRUE ?
	 JRST INPUT3
	CAIN T2,ERR		; ERROR ?
	 JRST INPUT4
	CAIE T2,IGN		; IGNORABLE?
	CAIE T2,DUP		; DUPLICATE ?
	 JRST INPUT2		; NOTA -- Ignore it

; Duplicate received.

	AOS DUPKCT		; Count it.
	JE PACK,(TPKT),INPUT1	; No ACK.  Forget the following.
	JN PRST,(TPKT),INPUT1	; Don't process ACK from RST packet
	LOAD T1,PACKS,(TPKT)	; ACK sequence from Packet
	CALL PRCACK		; Process the ACK

INPUT1:	CALL NULPKT		; Does the packet have any contents
	JUMPN T1,INPUT2		; Jump if null
	CALL FRCPKT		; Generate an ACK for the DUP

; All packets except RESET and good ones come here

INPUT2:	MOVEI T1,6		; IP code
	CALL PRNPKT
	CALL RETPKT		; Release the storage space
	JRST INPUTT		; Return true to say it's been handled

; Handle normal, acceptable packet

INPUT3:	LOAD T1,PIDH,(PKT)	;#337 Get which incarnation he knows us under
	STOR T1,TLH,(TCB)	;#337 Stick it away
	CALL PRCPKT		;#337 Process the packet
	AOS IPPKCT		; Count as Processed by IP
	JRST INPUTT		; and return TRUE


; CHKADD said this packet is in error -- no TCB etc

INPUT4:	MOVEI T1,3		; IP code
	CALL PRNPKT
	HRRO T1,TESTB		; -1,,ERROR to return
	EXIT INPUTX

INPUTF:	TDZA T1,T1		; Return FALSE
INPUTT:	SETO T1,		; Return TRUE
INPUTX:	RESTORE
	RET

; CHKSEQ	Determie the validity of a packet on the basis of
;		sequence number, acknowledge number, synchronization
;		state, and the presence of SYN in the packet.

;PKT/	(Extended) Internet Packet Pointer
;TPKT/	(Extended) TCP Packet Pointer
;TCB/	(Extended) Locked connection block
;
;	CALL CHKSEQ
;Ret+1:	always with T1 having ERR,,0 , DUP,,0 or -1 if OK

CHKSEQ:	LOAD T1,TRSYN,(TCB)	; Recv state
	CAIN T1,SYNABL		; Listening?
	 JRST CKACKS		; Yes.  Validate using ACK sequence
	; Fall into CKSYNS

	; Fall into CKSYNS from CHKSEQ above

; CKSYNS	Check sequence number.  Used while receive sync is
;		established.  A packet sequenced within the receive
;		window is accepted; without is considered a duplicate.

; Stray SYNs on already synched connections are called DUPlicates
; and will cause a null packet to be emitted which contains the
; sequence we are sending on and the ACK sequence describing what we
; want to hear next.  This is enough information for the other end to
; be able to form an RESET packet which will flush this connection.  He
; would do this only if he had restarted recently.

;PKT/	(Extended) Internet Packet Pointer
;TPKT/	(Extended) TCP Packet Pointer
;TCB/	(Extended) Locked connection block
;
;	CALL CKSYNS
;Ret+1:	always. T1 has TRUE if pkt is OK to process, or an error code

CKSYNS:	JE PSYN,(TPKT),CKSYN1	; Jump if no stray SYN in packet.
	LOAD T1,TRSYN,(TCB)	; Get receive state
	LOAD T2,PSEQ,(TPKT)	; and sequence number from packet
	LOAD T3,TRIS,(TCB)	; and seq. number of original SYN recvd
	CAIN T1,SYNRCV		; In SYN-RECEIVED?
	CAMN T2,T3		; or just another copy of orig SYN?
	 JRST CKSYND		; Call it a dup. to get null pkt sent
	CALL SYNAGN		; Resync. the conn.  Other end crashed
	MOVSI T1,IGN		; Tell caller to ignore this packet
	EXIT CKSYNX

CKSYN1:	LOAD T1,TRLFT,(TCB)	; Left window edge
	LOAD T2,TRWND,(TCB)	; Width of window
	JE PRST,(TPKT),CKSYN2	; No window diddle if not RST in pkt
	SKIPN T3,T2		; If non-0, use it
	 MOVEI T3,1		; Otherwise diddle so RST gets done
	ADD T3,T1		; Compute Right plus 1 or width 1 window
	MODSEQ T3		; Keep within right number of bits
	LOAD T2,PSEQ,(TPKT)	; Get sequence number of packet
	CALL CHKWND		; Is RST within the window?
	JRST CKSYN9		; Go see

CKSYN2:	ADD T2,T1		; Right window edge plus 1
	MODSEQ T2
	LOAD T3,PSEQ,(TPKT)	; Packet sequence number
	LOAD T4,PESEQ,(PKT)	; Sequence number following Pkt
	CALL OVRLAP		; Pkt and window have common point(s)?
CKSYN9:	SKIPN T1		; Skip if yes
CKSYND:	MOVSI T1,DUP		; Call it a DUPlicate
CKSYNX:	RET			; From CHKSEQ

; CKACKS	Check ACK Sequence.  Validate pkt when not synchronized.

; When receive synchronization has not been established, the only
; acceptable packet is one which will establish receive synchronization.
; furthermore, if we have established send synchronization, the packet,
; if it acknowledges anything, must acknowledge something we have
; currently sent (eg, a SYN).

;PKT/	(Extended) Internet Packet Pointer
;TPKT/	(Extended) TCP Packet Pointer
;TCB/	(Extended) Locked connection block
;
;	CALL CKACKS
;Ret+1:	always. T1 having an error code else -1 if pkt is ok to process

CKACKS:	JN PACK,(TPKT),CKASE1	; Jump if packet ACKs something
	JE PSYN,(TPKT),CKASE2	;#1 Give error if no SYN and no ACK
	JRST CKASET		; SYN and no ACK.  Try to open conn.

CKASE1:	LOAD T1,TSSYN,(TCB)	; Get send state
	CAIN T1,SYNABL		; Have a Send Sequence to check?
	 JRST CKASE2		; Error if not waiting for SYN
	LOAD T1,TSLFT,(TCB)	; Get Send Left
	LOAD T2,PACKS,(TPKT)	; What the Packet ACKS
	LOAD T3,TSSEQ,(TCB)	; Current Send Sequence
	ADDI T3,1
	MODSEQ T3
	CALL CHKWND		; Does Pkt ACK someting outstanding?
	JUMPN T1,CKASET		; Return TRUE if so
CKASE2:	CALL RSTADR		; Restore Wild foreign address fields
	SKIPA T1,[ERR,,EFP+7]	; Give error
CKASET:	SETO T1,
	RET			; From CHKSEQ

; PRCPKT   Process Packet which has been determined to be acceptable

;PKT/	(Extended) Internet Packet Pointer
;TPKT/	(Extended) TCP Packet Pointer
;TCB/	(Extended) Locked connection block
;
;	CALL PRCPKT
;Ret+1:	always. No value returned.

PRCPKT:	LOCAL <OLDR,QP,QS>
	JE PRST,(TPKT),PRCPK1	; Jump if not a RESET Packet
	CALL PRCRST		; Process the reset
	JRST PRCPKR		; Return to caller.

PRCPK1:	JE PACK,(TPKT),PRCPK2	; Does the packet acknowledge anything?
	LOAD T1,PACKS,(TPKT)	; Yes.  Get the ack sequence
	CALL PRCACK		; And process the ACK

PRCPK2:	JE PURG,(TPKT),PRCPK5	; Contains urgent pointer?
	CALL PRCURG		; Yes.  Process that.


; See if there is anything to process in the packet
; If not return the storage and return to caller.

PRCPK5:	CALL NULPKT		; See if PKT is null
	JUMPN T1,PRCPKR		; Jump if so.  Return to caller.

; Process the leading controls if appropriate.

	JE PSYN,(TPKT),PRCPK7	; Jump if no SYN
	CALL PRCSYN		; Process the SYN

; Queue the Packet for the Reassembler.  The receive packet queue is
; basically ordered by sequence number, but may have partially
; overlapping segments on it.

PRCPK7:	CALL TRMPKT		; Trim it size or flush PKT for space
	JUMPE PKT,PRCPKX

	XMOVEI QS,TCBRPQ(TCB)	; Set scan pointer to Reassembly Q head
	JE TRPP,(TCB),PRCPK8	; Partial Pkt contains left. Skip it.
	LOAD QS,QNEXT,(QS)	; Get next packet after the partial one.
	SETSEC QS,INTSEC	; Make extended address

; Top of the search for right place to insert loop

PRCPK8:	LOAD QS,QNEXT,(QS)	; Get ptr to thing after scan pointer
	CAIN QS,TCBRPQ(TCB)	; If that is the head, all has been seen
	 JRST PRCPK9		; So insert just before the head (= end)
	SETSEC QS,INTSEC	; Make extended address
	LOAD T3,PIDO,(QS)	; Internet data offset
	XMOVEI T4,PKTELI(QS)	; Pointer to Internet portion
	ADD T4,T3		; Pointer to TCP portion
	LOAD T1,TRLFT,(TCB)	; Get Recv Left
	LOAD T2,PSEQ,(TPKT)	; Sequence of new packet
	LOAD T3,PSEQ,(T4)	; Sequence of current pkt on the queue
	PUSH P,T3		; Save sequence number around call
	CALL CHKWND		; New pkt fits before this one on queue?
	POP P,T3		; Recover sequence number for use below
	JUMPE T1,PRCPK8		; No. Advance queue scan ptr. Try next.

; Have a likely place to put the packet.  Be sure that we will not
; insert before one which contains left.

	MOVE T1,T3		; Sequence number of packet on queue
	LOAD T2,TRLFT,(TCB)	; Recv Left
	LOAD T3,PESEQ,(QS)	; End of packet + 1
	CALL CHKWND		; Left within this packet?
	JUMPN T1,PRCPK8		; Jump if so.  Look at next packet.

; Now QS points to where to insert the new packet (before QS).  Do
; checking to see if the packet to the left and packets to the
; right are completely contained by the packet being processed.
; Release storage of those which are.  This works well if retranmissions
; are equal to- or bigger than- the original transmissions.
; It does not worry about duplicates of (small) original transmissions
; which might be contained by packets already queued.
; N.B.  It works to replace a "partial packet" with a bigger one.


PRCPK9:	SETSEC QS,INTSEC	; Make extended address
	LOAD T1,QPREV,(QS)	; Get one just skipped (or header)
	CAIE T1,TCBRPQ(TCB)	; Avoid fiddling with the header
	 CALL REMCHK		; Check and maybe remove T1 from Q

PRCP9A:	HRRZ T1,QS		; Get current insert point
	CAIN T1,TCBRPQ(TCB)	; Is that the header?
	 JRST PRCP10		; Yes.  Don't check that.
	MOVE QP,QS		; Save as predecessor in case needed
	LOAD QS,QNEXT,(QP)	; Get next item on Q for next time
	SETSEC QS,INTSEC	; Make extended address
	MOVE T1,QP		; Check the current item
	CALL REMCHK		; Maybe delete it
	JUMPN T1,PRCP9A		; Jump if deleted (QS ok for next time)
	MOVE QS,QP		; Restore QS (point of insertion)

; Actually queue the packet for the Reassembler.

PRCP10:	MOVE T1,PKT		; Select the packet for EnQueueing
	MOVE T2,QS		; Where to enqueue it -- before QS.
	CALL NQ			; Enqueue the packet
	MOVEI T1,3		; Code for "processed by IP"
	CALL PRNPKT

; Now see if the Reassembler has anything to do.  Call it if so.

	LOAD T4,QNEXT,<+TCBRPQ(TCB)> ; Must be a pkt queued!
	SETSEC T4,INTSEC	; Make extended address
	LOAD T2,PESEQ,(T4)	; Fetch end sequence for what follows
	LOAD T3,PIDO,(T4)	; Internet data offset
	XMOVEI T4,PKTELI(T4)	; Pointer to Internet portion
	ADD T4,T3		; Pointer to TCP portion
	LOAD T3,PCTL,(T4)	; Get word containing control bits
	TXNE T3,<PSYN!PFIN>	; Some kind of control?
	 JRST PRCP11		; Yes.  RA must process it now.
	JN TRCB,(TCB),PRCP11	; Maybe if there is a partial pkt
	JN TTVT,(TCB),PRCP11	; No normal buffers for TVTs
	LOAD T1,QNEXT,<+TCBRBQ(TCB)> ; Pointer 1st buffer on queue
	CAIN T1,TCBRBQ(TCB)	; Empty?
	 JRST PRCPKX		; Yes.  RA cannot do anything.
PRCP11:	MOVE T3,T2		; Recover end sequence
	LOAD T1,PSEQ,(T4)	; Get sequence number of pkt
	LOAD T2,TRLFT,(TCB)	; Recv Left is the point of reassembly
	CALL CHKWND		; Did this packet fill the hole?
	JUMPE T1,PRCPKX		; Jump if not.  No need to run RA.
	$SIGNL(RA,0)		; Make Reassembler run now
	EXIT PRCPKX


; Here with packet which cannot be processed further.  Release storage.

PRCPKR:	MOVEI T1,6		; "Flushed by IP" code
	CALL PRNPKT		; Call Packet Printer
	CALL RETPKT		; Give back to free storage

PRCPKX:	RESTORE
	RET

; REMCHK	Check whether incoming packet contains a packet on a
;		reassembly queue.  If so, delete the Q'd packet.

;T1/	NOT EXTENDED pointer to packet on a reassembly queue
;PKT/	(Extended) Internet Packet Pointer (incoming pkt)
;TPKT/	(Extended) TCP Packet Pointer (incoming pkt)
;TCB/	(Extended) Locked connection block
;
;	CALL REMCHK
;Ret+1:	Always.  T1 non-0 if packet was deleted.

REMCHK:	LOCAL <QPKT>		; Holds pointer to queued packet
	MOVEM T1,QPKT
	SETSEC QPKT,INTSEC	; Make extended address
	LOAD T3,PIDO,(QPKT)	; Number of words of IN header
	XMOVEI T4,PKTELI(QPKT)	; Pointer to Internet portion
	ADD T4,T3		; Pointer to TCP portion
	LOAD T1,PSEQ,(T4)	; Start of queued packet
	LOAD T2,PESEQ,(QPKT)	; End + 1 of queued packet
	LOAD T3,PESEQ,(PKT)	; End + 1 of Pkt being processed
	LOAD T4,PSEQ,(TPKT)	; Start of packet being processed
	CAMN T1,T4		; Quick check for exact duplicate
	CAME T2,T3		; (Faster than OVRLAP)
	CAIA			; Have to use OVRLAP to be sure
	 TDZA T1,T1		; Fake false return from OVRLAP
	 CALL OVRLAP		; See if QPKT has something PKT does not
	JUMPN T1,REMCH9		; Jump if so.  Must keep both.
	MOVE T1,QPKT		; This packet is extra baggage.
	CALL DQ			; Remove it from the queue.
	PUSH P,PKT
	MOVE PKT,T1		; Put pointer in standard place
	CALL RETPKT		; Give up possibly full-size packet
	POP P,PKT
	SKIPA T1,[-1]		; Return true to say something was done
REMCH9:	SETZ T1,		; Return false to say nothing was done
	RESTORE
	RET

; PRCRST	Process a RESET packet

;PKT/	(Extended) Internet Packet Pointer
;TPKT/	(Extended) TCP Packet Pointer
;TCB/	(Extended) Locked connection block
;T1/	Error Code
;
;	CALL PRCRST
;Ret+1:	always

PRCRST:	AOS RSTRCT		; Count RSTs received
	LOAD T1,TSSYN,(TCB)	; Send state
	LOAD T2,TRSYN,(TCB)	; Recv state
	CAIN T1,FINSNT
	CAIE T2,NOTSYN
	 JRST PRCRS1		;#337 Need to tell user
	LOAD T1,PACKS,(TPKT)	; ACK Sequence from packet
	CALL PRCACK		; Process it.
	EXIT PRCRSX

PRCRS1: ;JRST PRCRS2
  REPEAT 0,<	; prevent hanging when SYNAGN forgets user open timeout
	JN TSOPN,(TCB),PRCRS2	; Jump if user thinks connection is open
	JE TSPRS,(TCB),PRCRS2	; Give error if not persistent
	CALL SYNAGN		; Start over.
	EXIT PRCRSX
  >

PRCRS2:	MOVEI T1,EFP+7		; "Connection RESET"
	CALL USRERR		; Tell user.
	MOVEI T1,EFP+7		; "Connection RESET"
	CALL ABTCON		; Abort the connection.  Flush bufs etc

PRCRSX:	RET

; PRCWND	Process Window Information from incoming packet

; We desire the most recently sent information to be that which is acted
; on.  Since retransmitted packets have more current information than
; when they were originally transmitted, the packet sequence is not a
; good basis for deciding if a given packet has more recent info.  In
; order to prevent lockups, window information must be processed out of
; sequence.

;PKT/	(Extended) Internet Packet Pointer
;TPKT/	(Extended) TCP Packet Pointer
;TCB/	(Extended) Locked connection block
;
;	CALL PRCWND
;Ret+1:	always.

PRCWND:	LOAD T1,TSWND,(TCB)	; The current window
	LOAD T2,PWNDO,(TPKT)	; The new window
	STOR T2,TSWND,(TCB)	; Set into the TCB
	JUMPN T1,PRCWNX		; Jump if window not closed previously
	JUMPE T2,PRCWNX		; Or not now open
	LOAD T3,PACKS,(TPKT)	; Get the ACK Sequence from the packet
	LOAD T4,TSLFT,(TCB)	; and Send Left from TCB
	CAME T3,T4		; Re-request for Left?
	 EXIT PRCWNX		; No.
	LOAD T1,QNEXT,<+TCBRXQ(TCB)>
	CAIN T1,TCBRXQ(TCB)	; Retransmit queue empty?
	 EXIT PRCWNX		; Yes.  No need for retranmitter to run
	$SIGNL(RX,0)		; Make Retransmitter run now
PRCWNX:	RET

; PRCACK	Delete acknowledged send data

; Called from IP while processing incoming packets and by BG if it
; needs to fake an ACK for a FIN.

;T1/	ACKnowledge sequence
;TCB/	(Extended) Locked Connection block
;
;	CALL PRCACK
;Ret+1:	always

PRCACK::LOCAL <ACKSEQ,LEFT,OLDR>
	MOVEM T1,ACKSEQ		; Save in good place
	LOAD T2,TSLFT,(TCB)	; Send Left
	MOVEM T2,LEFT		; Save in safe place
	EXCH T1,T2		; Put in desired ACs for CHKWND below
	LOAD T3,TSSEQ,(TCB)	; Get the current Send Sequence
	ADDI T3,1
	MODSEQ T3
	CALL CHKWND		; ACKs something outstanding?
	JUMPE T1,PRCACX		; Do no more if not

	JE TSURG,(TCB),PRCAC0	; Skip following if not in urgent send mode
	MOVE T1,LEFT		; Send left
	LOAD T2,TSURP,(TCB)	; Send urgent pointer
	SUBI T2,1		; Consider ACKd if ACK=URP
	MODSEQ T2		; Worry about 32-bit arithmetic
	MOVE T3,ACKSEQ		; Number being acknowledged
	CALL CHKWND		; See if URP is being ACKd
	JUMPE T1,PRCAC0		; Jump if not
	SETZRO TSURG,(TCB)	; Leave urgent send mode

PRCAC0:	LOAD OLDR,TSLFT,(TCB)	; Old Send Left
	LOAD T1,TSWND,(TCB)	; Old Send Window
	ADD OLDR,T1		; Compute Old Send Right
	MODSEQ OLDR
	CALL PRCWND		; Process Window info in packet

	LOAD T1,TSSYN,(TCB)	; Send State
	CAIE T1,SYNSNT
	 JRST PRCAC2		; No unACKd SYN to handle

	MOVEI T1,SYNCED
	STOR T1,TSSYN,(TCB)	; Set fully synched state on send side
	LOAD T2,TRSYN,(TCB)	; Recv state
	CAIE T2,SYNRCV
	 JRST PRCAC1
	STOR T1,TRSYN,(TCB)	; Make receive side open too
	JN TTVT,(TCB),PRCA0A	; Avoid RA since TVT not assigned
	$SIGNL(RA,0)		; Make RA remove any dangling SYN pkt
PRCA0A:	MOVEI T1,OK		; General success code
	CALL USREVT		; Pass the event to the user

PRCAC1:	JE TRPP,(TCB),PRCAC2	; If there is no partial pkt in RA
	$SIGNL(RA,0)		; Make Reassembler run now

PRCAC2:	STOR ACKSEQ,TSLFT,(TCB)	; ACK Sequence is our Send Left
	MOVEI T1,TCBRXQ(TCB)	; Retransmit queue
	SETSEC T1,INTSEC	; Make extended address
	MOVE T2,LEFT		; Old Left
	MOVE T3,ACKSEQ		; New Left
	SETZ T4,		; A send queue is being processed
	CALL REMSEQ		; Delete ACKed packets

; Now that the new Send Window location and extent have been set,
; determine if the Packetizer should be started.  This means there
; must be something waiting to be sent and window space to send it
; in and the connection state must be right.

PRCAC3:	LOAD T1,TSSYN,(TCB)	; Get send state
	CAIE T1,SYNCED		; Fully synchronized?
	 JRST PRCAC4		; No.  Don't start PZ

; Test for waiting output on TCP Virtual Terminal connection

	JE TTVT,(TCB),PRCA34	; Jump if not a TVT
	LOAD T2,TVTL,(TCB)	; Get the line number of the TVt
	JUMPE T2,PRCAC4		; Jump if not assigned yet
	CALL LCKTTY		; Bump share count
	 JUMPLE T2,PRCA33	; Inactive or becoming active
	PUSH P,T2		; Save the line block addr
	CALL TVTOSP		; Find out if anything waiting to go
	POP P,T2		; Recover addr of line block
	SKIPA
PRCA33:	 MOVEI T1,0		; No TTY means no characters
	PUSH P,T1		; Save the count
	CALL ULKTTY		; Undo the share count bump
	POP P,T1		; Get back the count
	JUMPG T1,PRCA35		; Something to be sent.  See if OK
	JRST PRCAC4		; Nothing to be sent.

; Test for waiting output on a normal TCP data connection

PRCA34:	JN TSCB,(TCB),PRCA35	; Jump if something wait to be sent
	LOAD T1,QNEXT,<+TCBSBQ(TCB)>
	CAIN T1,TCBSBQ(TCB)	; Any queued from user?
	 JRST PRCAC4		; Nothing to be sent

; Connection state is right and there is something waiting to be sent

PRCA35:	LOAD T1,TSLFT,(TCB)	; Get new Send Left
	LOAD T2,TSSEQ,(TCB)	; Get current Send Sequence
	LOAD T3,TSWND,(TCB)	; Get new Send Window
	ADD T3,T1		; Form new Send Right
	MODSEQ T3
	CALL CHKWND		; Send Seq between Old and New Rights?
	JUMPE T1,PRCAC4		; Jump if not.
	CALL FRCPKT		; Run PZ, but after RA

; See if packets which might have been made untransmittable due to
; Send Right moving backwards have now become transmittable.  Start
; The Retransmitter if so.  This is due to the "EOL bug" in version
; 2 protocol in which the sender has no idea of the size of the receive
; buffers and therefore cannot tell how many sequence number slots
; an EOL will absorb.

PRCAC4:	LOAD T1,QNEXT,<+TCBRXQ(TCB)>
	CAIN T1,TCBRXQ(TCB)	; Any packets on retransmit queue?
	 JRST PRCACX		; No
	MOVE T1,LEFT		; Old Left before ACK
	MOVE T2,OLDR		; Old right, before this ACK
	LOAD T3,TSSEQ,(TCB)	; Current send sequence
	CALL CHKWND		; Any pkts cutoff?
	JUMPE T1,PRCACX		; Jump if not
	MOVE T1,OLDR		; Right before this ACK,WND processed
	MOVE T2,ACKSEQ		; New Left due to this ACK
	LOAD T3,TSSEQ,(TCB)	; Current send sequence
	CALL CHKWND		; See if ACK has exposed any pkts
	JUMPE T1,PRCACX		; Jump if not
	MOVEI T1,RX		; What to signal -- the retransmitter
	MOVEI T2,0		; When to run it -- now
	CALL SIGNAL		; But after we finish here

PRCACX:	RESTORE
	RET

; PRCURG	Process URGENT pointer from packet

;TCB/	(Extended) pointer to locked connection block
;PKT/	(Extended) pointer to packet
;TPKT/	(Extended) pointer to TCP portion of packet
;
;	CALL PRCURG
;Ret+1:	Always.

PRCURG:	LOCAL <URGPTR>
	LOAD URGPTR,PSEQ,(TPKT)	; Sequence number of packet
	LOAD T1,PURGP,(TPKT)	; Offset to urgent pointer
	ADD URGPTR,T1		; Compute actual urgent pointer
	MODSEQ URGPTR		; Reduce to the right number of bits
	JN TRURG,(TCB),PRCUR1	; Already in urgent receive mode?
	STOR URGPTR,TRURP,(TCB)	; No.  Set receive urgent pointer
	SETONE TRURG,(TCB)	; Mark it as valid.
	CALL USRURG		; Signal user of urgent data waiting
	EXIT PRCURX

PRCUR1:	LOAD T1,TRLFT,(TCB)	; Receive Left pointer
	MOVE T2,URGPTR		; What packet says pointer is
	LOAD T3,TRURP,(TCB)	; Current Urgent pointer
	CALL CHKWND		; See if urgent pointer is "bigger"
	JUMPN T1,PRCURX		; Nothing to do if not
	STOR URGPTR,TRURP,(TCB)	; Update receive urgent pointer
PRCURX:	RESTORE
	RET

; PRCSYN	Process SYN in incoming packet

;PKT/	(Extended) Internet Packet Pointer
;TPKT/	(Extended) TCP Packet Pointer
;TCB/	(Extended) Locked connection block
;
;	CALL PRCSYN
;Ret+1:	always

PRCSYN:	LOAD T1,TRSYN,(TCB)	; Get receive state
	CAIN T1,FINRCV		; Ignore SYN if FIN Received
	 EXIT PRCSYX
	LOAD T2,TSSYN,(TCB)	; Get send state
	CAIE T2,SYNCED		; Send sync established?
	 JRST PRCSY2		; No.
	MOVEI T1,SYNCED
	STOR T1,TRSYN,(TCB)	; Make the state "synchronized"
	MOVEI T1,OK		; General success event code
	CALL USREVT		; Tell the user connection is open now
	JRST PRCSY3

PRCSY2:	MOVEI T1,SYNRCV		; SYN Received state
	STOR T1,TRSYN,(TCB)	; is new Receive state
	LOAD T2,PWNDO,(TPKT)	; Extract the window
	STOR T2,TSWND,(TCB)	; That is the (first) send window for us

PRCSY3:	LOAD T1,PSEQ,(TPKT)	; Get the packet sequence number
	STOR T1,TRIS,(TCB)	; Save for filtering duplicate SYNs
	STOR T1,TRURP,(TCB)	; Not in urgent receive mode
	ADDI T1,1		; Advance Recv.Left over SYN
	MODSEQ T1
	STOR T1,TRLFT,(TCB)	; That is the first Left for us

; If the Reassembler will not see this packet, get an ACK for it now.
; Otherwise, see to it that one is eventually generated.

	LOAD T1,PIPL,(PKT)	; Total Internet packet length in octets
	LOAD T2,PIDO,(PKT)	; Data offset in 32-bit words
	LOAD T3,PTDO,(TPKT)	; TCP data offset in 32-bit words
	ADD T2,T3		; Compute total header length
	ASH T2,2		; In bytes
	CAMLE T1,T2		;#337 Is there any data in TCP portion?
	 JRST PRCSY4		; Yes.  RA must see it.
	LOAD T1,PCTL,(TPKT)	; Get word containing control flags
	TXNE T1,<PFIN!PEOL>
	 JRST PRCSY4		; RA must see these
	CALL FRCPKT		; Force an ACK, now.
	JRST PRCSY5

PRCSY4:	CALL ENCPKT		; Encourage an ACK in the future
PRCSY5:	AOS SYNRCT		; Count SYNs received
PRCSYX:	RET

; SNDRST	Send a RESET Response to the Foreign TCP

;PKT/	(Extended) Internet Packet Pointer
;TPKT/	(Extended) TCP Packet Pointer
;TCB/	0 or (Extended) Locked connection block
;
;	CALL SNDRST
;Ret+1:	always

SNDRST:	STACKL <PKTACK,PKTDH>	;#337
	LOCAL <PKTSH,PKTSP,PKTDP,ENDPKT>
	PUSH P,PKT
	PUSH P,TPKT
	LOAD PKTSH,PISH,(PKT)	; Extract source of packet
	LOAD PKTSP,PSP,(TPKT)
	LOAD PKTDP,PDP,(TPKT)	; and destination port
	LOAD ENDPKT,PESEQ,(PKT)	; Get the end of the packet (plus 1)
	LOAD T1,PIDH,(PKT)	;#337 Get number he knew me by
	MOVEM T1,PKTDH		;#337 save for later
	LOAD T1,PACKS,(TPKT)	; Extract the ACK Sequence from PKT
	MOVEM T1,PKTACK

; Now we have tucked away all we need from the incoming packet.

	MOVEI T1,MINPSZ		; Minimum packet size
	CALL GETBLK		; Assign from free storage
	SKIPG PKT,T1		; Switch to considering the response pkt
	 JRST SNDRSX		; No.  Other end will try again.
	MOVEI T2,MINPSZ
	CALL CLRBLK		; Clear the Pkt

	MOVEI T1,<MINIHS+3>/4	; Size of minimum IN hdr
	STOR T1,PIDO,(PKT)	; Set as initial data offset
	; Insert any pertinent Internet options here
	LOAD T1,PIDO,(PKT)	; Get Internet data offset
	XMOVEI TPKT,PKTELI(PKT)	; Pointer to Internet portion
	ADD TPKT,T1		; Compute pointer to TCP portion
	MOVE T1,TODCLK		; "Now"
	STOR T1,PTS,(PKT)	; Set the timestamp
	MOVE T1,PKTSH		; Args to FILHDR
	MOVE T2,PKTSP
	MOVE T3,PKTDP
	MOVE T4,PKTDH		;#337
	CALL FILHDR		; Fill in all standard header info
	SETONE PRST,(TPKT)	; Set the RST bit
	STOR ENDPKT,PACKS,(TPKT); Arrange to ACK all of the input packet
	SETONE PACK,(TPKT)	; Set the ACK bit
	MOVE T1,PKTACK		; ACK Sequence from packet
	JUMPE TCB,SNDRS1	; if there is no TCB
	LOAD T1,TSSEQ,(TCB)	; Else use the right thing
SNDRS1:	STOR T1,PSEQ,(TPKT)	; As the Packet Sequence number
	MOVE T1,TODCLK		; "Now"
	STOR T1,PTG,(PKT)	; Store as Time Generated
	CALL TCPCKS		; Compute TCP packet checksum
	STOR T1,PTCKS,(TPKT)	; Set into packet
	MOVEI T1,2		; Fake OP
	SKIPN TCB
	MOVEI T1,7
	CALL PRNPKT		; Call the packet printer

SNDRS3:	AOS RSTSCT		; Count errors sent
	AOS PZPKCT		; Count Packetized packets
	AOS OPPKCT		; Count Output packets
	MOVEI T1,OPDLAY		; Select OP Delay Histogram
	SKIPE STATF		; Avoid overhead if not taking stats
	 CALL TSTAMP		; Process the timestamp

	CALL SNDGAT		; Send it to gateway. (NB: PPROG is 0)
SNDRSX:	POP P,TPKT
	POP P,PKT
	RESTORE
	RET

; REMSEQ    Remove packets from a queue which are between Left and Right

;T1/	(Extended) Queue head pointer
;T2/	Left
;T3/	Right
;T4/	Receive Queue Flag
;TCB/	(Extended) Locked connection block
;
;	CALL REMSEQ
;Ret+1:	always

REMSEQ::STACKL <NEXTRX,RECVF>
	LOCAL <Q,LEFT,RIGHT,NEXT>
	PUSH P,PKT
	PUSH P,TPKT
	ife	kaflg!kiflg!f3flg,<	;[hwm]
	DMOVEM T1,Q		; T1,T2 to Q,LEFT
>
	ifn	kaflg!kiflg!f3flg,<	;[hwm]
	MOVEM	T1,Q		;[HWM]
	MOVEM	T2,LEFT		;[HWM]
>				;[HWM]
	MOVEM T3,RIGHT		; T3 to RIGHT
	MOVEM T4,RECVF

	HRLOI T1,377777		; Infinity
	MOVEM T1,NEXTRX		; is first quess at next RX time
	LOAD NEXT,QNEXT,(Q)	; Get first thing on Queue (if any)
	SETSEC NEXT,INTSEC	; Make extended address

REMSE1:	MOVE PKT,NEXT		; Get the current pkt to standard place
	LOAD NEXT,QNEXT,(PKT)	; Set for next time
	SETSEC NEXT,INTSEC	; Make extended address
	CAMN PKT,Q		; Is this the queue Head?
	 JRST REMSE7		; Yes. Done.  Whole queue scanned.
	MOVE T1,LEFT
	LOAD T2,PESEQ,(PKT)	; End of packet plus one
	SUBI T2,1		; Seq. Num of last byte in packet
	MODSEQ T2
	MOVE T3,RIGHT
	CALL CHKWND		; Is end of packet within the window?
	JUMPN T1,REMSE2		; Yes.  Go delete the packet.
	LOAD T1,PXT,(PKT)	; Get the Transmit time
	LOAD T2,PRXI,(PKT)	; and current Retransmit interval
	ADD T1,T2		; Time of next retransmit
	CAMG T1,NEXTRX		; MIN with last time of next RX
	MOVEM T1,NEXTRX
	JRST REMSE1		; Continue scanning the queue

REMSE2:	MOVE T1,PKT
	CALL DQ			; Dequeue the packet from the queue
	SKIPE RECVF		; Processing receive packet queue?
	 JRST REMSE6		; Yes
	LOAD T1,PIDO,(PKT)	; Number of words in the IN header
	XMOVEI TPKT,PKTELI(PKT)	; Pointer to Internet portion
	ADD TPKT,T1		; Pointer to TCP portion
	JE PFIN,(TPKT),REMSE4	; Skip this part if not ACK of FIN
	MOVEI T1,NOTSYN		; Not Synchronized state (dead)
	STOR T1,TSSYN,(TCB)	; Set into TCB
	LOAD T1,TRSYN,(TCB)	; Get receive state
	CAIE T1,NOTSYN		; Also closed?
	 JRST REMSE4
	SKIPE INTSCR		; Running in Secure mode?
	 CALL SCRCLS		; Yes.  Send a Secure Close Option
	MOVEI T1,XLP+3		; "CLOSED" event code
	CALL USREVT		; Pass the word to the user

REMSE4:	JN PRXD,(PKT),REMSE6	; No statistics on RX'd packets
	MOVE T1,TODCLK		; "Now"
	LOAD T2,PTG,(PKT)	; Time packet was originally generated
	SUB T1,T2		; How long it took to ACK it
	LOAD T2,TMNRT,(TCB)	; Min Round Trip time
	CAMGE T1,T2		; Is this one shorter?
	 STOR T1,TMNRT,(TCB)	; Save new min
	LOAD T2,TMXRT,(TCB)	; MAX Round Trip time
	CAMLE T1,T2		; Is this longer?
	 STOR T1,TMXRT,(TCB)	; Save new max

REMSE6:	SETZRO PPROG,(PKT)	; Say no need for Pkt at program level
	JN PINTL,(PKT),REMSE1	; Jump if TCPNRB will do the RETBLK
	CALL RETPKT		; Return the storage to free area
	JRST REMSE1		; Go look at more of the queue

REMSE7:	SKIPE RECVF		;#337 Processing send retransmit queue?
	 JRST REMSEX		; No
	CAMN PKT,NEXT		; Queue empty now?
	 JRST REMSEX		; Yes.
	MOVEI T1,RX		; Select the Retransmitter
	MOVE T2,NEXTRX		; Computed next retransmit time
	SUB T2,TODCLK		; Convert to increment
	CALL SIGNAL		; Make the retransmitter run then

REMSEX:	POP P,TPKT
	POP P,PKT
	RESTORE
	RET

; ABTCON	Abort a connection

; Clears queues and forces send and receive buffers back to the user
; with the (argument) Code.  The connection is set to Not Synchronized.

; Called both from PRCRST and from the ABORT JSYS.

;TCB/	(Extended) Locked Connection Block
;T1/	Event Code
;
;	CALL ABTCON
;Ret+1:	always

ABTCON::LOCAL <CODE,DBQ>
	PUSH P,PKT
	MOVEM T1,CODE
	CALL FLSSBF		; Flush SEND buffers
	MOVE T1,CODE
	CALL FLSRBF		; Flush RECV buffers
ABTCOA:	LOAD T1,QNEXT,<+TCBRXQ(TCB)>	; Get first thing on Retrans Q
	CAIN T1,TCBRXQ(TCB)	; Is that the head itself?
	 JRST ABTCOB		; Yes.  The queue is now empty.
	SETSEC T1,INTSEC	; Make extended address
	CALL DQ			; Remove from the Retransmission queue
	SETZRO PPROG,(T1)	; Program level now has no claim on PKT
	JN PINTL,(T1),ABTCOA	; Jump if RLTCBF will return the space
	MOVE PKT,T1		; Put pointer in right place for RETPKT
	CALL RETPKT
	JRST ABTCOA

ABTCOB:	LOAD T1,QNEXT,<+TCBRPQ(TCB)>
	CAIN T1,TCBRPQ(TCB)
	 JRST ABTCOC
	SETSEC T1,INTSEC	; Make extended address
	CALL DQ
	MOVE PKT,T1
	CALL RETPKT
	JRST ABTCOB

ABTCOC:	MOVEI T1,QSZ		; Size of a queue head
	CALL GETBLK		; Queue head must be in Internet section
	 JUMPE T1,ABTCOD	;#337 Lose, need better way (lose memory)
	MOVEM T1,DBQ		; Save pointer to it
	CALL INITQ		; Initialize it
	NOSKED			; Prevent user from snatching bufs
	MOVE T1,DBQ
	CALL ABTCO1		; Collect up all dead ones
	OKSKED
	MOVE T1,DBQ
	MOVE T2,T1
	CALL CLEARQ		; Return all to free storage
	MOVE T1,DBQ
	CALL RETBLK		; Return storage for queue head

ABTCOD:	MOVEI T1,NOTSYN		;#337
	STOR T1,TSSYN,(TCB)	; Set Send state to Not Synchronized
	STOR T1,TRSYN,(TCB)	; Set Recv state to Not Synchronized
	MOVE T1,CODE
	CALL USREVT		; Pass the event to the user
	SKIPE INTSCR		; Running in Secure mode?
	 CALL SCRCLS		; Send a Secure Close Option
	POP P,PKT
	RESTORE
	RET

; ABTCO1(Q)		Release buffers from Buffer Done Queue

;T1/	(Extended) Pointer to a queue head
;TCB/	(Extended) Locked connection block
;NOSKED
;	CALL ABTCO1
;Ret+1:	Always.  No buffers on TCPBDQ owned by TCB

ABTCO1:	LOCAL <NXTBFR,DEADBQ>
	PUSH P,BFR
	MOVEM T1,DEADBQ
	MOVE NXTBFR,TCPBDQ	; Pointer to queue head
ABTCO2:	MOVE BFR,NXTBFR
	LOAD NXTBFR,QNEXT,(BFR)	; Get next item on the list
	SETSEC NXTBFR,INTSEC	; Make extended address
	CAMN BFR,TCPBDQ		; Back to head means done
	 JRST ABTCOX
	LOAD T1,BTCB,(BFR)	; Get owning TCB
	SETSEC T1,INTSEC	; Make extended address
	CAME T1,TCB		; It is this connection?
	 JRST ABTCO2		; Go try next
	MOVE T1,BFR		; Pointer to the item
	CALL DQ			; Remove it
	LOAD T1,BIDX,(BFR)	; Get the wait bit index
	CALL RELWTB		; Release it
	MOVE T1,BFR		; Pointer to the block again
	MOVEI T2,DEADBQ		; Where to stash the buffer for later
	CALL NQ			; Release when not NOSKED
	JRST ABTCO2

ABTCOX:	POP P,BFR
	RESTORE
	RET

; SYNAGN	Return a connection to Synchable state

;TCB/	(Extended) Locked Connection Block
;
;	CALL SYNAGN
;Ret+1:	always

SYNAGN:	PUSH P,BFR
	PUSH P,PKT
	CALL RSTADR		; Restore wild address fields

; Moving Send Left to Send Sequence makes the next incarnation of this
; connection different from the once which has just failed and is
; getting resynched.  Thus, RSTs caused by old copyies of the original
; SYN will be unacceptable and will not wipe out the new incarnation.

	LOAD T1,TSSEQ,(TCB)	; Send sequence = SYN + DATA
	STOR T1,TSLFT,(TCB)	; Where to begin next time.
	MOVEI T1,SYNABLE
	STOR T1,TRSYN,(TCB)	; Reset the Recv state
	LOAD BFR,TRCB,(TCB)	; Get current receive buffer
	JUMPE BFR,SYNAG1	; Jump if no receive current buffer
	SETSEC BFR,INTSEC	; Make extended address
	SETZRO TRCB,(TCB)	; Forget about it
	CALL RSTBFR		; Reset it to virgin state (hard to do)
	MOVE T1,BFR		; What to NQ
	MOVEI T2,TCBRBQ(TCB)	; The receive buffer queue
	SETSEC T2,INTSEC	; Make extended address
	LOAD T2,QNEXT,(T2)	; First thing on the queue
	SETSEC T2,INTSEC	; Make extended address
	CALL NQ			; Make the recycled buffer first again

SYNAG1:	SETZRO TRPP,(TCB)	; Forget about partially processed PKT

SYNAG2:	LOAD T1,QNEXT,<+TCBRPQ(TCB)>	; Receive Packet Queue
	CAIN T1,TCBRPQ(TCB)	; Empty now?
	 JRST SYNAG3		; Yes
	SETSEC T1,INTSEC	; Make extended address
	CALL DQ			; Dequeue the packet
	MOVE PKT,T1		; Put in standard place
	CALL RETPKT		; Return possibly full size packet
	JRST SYNAG2

SYNAG3:	MOVEI T1,SYNABL
	STOR T1,TSSYN,(TCB)	; Reset Send state
	LOAD BFR,TSCB,(TCB)	; Get current send buffer
	JUMPE BFR,SYNAG4	; Jump if none
	SETSEC BFR,INTSEC	; Make extended address
	SETZRO TSCB,(TCB)	; Forget there was one
	CALL RSTBFR		; Reset the buffer
	MOVE T1,BFR
	MOVEI T2,TCBSBQ(TCB)	; Send buffer queue
	SETSEC T2,INTSEC	; Make extended address
	LOAD T2,QNEXT,(T2)	; First thing on the queue
	CALL NQ			; Make recycled buffer first again

SYNAG4:	MOVEI T1,TCBRXQ(TCB)	; Retransmit queue
	SETSEC T1,INTSEC	; Make extended address
	MOVE T2,T1		; Almost never full size packets!
	CALL CLEARQ		; Clear it
	JE TSPRS,(TCB),SYNAGX	; Check if this end is initiator
	JN <TWLDN,TWLDT,TWLDP>,(TCB),SYNAGX	; Don't send if no 4N host
	MOVEI T1,^D2000		; 2 second delay to prevent loop if
	CALL DLAYPZ		; Foreign TCB non-x and RST causing us to loop
SYNAGX:	POP P,PKT
	POP P,BFR
	RET

; RSTADR(TCB)		Restore wild address fields

; A delayed duplicate may cause a foreign TCP to emit an RST packet to
; kill what it thinks is a half-open connection here.  If in fact the
; connection has been closed and deleted, there may be a listening
; TCB which CHKADD will find and bind to the source of the RST.
; Subsequently the TCP will just flush the RST and will not emit any
; response to it.  This routine is called to undo the temporary binding.

;TCB/	(Extended) Locked connection block
;
;	CALL RSTADR
;Ret+1:	Always.

RSTADR:	JE TWLDN,(TCB),RSTAD1	; OPENned with wild Net?
	SETZRO TFHN,(TCB)	; Yes.  Put it back.
RSTAD1:	JE TWLDT,(TCB),RSTAD2	; Wild TCP?
	SETZRO TFHT,(TCB)	;#337
RSTAD2:	JE TWLDP,(TCB),RSTADX	;#337 Wild Port?
	SETZRO TFP,(TCB)	;#337
RSTADX:	RET

; IPINI			Initialize IP process block

;	CALL IPINI
;Ret+1:	Always

IPINI::	LOCAL <PRC>
	MOVEI PRC,IP		; Pointer to process block
; Following are guards against really bad things
	SETZM PRCQ(PRC)		; Be sure queue is empty.
	SETZM PRCLCK(PRC)	; Should never try to lock IP lock!
	SETZM PRCWAK(PRC)	; Be sure to run it promptly!
	SETZM PRCQOF(PRC)	; Clear unused cells
	SETZM PRCWOF(PRC)
	XMOVEI T1,INPROC	; Routine address
	MOVEM T1,PRCROU(PRC)	; Set into the control block
	MOVEI T1,IPRNCT		; Run counter address
	MOVEM T1,PRCRNC(PRC)
	MOVEI T1,IPUSE		; CPU usage meter
	MOVEM T1,PRCTMR(PRC)
	RESTORE
	RET


	TNXEND
	END

