;<MICHAEL>GCRASH.MAC;13    10-JUL-74 16:53:20	EDIT BY MICHAEL
	TITLE GCRASH SAVES IMAGE OF CRASHED MONITOR
;
;	THIS PROGRAM SEARCHES CRASH SAVE SPACE (OUTSIDE OF PUBLIC FILE
;	SYSTEM), SAVES EACH CRASH IMAGE AS A .SAV FILE UNDER A
;	NAME OF THE FORMAT <SYSTEM>HBBBBBB.DD-MMM-YYY/HHMM.  WHERE:
;	BBBBBB IS THE BUGHLT ADDRESS, DD-MMM-YYY/HHMM IS THE TIME/DATE
;	STAMP OF THE CRASH.  THIS PROGRAM SHOULD BE CALLED BY JOB0
;	UPON SYSTEM INITIALIZATION.
;
;
;	Michael Heathman  7/11/74
;
	SEARCH STENEX

	OPDEF CALL [PUSHJ P,]
	OPDEF RET [POPJ P,]

Z=0
A=1
B=2
C=3
D=4
E=5
F=6
G=7
AA=10
BB=11
CC=12
DD=13
EE=14
FF=15
GG=16
P=17
	SUBTTL PARAMETERS
;
;	THESE PARAMETERS ARE LISTED IN CRSHSV.MAC AND DSKPAK.MAC
;
NSECPG=4		;NUMBER OF PAGES PER SECTOR
NCSHSV=3		;NUMBER OF CRASH DUMP AREAS
CSHPAG=6*^D406*^D200-<<5*240+1>*NSECPG>-<<NCSHSV*1000+1>*NSECPG>
			;address of control page
CSHIMG=CSHPAG+NSECPG	;START OF CRASH DUMP AREAS, LINEAR ADDRESS
LCSHSV=1000*NSECPG	;SIZE (IN SECTORS) OF EACH DUMP AREA
;
;	THESE PARAMETERS ARE LISTED IN CRSHSV.MAC
;
NBCSHW=<<LCSHSV+NSECPG-1>/NSECPG+^D35>/^D36 ;NUMBER BIT WORDS/CRASH
NCSHWD=NBCSHW*NCSHSV	;NUMBER OF USED WORDS ON CONTROL PAGE
CSHCOR=20		;STARTING CORE ADDRESS FOR DUMP
NCSHDT=13		;number of crash data words
;
;	THESE PARAMETERS ARE USED ONLY HERE
;
MAXCOR=774777		;PRESENTLY DUMP ALL REAL CORE
NPDL=20	       		;PDL SIZE
HICRSH=776000		;RELOCATED CODE ADDRESS
TADDAY=5		;offset into cshdat for TADDAY
TADSEC=6		;  "      "     "    "  TADSEC
TODCLK=7		;  "      "     "    "  TODCLK
BUGHLT=10		;OFFSET INTO CSHDAT FOR BUGHLT ADDRESS
CSHTIM=11		;OFFSET INTO CSHDAT FOR CRASH TIME
CSHWDA=12
	SUBTTL INIT INITIALIZE, AND BLT CODE TO UPPER CORE

START:	RESET
	HRLI Z,BCRASH		;BECAUSE LOADER/LINK10 WILL NOT
	HRRI Z,CRASH0		;LOAD INTO UPPER CORE PROPERLY
	BLT Z,ECRASH		;BLT CODE THERE AT RUNTIME
	JRST CRASH0		;RUNTIME! GO TO IT
	SUBTTL RUNTIME RELOCATED CODE
BCRASH:	PHASE HICRSH
CRASH0:	MOVE P,[IOWD NPDL,PDL]
	CALL ICTL		;READ IN CONTROL PAGE
	 JRST CRASH9		;ABORT ON READ ERROR

	MOVE E,[XWD -NCSHSV,CSHWDS] ;SET UP COUNTER INTO CONTROL PAGE
CRASH1:	SKIPGE (E)		;LOOK FOR RECENT CRASH IMAGE
	 JRST CRASH2		;FOUND ONE (PAGES USED BITS ON)
	SETZM (E)
	HRLI Z,(E)		;DIDN'T FIND ONE YET, KEEP LOOKING
	HRRI Z,1(E)		;BUT ZERO OUT BIT TABLE TO INSURE THAT
	ADDI E,NBCSHW-1		;AREA AVAILABE FOR CRASH DUMPING
	BLT Z,(E)
	AOBJN E,CRASH1		;LOOK FOR MORE CRASHES
	 JRST CRASH8		;ALL CRASH AREAS SEARCHED, GO FINISH
	SUBTTL GET CRASH
;
;	READS CRASH IN, PAGE AT A TIME WITH DSKOP, INTO LOWER CORE
;
CRASH2:	MOVS A,E		;SET UP DISK ADDRESS OF CRASH IMAGE
	MOVEI A,NCSHSV(A)
	IMULI A,LCSHSV
	ADD A,[CSHIMG]
;
;	SET UP LOOP CUT OFF ADDRESS
;
	MOVEI D,LCSHSV		;LOOP TO RUN FOR LENGTH OF ONE CRASH
	ADD D,A
;
;	SET UP INITIAL BLOCK LENGTH FOR READ
;
	MOVEI C,CSHCOR		;FROM FIRST LOCATION
	MOVE B,C		;TO END OF FIRST PAGE IS FIRST
	ANDI B,777		;BLOCK LENGTH TO READ
	SUBI B,1000
	MOVNS B
;
;	SET UP BIT TABLE INDEXES
;
	MOVSI F,(1B0)		;BIT INDEX INTO WORD
	PUSH P,E		;SAVE WORD INDEX INTO TABLE
	HRLI	E,-NBCSHW
;
;	READ A PAGE LOOP
;
CRASH4:	PUSH P,A		;SAVE DSK ADR INDX
	TLO A,(1B0)		;LINEAR ADDRESS BIT
	DSKOP			;IF YES, READ IT IN
	SKIPE A			;ANY ERRORS?
	 ANDCAM F,(E)		;YES, TURN OFF GOOD BIT
	POP P,A
;
;	INCREMENT DISK ADDRESS INDEX
;
	ADDI A,NSECPG		;TO NEXT PAGE
	CAML A,D		;OUTSIDE OF CRASH IMAGE AREA?
	 JRST CRASH5		;YES WE'RE THROUGH
;
;	INCREMENT CORE ADDRESS
;
	ADDI C,1000		;GO TO NEXT PAGE IN CORE
	TRZ C,777		;MAKE SURE IT IS A PAGE
	CAML C,[MAXCOR]		;INSIDE LOWER CORE BOUNDRY
	 JRST CRASH5		;OTHERWISE WE'RE TRHOUGH
;
;	RESET INPUT BLOCK LENGTH
;
	MOVEI B,1000		;TO ONE PAGES WORTH
;
;	INCREMENT BIT TABLE INDEXES
;
	LSH F,-1		;INC BIT POINTER
	JUMPN F,CRASH4		;IF OK, GO GET NEXT PAGE

	MOVSI F,(1B0)		;OTHERWISE, RESET BIT INDEX
	AOBJN E,CRASH4		;AND INC WORD INDEX, AND GET NEXT PAGE
;
;	THROUGH READING PAGES FOR THIS IMAGE, CREATE .SAV FILE NAME
;
CRASH5:	POP P,E			;GET POINTER TO START OF BIT TABLE FOR
				;THIS FILE
	MOVE D,26		;GET POINTER TO CRASH DATA
;
;	SEE IF CRASH DATA PAGE(S) WERE READ
;
	MOVEI B,(D)		;FIND PAGE FOR START OF CRASH DATA
	LSH B,-^D9
	IDIVI B,^D36
	ADDI B,(E)
	MOVSI F,(1B0)
	MOVNS C
	LSH F,(C)
	TDNN F,(B)		;START OF CRASH DATA OK?
	 JRST CRASH7		;NO, SKIP SAVING THIS FILE

	MOVEI C,11(D)		;SEE IF END OF CRASH DATA, AND THUS ALL
	TRZ C,777000		;OF SAME, IS OK
	CAIL C,11		;IF END OF CRASH DATA ON SAME PAGE AS
	 JRST CRASH6		;START, THEN ALL IS OK
	LSH F,-1		;ELSE, LOOK AT NEXT PAGE
	JUMPN F,.+3
	AOJ B,
	MOVSI F,(1B0)
	TDNN F,(B)		;END OF CRASH DATA OK?
	 JRST CRASH7		;NOPE, ABORT THIS SAVE
;
;	CREATE NAME STRING FROM BUGHLT ADDRESS, AND CRASH TIME
;
CRASH6:	MOVE A,[POINT 7,CSHNAM] ;SET UP POINTER TO NAME AREA
	HRROI B,[ASCIZ /<SYSTEM>CRASH./] ;set up file name
	SETZ C,
	SOUT
;
;	EXPAND BUGHLT ADDRESS INTO STRING
;
	HRRZ B,BUGHLT(D)
	MOVEI C,10		;EXPAND TO OCTAL NUMBER
	NOUT
	 0			;SHOULDNT BE ANY ERRORS, HAW HAW!

	MOVEI B,"-"
	IDPB B,A

	SKIPN B,CSHTIM(D)	;was crash time already figued out?
	 JRST  [SKIPGE TADSEC(D)	;no, was time set before crash?
		 JRST  [SETO B,			;no, use present time
			JRST .+1]
		MOVE B,TODCLK(D)	;yes, figure out crash time
		IDIVI B,^D1000		;1000. milsec/sec
		ADDI B,^D10		;add ten secs for when clock off
		ADD B,TADSEC(D)		;convert TODCLK and offset to
		IDIVI B,^D24*^D3600	;internal form time and date
		ADD B,TADDAY(D)
		HRLI B,(C)
		MOVSS B
		JRST .+1]
	MOVSI C,(1B3+1B6+1B8+1B9+1B17)	;JUST PRINT DATE FIRST
	ODTIM

	MOVEI C,"-"		;SEPARATE DATE AND TIME
	IDPB C,A

	MOVSI C,(1B0+1B10+1B12+1B17) ;GET TIME W/O ":" OR SECONDS
	ODTIM

	SETZ C,			;STRING TERMINATOR
	IDPB C,A
	SUBTTL SAVE CORE ON .SAV FILE NOW

	MOVSI A,(1B17)		;GET JFN
	HRROI B,CSHNAM
	GTJFN
	 JRST CRASH7		;ABORT ON ANY ERRORS, SHOULDNT BE ANY

	HRLI A,400000		;SAVE THIS FORKS LOWER CORE
	MOVE B,[XWD <CSHCOR/1000>-<<MAXCOR+NCSHWD+777>/1000>,520000+<CSHCOR/1000>]
	SETZ C,
	SSAVE

	RLJFN			;FINISHED WITH THIS JFN
	 CAI			;IGNORE ERRORS
	SUBTTL END VARIOUS LOOPS
;
;	FINISHED WITH ONE FILE
;
CRASH7:	SETZM (E)
	HRLI Z,(E)		;INCREMENT BIT TABLE POINTER TON NEXT AREA
	HRRI Z,1(E)		;AND ZERO OUT SAVED AREA FOR REUSE
	ADDI E,NBCSHW-1
	BLT Z,(E)

	CALL OCTL		;SAVE CHANGE ON DISK IN CASE OF CRASH
	 CAI			;IGNORE WRITE ERRORS

	AOBJN E,CRASH1		;TRY FOR MORE AREAS
;
;	FINISHED LOOKING AT ALL SAVE AREAS
;
CRASH8:	CALL OCTL		;INSURES CONTROL PAGE ZEROED
	 CAI			;IGNORE WRITE ERRORS
CRASH9:	HALTF			;FINISHED
	SUBTTL CONTROL PAGE I/O ROUTINE

OCTL:	MOVE B,[XWD 10,NCSHWD]	;SET UP FOR WRITE
	CAIA
ICTL:	MOVEI B,NCSHWD		;SET UP FOR READ
	MOVE A,[1B0+CSHPAG]
	MOVEI C,CSHWDS
	DSKOP
	SKIPN A			;PASS ERRORS BACK
	 AOS (P)
	RET
	SUBTTL STORAGE

PDL:	BLOCK NPDL		;STACK
CSHWDS=MAXCOR+1			;PUT CONTROL PAGE BUFFER RIGHT AFTER
				;IMAGE SO AS TO SAVE PAGE STATUS W/ IMAGE
CSHNAM:	BLOCK 10		;.SAV FILE NAME
DSKERR:	0

	LIT			;DUMP LITERALS INTO PHASED CODE AREA

ECRASH:	DEPHASE
	END START
