BEGIN

COMMENT  	SYSTEM FILE SCAN
  		by Michael O. Mann
		at SUMEX-AIM
		August  1974



	This program will scan through the whole TENEX file system or 
any subset of the file system. It can scan by file Name or by Extention.
It can scan for Perarment file or for temporary file which are eighter 
deleted or un-deleted.
	The program will collect the following data as it scan through 
the file system.

	Number of different file NAMEs (or EXTENTIONs)
	Number of different VERSIONs of files 
	Number of File PAGEs
	Latest Creation Date
	Aveage Creation AGE
	Latest Write Date
	Oldest Write Date
	Aveage Creation AGE
	Aveage Number of Writes
	Latest Read Date
	Aveage Read AGE
	Aveage Number of Reads
;

REQUIRE "<><>" DELIMITERS;


EXTERNAL INTEGER !SKIP!;
INTEGER PCHAN,WCHAN,RCHAN;
INTEGER INDEX!FLAG,STAR!FLAG;
INTEGER STAR!CHAN;
INTEGER SLOC,DLOC,ELOC,ACTIVE,REACTIVE,SACTIVE;
INTEGER  TODAY,NOW;

LABEL  MAIN1,MAIN2;

STRING CALLFILE;


BOOLEAN COLLECT,N!E!OK,DONE;
BOOLEAN DEL!F!ONLY, N!OR!E;
BOOLEAN TMP!F!ONLY,BY!G!L,LISTT;
STRING LISTTS;

INTEGER ARRAY FDB[0:24];

INTEGER PL;
DEFINE  PLEN = <50> ;

BOOLEAN LOGOFL,DETAFL;

BOOLEAN VERBOSE;
DEFINE V	=<IF VERBOSE THEN >;

DEFINE MAX!SYS =<500>;
DEFINE MAX!DIRS=<300>;
DEFINE MAX!EXTENTS=<150>;

DEFINE DEFAULT!FLAG =<'101121000000>;
DEFINE DATE!FORMAT=<'001440000000>;

DEFINE BIT(N)	=<'400000000000 LSH -N>;

DEFINE C =<COMMENT>;
DEFINE DIGITS = <"0123456789">;
DEFINE ULETTERS = <"ABCDEFGHIJKLMNOPQRSTUVWXYZ">;
DEFINE LLETTERS = <"abcdefghijklmnopqrstuvwxyz">;
DEFINE PPS	= <"[]-/#!%&">;
DEFINE BELL =<'7>;
DEFINE BELLS=<'7 & '7 & '7 & '7 & '7 & '7>;
DEFINE CRLF = <'12 & '15>;
DEFINE ALTMODE = <'33>;
DEFINE SCRBRK = 18;


DEFINE  G!DIR	=<JFNS(STAR!CHAN,BIT(3))>;
DEFINE  G!NAM	=<JFNS(STAR!CHAN,BIT(6))>;

DEFINE  G!EXT	= < IF N!OR!E 

			THEN	JFNS(STAR!CHAN,BIT(6)) 
			ELSE	JFNS(STAR!CHAN,BIT(9)); 
		   >;

DEFINE  G!VER	=<JFNS(STAR!CHAN,BIT(12))>;
DEFINE  G!ALL	=<JFNS(STAR!CHAN,'111110000001)>;

DEFINE  FDBTMP 	=<(FDB[1 ] LAND BIT(0))>;
DEFINE  FDBDEL	=<FDB[1 ] LAND BIT(3)>;
DEFINE  FDBNXF	=<FDB[1 ] LAND BIT(4)>;
DEFINE  FDBCRV	=<FDB[11]>;
DEFINE  FDBWRT	=<FDB[12]>;
DEFINE  FDBREF	=<FDB[13]>;
DEFINE  FDBCNTW	=<(FDB[14] LSH -18)>;
DEFINE  FDBCNTR	=<(FDB[14] LAND '777777)>;
DEFINE  H!DAY  (DAY!TIME) =<(DAY!TIME LSH -18)>;	 
DEFINE  H!TIME (DAY!TIME) =<(DAY!TIME LAND '777777)>;


STRING  ARRAY	E!EXT!NAME[1:MAX!EXTENTS];
INTEGER ARRAY	E!FILES[1:MAX!EXTENTS];
INTEGER ARRAY	E!VERSIONS[1:MAX!EXTENTS];
INTEGER ARRAY	E!PAGES[1:MAX!EXTENTS];
INTEGER ARRAY	E!AGE[1:9,1:MAX!EXTENTS];
REAL    ARRAY E!COUNT[1:2,1:MAX!EXTENTS];


STRING  ARRAY	D!DIR!NAME[1:MAX!DIRS];
INTEGER ARRAY	D!EXTENTS[1:MAX!DIRS];
INTEGER ARRAY	D!FILES[1:MAX!DIRS];
INTEGER ARRAY	D!VERSIONS[1:MAX!DIRS];
INTEGER ARRAY	D!PAGES[1:MAX!DIRS];
INTEGER ARRAY	D!AGE[1:9,1:MAX!DIRS];
REAL    ARRAY D!COUNT[1:2,1:MAX!DIRS];

STRING  ARRAY	S!EXT!NAME[1:MAX!SYS];
INTEGER ARRAY	S!DIRS [1:MAX!SYS];
INTEGER ARRAY	S!FILES[1:MAX!SYS];
INTEGER ARRAY	S!VERSIONS[1:MAX!SYS];
INTEGER ARRAY	S!PAGES[1:MAX!SYS];
INTEGER ARRAY	S!AGE[1:9,1:MAX!SYS];
REAL    ARRAY S!COUNT[1:2,1:MAX!SYS];

DEFINE EEN	=<E!EXT!NAME[ELOC]>;
DEFINE EF	=<E!FILES[ELOC]>;
DEFINE EV	=<E!VERSIONS[ELOC]>;
DEFINE EP	=<E!PAGES[ELOC]>;

DEFINE EAO	=<E!AGE[1,ELOC]>;
DEFINE EAN	=<E!AGE[2,ELOC]>;
DEFINE EAA	=<E!AGE[3,ELOC]>;

DEFINE EAOW	=<E!AGE[4,ELOC]>;
DEFINE EANW	=<E!AGE[5,ELOC]>;
DEFINE EAAW	=<E!AGE[6,ELOC]>;

DEFINE EAOR	=<E!AGE[7,ELOC]>;
DEFINE EANR	=<E!AGE[8,ELOC]>;
DEFINE EAAR	=<E!AGE[9,ELOC]>;

DEFINE ECW	=<E!COUNT[1,ELOC]>;
DEFINE ECR	=<E!COUNT[2,ELOC]>;

        
DEFINE SEN	=<S!EXT!NAME[SLOC]>;
DEFINE SD	=<S!DIRS[SLOC]>;
DEFINE SF	=<S!FILES[SLOC]>;
DEFINE SV	=<S!VERSIONS[SLOC]>;
DEFINE SP	=<S!PAGES[SLOC]>;

DEFINE SAO	=<S!AGE[1,SLOC]>;
DEFINE SAN	=<S!AGE[2,SLOC]>;
DEFINE SAA	=<S!AGE[3,SLOC]>;

DEFINE SAOW	=<S!AGE[4,SLOC]>;
DEFINE SANW	=<S!AGE[5,SLOC]>;
DEFINE SAAW	=<S!AGE[6,SLOC]>;

DEFINE SAOR	=<S!AGE[7,SLOC]>;
DEFINE SANR	=<S!AGE[8,SLOC]>;
DEFINE SAAR	=<S!AGE[9,SLOC]>;

DEFINE SCW	=<S!COUNT[1,SLOC]>;
DEFINE SCR	=<S!COUNT[2,SLOC]>;

 
DEFINE DDN	=<D!DIR!NAME[DLOC]>;
DEFINE DE	=<D!EXTENTS[DLOC]>;
DEFINE DF	=<D!FILES[DLOC]>;
DEFINE DV	=<D!VERSIONS[DLOC]>;
DEFINE DP	=<D!PAGES[DLOC]>;

DEFINE DAO	=<D!AGE[1,DLOC]>;
DEFINE DAN	=<D!AGE[2,DLOC]>;
DEFINE DAA	=<D!AGE[3,DLOC]>;

DEFINE DAOW	=<D!AGE[4,DLOC]>;
DEFINE DANW	=<D!AGE[5,DLOC]>;
DEFINE DAAW	=<D!AGE[6,DLOC]>;

DEFINE DAOR	=<D!AGE[7,DLOC]>;
DEFINE DANR	=<D!AGE[8,DLOC]>;
DEFINE DAAR	=<D!AGE[9,DLOC]>;

DEFINE DCW	=<D!COUNT[1,DLOC]>;
DEFINE DCR	=<D!COUNT[2,DLOC]>;


DEFINE N!DIRS 	=<INDEX!FLAG LAND BIT(14)>;
DEFINE N!NAMES	=<INDEX!FLAG LAND BIT(15)>;
DEFINE N!EXTENTS	=<INDEX!FLAG LAND BIT(16)>;
DEFINE NEW!N!E	=<'000006000000>;


DEFINE E!INIT(V) =<	  
		    	EF			_V;
		    	EV			_V;
		    	EP			_V;
		    	EAO			_NOW;
			EAN			_ 0;
		    	EAA			_V;
		    	EAOW			_NOW;
			EANW			_ 0;
		    	EAAW			_V;
		    	EAOR			_NOW;
			EANR			_ 0;
		    	EAAR			_V;
			ECW			_V;
			ECR			_V;

		 >;

DEFINE D!INIT(V) =<	
		    	DE			_V;
		    	DF			_V;
		    	DV			_V;
		    	DP			_V;
		    	DAO			_NOW;
			DAN			_ 0;
		    	DAA			_V;
		    	DAOW			_NOW;
		    	DANW			_ 0;
		    	DAAW			_V;
		    	DAOR			_NOW;
			DANR			_ 0;
		    	DAAR			_V;
			DCW			_V;
			DCR			_V;
		 >;
DEFINE S!INIT(V) =<	
		    	SD			_V;
		    	SF			_V;
		    	SV			_V;
		    	SP			_V;
		    	SAO			_NOW;
			SAN			_ 0;
		    	SAA			_V;
		    	SAOW			_NOW;
		    	SANW			_ 0;
		    	SAAW			_V;
		    	SAOR			_NOW;
			SANR			_ 0;
		    	SAAR			_V;
			SCW			_V;
			SCR			_V;
		 >;
SIMPLE PROCEDURE LOGOUT;
START!CODE "LOGOUT"
	HRROI	1,-1 ;
	LGOUT		;
	CAI
END        "LOGOUT";

SIMPLE	PROCEDURE DETACH;
START!CODE "DETACH"
	DTACH	;
END	  "DETACH";

STRING PROCEDURE ODTIME(INTEGER T,F);
BEGIN
	IF T = 0 THEN RETURN("Not Dated") 
	ELSE          RETURN(ODTIM(T,F));
END;

INTEGER PROCEDURE INCHARW;
BEGIN
	INTEGER S;
	S_INCHRW;
	IF  S > '140 AND S < '173 THEN
	    	 	RETURN(S - '40)
		ELSE	RETURN(S);
END;

PROCEDURE TYPE (STRING A); BEGIN OUT (PCHAN,A); END;
PROCEDURE TYPEL (STRING A); BEGIN OUT (PCHAN,A & CRLF); END;
PROCEDURE TYPEI (INTEGER A); BEGIN OUT (PCHAN, CVS (A)); END;
PROCEDURE TYPER (REAL A); BEGIN OUT (PCHAN, CVF (A)); END;

SIMPLE PROCEDURE TEOL;
BEGIN "TEOL"
	OUT (PCHAN,CRLF);
END   "TEOL";

SIMPLE PROCEDURE HEADER;
BEGIN "HEADER"
	STRING PRI,SEC;
	IF N!OR!E THEN
		BEGIN
			PRI _ "NAME         #";
			SEC _ " EXTENTIONS ";
		END
	ELSE
		BEGIN
			PRI _ "EXTENTION     ";
			SEC _ "    # NAMES ";
		END;

	IF PL THEN OUT(WCHAN , CRLF );
	OUT(WCHAN,PRI & SEC);
	OUT(WCHAN, "VERSION  PAGES CREATION   AVG AGE  OLDEST WRT  NEWEST WRT  AVG AGE AVG # WRTS  READ   AVG AGE  AVG # READS"
	& CRLF);

END   "HEADER" ;

SIMPLE PROCEDURE WPAGE;
BEGIN "WPAGE"
	IF PL > PLEN THEN HEADER;
	PL _ 0 ;
	OUT (WCHAN, '14);
	HEADER;
END   "WPAGE";

SIMPLE PROCEDURE WEOL;
BEGIN "WEOL" 
	PL_ PL + 1;
	IF PL > PLEN THEN  
	  	BEGIN
			WPAGE;
		END
	ELSE
		BEGIN
			OUT (WCHAN,CRLF);
		END;
END   "WEOL" ;



PROCEDURE WRITE (STRING A); BEGIN OUT (WCHAN,A); END;
PROCEDURE WRITEL (STRING A); BEGIN OUT (WCHAN,A); WEOL;  END;
PROCEDURE WRITEI (INTEGER A); BEGIN OUT (WCHAN, "*" &  CVS (A)); END;
PROCEDURE WRITER (REAL A); BEGIN OUT (WCHAN, "*" &  CVF (A)); END;


INTEGER PROCEDURE MGNJFN(INTEGER CHAN);
BEGIN	".MGNJFN."
	INTEGER I;
	I_CVJFN(CHAN);    

	IF !SKIP! THEN RETURN(0);
	START!CODE
		MOVE	1,I ;
		SETO	2,  ;
		GNJFN	    ;
		SETZ	1,   ;
		MOVEM	1,I ;
	END;
	RETURN (I);
	END;

PROCEDURE STAR!SCAN (	STRING STAR!NAME;
			INTEGER STAR!FLAG;
			SIMPLE PROCEDURE FINISH;
			SIMPLE PROCEDURE STAR!STAT);
BEGIN "STAR.SCAN"
	IF  (STAR!FLAG = -1) THEN STAR!FLAG _ DEFAULT!FLAG;
	STAR!CHAN_GTJFN(STAR!NAME,STAR!FLAG);

	INDEX!FLAG_STAR!CHAN LOR '000016000000;

	DO
		BEGIN "STAR.LOOP1" 
			GTFDB(STAR!CHAN,FDB);
			IF NOT FDBNXF THEN
			IF TMP!F!ONLY=FDBTMP THEN
			IF DEL!F!ONLY THEN 
				BEGIN
					IF FDBDEL THEN STAR!STAT;
				END
				ELSE
				BEGIN
					IF NOT FDBDEL THEN STAR!STAT;
				END;
			INDEX!FLAG_MGNJFN(STAR!CHAN);
		END "STAR.LOOP1"
	UNTIL NOT INDEX!FLAG;
	FINISH;
	TYPEL(BELLS & "**** DONE with File Scan ****");
	RLJFN(STAR!CHAN);
END "STAR.SCAN";


FORWARD SIMPLE PROCEDURE SYS!COLLECT;
SIMPLE PROCEDURE NEW!DIR;
BEGIN "NEW.DIR"
	INTEGER I,K;
	STRING STMP;
	K_0; I_ELOC;
IF DLOC THEN
	FOR ELOC_1 STEP 1 UNTIL MAX!EXTENTS DO
		IF EV > 0 THEN 
		BEGIN
			K_ELOC;
			DE_DE+1;
		END;
	IF DLOC > 0   AND DE THEN 
	BEGIN
		STMP_DDN & "                 ";

		WEOL;      
		WRITE ("				  	*********   " & 
				STMP[1 TO 15]  & "*********");
		WEOL;
		I_ELOC;
		FOR ELOC_1 STEP 1 UNTIL K  DO
		BEGIN
		IF EV >0 THEN
		BEGIN "PRINT.OUT"
			SYS!COLLECT;
			STMP_EEN & "                    ";
	V		WRITE ( STMP[1 TO 15]);
	V		WRITEI(EF);
			DF_DF+EF;
	V		WRITEI(EV);
			DV_DV +EV;
	V		WRITEI(EP);
			DP_DP+EP;
C	V		WRITE(" * " & ODTIME(EAO,DATE!FORMAT));
	 		IF EAO AND DAO > EAO THEN DAO_EAO;
	V		WRITE(" * " & ODTIME(EAN,DATE!FORMAT));
			IF DAN < EAN THEN DAN_EAN;
	V		WRITEI(EAA/EV);
			DAA_DAA + EAA/EV;

	V		WRITE(" * " & ODTIME(EAOW,DATE!FORMAT));
			IF EAOW AND DAOW > EAOW THEN DAOW_EAOW;
	V		WRITE(" * " & ODTIME(EANW,DATE!FORMAT));
			IF DANW < EANW THEN DANW_EANW;
	V		WRITEI(EAAW/EV);
			DAAW_DAAW + EAAW/EV;
	V		WRITER (ECW/EV);
			DCW _ DCW + ECW /EV;

C	V		WRITE(" * " & ODTIME(EAOR,DATE!FORMAT));
			IF EAOR AND DAOR > EAOR  THEN DAOR_EAOR;
	V		WRITE(" * " & ODTIME(EANR,DATE!FORMAT));
			IF DANR < EANR THEN DANR_EANR;
	V		WRITEI(EAAR/EV);
			DAAR_DAAR + EAAR/EV;
	V		WRITER(ECR/EV);
			DCR _ DCR + ECR / EV ;
	
	V		WEOL;
		END   "PRINT.OUT";
		E!INIT(0);
		END;

		WEOL;
		WRITE("Totals");
		WRITEI(DE); WRITE(" ");
		WRITEI(DF); WRITEI(DV); WRITEI(DP);
C		WRITE(" * " & ODTIME(DAO, DATE!FORMAT));
		WRITE(" * " & ODTIME(DAN, DATE!FORMAT));
		WRITEI(DAA / DE);
		WRITE(" * " & ODTIME(DAOW,DATE!FORMAT));
		WRITE(" * " & ODTIME(DANW,DATE!FORMAT));
		WRITEI(DAAW / DE);
		WRITER(DCW / DE);

C		WRITE(" * " & ODTIME(DAOR,DATE!FORMAT));
		WRITE(" * " & ODTIME(DANR,DATE!FORMAT));
 		WRITEI(DAAR / DE);
		WRITER(DCR / DE);

		WEOL;

	END;
IF INDEX!FLAG THEN
BEGIN
	ELOC_0;
	DLOC_STDIR(G!DIR,0);
	DDN_G!DIR;
	D!INIT(0);
	IF N!E!OK THEN ACTIVE_REACTIVE;
	INDEX!FLAG_INDEX!FLAG LOR NEW!N!E;
END;
END   "NEW.DIR";

SIMPLE PROCEDURE NEW!NAME;
BEGIN "NEW.NAME"
	EF_EF+1;
END   "NEW.NAME";

SIMPLE PROCEDURE NEW!EXTENT;
BEGIN "NEW.EXTENT"
	INTEGER J; STRING E;
	INDEX!FLAG _ INDEX!FLAG LOR NEW!N!E;
	COLLECT_TRUE;
	E_G!EXT;
	J_ELOC;
	ELOC_0;
	DO
		BEGIN
			ELOC_ELOC+1;
		END 
	UNTIL  ELOC > ACTIVE OR  EQU (E,EEN) ;
	IF ELOC > ACTIVE THEN
      	  BEGIN	
		IF ELOC LEQ MAX!EXTENTS AND N!E!OK THEN
			BEGIN
				EEN_G!EXT;
				E!INIT(0);
				ACTIVE_ELOC;
			END 
		ELSE	
			BEGIN
				COLLECT_FALSE;
				ELOC_J;
			END;
	  END;	



END   "NEW.EXTENT";

SIMPLE PROCEDURE NEW!VERSION;
BEGIN "NEW.VERSION"
	EV_EV+1;
	EP_EP+SIZEF(STAR!CHAN);
	IF FDBCRV AND EAO>FDBCRV THEN EAO_FDBCRV;
	IF EAN<FDBCRV THEN EAN_FDBCRV;
	IF FDBCRV THEN EAA_EAA + TODAY - H!DAY(FDBCRV);

    	IF FDBWRT AND EAOW > FDBWRT THEN EAOW_FDBWRT;
	IF EANW < FDBWRT THEN EANW_FDBWRT;
	ECW _ ECW + FDBCNTW;
	IF FDBWRT THEN EAAW _ EAAW + TODAY - H!DAY(FDBWRT);

	IF FDBREF AND EAOR > FDBREF THEN EAOR_FDBREF;
	IF EANR < FDBREF THEN EANR_FDBREF;
	IF FDBREF THEN EAAR _ EAAR + TODAY - H!DAY(FDBREF);
	ECR _ ECR + FDBCNTR ;

END   "NEW.VERSION";


SIMPLE PROCEDURE STAR!STAT;
BEGIN "STAR.STAT"
	IF (NOT DLOC) OR (NOT EQU(DDN, G!DIR)) THEN	NEW!DIR;
	IF N!OR!E THEN
		BEGIN
			IF N!NAMES THEN NEW!EXTENT ;
			IF N!EXTENTS AND COLLECT THEN NEW!NAME ;
		END
		ELSE
		BEGIN
			IF N!EXTENTS THEN NEW!EXTENT ;
			IF N!NAMES AND COLLECT THEN NEW!NAME;
		END;
	IF 	ELOC AND     COLLECT	THEN	NEW!VERSION;
	
END  "STAR.STAT";

  
SIMPLE PROCEDURE TOTAL;
BEGIN "TOTAL"
	INTEGER I,K;
	STRING STMP;
	K_0; I_SLOC;
	DLOC _ MAX!DIRS;  
	D!INIT(0);
	FOR SLOC_1 STEP 1 UNTIL MAX!SYS DO
		IF SV > 0 THEN 
		BEGIN
			K_SLOC;
			DE_DE+1;
		END;
	IF DE THEN 
	BEGIN
		STMP _ "TOTALs        ";

		WEOL; WEOL;
		WRITE ("				  	*********   " & 
				STMP[1 TO 15]  & "*********");
		WEOL;
		I_SLOC;
		FOR SLOC_1 STEP 1 UNTIL K  DO
		BEGIN
		IF SV >0 THEN
		BEGIN "PRINT.TOTAL"
			STRING SDIRS;
			SDIRS _ CVS(SD);
			STMP_SEN & "                    ";
			WRITE ( STMP[1 TO 15] );
			WRITEI(SF);
			DF_DF+SF;
			WRITEI(SV);
			DV_DV +SV;
			WRITEI(SP);
			DP_DP+SP;
C			WRITE(" * " & ODTIME(SAO,DATE!FORMAT));
			IF SAO AND DAO > SAO THEN DAO_SAO;
			WRITE(" * " & ODTIME(SAN,DATE!FORMAT));
			IF DAN < SAN THEN DAN_SAN;
			WRITEI(SAA/SV);
			DAA_DAA + SAA/SV;

			WRITE(" * " & ODTIME(SAOW,DATE!FORMAT));
			IF SAOW AND DAOW > SAOW THEN DAOW_SAOW;
			WRITE(" * " & ODTIME(SANW,DATE!FORMAT));
			IF DANW < SANW THEN DANW_SANW;
			WRITEI(SAAW/SV);
			DAAW_DAAW + SAAW/SV;
			WRITER(SCW /SV );
			DCW _ DCW + SCW /SV ;

C			WRITE(" * " & ODTIME(SAOR,DATE!FORMAT));
			IF SAOR AND DAOR > SAOR  THEN DAOR_SAOR;
			WRITE(" * " & ODTIME(SANR,DATE!FORMAT));
			IF DANR < SANR THEN DANR_SANR;
			WRITEI(SAAR/SV);
			DAAR_DAAR + SAAR/SV;
			WRITER(SCR / SV);
			DCR _ DCR + DCR / SV ;

 			WEOL;
		END   "PRINT.TOTAL";
		END;

		WEOL;
		WRITE("Totals");
		WRITEI(DE); WRITE(" ");
		WRITEI(DF); WRITEI(DV); WRITEI(DP);
C		WRITE(" * " & ODTIME(DAO, DATE!FORMAT));
		WRITE(" * " & ODTIME(DAN, DATE!FORMAT));
		WRITEI(DAA / DE);

		WRITE(" * " & ODTIME(DAOW,DATE!FORMAT));
		WRITE(" * " & ODTIME(DANW,DATE!FORMAT));
		WRITEI(DAAW / DE);
		WRITER(DCW /DE );

C		WRITE(" * " & ODTIME(DAOR,DATE!FORMAT));
		WRITE(" * " & ODTIME(DANR,DATE!FORMAT));
		WRITEI(DAAR / DE);
		WRITER(DCR /DE);

		WEOL;

	END;
END   "TOTAL";


SIMPLE PROCEDURE SYS!COLLECT;
BEGIN "SYS!COLLECT"
	INTEGER I,J,K; STRING E,STMP;
	E_EEN;
	SLOC_0;
	DO
		BEGIN
			SLOC_SLOC+1;
		END 
	UNTIL  SLOC > SACTIVE OR  EQU (E,SEN) ;
	IF SLOC > SACTIVE THEN
      	  BEGIN	
		IF SLOC LEQ MAX!SYS AND N!E!OK THEN
			BEGIN
				SEN_E;
				S!INIT(0);
				SACTIVE_SLOC;
			END 
		ELSE	
			BEGIN
				RETURN;
			END;
	  END;	

		BEGIN "SCOLL"
			SD _ SD + 1;
			SF _ SF + EF;
			SV_SV +EV;
			SP_SP+EP;
			IF EAO AND SAO > EAO THEN SAO_EAO;
			IF SAN < EAN THEN SAN_EAN;
			SAA_SAA + EAA;

			IF EAOW AND SAOW > EAOW THEN SAOW_EAOW;
			IF SANW < EANW THEN SANW_EANW;
			SAAW_SAAW + EAAW;
			SCW _ SCW +ECW ;

			IF EAOR AND SAOR > EAOR  THEN SAOR_EAOR;
			IF SANR < EANR THEN SANR_EANR;
			SAAR_SAAR + EAAR;
			SCR _ SCR + ECR ;

		END   "SCOLL";

END   "SYS!COLLECT";

SIMPLE PROCEDURE FINISH;
BEGIN
	NEW!DIR;
	TOTAL;
END;

SIMPLE PROCEDURE MISS;
BEGIN
	TYPE ("Run DETACHED ? ");
	IF INCHARW = "Y" THEN 
	BEGIN
		TYPE("es");
		DETAFL_TRUE;
	END
	ELSE	 DETAFL_FALSE;
	TYPE (CRLF & "LOGOUT when done ? " );
	IF INCHARW = "Y" THEN
	BEGIN
		TYPE("es");
		LOGOFL_TRUE;
	END
   	ELSE	LOGOFL_FALSE;
	TYPE (CRLF & "Output TOTALs only ? " );
	IF INCHARW = "Y" THEN
	BEGIN
		TYPE("es");
		VERBOSE_FALSE;
	END
	ELSE 	VERBOSE_TRUE;
	TEOL;
END;

SIMPLE PROCEDURE OUTFILE;
BEGIN
	TYPE(CRLF & "Listing on Line-Printer ? ");
	IF INCHARW = "Y" THEN
	BEGIN
		TYPEL("es");
		WCHAN_GTJFN("LPT: ",'500001000000);
		OPENF(WCHAN,'070000100000);
		RETURN;
	END;

	DO
	BEGIN  "OUTFILE"

		TYPE (CRLF & "Output File = ");
		WCHAN _ OPENFILE(NULL,"WAEC");
		IF !SKIP! THEN ERSTR(!SKIP!,0);
		END "OUTFILE"
	UNTIL not !SKIP!;

END;


SIMPLE PROCEDURE DELFILE;
BEGIN  "DELFILE"
	STRING CHAR;

	TMP!F!ONLY _ FALSE;
	TYPE("Temporary Files Only ? ");
	IF INCHARW = "Y" THEN
	BEGIN
		TYPE("es");
		TMP!F!ONLY _ '400000000000;
	END;
	TEOL;

	DEL!F!ONLY _ FALSE;
	TYPE("Deleted Files Only ? ");
	CHAR_INCHARW;
	IF CHAR = "Y" THEN 
	BEGIN
		TYPE("es" );
		DEL!F!ONLY_ TRUE;
	END;
	TEOL;
END;


SIMPLE PROCEDURE NAME!OR!EXTENTION;
BEGIN
	LABEL LOOP;
	STRING CHAR;
	TYPE(" Scan File System by Name or Extention ?  ");
LOOP:	TYPE ( CRLF & "  'N' OR 'E'  ?  ");
	CHAR_INCHARW;
	IF NOT(CHAR = "N" OR CHAR = "E") THEN GOTO LOOP;
	IF CHAR = "N" THEN
	BEGIN "BY.NAME"
		TYPEL("ame");
		N!OR!E _ TRUE;
	END   "BY.NAME"
	ELSE
	BEGIN  "BY!EXTENTION"
		TYPEL ("xtention");
		N!OR!E _ FALSE;
	END;
END;


STRING PROCEDURE S!N!OR!E ;
BEGIN
	IF N!OR!E THEN RETURN ("Name")
		  ELSE RETURN ("Extention");
END;


INTEGER PROCEDURE INLIST(STRING ARRAY SLIST);
BEGIN  "INLIST"
	STRING TLINE,T;
	INTEGER B,I;
	DEFINE BK1 = <1>;
	DEFINE BK2 =<2>;
	I_0;
	LISTTS_NULL;
	LISTT_FALSE;
	SETBREAK(BK1,'37 & '15 & ULETTERS & LLETTERS & DIGITS & PPS," ","IRN");
	SETBREAK(BK2,ULETTERS & LLETTERS & DIGITS & PPS,NULL,"XSN");
	DO
	BEGIN "GET.LIST"
		TLINE _ INTTY ;
		LISTTS_ LISTTS & CRLF & TLINE ;
		DO
		BEGIN "GET.ELEM"
			T_ SCAN (TLINE, BK1, B);
			T_ SCAN (TLINE, BK2, B);
			I_I+1;
			SLIST[I] _ T;
		END   "GET.ELEM"
		UNTIL  NOT B ;
	END  "GET.LIST"
	UNTIL T = NULL ;
	I_I-1;
	IF I> 0 THEN LISTT _ TRUE  ELSE LISTTS_NULL;
	RETURN (I);
END  "INLIST";
SIMPLE PROCEDURE S!G!L ;
BEGIN 
	LABEL LOOP;
	STRING CHAR;
	TYPE(" Scan For Specfic File Group or, for a List of "
		& S!N!OR!E & "s  ?  ");
LOOP:	TYPE (CRLF & "  'G' OR 'L'  ");
	CHAR _ INCHARW;
	IF NOT (CHAR = "G" OR CHAR = "L") THEN GOTO LOOP;
	IF CHAR = "G" THEN
	BEGIN "BY.GROUP"
		BY!G!L _ TRUE;
		TYPE ("roup" & CRLF & " File Group  =  ");
		CALLFILE_INTTY;
		N!E!OK _ TRUE;
		ACTIVE _ 0;
		SACTIVE_0;
		REACTIVE _ 0;
	END   "BY.GROUP"
	ELSE
	BEGIN "BY.LIST"
		BY!G!L _ FALSE;
		TYPEL ("ist");
		CALLFILE_"<*>*.*;*"  ;
		TYPE ("Type List of File " & S!N!OR!E &
		 "s seperater by Commas and Terminated" & CRLF &
		"by a bare CR." & CRLF);
		ACTIVE _ INLIST (E!EXT!NAME);
		SACTIVE_ACTIVE;
		REACTIVE _ ACTIVE;
		BEGIN
			INTEGER M;
			FOR M_1 STEP 1 UNTIL ACTIVE DO
			BEGIN
			SLOC _ M; ELOC _ M;
			SEN_ EEN ;
			E!INIT(0);
			S!INIT(0);
			END;
		END;

		N!E!OK _ FALSE;
  		TYPE(" Allow " & S!N!OR!E & "s Other than those in your List  ?  ");
		CHAR _ INCHARW;
		IF CHAR = "Y" THEN 
		BEGIN
			TYPE ("es");
			N!E!OK _ TRUE;
		END;
		TEOL;
	END  "BY.LIST" ;
END;

SIMPLE PROCEDURE FACTS;
BEGIN "FACTS"
	WRITEL(CRLF & CRLF & ODTIM(-1,-1));
	WRITEL("System File SCAN Report");
	WEOL;
	IF DETAFL THEN WRITEL("Job was ran DETACHED.");
	IF LOGOFL THEN WRITEL("Job was LOGOUTed following completion.");
	IF NOT VERBOSE THEN WRITEL("TOTALs only.");
	WRITEL("Output to  " & JFNS(WCHAN,'111110000001 ));
	IF TMP!F!ONLY THEN WRITE("Temporary ");
	IF DEL!F!ONLY THEN WRITE("Deleted ");
	IF DEL!F!ONLY OR TMP!F!ONLY THEN WRITEL("Files Only.");
	IF BY!G!L THEN WRITEL("File Group = " & CALLFILE &
			" by " & S!N!OR!E )
	ELSE
	BEGIN
		WRITE("File " & S!N!OR!E & " List = ");
		IF LISTT THEN
		BEGIN
			WRITE(".... " & LISTTS);
IF N!E!OK THEN WRITEL(".... OTHER " & S!N!OR!E & "s allowed. ");
		END
		ELSE	WRITEL("ALL " & S!N!OR!E & "s.");
	END;
END;

	PCHAN_OPENFILE("TTY:","RWO");
	TODAY_H!DAY(GTAD);
	NOW_GTAD;
	SETFORMAT(7,2);

	TYPEL(CRLF & " 	SYSTEM File SCAN");
	TYPEL("	Type 'Y' for Yes");

MAIN2:	OUTFILE;
MAIN1:	MISS;
	DELFILE;
	NAME!OR!EXTENTION;
	S!G!L;
	FACTS;

	PL_0;
	WPAGE;

	DLOC_0;   ELOC_0;
	TYPEL (CALLFILE);
	IF DETAFL THEN DETACH;

	STAR!SCAN(CALLFILE ,-1,FINISH,STAR!STAT);





	WRITEL(CRLF & CRLF & ODTIM(-1,-1));
IF NOT (DETAFL OR LOGOFL) THEN
BEGIN
	TYPE("Do you want to another File SCAN ? ");
	IF INCHARW = "Y" THEN
	BEGIN
		TYPEL("es");
		TYPE("Same Output File ? ");
		IF INCHARW = "Y" THEN
		BEGIN
			TYPEL("es");
			GOTO  MAIN1;
		END
		ELSE
		BEGIN
			TEOL;
			WCHAN _ CFILE(WCHAN);
			GOTO MAIN2;
		END;
	END;
	TEOL;
END;

	WCHAN _ CFILE(WCHAN);
	PCHAN _ CFILE(PCHAN);
	IF LOGOFL THEN LOGOUT;

END

