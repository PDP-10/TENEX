00100	COMMENT    VALID 00038 PAGES
00200	C REC  PAGE   DESCRIPTION
00300	C00001 00001
00400	C00004 00002		TITLE	SPELL	SPELLING CHECK  & CORRECTION.
00500	C00011 00003		SUBTTL	BIG COMMENT 
00600	C00048 00004		SUBTTL	INITIALIZATION
00700	C00055 00005		SUBTTL	THE LOOP WHERE ALL THE WORK GETS DONE.
00800	C00058 00006		SUBTTL	THE DEBUG QUEUE AND TRACE DUMP ROUTINE
00900	C00062 00007		SUBTTL	FULL DUMP AND INCREMENTAL DUMP ROUTINES
01000	C00064 00008		SUBTTL	GETLIN	READ A LINE OF DATA INTO LIBUF
01100	C00067 00009		SUBTTL	THE READING ROUTINE
01200	C00071 00010		SUBTTL  CHKLIN ROUTINE
01300	C00077 00011		SUBTTL	PUTLIN
01400	C00080 00012		SUBTTL	DESCRIPTION OF ENDTST
01500	C00093 00013		SUBTTL	ENDTST	TEST THE SUSPECT WORD BY REMOVING THE ENDINGS
01600	C00103 00014		SUBTTL	ROUTINES USED BY ENDTST
01700	C00106 00015		SUBTTL	LOAD WORD
01800	C00108 00016		SUBTTL	CHANNEL INITIALIZATION
01900	C00110 00017		SUBTTL	I/O STUFF:
02000	C00112 00018		SUBTTL	THE DICTIONARY LOADER.
02100	C00115 00019		SUBTTL	READ A DICTIONARY WORD.
02200	C00117 00020		SUBTTL	THE HASH COMPUTATION.
02300	C00119 00021		SUBTTL	SCAN TTY FOR A FILE NAME
02400	C00123 00022		SUBTTL	ERROR MESSAGES
02500	C00126 00023		SUBTTL	SEARCH	LOOK IN DICTIONARY FOR A WORD.
02600	C00129 00024		SUBTTL	INSERT
02700	C00132 00025		SUBTTL	CORE ROUTINES
02800	C00133 00026		SUBTTL	TYPE FILE NAMES,READ NAMES, PLAY WITH TTY
02900	C00135 00027		SUBTTL	TRYFIX	OUR HUMBLE ATTEMPT TO CORRECT THE WORD.
03000	C00145 00028		SUBTTL	TRYIII	FOR III DISPLAY OF GUESSES.
03100	C00151 00029		SUBTTL	THE HELP MESSAGE
03200	C00154 00030		SUBTTL	CHECK FOR REPEATS OF THE SAME WORD.
03300	C00156 00031		SUBTTL	TYPE OUT ALL THE WORDS WE FOUND
03400	C00158 00032		SUBTTL	X1SRCH	TRY TO CORRECT ONE MISSPELLED LETTER
03500	C00161 00033		SUBTTL	X1EXL	MAYBE HE TYPED ONE EXTRA LETTER
03600	C00163 00034		SUBTTL	XTRNP	ONE PAIR TRANSPOSITION
03700	C00164 00035		SUBTTL	ONE LETTER MISSING
03800	C00167 00036		SUBTTL	SAVEME  WRITE OUT CORE IMAGE USING SWAP UUO.
03900	C00169 00037	IFN XCNT,<
04000	C00173 00038		SUBTTL	SOME OF THE STORAGE STUFF
04100	C00176 ENDMK
04200	C;
     

00100		TITLE	SPELL	SPELLING CHECK  & CORRECTION.
00200	;			R. E. Gorin 20 February, 1971
00300	;			Revised July 23, 1972 III displays
00400	;			I HAVE YOU UNDER MY SPELL
00500		SUBTTL	DEFINITIONS
00600	
00700	COMMENT $
00800	
00900	Acknowledgements:
01000	
01100		The work reported here was supported in part by the  Advanced
01200	Research  Projects Agency of the Department of Defense under contract
01300	SD-183, and in part by the National  Science  Foundation,  which  has
01400	supported the author as a Fellow.
01500	
01600	
01700	Report Problems with this program to:
01800				Ralph E. Gorin
01900				Artificial Intelligence Laboratory
02000				Stanford University
02100				Stanford, California 94305
02200	$
02300	
02400	IFDEF FOR,<MACRO__0;>MACRO==1		;SELECT ASSEMBLER
02500	
02600	IFE MACRO,<
02700		DEFINE	DEF(A,B)<
02800		A_B>
02900		DEFINE	SDEF(A,B)<
03000		A__B>
03100	>
03200	IFG MACRO,<
03300		DEFINE	DEF(A,B)<
03400		A=B>
03500		DEFINE	SDEF(A,B)<
03600		A==B>
03700	>
03800	
03900	
04000	COMMENT/  ASSEMBLY SWITCHES.
04100	
04200	STANSW GIVES SIXBIT PPN AND STANFORD SWAP UUO
04300	
04400	COUNTS GIVES THE EXECUTION COUNTS AND DEBUGGING TRACE OF THE
04500	LAST 100 AREAS EXECUTED. (not recommended - reg)
04600	
04700	IF STANSW IS 0 THEN IF SANSW IS 1 YOU GET DECIMAL PPN, ELSE OCTAL PPN
04800	
04900	/
05000	;	SDEF(STANSW,1)
05050		SDEF(STANSW,0)
05075		SDEF(IMSSS,1)		;AT IMSSS (FOR SIXBIT PPN'S)
05087	
05100		SDEF(COUNTS,0)
05200	IFNDEF STANSW,<SDEF(STANSW,0)>
05300	IFNDEF SANSW,<SDEF(SANSW,0)>
05400	IFN SANSW,<SDEF(SANSW,1)>	;NORMALIZE
05500	IFE STANSW,<SDEF(PPNMUL,10+SANSW+SANSW)>
05600	IFNDEF COUNTS,<SDEF(COUNTS,0)>
05700	SDEF(XCNT,0)
05800	IFNDEF XCNT,<SDEF(XCNT,0)>	;SPECIAL COUNT CODE - LENGTH OF CHAINS
05900		DEF(FL,0)
06000		DEF(A,1)
06100		DEF(B,2)
06200		DEF(C,3)
06300		DEF(D,4)
06400		DEF(W,5)
06500		DEF(X,6)
06600		DEF(Y,7)
06700		DEF(Z,10)
06800		DEF(K,11)
06900		DEF(L,12)
07000		DEF(M,13)
07100		DEF(N,14)
07200	IFG COUNTS,<
07300		DEF(DEBA,15)
07400		DEF(DEBX,16)
07500	>
07600		DEF(P,17)
07700	
07800		EXTERN	JOBFF,JOBSA,JOBREL
07900	COMMENT/
08000	
08100	I-O CHANNELS:
08200	
08300	/
08400	
08500		SDEF(DICT,15)	;FOR DICTIONARY READIN AND DICTIONARY DUMPS
08600		SDEF(DATA,16)	;FOR FILE TO CORRECT
08700		SDEF(EXCP,17)	;EXCEPTIONS
08800		SDEF(CORR,14)	;CORRECTED FILE.
08900	
09000	OPDEF	RESET	[CALLI	0]
09100	OPDEF	EXIT	[CALLI	12]
09200	OPDEF	CORE	[CALLI	11]
09300	OPDEF	TTCALL	[51B8]
09400	
09500	;	RIGHT HALF FLAGS
09600	
09700		SDEF(FRSTOP,1)		;FIRST I/O OPERATION ON DATA CHANNEL
09800		SDEF(TECO,2)		;FOUND A TECO FILE ON DATA CHANNEL
09900		SDEF(LEFT,4)		;HASH ON LEFT, NOT ON RIGHT
10000		SDEF(ERRLIN,10)		;THERE IS AN ERROR IN THIS LINE
10100		SDEF(MIXED,20)		;FIRST LETTER UPPER CASE, REST LOWER
10200		SDEF(LOWER,40)		;ALL LETTERS LOWER CASE (TURN ON 40)
10300		SDEF(NOCORR,100)	;CHECK ONLY, NO CORRECT
10400		SDEF(IDUMP,200)		;DO INCREMENTAL DUMP, OR INCREMENTAL INSERT
10500		SDEF(SHUTUP,400)	;DON'T CORRECT HIM, OR ASK ADVICE. WRITE 
10600					;EXECPTIONS, THOUGH.
10700		SDEF(HELPSN,1000)	;ONCE ONLY PUBLICATION OF HELP-1
10800		SDEF(HELP2S,2000)	;ONCE ONLY PUBLICATION OF HELP-2
10900		SDEF(NOEXCP,4000)	;DON'T WRITE EXCEPTION FILE
11000		SDEF(NOTRAC,10000)	;DON'T ADD TO TRACE WHILE DUMPING TRACE
11100		SDEF(PICKUP,20000)	;ALLOW A PICKUP IN THE MIDDLE OF FILE
11200		SDEF(TRAIN,40000)	;INSERT ALL EXCEPTIONS INTO DICTIONARY #I1.
11300					;(CREATE A TRAINING SET)
11400		SDEF(QTRAIN,100000)	;TRAIN AND MARK CLOSE WORDS IN EXCEPTION FILE
11500	IFN STANSW,<
11600		SDEF(IIISW, 200000)	;WE ON A STANFORD III
11700	>
11800		SDEF(TVE,400000)	;FILE IS IN TV/E FORMAT: FLUSH THE DIRECTORY PAGE
11900	
12000		DEFINE	BCHECK	(BYP,BOUND)<
12100		PUSH	P,A
12200		MOVEI	A,@BYP	;GET ADDRESS OF BYTE.
12300		CAILE	A,BOUND
12400		PUSHJ	P,INTCFN
12500		POP	P,A
12600	>
12700		DEFINE	ICOUNT<
12800		IFG COUNTS,<
12900		SDEF(%QXX,%QXX+1)
13000		AOS	ICTAB+%QXX
13100		MOVEI	DEBA,%QXX
13200		PUSHJ	P,DEBQUE
13300	>>
13400	
13500	IFG COUNTS,<SDEF(%QXX,<-1>)
13600		LALL>
13700	
13800	IFN STANSW,<				;COMPILE STUFF STANFORD FEATURES
13900	OPDEF	SWAP	[CALLI	400004]		;STANFORD SWAP UUO.
14000	OPDEF	DPYCLR	[701B8]			;CLEAR DISPLAY
14100	OPDEF	PPIOT	[702B8]			;
14200	OPDEF	DPYPOS	[PPIOT	2,]		;SET Y POSITION OF PAGE PRINTER
14300	OPDEF	DPYSIZ	[PPIOT	3,]		;SET SIZE OF PAGE PRINTER.
14400	OPDEF	UPGIOT	[703B8]
14500		SDEF(VBRT,4000)			;LVW BRIGHTNESS FIELD
14600		SDEF(VSIZ,1000)			;LVW SIZE FIELD
14700		SDEF(VABS,100)			;LVW ABSOLUTE FIELD
14800		SDEF(VENDP,20)			;LVW ENDPOINT FIELD
14900		SDEF(VINVIS,40)			;LVW INVISIBLE FIELD
15000			DEFINE	LVW(X,Y,TYPE,MODE,BRT,SIZ)<
15100			IFIDN <MODE><A>,<SDEF(MD,1);>SDEF(MD,0)
15200			IFIDN <TYPE><I>,<SDEF(TT,2);>SDEF(TT,0)
15300			IFIDN <BRT><>,<SDEF(BQ,0);>SDEF(BQ,BRT)
15400			IFIDN <SIZ><>,<SDEF(SQ,0);>SDEF(SQ,SIZ)
15500			BYTE(11)<X>,<Y>(3)BQ,SQ(2)MD,TT(4)6
15600			>
15700	
15800	
15900	COMMENT/
16000	A LONG VECTOR WORD (LVW) FOR THE III DISPLAY HAS THE FOLLOWING FORMAT
16100	
16200	BITS  0-10	X	COORDINATE
16300	BITS 11-21	Y	COORDINATE
16400	BITS 22-24	BRT	BRIGHTNESS. 0=NO CHANGE, 1-7 INCREASING BRIGHTNESS
16500	BITS 25-27	SIZ	SIZE. 0=NO CHANGE, 1-7 INCREASING BRIGHTNESS
16600	BIT     29	M	MODE. 0=RELATIVE TO LAST, 1=ABSOLUTE FROM CENTER
16700	BITS 30-31	T	TYPE. 0=VISIBLE, 1=ENDPOINT, 2=INVISIBLE
16800	BITS 32-35		6.  DENOTES LVW IN DISPLAY PROCESSOR
16900	
17000	/
17100	>;IFN STANSW
     

00100		SUBTTL	BIG COMMENT 
00200	COMMENT %
00300	
00400					4 March 1971
00500	
00600			Spelling check/correction program
00700	
00800					Ralph E. Gorin
00900	
01000	
01100		I  have  written  a program to read text files and check them
01200	for correctness of spelling.  In addition to the  spelling  check  my
01300	program will attempt to correct words that it thinks are misspelled.
01400	
01500		The  program  is  written  in  Macro, the so called "brand X"
01600	assembler for the PDP-10.  The choice of  an  assembly  language  was
01700	dictated  by  the  data  structure  that  I  chose  to use.  The data
01800	structure is the heart of the program,  and  any  efficiency  in  the
01900	program  operation is due primarily to this choice of data structure.
02000	The data structure is basically a hash coding scheme where dictionary
02100	entries  are  accessed  by  both  their alphabetic order and by their
02200	length.   I have a base table that contains 26 * 26 *  10  halfwords;
02300	this table gives me anchors for some 6760 chains. Each chain contains
02400	exactly all words with the same two  first  letters  and  some  given
02500	length.         To    be    precise,   the   hashing   function   is:
02600	(l1*26+l2)*10+min(wl-2,9),where l1 and l2 are numeric representations
02700	of  the  first  and second letters (a=0, b=1, ... z=25) and wl is the
02800	length of the word in characters.
02900	
03000		This scheme was chosen since it provides  both  an  efficient
03100	way  to probe the dictionary and a quick way to select a small subset
03200	of all words that are close to a given input word.
03300	
03400		The program contains about 2k of pure code plus about 4.5k of
03500	tables  and  i/o  buffers.  With ddt and a 10,500 word dictionary, it
03600	runs in 34k.
03700	
03800		Dictionary structure.
03900	
04000	Entries are added  to  the  appropriate  hash  chain  by  the  INSERT
04100	subroutine.   Entries  are added to the head of the chain, saving the
04200	time and effort of searching to the end of the chain.    This  scheme
04300	means that the last item entered on a chain is the first item seen by
04400	a search. The format of the entry is given by:
04500	
04600		Word 0:	xwd flags,nextlk
04700		Word 1: 5 bit representation
04800		Word 2: 5 bit representation
04900			...
05000		There are precisely 1+ceiling(wl/7) machine  words  used  for
05100	each  dictionary entry.  Wl is the length of the entry in characters.
05200	Nextlk is the pointer to the next entry in the list, or zero if  this
05300	is  the  last  in the chain.  The left side contains flags, bit 17 is
05400	used to mark an incremental entry to the dictionary;  bits  0-4  must
05500	always  be  zero.    One  can imagine that bits 5-16 could be used to
05600	store semantic information about the entry.    The  unused  bytes  in
05700	the last word of an entry should be zero, since they are used to stop
05800	the routine that converts the five bit to 7 bit.  To  make  an  ascii
05900	letter  into  fivebit the following code is reccommended. Suppose a 7
06000	bit character is in register A:
06100	
06200		TRZ	A,140	;MAKE UPPER CASE AND FIVEBIT
06300	
06400	The above code appears nowhere in my program since I just thought  of
06500	it.
06600	
06700		There is no provision for deleting words from the dictionary.
06800	Hence, there is never any need to form a  free  storage  list  or  to
06900	garbage collect.
07000	
07100		The spelling correction algorithms.
07200	
07300	There are 4 errors that I attempt to correct:
07400	
07500		1.	one wrong letter.
07600		2.	one missing letter.
07700		3.	one extra letter.
07800		4.	two transposed letters.
07900	
08000	The first case is the most complicated.   For  this  case  I  do  the
08100	following:
08200		For a wrong letter in the third or subsequent character,  all
08300	words  that  are  candidates  must  live  on  the same chain that the
08400	suspect word hashes to.  Hence, I look at each entry on the chain and
08500	determine  if  the  suspect  differs  from  the  entry by exactly one
08600	character.    This is accomplished by an  exclusive  or  between  the
08700	suspect  and  the  dictionary.    Then a JFFO instruction selects the
08800	first non zero byte in the XOR.  This  byte  is  zeroed  and  if  the
08900	result  is all zero then the dictionary word differs from the suspect
09000	in only one letter.  All such words are listed at CANDBF, where  they
09100	can  be  inspected later.   In case either the first or second letter
09200	was wrong I try all 26 possibilities  for  the  second  letter,  then
09300	using the original second letter, I vary the first letter through all
09400	its possible values.   This means that 52 more  chains  are  searched
09500	for possible matches.
09600	
09700	To  correct  transposed  letters,  I  just  try  all  combinations of
09800	transposed letters.   There are only wl-1 such combinations, so  it's
09900	fairly cheap to do that.
10000	
10100	To  correct  one  extra letter, I systematically copy the word with a
10200	letter removed.  This is only wl searches.
10300	
10400	To correct one missing letter, I copy the suspect  word  wl+1  times,
10500	each  time  inserting  a  null  character  in  a  new position in the
10600	suspect. The null character is never part of any word, so the suspect
10700	augmented  by  an  embedded null can be thought of as a word with one
10800	wrong letter (the null) then I use the algorithm above to  match  for
10900	one wrong letter.
11000	
11100	
11200	Where to go from here:
11300	
11400		First,  the  dictionary  must  be  expanded  to  include  all
11500	suffixes  for  every  word.  I do have a feature that strips suffixes
11600	for the purpose of finding the stem of the word  in  the  dictionary,
11700	but  this process is error prone and incompatible with later attempts
11800	to correct the word.
11900	
12000		Secondly, semantic information ought to be  included  in  the
12100	dictionary.  Then contextual information can help guide the selection
12200	of a correction.
12300	
12400		The  first  proposal  above   will   require   a   tremendous
12500	restructuring  of  the  program, since the dictionary would no longer
12600	fit in core.   This being the case, I  believe  that  the  dictionary
12700	should  be kept on the disk, with a data structure similar to the one
12800	I use in core, so that searches through the dictionary  can  be  made
12900	efficient.
13000	
13100	
13200	
13300	Other features of the program.
13400	
13500	The  program  will  read either SOS or TECO format disk files for the
13600	file to be corrected, and the output file will be written in the same
13700	mode,  with  the same SOS line numbers, if present, that the original
13800	file had.    The dictionary may be either SOS or TECO format.     The
13900	dictionary  need  not  be  alphabetical  and  an  arbitrary number of
14000	auxiliary  dictionaries  may  be  loaded,   bounded   only   by   the
14100	availability of core.
14200	
14300	When  a  word  is  corrected,  the output file will be rewritten with
14400	either upper case, lower case  of  mixed  (first  letter  Upper,  the
14500	remainder in lower) depending on the format of the original word.
14600	
14700	Compilation instructions:
14800	
14900	There  are two assembly time switches, STANSW and SANSW. If STANSW is
15000	set then there are SIXBIT ppn's and the SWAP UUO. If STANSW is  zero,
15100	then normally there are octal ppn's, except if SANSW is set, in which
15200	case, there are decimal ppn's.
15300	
15400	Compile the program using MACRO, and load it.   When  you  start  the
15500	program  after  loading,  it  will demand a dictionary.  Use the file
15600	SLOVAR, or anything else that's handy. (Spelling check+DDT+ Slovar is
15700	34k of core).
15800	
15900	Save  the  resulting core image when the dictionary load is complete.
16000	(if you're not at Stanford, you must save manually).
16100	
16200		Using the spelling checker/corrector.
16300	
16400		Incant the command:  "R SPELL" to invoke the  spelling  check
16500	program.  Assuming  that all is normal, it will type: "Do you want to
16600	augment the dictionary?" If you don't have  an  auxiliary  dictionary
16700	anywhere then type <return> and forget the next paragraph.
16800	
16900		If  you have a dictionary that you want to load then type "Y"
17000	and <return> and you will be asked for the name  of  your  dictionary
17100	file.  The dictionary file must be on disk. The format of the file is
17200	one dictionary entry  (word)  on  a  line;  words  must  be  strictly
17300	alphabetic  characters  and less than 40 letters long. The dictionary
17400	entries need not be in alphabetical order.   After  typing  the  file
17500	name  you  will  be  asked whether you want the new entries marked as
17600	incremental  insertions.     If  the  new  entries  are   marked   as
17700	incremental  then they will be included in an incremental dump of the
17800	dictionary.    To have the new entries marked as incremental type "I"
17900	and <return>, otherwise, type <return>.  (If any of the words in your
18000	auxiliary dictionary are already  in  the  main  dictionary  then  no
18100	second copy of the word will be made.  Hence if your words are marked
18200	as incremental then in a subsequent incremental dump, any words  that
18300	were  already in the dictionary will not be dumped.) After loading an
18400	auxiliary dictionary the program will type the total number of  words
18500	in  the dictionary and the amount of core used.  At present there are
18600	about 10,700 words in the dictionary, using  35K  of  core.     After
18700	loading  an  auxiliary,  you will have an opportunity to save the new
18800	core image on your disk area (probably not worth it). Also  you  will
18900	get an opportunity to load another auxiliary dictionary.
19000	
19100		Next you will be asked for the name of the file that you want
19200	to check for spelling errors.  File names are specified in the  usual
19300	format  of "name.ext[prj,prg]" where name is the filename, ext is the
19400	file extension, and [prj,prg] is the name of the  file  owner,  which
19500	may be omitted if the file is on the present user's disk area. If you
19600	omit the file name then you will immediately enter the exit  sequence
19700	(see below).
19800	
19900		You will be asked to specify a name for the output file.  The
20000	output file is where the corrected version of the input goes.  If you
20100	omit this name then no corrections will be made. (Only the exceptions
20200	will  typed,  and  if  you  specify an exception file then it will be
20300	made).
20400	
20500		You  will be asked to name an exception file.  This file will
20600	contain all the lines on which exceptions were found and the rejected
20700	words.  (This  file  is  probably not worth it). If you omit the name
20800	then no such file will be created.
20900	
21000		After you have specified all the files, the program ought  to
21100	respond  with  "working..."  and  start  checking  the input file for
21200	spelling errors.
21300	
21400		When the spelling checker encounters a word that isn't in the
21500	dictionary, it will type the page number, the line on which the  word
21600	was  found  and  the word itself.  The very first time this happens a
21700	message that explains the choices you have will be typed.
21800	
21900		These choices are:
22000	
22100	A	Accept this word, this one time.
22200	
22300	I	Accept this word and insert it  in  the  dictionary  so  that
22400	subsequent  occurances  of this word will be recognized and accepted.
22500	Words that are inserted this way are marked as incremental insertions
22600	and they may be dumped to form an auxiliary dictionary.
22700	
22800	R	Replace  this  word.   Type "R" <return> and the program will
22900	ask you for the replacement word.  If the  replacement  word  is  not
23000	already  in  the dictionary, the program will give you an opportunity
23100	to insert it.
23200	
23300	X	Accept this word and finish.  The word will be accepted. Then
23400	the  remainder  of  the input file will be copied without checking to
23500	the output file.
23600	
23700	W	Save my incremental insertions.  After you type "W"  <return>
23800	you  will  be asked for a file name.  Then an incremental dump of the
23900	dictionary will be written into the file.  After the dump is complete
24000	you may then decide what to do with the excepted word.
24100	
24200	D	Display  the  line and offending word again. The line that is
24300	displayed will not have any corrections shown in it. If  a  line  has
24400	more  than  one  error the line will only be typed once.   Subsequent
24500	errors on that line will cause only the particular word to be  typed,
24600	unless this command is used.
24700	
24800	S	If  this  choice  is  offered  then  the spelling checker has
24900	discovered several words that could be possible corrections  of  this
25000	word.   If you type "S" <return> then you will enter a mode where you
25100	can look at the words that found  by  the  program  and  (optionally)
25200	select one of the words from the list.
25300	
25400		When  you  enter this selection submode for the first time an
25500	explanation will be typed.  The first word in the  list  of  possible
25600	corrections  will be typed followed by an asterisk. Then you have the
25700	following choices.
25800	
25900		Y<return>	Use this word as the correction.
26000	
26100		<return>	Show the next  possible  choice.    When  you
26200	exhaust  the  choices  you  are returned to the outer mode, and asked
26300	again.
26400	
26500		^<return>	Back up in the list.
26600	
26700		<alt mode>	Escape from this submode and  return  to  the
26800	outer command mode.
26900	
27000		In  general,  when  a  word  is  found  that  is  not  in the
27100	dictionary a brief message, either "Type A,I,R,X,W  or  D"  or  "Type
27200	A,I,R,X,W,D  or  S"  will  be  typed  to  remind  you of the possible
27300	choices.   In the special case that the  program  finds  exactly  one
27400	possible  correction  for the word, then the message "I guess <word>.
27500	Type C to make this correction or A,I,R,X,W or D" will be typed.   If
27600	you type "C"  <return>  then the indicated substitution will be made,
27700	otherwise you have the usual choices.
27800		When the input file is  exhausted  the  correction  file  and
27900	exception  file  are  closed  and  all I/O channels are released. The
28000	program types "Finished."
28100	
28200		The exit sequence is entered next.  The user is given several
28300	options.  They are:
28400	
28500	E	Exit now.
28600	
28700	S	Save this core image
28800	
28900	C	Go back and correct another file.
29000	
29100	A	Augment the dictionary and correct another file.
29200	
29300	D	Complete  dump of the dictionary to disk.  This will create a
29400	17 or 18K file, which probably isn't worth it.
29500	
29600	I	Incremental dump of the dictionary to disk.   All  the  words
29700	that  were inserted while running the program are dumped to the disk.
29800	The user specifies a file name (the  default  is  WORDS.LST).    This
29900	incremental dump is in a format suitable for editing or for use as an
30000	auxiliary dictionary.  The words in this dump are not in alphabetical
30100	order.    These  words  will appear in groups sorted by the first two
30200	letters of the word and by the length of the word.  Otherwise, within
30300	a group the words will appear in last in - first out order.
30400	
30500	X	This command is used to get a trace count of the program.  It
30600	is for diagnostic purposes only.
30700	
30800			How to use multiple dictionaries
30900	
31000	
31100		Spell  has  a  set of features whereby the user can cause the
31200	creation of several disjoint incremental dictionaries.  In this  way,
31300	the   user   may  collect  several  dictionaries  of  special  terms.
31400	Internally,  all dictionary  entries  are  considered  equivalent  as
31500	regards  searches  for  words.   The distinction between dictionaries
31600	has its greatest impact when doing incremental dumps (the  I  command
31700	during  the  exit  sequence  or  the W command while in the middle of
31800	execution).  When an incremental dump  is  requested,  the  user  may
31900	specify  a  number, e.g. W9, which selects the particular incremental
32000	dictionary to dump.  In this example, dictionary #9 will be dumped.
32100	
32200		Dictionary 0 is the main dictionary.  Words cannot  be  added
32300	to this dictionary, except by reading an auxiliary file.  In general,
32400	words  that  are  inserted  incrementally  are  marked  as  being  in
32500	dictionary  #1.   All  words  that  are incremental insertions in the
32600	dictionary  will  be  marked  in  dictionary  #1,  unless  the   user
32700	specifies otherwise.
32800	
32900		The following places are where the  user  may  specify  which
33000	dictionary to add to:
33100	
33200		1.	When loading an auxiliary  dictionary,  if  the  user
33300	responds  with  "Inn"  to  the  question about marking new entries as
33400	incremental, then the new entries will be marked in dictionary number
33500	nn (where nn is interpreted as decimal and should be less than 32).
33600	
33700		2.	After  a word has been rejected, type "Inn" to insert
33800	the word in dictionary number nn.
33900	
34000		3.	After replacing a word, if the replacement is not  in
34100	the  dictionary  then  type  "Inn"  to  insert  the  replacement into
34200	dictionary nn.
34300	
34400	
34500		When requesting an incremental dump, the user may specify the
34600	particular dictionary to dump.  This is allowed in two cases:
34700	
34800		1.	After some word has been rejected, the command  "Wnn"
34900	will cause dictionary number nn to dumped.
35000	
35100		2.	During  the  exit  sequence,  the  command "Inn" will
35200	cause dictionary number nn to be dumped.
35300	
35400	
35500		In  all  five cases above, if nn is either 0 or omitted, then
35600	it will be taken as being 1.
35700	
35800		Caution. There is no provision in Spell for remembering which
35900	dictionary  numbers  have  been  used.    Therefore,  it  remains the
36000	individual user's responsibility to remember the numbers of  all  the
36100	dictionaries  that he creates.  (Forgetting the number will mean that
36200	the forgotten dictionary can not be dumped incrementally.  The  words
36300	in  a  forgotten dictionary will still be available, but the only way
36400	to actually get them dumped out is to dump the entire dictionary).
36500	
36600	
36700			The Pickup Feature.
36800	
36900		If any of the three file names in the  entry  sequece  (where
37000	the source, correction and exception files are specified) is followed
37100	by the switch "/P" then, after accepting the three file names,  SPELL
37200	will  enter  pickup  mode.   The user will be asked to specify a page
37300	number and, if the file is in SOS format, a line number  for  pickup.
37400	The  effect  is  to suspend spelling checking until the page and line
37500	specified.   When a user has a partially corrected file, this command
37600	will enable him to skip over the portion of the file that has already
37700	been corrected.  The input file will be copied  without  checking  to
37800	the output until the page and line specified, at which point spelling
37900	checking begins.
38000	
38100	
38200			The Training feature.
38300	
38400		If  the file name of the input file is followed by the switch
38500	"/T" then instead of correcting the file, Spell will treat  the  file
38600	as  a  training  set.   All  words in the file that are unfamiliar to
38700	Spell will be entered in the dictionary  as  incremental  insertions.
38800	After Spell finishes reading the file, the user has an opportunity to
38900	dump all the words that were inserted this way.  The  resulting  list
39000	of words  may  be  edited  and  any  words which are incorrect may be
39100	deleted.  Then this file can be used as an auxiliary dictionary while
39200	correcting the original source file.
39300	
39400		This  feature  is  provided  for  the  purpose  of easing the
39500	problem  of  creating  a  specialized  dictionary   of   jargon   and
39600	infrequently used words.
39700	
39800	
39900		Q-Training
40000	
40100		Q-Training is specified by the switch /Q.  In this mode,  all
40200	words  in  the source file that are unfamiliar to Spell will be added
40300	to the dictionary; the difference is, if any "new" word is "close to"
40400	some old word then the new word will be output in the exception file.
40500	The exception file will contain only such words.  In  this  way,  the
40600	spelling  checker calls to your attention the fact that this word may
40700	be misspelled.
40800	
40900	
41000		No Suffix Removal
41100	
41200		The /N  switch supresses  the attempt  to remove suffixes  to
41300	find  a correctly  spelled root word.   /N  mode will find  many more
41400	questionable words,  however, it will  work more  correctly than  the
41500	heuristic suffix removal.
41600	
41700		-------------------------------------------------
41800	
41900				Abnormal Conditions.
42000	
42100		While the program is running  it  is  possible  that  certain
42200	abnormal conditions may obtain.  The usual response of the program is
42300	to type some sort of error message.
42400	
42500		The following is a list of the error messages in SPELL,  with
42600	an indication of the severity of the error.
42700	
42800	Huh?		The  user  has  typed something illegal.   He will be
42900	given another chance, usually  after  reviewing  the  list  of  valid
43000	responses.
43100	
43200	Default name is WORDS.LST	The  user  has  typed <return> when a
43300	name for a dictionary output file was requested.  The name  Words.Lst
43400	is used.
43500	
43600	Default name is SPELL.DMP	The  user  has  typed <return> when a
43700	name for a core dump file was requested. The name Spell.Dmp is used.
43800	
43900	Illegal dictionary entry: <word>	This error occurs if an entry
44000	in  a  dictionary  file exceeds 40 (decimal) characters.  The word is
44100	ignored.
44200	
44300	0 LENGTH WORD AT HASHCP		Somebody just asked  to  compute  the
44400	hash address of an empty word.  The program continues, but there is a
44500	possibility of great evilness.
44600	
44700	HASHING ERROR			Somebody asked for the  hash  address
44800	of  a  word  that  doesn't  begin  with  letters  as  the  first  two
44900	characters. The program halts.
45000	
45100	ILLEGAL CHARACTER IN SCAN.	This is a message  from  the  routine
45200	that reads file names.  You will be asked to try retyping the name.
45300	
45400	Can't get there from here	This   means  that  from  the  select
45500	submode you typed ^ to see the previous choice and you  were  at  the
45600	first choice. The first choice is repeated.
45700	
45800	DEVICE DATA ERROR (OUTPUT)	This message means that while writing
45900	a file, something screwed up.  The program halts.
46000	
46100	DEVICE ERROR (INPUT)		The input file is screwed up in  some
46200	way.  The program halts.
46300	
46400	INIT FAILED ON DEVICE DSK:	This  indicates  tremendous confusion
46500	external to this program.  The program halts.
46600	
46700	FILE NOT FOUND. DSK:<filename>	The  indicated  file  could  not   be
46800	found. The user gets to specify some other file.
46900	
47000	Enter failed on: <file name>	An  enter  uuo failed while trying to
47100	select the indicated file for output.  The user may  specify  another
47200	name.
47300	
47400	INSUFFICIENT CORE AVAILABLE.  I GIVE UP.	Program requires more
47500	core, but none is available.  The program exits.
47600	
47700	Null term illegal.		The user typed <return> where a  file
47800	name  is  needed.   The  user  has another opportunity to specify the
47900	name.
48000	
48100	Internal confusion in the  spelling  checker.  Called  from  location
48200	<loc>.  The  spelling  checker  has  discovered  a  (possible) bug in
48300	itself.   The program halts, but the user may type continue.   Please
48400	note  the  location  mentioned  and the circumstances that evoked the
48500	message.
48600	
48700	Dictionary number too large. Maximum is 31.	This  message   means
48800	that  the  user  attempted  to  select  for  insertion  or  dumping a
48900	dictionary beyond the range of allowed numbers.  The  user  will  get
49000	another chance to do the right thing.
49100	
49200	You can't use Training Switch and have output or exceptions.	This
49300	message  occurs  when  the switch "/T" is typed following the name of
49400	the output or exception file.  If the "/T" switch is used, it  should
49500	follow the name of the input file.
49600	
49700	Unrecognized switch.	This message is typed whenever a file name is
49800	followed by a switch that is not one of the Spell switches.
49900	
50000	
50100	
50200	%
     

00100		SUBTTL	INITIALIZATION
00200	BEGIN:	RESET
00300		MOVEI	FL,0			;FLAGS
00400		MOVE	P,[IOWD PDLEN,PDLIST]	;STACK
00500	
00600	IFN STANSW,<
00700		MOVEI	FL,IIISW		;ASSUME III. SET FLAG
00800		MOVNI	A,1
00900		TTCALL	6,A
01000		CAME	A,[-1]
01100		TLNN	A,400000		;SKIP IF III
01200		MOVEI	FL,0			;NOT III.
01300	>
01400	
01500	IFG COUNTS,<
01600		MOVE	A,[XWD ICTAB,ICTAB+1]
01700		SETZM	ICTAB
01800		BLT	A,ICTABX
01900		MOVE	DEBX,[IOWD 2*%DTL,%DBT]
02000	>
02100	
02200		SKIPE	DICTFL			;IF ZERO WE ARE VIRGIN
02300		SKIPA	A,DICTFF		;NOT VIRGIN USE OLD DICTFF AS JOBFF
02400		MOVE	A,JOBFF
02500		MOVEM	A,DICTFF		;ADDRESS OF DATA BUFFERS
02600		MOVEM	A,JOBFF
02700		PUSHJ	P,INDICT		;INIT DICT AND BUFFER IT.
02800		MOVE	A,NEWFF
02900		MOVEM	A,DATAFF		;JOBFF FOR BUFFERING DATA
03000		PUSHJ	P,INDATA		;INIT AND BUFFER DATA.
03100		MOVE	A,NEWFF
03200		MOVEM	A,EXCPFF		;JOBFF FOR EXCEPTION FILE
03300		PUSHJ	P,INEXCP		;INIT AND BUFFER
03400		MOVE	A,NEWFF
03500		MOVEM	A,CORRFF		;JOBFF FOR THE CORRECTION CHANNEL
03600		PUSHJ	P,INCORR		;INIT AND BUFFER.
03700		MOVE	A,NEWFF
03800		MOVEM	A,JOBFF			;SAVE IT WHERE IT COUNTS
03900		SKIPN	DICTFL			;NOT REDEFINED IF DICT LOADED
04000		MOVEM	A,LISTFF		;MUST BE LOCATION FOR LISTS.
04100		MOVE	A,LISTFF
04200		SKIPN	DICTFL
04300		MOVEM	A,DICTBO		;BOTTOM OF DICTIONARY
04400		MOVEM	A,JOBFF			;WORKS OUT ANY HOW
04500		SKIPN	DICTFL			;SKIP IF DICTIONARY EXISTS
04600	BEGIN0:	PUSHJ	P,LOADER		;NO DICTIONARY, OR LOADING AUX
04700		OUTSTR	[ASCIZ/
04800	Do you want to augment the dictionary? /]
04900		TTCALL	4,A			;WAIT FOR ANSWER
05000		PUSHJ	P,FLUTTY		;FLUSH TO NEXT DELIM
05100		CAIE	A,"Y"
05200		CAIN	A,"y"
05300		JRST	BEGIN0			;OFF TO LOAD MORE.
05400	
05500	BEGIN1:	SETZM	NOEND			;ASSUME THAT WE DO ENDTST
05600		OUTSTR	[ASCIZ/
05700	Name of the file to check and correct: /]
05800		PUSHJ	P,GETFIL		;GET A FILE NAME IN SOME WAY.
05900		JRST	ENDIT
06000		LOOKUP	DATA,K
06100		JRST	[PUSHJ	P,FNOTFM
06200			JRST	BEGIN1]
06300		TRNE	FL,TRAIN
06400		JRST	BEGIN5			;GIVE US SOME TRAINING
06500		TRNE	FL,QTRAIN		;OR SPECIAL TRAINING
06600		JRST	[OUTSTR	[ASCIZ/An exception file is needed.  /]
06700			JRST	BEGIN3]
06800	BEGIN2:	OUTSTR	[ASCIZ/
06900	File name for output: /]
07000		PUSHJ	P,GETFIL
07100		JRST	[OUTSTR	[ASCIZ/No corrections.
07200	/]
07300			TRO	FL,NOCORR	;DO NO CORRECTIONS
07400			TRNE	FL,TRAIN
07500			JRST	BEGIN5		;TRAINING
07600			JRST	BEGIN3]
07700		TRZ	FL,NOCORR
07800		TRNE	FL,TRAIN
07900		JRST	[OUTSTR	T.MSG
08000			JRST	BEGIN1]
08100		ENTER	CORR,K
08200		JRST	[PUSHJ	P,ENTFAI
08300			JRST	BEGIN2]
08400	BEGIN3:	OUTSTR	[ASCIZ/
08500	File for exceptions: /]
08600		PUSHJ	P,GETFIL
08700		JRST	[TRNE	FL,QTRAIN
08800			JRST	BEGIN3
08900			OUTSTR	[ASCIZ/No exception file.
09000	/]
09100			TRO	FL,NOEXCP
09200			TRNE	FL,TRAIN
09300			JRST	.+1
09400			JRST	BEGIN5]
09500		TRZ	FL,NOEXCP
09600		TRNE	FL,TRAIN
09700		JRST	[OUTSTR	T.MSG
09800			JRST	BEGIN1]
09900		ENTER	EXCP,K
10000		JRST	[PUSHJ	P,ENTFAI
10100			JRST	BEGIN3]
10200	BEGIN5:
10300	IFN STANSW,<
10400		TRNE	FL,IIISW		;III?
10500		PUSHJ	P,DPYINI		;YES. INITIALIZE THE DISPLAY
10600	>;IFN STANSW
10700		OUTSTR	[ASCIZ/working...
10800	/]
10900		TRZ	FL,TECO!SHUTUP		;NOTE THAT HELPSN AND HELP2S WILL BE
11000						;ZERO THE VERY FIRST TIME THRU
11100		TRO	FL,FRSTOP		;FLAG UP FOR FIRST I/O ON DATA
11200		PUSHJ	P,LOOP			;GO OFF AND DO ALL THE WORK
11300	ENDIT:	OUTSTR	[ASCIZ/Type:
11400	E	Exit
11500	S	Save this core image
11600	C	Correct another file
11700	/]
11800	IFG COUNTS,<
11900		OUTSTR	[ASCIZ/X	Dump the trace counts (for debugging only)
12000	/]
12100	>
12200	
12300		OUTSTR	[ASCIZ/A	Augment the dictionary and correct another file
12400	D	Dump the dictionary to disk (DON'T DO THIS)
12500	I	Dump incremental. (Rewrites a file!)
12600	*/]
12700		TRZ	FL,TRAIN!QTRAIN	;EXIT TRAINING MODE
12800		TTCALL	4,A
12900		TRZ	A,40	;MAKE UPPER
13000		CAIN	A,"I"
13100		JRST	[PUSHJ	P,SETNUM
13200			PUSHJ	P,IDMPD
13300			JRST	ENDIT]
13400		TTCALL	11,0		;FLUSH TO BE SURE.
13500		CAIN	A,"E"
13600		EXIT
13700	
13800	IFN COUNTS, <
13900		CAIN	A,"X"
14000		JRST	DTRACE
14100	>
14200	
14300		CAIN	A,"S"
14400		JRST	SAVET
14500		CAIN	A,"C"
14600		JRST	XBEG.1
14700		CAIN	A,"A"
14800		JRST	BEGIN
14900		CAIN	A,"D"
15000		JRST	[PUSHJ	P,DUMPD
15100			JRST	ENDIT]
15200		TTCALL	3,[ASCIZ/Huh? /]
15300		JRST	ENDIT
15400	
15500	XBEG.1:	RESET
15600		PUSHJ	P,INDICT
15700		PUSHJ	P,INDATA
15800		PUSHJ	P,INCORR
15900		PUSHJ	P,INEXCP
16000		JRST	BEGIN1
16100	
16200	SAVET:	PUSHJ	P,SAVEME
16300		JRST	ENDIT
16400	
16500	T.MSG:	ASCIZ/
16600	You can't use Training Switch and have output or execeptions
16700	/
16800	
16900	IFN STANSW,<
17000	DPYINI:	DPYCLR					;CLEAR THE SCREEN
17100		DPYPOS	-200				;PUSH THE PAGE PRINTER TO THE BOTTOM
17200		DPYSIZ	4002				;SET GLITCHES ETC
17300		POPJ	P,				;THAT'S ALL FOR NOW.
17400	>;IFN STANSW
17500	
     

00100		SUBTTL	THE LOOP WHERE ALL THE WORK GETS DONE.
00200	
00300	COMMENT %
00400	
00500		This file depicts what happens to a word as it is checked
00600	and corrected by the spelling checker.
00700	
00800				 <begin>
00900				    I
01000				    V
01100				    O_--------------------------------------_O
01200				    I					     ^
01300				    V					     I
01400			----------------------------			     I
01500			I			   I			     I
01600	O_-(if eof)_----I	read next word	   I			     I
01700	I		I			   I			     I
01800	I		I    lookup in dictionary  I--(if success: win)----->O
01900	I		I			   I			     ^
02000	I		I	(failure)	   I			     I
02100	I		I			   I			     I
02200	I		I	call endtst	   I--(if success: win)----->O
02300	I		I			   I			     ^
02400	I		I	(failure)	   I			     I
02500	I		I			   I			     I
02600	I		I	call tryfix	   I			     I
02700	I		I			   I			     I
02800	I		I    (correct/accept word) I			     I
02900	I		----------------------------			     I
03000	I			    I					     I
03100	I			    V					     I
03200	I			    O--------------------------------------->O
03300	I
03400	V
03500	O-------------------------->O
03600				    I
03700				    V
03800			----------------------------
03900			I			   I
04000			I	end sequence	   I
04100			I			   I
04200			----------------------------
04300	
04400	%
04500	
04600	LOOP:	ICOUNT
04700		PUSHJ	P,GETLIN
04800		JRST	FLOOP		;EOF ON DATA
04900		PUSHJ	P,CHKLIN	;CHECK/CORRECT LINE
05000		PUSHJ	P,PUTLIN	;OUPUT LINE
05100		JRST	LOOP
05200	
05300	FLOOP:	CLOSE	DATA,		;YOU KNOW WHAT TO DO
05400		CLOSE	CORR,		;CLOSE OUTPUT CHANNEL
05500		STATZ	CORR,740000	;CHECK IT
05600		JRST	DDE		;DEVICE DATA ERROR (OUTPUT)
05700		CLOSE	EXCP,		;CLOSE EXCEPTIONS
05800		STATZ	EXCP,740000	;CHECK STATUS
05900		JRST	DDE		;ERROR
06000		RELEAS	DATA,
06100		RELEAS	EXCP,
06200		RELEAS	CORR,
06300		OUTSTR	[ASCIZ/
06400	Finished.
06500	/]
06600		POPJ	P,
     

00100		SUBTTL	THE DEBUG QUEUE AND TRACE DUMP ROUTINE
00200	COMMENT  $
00300	IF COUNTS IS DEFINED AS GREATER THAN ZERO THEN A QUEUE OF THE
00400	LAST 100 LABELS PASSED WILL BE KEPT.
00500	
00600	$
00700	
00800	IFN COUNTS,<
00900	DEBQUE:	TRNE	FL,NOTRAC
01000		POPJ	P,
01100		ADD	DEBX,[XWD 1,1]
01200		MOVEM	DEBA,(DEBX)
01300		JUMPL	DEBX,[POPJ P,]	;God forbid you should jump to CPOPJ
01400		MOVE	DEBX,[XWD %DBT+%DTL,%DBT]
01500		BLT	DEBX,%DBT+%DTL-1
01600		MOVE	DEBX,[IOWD %DTL,%DBT+%DTL]
01700		POPJ	P,
01800	
01900	QDUMP:	MOVEI	B,[ASCIZ/
02000	DUMP OF THE QUEUE OF STATEMENTS EXECUTED.
02100	/]
02200		PUSHJ	P,WRSDCT
02300		HRRZ	C,DEBX		;LAST ADDRESS STORED IN
02400		MOVEI	D,%DBT
02500	QDUMP1:	MOVE	A,(D)
02600		PUSHJ	P,OCTPEX
02700		MOVEI	B,[ASCIZ/
02800	/]
02900		PUSHJ	P,WRSDCT
03000		CAMGE	D,C
03100		AOJA	D,QDUMP1
03200		POPJ	P,
03300	CRASH:	TRO	FL,NOTRAC
03400		PUSHJ	P,INDCTO
03500		MOVE	K,[SIXBIT/CRASH0/]
03600	CRASH0:	MOVSI	L,'TRC'
03700		SETZ	M,
03800		MOVE	N,XPPN
03900		LOOKUP	DICT,K
04000		JRST	.+2
04100		AOJA	K,CRASH0
04200		MOVSI	L,'TRC'
04300		SETZ	M,
04400		MOVE	N,XPPN
04500		ENTER	DICT,K
04600		POPJ	P,
04700		JRST	DTRACX
04800	
04900	XPPN:	SIXBIT	/  SREG/
05000	
05100	DTRACE:	PUSHJ	P,DTRACY
05200		JRST	ENDIT
05300	DTRACY:	TTCALL	3,[ASCIZ/File name for the trace counts:  /]
05400		TRO	FL,NOTRAC
05500		PUSHJ	P,GETFIL
05600		JRST	[TTCALL	3,[ASCIZ/default name is TRACE.DAT
05700	/]
05800			MOVE	K,[SIXBIT/TRACE/]
05900			MOVSI	L,'DAT'
06000			SETZB	M,N
06100			JRST	.+1]
06200		PUSHJ	P,INDCTO
06300		ENTER	DICT,K
06400		JRST	[PUSHJ	P,ENTFAI
06500			JRST	DTRACE]
06600	DTRACX:	PUSHJ	P,QDUMP
06700		MOVEI	B,[ASCIZ/	Statement execution counts
06800	
06900	/]
07000		PUSHJ	P,WRSDCT
07100		SETZ	Y,
07200	DTRA.1:	CAIL	Y,ICTABX-ICTAB
07300		JRST	DTRA.2
07400		MOVE	A,Y
07500		PUSHJ	P,OCTPEX
07600		MOVEI	A,11
07700		PUSHJ	P,WDICT
07800		MOVE	A,ICTAB(Y)
07900		PUSHJ	P,DECPTY
08000		MOVEI	B,[ASCIZ/
08100	/]
08200		PUSHJ	P,WRSDCT
08300		AOJA	Y,DTRA.1
08400	DTRA.2:	CLOSE	DICT,
08500		RELEAS	DICT,
08600		POPJ	P,
08700	OCTPEX:	IDIVI	A,10
08800		PUSH	P,B
08900		JUMPE	A,.+2
09000		PUSHJ	P,OCTPEX
09100		POP	P,A
09200		ADDI	A,60
09300		PUSHJ	P,WDICT
09400		POPJ	P,
09500	
09600	DECPTY:	IDIVI	A,12
09700		PUSH	P,B
09800		JUMPE	A,.+2
09900		PUSHJ	P,DECPTY
10000		POP	P,A
10100		ADDI	A,60
10200		PUSHJ	P,WDICT
10300		POPJ	P,
10400	>
10500	
10600	IFN COUNTS!XCNT<
10700	WRSDCT:	HRLI	B,(<POINT 7,0>)
10800	WRSDC1:	ILDB	A,B
10900		JUMPE	A,CPOPJ
11000		PUSHJ	P,WDICT
11100		JRST	WRSDC1
11200	>
     

00100		SUBTTL	FULL DUMP AND INCREMENTAL DUMP ROUTINES
00200	
00300	DUMPD:	TRZA	FL,IDUMP
00400	IDMPD:	TRO	FL,IDUMP
00500	DUMPD1:	PUSHJ	P,INDCTO	;INIT DICTIONARY CHANNEL IN OUTPUT MODE
00600		OUTSTR	[ASCIZ/file name: /]
00700		PUSHJ	P,GETFIL
00800		JRST	[OUTSTR	[ASCIZ/Default name is WORDS.LST
00900	/]
01000			MOVE	K,[SIXBIT/WORDS/]
01100			MOVSI	L,'LST'
01200			SETZB	M,N
01300			JRST	.+1]
01400		ENTER	DICT,K
01500		JRST	[PUSHJ	P,ENTFAI
01600			JRST	DUMPD1]
01700	
01800		MOVSI	Z,-HASHTL
01900	DODMP1:	HLRZ	X,HASHTB(Z)
02000		PUSHJ	P,CHASED		;DO LEFT SIDE
02100		HRRZ	X,HASHTB(Z)
02200		PUSHJ	P,CHASED		;DO RIGHT SIDE
02300		AOBJN	Z,DODMP1		;LOOP
02400		CLOSE	DICT,0
02500		STATZ	DICT,740000
02600		JRST	DDE
02700		POPJ	P,
02800	
02900	DDCVR2:	MOVEI	A,15
03000		PUSHJ	P,WDICT
03100		MOVEI	A,12
03200		PUSHJ	P,WDICT
03300	CHAS.2:	MOVEI	X,(Y)			;LINK ONWARDS
03400	CHASED:	JUMPE	X,CPOPJ
03500		HRRZ	Y,0(X)			;REMEMBER THE LINK AHEAD
03600		TRNN	FL,IDUMP
03700		JRST	CHAS.1
03800		LDB	A,[POINT 5,(X),17]	;GET SUB-DICTIONARY NUMBER
03900		CAME	A,IDNUM
04000		JRST	CHAS.2			;SKIP THIS WORD
04100	CHAS.1:	ADD	X,[POINT 5,1]
04200	DDCVR1:	ILDB	A,X
04300		JUMPE	A,DDCVR2
04400		TRO	A,100
04500		PUSHJ	P,WDICT
04600		JRST	DDCVR1
     

00100		SUBTTL	GETLIN	READ A LINE OF DATA INTO LIBUF
00200	
00300	GETLIN:	ICOUNT
00400		SETZM	LIBUF
00500		MOVE	A,[XWD LIBUF,LIBUF+1]
00600		BLT	A,LOBUF+37	;CLEAR BOTH INPUT AND OUTPUT LINES
00700		PUSHJ	P,RDDATA
00800		POPJ	P,		;NON-SKIP AT EOF.
00900		TRNE	FL,TECO		;ARE WE A TECO FILE?
01000		JRST	GETLTC		;GET A TECO LINE
01100		MOVE	B,[POINT 36,LIBUF]	;SET FOR WORD BY WORD
01200		JRST	GETLN2		;A IS SET WITH FIRST DATA
01300	GETLN1:	ICOUNT
01400		PUSHJ	P,RDDATA	;READ DATA (SKIP RETURN)
01500		POPJ	P,		;NOT GOOD MANNERS TO EOF 
01600					;IN THE MIDDLE OF A LINE
01700	GETLN2:	ICOUNT
01800		IDPB	A,B		;SAVE THE DATA IN THE LINE
01900		BCHECK(B,LOBUF)
02000		ANDI	A,377		;MASK ALL BUT THE LAST 8 BITS
02100		LSH	A,-1		;A_THE FIFTH ASCIZ CHARACTER THAT HAD BEEN IN A,
02200					;RIGHT JUSTIFIED IN A.
02300		JUMPE	A,GETLN3	;END OF A LINE IN SOS FORMAT
02400		CAIE	A,12		;OR LF WILL END A LINE
02500		JRST	GETLN1		;BACK FOR MORE OF THIS LINE
02600	GETLN3:	ICOUNT
02700		MOVE	A,[XWD LIBUF,LOBUF]
02800		BLT	A,LOBUF+1	;COPY FIRST TWO MACHINE WORDS TO OUTPUT
02900					;WE WILL USE ONLY THE FIRST 6 CHARACTERS
03000					;THE LINE NUMBER AND THE TAB.
03100		MOVE	A,[POINT 7,LIBUF+1,6]	;SET TO GRAB THE FIRST REAL 
03200						;CHARACTER BY ILDB.
03300		MOVEM	A,INPTR			;SAVE AS THE "IN POINTER"
03400		HRRI	A,LOBUF+1		;FIX ADDRESS
03500		MOVEM	A,OUTPTR		;SAVE THE OUT POINTER
03600		TRNN	FL,PICKUP
03700		JRST	CPOPJ1			;AND GIVE A SKIP RETURN
03800		MOVE	A,PAGENO
03900		CAMGE	A,PICKPG
04000		JRST	CPOPJ1
04100		CAME	A,PICKPG
04200		JRST	[TRZ	FL,PICKUP
04300			JRST	CPOPJ1]
04400		MOVE	A,LIBUF
04500		TRZ	A,1
04600		CAML	A,PICKLN
04700		TRZ	FL,PICKUP
04800		JRST	CPOPJ1
04900	
05000	GETLTC:	ICOUNT
05100		MOVE	B,[POINT 7,LIBUF]
05200		JRST	GETEC1
05300	GETTEC:	ICOUNT
05400		PUSHJ	P,RDDATA
05500		POPJ	P,
05600	GETEC1:	ICOUNT
05700		IDPB	A,B
05800		BCHECK(B,LOBUF)
05900		CAIE	A,12
06000		CAIN	A,14
06100		JRST	.+2
06200		JRST	GETTEC
06300		MOVE	A,[POINT 7,LIBUF]
06400		MOVEM	A,INPTR
06500		HRRI	A,LOBUF
06600		MOVEM	A,OUTPTR
06700		TRNN	FL,PICKUP
06800		JRST	CPOPJ1
06900		MOVE	A,PAGENO
07000		CAML	A,PICKPG
07100		TRZ	FL,PICKUP
07200		JRST	CPOPJ1
     

00100		SUBTTL	THE READING ROUTINE
00200	
00300	RDDATA:	ICOUNT
00400		SOSLE	DATABF+2
00500		JRST	RDATA1
00600		INPUT	DATA,
00700		STATZ	DATA,740000
00800		JRST	DIE
00900		STATZ	DATA,20000
01000		POPJ	P,
01100		TRZE	FL,FRSTOP
01200		JRST	CKTECO		;CHECK FOR A TECO FILE.
01300	RDATA1:	ICOUNT
01400		ILDB	A,DATABF+1
01500		JUMPE	A,RDDATA	;BACK FOR MORE IF NULL
01600		JRST	CPOPJ1
01700	
01800	CKTECO:	ICOUNT
01900		MOVEI	A,1		;SINCE WE ARE AT FIRSTOP, WE MIGHT AS
02000		MOVEM	A,PAGENO	;WELL INITIALIZE THE PAGE COUNT
02100		SETZM	LINENO		;AND ZERO THE LINE NUMBER
02200		MOVE	A,DATABF+1
02300		ILDB	A,A
02400		TRNE	A,1
02500		JRST	CKTEC1		;THIS IS AN SOS FILE. PRESERVE LINE NUMBERS
02600		TRZ	FL,TVE		;ASSUME NOT TV/E FORMAT
02700		CAMN	A,[ASCII/COMME/]
02800		JRST	[MOVE A,DATABF+1
02900			IBP A
03000			ILDB A,A
03100			CAMN A,[ASCII/NT  /]
03200			TRO FL,TVE
03300			JRST .+1]
03400		TRO	FL,TECO		;UNNUMBERED FILE. TECO OR TV/E FORMAT
03500		MOVEI	A,5
03600		IMULM	A,DATABF+2	;MAKE WORD COUNT INTO CHAR COUNT
03700		MOVSI	A,(<POINT 7,0,35>)	;WHEN ILDB HITS THIS YOU GET THE
03800						;RIGHT BYTE, (FROM THE NEXT WD)
03900		HLLM	A,DATABF+1	;UPSET THE BYTE POINTERS
04000		SETSTS	DATA,1		;CHANGE SO THAT IN THE FUTURE HONESTY PREVAILS
04100	;WE ALSO HAVE TO CHANGE THE MODE OF THE CORR CHANNEL
04200	;SO THAT IT WILL ACCEPT CHARACTER AT A TIME BYTE POINTERS.
04300		SETSTS	CORR,1		;HAVE TO SCREW AROUND WITH BYTE POINTERS
04400		HLLM	A,CORRBF+1 	;SINCE OUTBUF HAS ALREADY SET THEM
04500		TRZN	FL,TVE		;TV/E FILE?
04600		JRST	CKTEC1		;NO.
04700		OUTSTR	[ASCIZ ?TV/E directory page will be deleted.
04800	Page 2
04900	?]
05000		AOS	PAGENO
05100	CKTEC0:	PUSHJ	P,RDDATA	;CALL MAIN READER RECURSIVELY (1 LEVEL ONLY)
05200		JRST	[OUTSTR [ASCIZ/Unexpected end of file while skipping the directory.
05300	/]
05400			POPJ P,]
05500		CAIE	A,14		;FF YET?
05600		JRST	CKTEC0		;NO. READ MORE
05700	
05800	CKTEC1:	TRNN	FL,PICKUP
05900		JRST	RDATA1
06000		TTCALL	3,[ASCIZ/On what page do you want to pickup?  /]
06100		PUSHJ	P,SETPAG
06200		TRNE	FL,TECO
06300		JRST	RDATA1
06400		TTCALL	3,[ASCIZ/and what line do you want to start at?  /]
06500		PUSHJ	P,SETLNO
06600		JRST	RDATA1
06700	
06800	SETPAG:	SETZ	B,
06900	SETPG1:	TTCALL	4,A
07000		CAIL	A,"0"
07100		CAILE	A,"9"
07200		JRST	SETPG2
07300		IMULI	B,12
07400		ADDI	B,-"0"(A)
07500		JRST	SETPG1
07600	SETPG2:	JUMPE	B,[TTCALL	3,[ASCIZ/Default is page 1
07700	/]
07800			MOVEI	B,1
07900			JRST	.+1]
08000		MOVEM	B,PICKPG
08100		PUSHJ	P,FLUTTY
08200		POPJ	P,
08300	
08400	SETLNO:	MOVE	B,[ASCII/00000/]
08500	SETLO1:	TTCALL	4,A
08600		CAIL	A,"0"
08700		CAILE	A,"9"
08800		JRST	SETLO2
08900		LSH	B,7
09000		LSH	A,1
09100		OR	B,A
09200		JRST	SETLO1
09300	SETLO2:	PUSHJ	P,FLUTTY
09400		MOVEM	B,PICKLN
09500		POPJ	P,
     

00100		SUBTTL  CHKLIN ROUTINE
00200	CHKLIN:	ICOUNT
00300		TRZ	FL,ERRLIN		;NO ERROR YET
00400		AOS	LINENO			;INCREMENT LINE NUMBER
00500	IFN STANSW,<
00600		TRNE	FL,IIISW
00700		PUSHJ	P,DPGL			;DISPLAY PAGE/LINE NUMBER
00800	>
00900	CHKLN1:	ICOUNT
01000		PUSHJ	P,LDWORD		;GET A WORD
01100		JRST	CHKLN2			;NOT A WORD
01200		TRNE	FL,SHUTUP+PICKUP
01300		JRST	CHKL1A			;DON'T BOTHER
01400		PUSHJ	P,HASHCP
01500		PUSHJ	P,SEARCH		;LOOK FOR IT
01600		JRST	CHKLN3			;WASN'T THERE
01700	CHKL1A:	ICOUNT
01800		PUSHJ	P,COPYIO		;COPY TO OUTPUT
01900		JRST	CHKLN1			;BACK FOR THE REST
02000	CHKLN2:	ICOUNT
02100		PUSHJ	P,COPYIO
02200		JUMPE	A,CPOPJ			;SUPER NULL, EO LINE
02300		CAIN	A,14			;CHECK FOR FF
02400		JRST	[AOS	PAGENO		;COUNT ANOTHER PAGE.
02500			SETZM	LINENO
02600			POPJ	P,]
02700		CAIN	A,12			;LF OR
02800		POPJ	P,
02900		JRST	CHKLN1			;BACK FOR THE REST OF THE LINE
03000	CHKLN3:	ICOUNT
03100		PUSHJ	P,ENDTST		;TRY REMOVING ENDINGS
03200		JRST	.+2			;FAILED TO FIND WORD
03300		JRST	CHKL1A			;ACCEPT WORD
03400		TRNE	FL,TRAIN		;SKIP UNLESS WE ARE TRAINING
03500		JRST	[SETZM	IDNUM
03600			AOS	IDNUM
03700			PUSHJ	P,HASHCP
03800			PUSHJ	P,INSRTX
03900			JRST	CHKL1A]		;INSERT WORD INTO TRAINING SET
04000		TRNE	FL,QTRAIN
04100		JRST	CHKLN5
04200		PUSHJ	P,CONVRT		;MAKE 7 BITS ASCII IN WORDIX
04300	IFN STANSW,<
04400		TRNE	FL,IIISW
04500		PUSHJ	P,DPYLIN		;DISPLAY SPECIAL IF ON III
04600	>
04700		TROE	FL,ERRLIN
04800		JRST	CHKLN4			;LINE HAS BEEN PUBLISHED ONCE 
04900		PUSHJ	P,PPAGE			;PUBLISH PAGE
05000	IFN STANSW,<TRNN FL,IIISW>
05100		TTCALL	3,LIBUF			;PUBLISH LINE
05200		MOVEI	B,LIBUF
05300		PUSHJ	P,WRSEXC		;IN EXCEPTION FILE TOO
05400	CHKLN4:	ICOUNT
05500	IFN STANSW,<TRNN FL,IIISW>
05600		TTCALL	3,WORDIX
05700		MOVEI	B,WORDIX
05800		PUSHJ	P,WRSEXC
05900		MOVEI	B,[ASCIZ/
06000	/]
06100	IFN STANSW,<TRNN FL,IIISW>
06200		TTCALL	3,(B)
06300		PUSHJ	P,WRSEXC
06400		TRNN	FL,NOCORR+SHUTUP	;SKIP IF HE DOESN'T WANT IT
06500	CHKLN5:	PUSHJ	P,TRYFIX		;TRY TO FIX IT
06600		PUSHJ	P,COPYIO
06700		JRST	CHKLN1
06800	
06900	IFN STANSW,<
07000	DPYLIN:	MOVE	B,OUTPTR		;GET THE OUTPUT POINTER
07100		SETZ	A,
07200		IDPB	A,B			;STUFF A ZERO IN BEYOND THE OUTPUT LINE.
07300		MOVE	Z,[IOWD DPYLEN,DPYBUF]
07400		PUSH	Z,[0]
07500		PUSH	Z,[LVW(-1000,0,I,A,2,2)]	;SET TO LEFT MIDDLE OF SCREEN
07600		MOVEI	C,1
07700		MOVE	Y,[POINT 7,C]
07800		MOVE	X,[POINT 7,LOBUF]	;GET POINTER TO LINE OUTPUT BUFFER
07900		PUSHJ	P,COPX
08000		SKIPN	WORDIX
08100		JRST	DPYL1
08200		PUSH	Z,C
08300		PUSH	Z,[LVW(20,0,I,,7,4)]	;SET BRIGHTNESS AND SIZE FOR OFFENDER
08400		MOVE	Y,[POINT 7,C]
08500		MOVEI	C,1
08600		MOVE	X,[POINT 7,WORDIX]
08700		PUSHJ	P,COPX
08800		PUSH	Z,C
08900		PUSH	Z,[LVW(20,0,I,,2,2)]	;RESTORE NORMAL BRIGHTNESS AND SIZE
09000		MOVEI	C,1
09100		MOVE	Y,[POINT 7,C]
09200	DPYL1:	MOVE	X,INPTR1
09300		PUSHJ	P,COPX
09400		PUSH	Z,C
09500		HLRE	A,Z
09600		ADDI	A,DPYLEN
09700		MOVEM	A,DPYSIZ
09800		UPGIOT	2,DPYHDR
09900		POPJ	P,
10000	
10100	DPGL:	MOVE	Z,[IOWD DPYLEN,DPYBUF]
10200		PUSH	Z,[0]
10300		PUSH	Z,[LVW(-1000,40,I,A,2,2)]
10400		MOVEI	C,1
10500		MOVE	Y,[POINT 7,C]
10600		MOVE	X,[POINT 7,[ASCIZ/Page /]]
10700		PUSHJ	P,COPX
10800		MOVE	A,PAGENO
10900		PUSHJ	P,DECDIS
11000		MOVE	X,[POINT 7,[ASCIZ/  Line /]]
11100		PUSHJ	P,COPX
11200		TRNE	FL,TECO			;HAS THIS GOT LINE NUMBERS
11300		JRST	DPGL1			;NO.
11400		MOVE	X,LIBUF			;GET A LINE NUMBER
11500		TRNN	X,1			;REAL LINE NUMBER?
11600		JRST	DPGL1			;NOPE.
11700		MOVEM	X,WORDIX
11800		SETZM	WORDIX+1
11900		MOVE	X,[POINT 7,WORDIX]
12000		PUSHJ	P,COPX
12100		JRST	DPGL2
12200	
12300	DPGL1:	MOVE	A,LINENO
12400		PUSHJ	P,DECDIS
12500	DPGL2:	PUSH	Z,C
12600		HLRE	A,Z
12700		ADDI	A,DPYLEN
12800		MOVEM	A,DPYSIZ
12900		UPGIOT	3,DPYHDR
13000		POPJ	P,
13100	
13200	>					;IFN STANSW
13300	
     

00100		SUBTTL	PUTLIN
00200	PUTLIN:	ICOUNT
00300		TRNE	FL,TECO
00400		JRST	PUTLN2
00500		MOVE	B,[POINT 36,LOBUF]
00600	PUTLN1:	ICOUNT
00700		ILDB	A,B
00800		PUSHJ	P,WRCORR
00900		LSH	A,-1
01000		ANDI	A,177
01100		JUMPE	A,CPOPJ		;DONE WITH LINE
01200		CAIE	A,12
01300		JRST	PUTLN1
01400		POPJ	P,
01500	
01600	PUTLN2:	ICOUNT
01700		MOVE	B,[POINT 7,LOBUF]
01800	PUTLN3:	ICOUNT
01900		ILDB	A,B
02000		PUSHJ	P,WRCORR
02100		CAIE	A,12
02200		CAIN	A,14
02300		POPJ	P,
02400		JRST	PUTLN3
02500	
02600	
02700	WRCORR:	ICOUNT
02800		TRNE	FL,NOCORR
02900		POPJ	P,		;NO CORECCTIONS MEANS THAT
03000		SOSLE	CORRBF+2
03100		JRST	WCORR1
03200		OUTPUT	CORR,
03300		STATZ	CORR,740000
03400		JRST	DDE
03500	WCORR1:	ICOUNT
03600		IDPB	A,CORRBF+1
03700		BCHECK(CORRBF+1,@DICTBO)
03800		POPJ	P,
03900	
04000	WRSEXC:	ICOUNT
04100		HRLI	B,(<POINT 7,0>)
04200	WRSEX0:	ICOUNT
04300		ILDB	A,B
04400		JUMPE	A,CPOPJ
04500		PUSHJ	P,WREXCP
04600		JRST	WRSEX0
04700	
04800	WREXCP:	ICOUNT
04900		TRNE	FL,NOEXCP
05000		POPJ	P,
05100	WEXCP0:	ICOUNT
05200		SOSLE	EXCPBF+2
05300		JRST	WEXCP1
05400		OUTPUT	EXCP,
05500		STATZ	EXCP,740000
05600		JRST	DDE
05700	WEXCP1:	ICOUNT
05800		IDPB	A,EXCPBF+1
05900		BCHECK(EXCPBF+1,@DICTBO)
06000		POPJ	P,
06100	
06200	WDICT:	ICOUNT
06300		SOSLE	DICTBF+2
06400		JRST	WDICT1
06500		OUTPUT	DICT,
06600		STATZ	DICT,740000
06700		JRST	DDE
06800	WDICT1:	ICOUNT
06900		IDPB	A,DICTBF+1
07000		BCHECK(DICTBF+1,@DICTBO)
07100		POPJ	P,
07200	
07300	COPYIO:	ICOUNT
07400		MOVE	Z,INPTR
07500	COPYI1:	ICOUNT
07600		ILDB	A,Z
07700		IDPB	A,OUTPTR
07800		BCHECK(OUTPTR,LOBUF+40)
07900		CAME	Z,INPTR1
08000		JRST	COPYI1
08100		MOVEM	Z,INPTR
08200		POPJ	P,
08300	
08400	CONVRT:	ICOUNT
08500		MOVE	Z,[POINT 5,WORDIN]
08600		MOVE	Y,[POINT 7,WORDIX]
08700	CONVR1:	ICOUNT
08800		ILDB	A,Z
08900		JUMPE	A,CONVR2
09000		ADDI	A,"A"-1
09100		IDPB	A,Y
09200		BCHECK(Y,WORDIX+10)
09300		JRST	CONVR1
09400	CONVR2:	ICOUNT
09500		IDPB	A,Y
09600		POPJ	P,
09700	
09800	
09900	
10000	PPAGE:	ICOUNT
10100		MOVEI	B,[ASCIZ/Page /]
10200	IFN STANSW,<TRNN FL,IIISW>
10300		TTCALL	3,(B)
10400		PUSHJ	P,WRSEXC
10500		MOVE	A,PAGENO
10600		PUSHJ	P,DECPB
10700		MOVEI	B,[ASCIZ/
10800	/]
10900		TTCALL	3,(B)
11000		PUSHJ	P,WRSEXC
11100		POPJ	P,
11200	DECPB:	ICOUNT
11300		IDIVI	A,12
11400		PUSH	P,B
11500		SKIPE	A
11600		PUSHJ	P,DECPB
11700		POP	P,A
11800		ADDI	A,"0"
11900	IFN STANSW,<TRNN FL,IIISW>
12000		TTCALL	1,A
12100		JRST	WREXCP
12200	
     

00100		SUBTTL	DESCRIPTION OF ENDTST
00200	COMMENT/
00300	
00400	SKIP  RETURN  SIGNIFIES  THAT  THE  WORD  IS ACCEPTED; NON SKIP MEANS
00500	REJECTION.  IN  EITHER  CASE,  THE  RETURN  WILL  BE MADE SO THAT THE  
00600	ORIGINAL WORD IS RESTORED (IN FIVEBIT) TO WORDIN.
00700	
00800		ENDTST - The Word Endings Checker.
00900	
01000			      <entry: ENDTST>
01100				    I
01200			----------------------------
01300			I	Save the word	   I
01400			----------------------------
01500				    I
01600				    V
01700	ENDTG.:	------------------->O
01800				    I
01900				    V
02000			----------------------------
02100	  		I	acA_last letter	   I
02200			I	dispatch on acA	   I
02300			----------------------------
02400				    I
02500				    V
02600			----------------------------
02700			I if acA = "S" go to EDT.S I
02800			----------------------------
02900				    I     (not an S)
03000				    V
03100	ENDTGO:  ------------------>O
03200				    I
03300				    V
03400			----------------------------
03500			I dispatch on contents of  I
03600			I	   acA		   I
03700			I  G		EDT.G      I
03800			I  D		EDT.D      I
03900			I  R		EDT.R	   I
04000			I  E		END.E	   I
04100			I  T		EDT.T	   I
04200			I  H		EDT.H	   I
04300			I  N		EDT.N      I
04400			I  Y		EDT.Y	   I
04500			I   (else failure)	   I
04600			----------------------------
04700	
04800	EDT.S:   ----------------->O
04900				   I
05000				   V
05100			----------------------------
05200			I delete last letter.	   I
05300			I lookup result		   I----(if success, return)
05400			I  (failure)		   I
05500			I acA _ new last letter	   I
05600			I if letter is S, EDT.SS   I
05700			I if letter is not E,	   I
05800			I	then ENDTGO	   I
05900			I (word was ...ES)	   I
06000			I    delete the E	   I
06100			I    lookup result	   I----(if success, return)
06200			I    (failure)		   I
06300			I acA _ new last letter	   I
06400			I if acA  "I" then failureI
06500			I set last letter to "Y"   I
06600			I    lookup result	   I----(success, return)
06700			I   return: failure	   I
06800			----------------------------
06900	
07000	EDT.G:   ------------------>O
07100				    I
07200				    V
07300			----------------------------
07400			I  remove last letter	   I
07500			I acA _ new last letter	   I
07600			I if acA  "N" then fail   I
07700			I  remove last leter	   I
07800			I acA _ new last letter	   I
07900			I if acA  "I" then fail   I
08000			I  remove last letter	   I
08100			I   lookup the word	   I----(success, return)
08200			I	(failure)	   I
08300			----------------------------
08400				    I
08500				    V
08600	OHELL.: ------------------->O
08700				    I
08800				    V
08900			----------------------------
09000			I remove the last letter   I
09100			I  lookup the word	   I----(success, return)
09200			I   return: failure	   I
09300			----------------------------
09400	
09500	EDT.D:  ------------------->O
09600				    I
09700				    V
09800			----------------------------
09900			I  remove the last letter  I
10000			I acA _ new last letter	   I
10100			I if acA  "E" then fail   I
10200			I     lookup the word	   I----(success, return)
10300			I    (failure)		   I
10400			I   remove the last letter I
10500			I	lookup the word	   I----(success, return)
10600			I    (failure)		   I
10700			I acA_ new last letter	   I
10800			I if acA  "I" then OHELL. I
10900			I set last letter to "Y"   I
11000			I	lookup the word	   I----(success, return)
11100			I  return: failure	   I
11200			----------------------------
11300	
11400	EDT.R:  ------------------->O
11500				    I
11600				    V
11700			----------------------------
11800			I  remove last letter	   I
11900			I acA _ new last letter	   I
12000			I if acA  "E" then fail   I
12100			I	lookup the word	   I----(success, return)
12200			I	(failure)	   I
12300			I  remove last letter	   I
12400			I	lookup the word	   I----(success, return)
12500			I	(failure)	   I
12600			I acA _ new last letter	   I
12700			I if acA  "I" then OHELL. I
12800			I set last letter to "Y"   I
12900			I	lookup the word	   I----(success, return)
13000			I   return: failure	   I
13100			----------------------------
13200	
13300	EDT.T:	------------------->O
13400				    I
13500				    V
13600			----------------------------
13700			I remove last letter	   I
13800			I acA _ new last letter	   I
13900			I if acA  "S" then fail   I
14000			I remove last letter	   I
14100			I acA _ new last letter	   I
14200			I if acA  "E" then fail   I
14300			I	lookup the word	   I----(success, return)
14400			I	(failure)	   I
14500			I remove the last letter   I
14600			I	lookup the word	   I----(success, return)
14700			I	(failure)	   I
14800			I    go to OHELL.	   I
14900			----------------------------
15000	
15100	EDT.H:	------------------>O
15200				   I
15300				   V
15400			----------------------------
15500			I  remove the last letter  I
15600			I acA _ new last letter	   I
15700			I if acA  "T" then fail   I
15800			I	lookup the word	   I----(success, return)
15900			I	(failure)	   I
16000			I   go to OHELL.	   I
16100			----------------------------
16200	
16300	EDT.N:	------------------>O
16400				   I
16500			----------------------------
16600			I  remove the last letter  I
16700			I acA _ new last letter    I
16800			I if acA ="E" go to EDT.EN I
16900			I if acA  "O" then fail   I
17000			I   remove the last letter I
17100			I acA _ new last letter	   I
17200			I if acA  "I" then fail   I
17300			I set last letter to "E"   I
17400			I    lookup word	   I----(success, return)
17500			I	(failure)	   I
17600			I  remove the last letter  I
17700			I acA _ new last letter	   I
17800			I if aca  "T" then fail   I
17900			I  remove the last letter  I
18000			I acA _ new last letter	   I
18100			I if acA  "A" then fail   I
18200			I  remove the last letter  I
18300			I acA _ new last letter	   I
18400			I if acA  "C" then fail   I
18500			I remove the last letter   I
18600			I acA _ new last letter	   I
18700			I if acA  "I" then fail   I
18800			I set last letter to "Y"   I
18900			I    lookup the word	   I----(success, return)
19000			I    return: failure	   I
19100			----------------------------
19200	
19300	EDT.EN:	------------------>O
19400				   I
19500				   V
19600			-----------------------------
19700			I  remove the last letter   I
19800			I     lookup the word	    I----(success, return)
19900			I    return: failure	    I
20000			-----------------------------
20100	
20200	EDT.Y:	------------------>O
20300				   I
20400				   V
20500			-----------------------------
20600			I  remove the last letter   I
20700			I acA _ new last letter	    I
20800			I if acA ="L" go to EDT.LY  I
20900			I if acA  "T" then fail    I
21000			I  remove the last letter   I
21100			I    lookup the word	    I----(success, return)
21200			I	(failure)	    I
21300			I acA _ new last letter	    I
21400			I if acA  "I" then fail    I
21500			I set last letter to "E"    I
21600			I	lookup the word	    I----(success, return)
21700			I	return: failure	    I
21800			-----------------------------
21900	
22000	EDT.LY:	------------------>O
22100				   I
22200				   V
22300			-----------------------------
22400			I  remove the last letter   I
22500			I	lookup the word	    I----(success, return)
22600			I	(failure)	    I
22700			I    go to OHELL.	    I
22800			-----------------------------
22900	
23000	ENDSS:	------------------>O
23100				   I
23200				   V
23300			-----------------------------
23400			I  remove the last letter   I
23500			I acA _ new last letter	    I
23600			I if acA  "E" then fail    I
23700			I  remove the last letter   I
23800			I acA _ new last letter	    I
23900			I if acA  "N" then fail    I
24000			I  remove the last letter   I
24100			I	lookup word	    I----(success, return)
24200			I	(failure)	    I
24300			I append "E" to word	    I
24400			I	lookup word	    I-----(success, return)
24500			I	(failure)	    I
24600			I   remove the last letter  I
24700			I acA _ new last letter	    I
24800			I if acA  "I" go to ENDTG. I
24900			I set last letter to "Y"    I
25000			I	lookup word	    I----(success, return)
25100			I   return: failure	    I
25200			-----------------------------
25300	
25400	END.E:	------------------>O
25500				   I
25600				   V
25700			-----------------------------
25800			I  remove the last letter   I
25900			I acA _ new last letter	    I
26000			I if acA  "V" then failure I
26100			I     (...VE seen)	    I
26200			I remove the last letter    I
26300			I acA _ the new last letter I
26400			I if acA  "I" then fail    I
26500			I remove the last letter    I
26600			I	lookup word	    I----(success, return)
26700			I append "E" to word	    I
26800			I	lookup word	    I----(success, return)
26900			I   return: failure	    I
27000			-----------------------------
27100	/
     

00100		SUBTTL	ENDTST	TEST THE SUSPECT WORD BY REMOVING THE ENDINGS
00200	ENDSRT:	ICOUNT
00300		AOS	(P)	;SUCCESS RETURN
00400	ENDFRT:	ICOUNT
00500		PUSHJ	P,UNSVWD	;FAILURE, RESTORE WORD AND SIZE
00600		POPJ	P,
00700	
00800	COMMENT/	THE ENTRY	/
00900	
01000	ENDTST:	ICOUNT
01100		SKIPN	NOEND		;SKIP SUFFIX TEST IF REQUESTED.
01200		CAIG	W,3		;IF TOO SMALL THEN
01300		POPJ	P,		;RETURN QUICK WITH FAILURE
01400		PUSHJ	P,SAVWD		;SAVE WORDIN AND W,(IN A PLACE KNOWN
01500					;TO BUT A FEW).
01600	ENDTG.:	PUSHJ	P,GETLST	;GET LAST LETTER INTO A.
01700		CAIN	A,"S"		;IS IT S?
01800		JRST	EDT.S		;DO THE S THING
01900	ENDTGO:	ICOUNT
02000		CAIN	A,"G"		;MAYBE AN "ING"
02100		JRST	EDT.G		;OFF TO DO G THING (NOT STRING)
02200		CAIN	A,"D"		;"ED"
02300		JRST	EDT.D
02400		CAIN	A,"R"		;"ER"
02500		JRST	EDT.R
02600		CAIN	A,"E"		;EE OR ..IVE
02700		JRST	END.E
02800		CAIN	A,"T"		;"EST"
02900		JRST	EDT.T
03000		CAIN	A,"H"		;"TH"
03100		JRST	EDT.H
03200		CAIN	A,"N"	;"ION" "ATION" "CATION" "ICATION"
03300		JRST	EDT.N
03400		CAIN	A,"Y"	;"TY" AND "LY"
03500		JRST	EDT.Y
03600		JRST	ENDFRT		;FAIL RETURN
03700	EDT.S:	ICOUNT
03800		PUSHJ	P,ZLAST		;TRY SINGULAR FORM
03900		PUSHJ	P,HASHCP	;COMPUTE THE HASH
04000		PUSHJ	P,SEARCH
04100		JRST	.+2		;FAILURE
04200		JRST	ENDSRT		;SUCCESS
04300		PUSHJ	P,GETLST	;DOES IT END IN "IE"
04400		CAIE	A,"E"
04500		JRST	[CAIE	A,"S"	;MAYBE ...NESS?
04600			JRST	ENDTGO	;NO BACK THRU LIST
04700			JRST	ENDSS]	;OFF TO TRY IT
04800		PUSHJ	P,ZLAST		;WIPE OUT THE E
04900		PUSHJ	P,HASHCP	;LOOKUP
05000		PUSHJ	P,SEARCH
05100		JRST	.+2
05200		JRST	ENDSRT		;WIN  (HASHes is the example).
05300		PUSHJ	P,GETLST
05400		CAIE	A,"I"
05500		JRST	ENDFRT		;QUIT
05600		MOVEI	A,"Y"
05700		PUSHJ	P,SETLST
05800		PUSHJ	P,HASHCP
05900		PUSHJ	P,SEARCH
06000		JRST	ENDFRT
06100		JRST	ENDSRT
06200	EDT.G:	ICOUNT
06300		PUSHJ	P,ZLAST
06400		PUSHJ	P,GETLST
06500		CAIE	A,"N"
06600		JRST	ENDFRT	;CAN'T DO ANY THING ELSE
06700		PUSHJ	P,ZLAST
06800		PUSHJ	P,GETLST
06900		CAIE	A,"I"
07000		JRST	ENDFRT
07100		MOVEI	A,"E"	;SO CREATING WILL HAVE A CHANCE
07200		PUSHJ	P,SETLST
07300		PUSHJ	P,HASHCP
07400		PUSHJ	P,SEARCH
07500		JRST	.+2
07600		JRST	ENDSRT
07700		PUSHJ	P,ZLAST	;take back the irrelevant E
07800		PUSHJ	P,HASHCP
07900		PUSHJ	P,SEARCH
08000		JRST	.+2
08100		JRST	ENDSRT	;AN UNADORNED ING, LIKE KNOCKING
08200		PUSHJ	P,GETLST
08300		PUSH	P,A
08400		PUSHJ	P,ZLAST
08500		PUSHJ	P,GETLST	;CHECK FOR A DOUBLED LETTER BEFORE ING
08600		CAME	A,(P)
08700		JRST	[POP	P,(P)
08800			JRST	ENDFRT]	;FAILURE
08900		POP	P,(P)
09000		JRST	OHELL1
09100	OHELL.:	ICOUNT
09200		PUSHJ	P,ZLAST
09300	OHELL1:	PUSHJ	P,HASHCP
09400		PUSHJ	P,SEARCH
09500		JRST	ENDFRT
09600		JRST	ENDSRT
09700	EDT.D:	ICOUNT
09800		PUSHJ	P,ZLAST
09900		PUSHJ	P,GETLST
10000		CAIE	A,"E"
10100		JRST	ENDFRT
10200	;FIRST TRY JUST WITHOUT THE D SO CREATED AND DELETED WILL WORK
10300		PUSHJ	P,HASHCP
10400		PUSHJ	P,SEARCH
10500		JRST	.+2
10600		JRST	ENDSRT
10700		PUSHJ	P,ZLAST
10800		PUSHJ	P,HASHCP
10900		PUSHJ	P,SEARCH
11000		JRST	.+2
11100		JRST	ENDSRT
11200	;NOW CHECK OUT THE LAST, IF WE HAD "IED" THEN CHANGE
11300	;IT TO Y, ELSE, DELETE THAT LAST LETTER BY OHELL.
11400		PUSHJ	P,GETLST
11500		CAIE	A,"I"
11600		JRST	OHELL.
11700		MOVEI	A,"Y"
11800		PUSHJ	P,SETLST
11900		PUSHJ	P,HASHCP
12000		PUSHJ	P,SEARCH
12100		JRST	ENDFRT
12200		JRST	ENDSRT
12300	EDT.R:	ICOUNT
12400		PUSHJ	P,ZLAST
12500		PUSHJ	P,GETLST
12600		CAIE	A,"E"
12700		JRST	ENDFRT
12800		PUSHJ	P,HASHCP	;TRY FOR STUFF LIKE "LARGER"
12900		PUSHJ	P,SEARCH
13000		JRST	.+2
13100		JRST	ENDSRT
13200		PUSHJ	P,ZLAST
13300		PUSHJ	P,HASHCP
13400		PUSHJ	P,SEARCH
13500		JRST	.+2
13600		JRST	ENDSRT
13700		PUSHJ	P,GETLST
13800		CAIE	A,"I"	;SO "SPECIFIER" MAY WORK
13900		JRST	OHELL.
14000		MOVEI	A,"Y"
14100		PUSHJ	P,SETLST
14200		PUSHJ	P,HASHCP
14300		PUSHJ	P,SEARCH
14400		JRST	ENDFRT
14500		JRST	ENDSRT
14600	EDT.T:	ICOUNT
14700		PUSHJ	P,ZLAST
14800		PUSHJ	P,GETLST
14900		CAIE	A,"S"
15000		JRST	ENDFRT
15100		PUSHJ	P,ZLAST
15200		PUSHJ	P,GETLST
15300		CAIE	A,"E"
15400		JRST	ENDFRT
15500		PUSHJ	P,HASHCP
15600		PUSHJ	P,SEARCH
15700		JRST	.+2
15800		JRST	ENDSRT
15900		PUSHJ	P,ZLAST
16000		PUSHJ	P,HASHCP
16100		PUSHJ	P,SEARCH
16200		JRST	OHELL.
16300		JRST	ENDSRT
16400	EDT.H:	ICOUNT
16500		PUSHJ	P,ZLAST
16600		PUSHJ	P,GETLST
16700		CAIE	A,"T"
16800		JRST	ENDFRT
16900		PUSHJ	P,ZLAST
17000		PUSHJ	P,HASHCP
17100		PUSHJ	P,SEARCH
17200		JRST	ENDFRT
17300		JRST	ENDSRT
17400	EDT.N:	ICOUNT
17500		PUSHJ	P,ZLAST
17600		PUSHJ	P,GETLST
17700		CAIN	A,"E"
17800		JRST	EDT.EN
17900		CAIE	A,"O"
18000		JRST	ENDFRT
18100		PUSHJ	P,ZLAST	;REMOVED "ON" THUS FAR
18200		PUSHJ	P,GETLST
18300		CAIE	A,"I"
18400		JRST	ENDFRT
18500		MOVEI	A,"E"	;"ION" REPLACED BY "E"
18600		PUSHJ	P,SETLST
18700		PUSHJ	P,HASHCP
18800		PUSHJ	P,SEARCH
18900		JRST	.+2
19000		JRST	ENDSRT
19100		PUSHJ	P,ZLAST	;"ION" IS GONE
19200		PUSHJ	P,GETLST
19300		CAIE	A,"T"
19400		JRST	ENDFRT
19500		PUSHJ	P,ZLAST
19600		PUSHJ	P,GETLST
19700		CAIE	A,"A"
19800		JRST	ENDFRT
19900		PUSHJ	P,ZLAST
20000		PUSHJ	P,GETLST
20100		CAIE	A,"C"
20200		JRST	ENDFRT
20300		PUSHJ	P,ZLAST
20400		PUSHJ	P,GETLST
20500		CAIE	A,"I"
20600		JRST	ENDFRT
20700		MOVEI	A,"Y"
20800		PUSHJ	P,SETLST
20900		PUSHJ	P,HASHCP
21000		PUSHJ	P,SEARCH
21100		JRST	ENDFRT
21200		JRST	ENDSRT
21300	EDT.EN:	ICOUNT
21400		PUSHJ	P,ZLAST
21500		PUSHJ	P,HASHCP
21600		PUSHJ	P,SEARCH
21700		JRST	OHELL.
21800		JRST	ENDSRT
21900	EDT.Y:	ICOUNT
22000		PUSHJ	P,ZLAST
22100		PUSHJ	P,GETLST
22200		CAIN	A,"L"
22300		JRST	EDT.LY
22400		CAIN	A,"T"
22500		JRST	ENDFRT
22600		PUSHJ	P,ZLAST
22700		PUSHJ	P,HASHCP
22800		PUSHJ	P,SEARCH
22900		JRST	.+2
23000		JRST	ENDSRT
23100		PUSHJ	P,GETLST
23200		CAIE	A,"I"
23300		JRST	ENDFRT
23400		MOVEI	A,"E"
23500		PUSHJ	P,SETLST
23600		PUSHJ	P,HASHCP
23700		PUSHJ	P,SEARCH
23800		JRST	ENDFRT
23900		JRST	ENDSRT
24000	EDT.LY:	ICOUNT
24100		PUSHJ	P,ZLAST
24200		PUSHJ	P,HASHCP
24300		PUSHJ	P,SEARCH
24400		JRST	OHELL.
24500		JRST	ENDSRT
24600	ENDSS:	PUSHJ	P,ZLAST
24700		PUSHJ	P,GETLST	;THIS MUST BE AN "E"
24800		CAIE	A,"E"
24900		JRST	ENDFRT		;FAILURE
25000		PUSHJ	P,ZLAST		;WIPE OUT E
25100		PUSHJ	P,GETLST
25200		CAIE	A,"N"
25300		JRST	ENDFRT		;FAIL
25400		PUSHJ	P,ZLAST		;WIPE OUT THE N.
25500		PUSHJ	P,HASHCP	;LOOKUP WORD
25600		PUSHJ	P,SEARCH
25700		JRST	.+2		;NOPE, NOT YET
25800		JRST	ENDSRT		;WIN
25900		MOVEI	A,"E"		;REPLACE ...NESS BY ...E
26000		ADDI	W,1		;INCREMENT WORD SIZE
26100		PUSHJ	P,SETLST
26200		PUSHJ	P,HASHCP
26300		PUSHJ	P,SEARCH
26400		JRST	.+2
26500		JRST	ENDSRT
26600		PUSHJ	P,ZLAST		;TAKE AWAY THE E
26700		PUSHJ	P,GETLST
26800		CAIE	A,"I"
26900		JRST	ENDTG.		;NOTHING OF INTEREST
27000		MOVEI	A,"Y"		;CHANGE THE I TO Y
27100		PUSHJ	P,SETLST
27200		PUSHJ	P,HASHCP
27300		PUSHJ	P,SEARCH
27400		JRST	ENDFRT		;GIVE UP
27500		JRST	ENDSRT		;WIN
27600					;SHOWING OUR PERMISSIVENESS
27700	
27800	END.E:	PUSHJ	P,ZLAST
27900		PUSHJ	P,GETLST
28000		CAIE	A,"V"
28100		JRST	ENDFRT
28200		PUSHJ	P,ZLAST
28300		PUSHJ	P,GETLST
28400		CAIE	A,"I"
28500		JRST	ENDFRT
28600		PUSHJ	P,ZLAST		;TAKE OFF THE I FROM IVE
28700		PUSHJ	P,HASHCP
28800		PUSHJ	P,SEARCH
28900		JRST	.+2
29000		JRST	ENDSRT		;WIN
29100		MOVEI	A,"E"
29200		ADDI	W,1
29300		PUSHJ	P,SETLST	;TRY CHANGING IVE TO E.
29400		PUSHJ	P,HASHCP
29500		PUSHJ	P,SEARCH
29600		JRST	ENDFRT
29700		JRST	ENDSRT
     

00100		SUBTTL	ROUTINES USED BY ENDTST
00200	
00300	COMMENT/
00400	
00500	SAVWD:	SAVES WORDIN AT A PLACE KNOWN TO BUT A FEW
00600	UNSVWD:	RESTORE THE WORD FROM THE SAME PLACE
00700	
00800	/
00900	
01000	SAVWD:	ICOUNT
01100		MOVEM	W,SVWDLN	;SAVE WORD LENGTH
01200		MOVE	W,[XWD WORDIN,SVWDWX]
01300		BLT	W,SVWDWX+5
01400		MOVE	W,SVWDLN
01500		POPJ	P,
01600	
01700	UNSVWD:	ICOUNT
01800		MOVE	W,[XWD SVWDWX,WORDIN]
01900		BLT	W,WORDIN+5
02000		MOVE	W,SVWDLN
02100		POPJ	P,
02200	
02300	COMMENT/
02400	
02500	GETLST:	LOAD A WITH THE ASCII FOR THE LAST LETTER IN THE WORD.
02600	
02700	ZLAST:	ZERO THE LAST LETTER OF A WORD AND REDUCE W BY 1.
02800	SETLST:	SET LAST LETTER TO THE FIVEBIT EQUIVALENT OF A. A CONTAINS ASCII
02900		INITIALLY
03000	GETLBP:	MAKE A BYTE POINTER TO THE LAST LETTER.
03100		POINTER IS SUITABLE FOR A LDB OR DPB.
03200		POINTER LIVES IN LSTBPY.
03300	
03400	/
03500	
03600	GETLBP:	ICOUNT
03700		JUMPL	W,.+2
03800		CAILE	W,62
03900		PUSHJ	P,INTCFN
04000		PUSH	P,W
04100		PUSH	P,X
04200		SUBI	W,1
04300		IDIVI	W,7
04400		MOVE	X,GETLBT(X)
04500		ADD	X,W
04600		MOVEM	X,LSTBPY
04700		POP	P,X
04800		POP	P,W
04900		POPJ	P,
05000	GETLBT:	POINT	5,WORDIN,4
05100		POINT	5,WORDIN,9
05200		POINT	5,WORDIN,14
05300		POINT	5,WORDIN,19
05400		POINT	5,WORDIN,24
05500		POINT	5,WORDIN,29
05600		POINT	5,WORDIN,34
05700	
05800	GETLST:	ICOUNT
05900		PUSHJ	P,GETLBP
06000		LDB	A,LSTBPY
06100		ADDI	A,"A"-1
06200		POPJ	P,
06300	SETLST:	ICOUNT
06400		SUBI	A,"A"-1
06500		PUSHJ	P,GETLBP
06600		DPB	A,LSTBPY
06700		POPJ	P,
06800	ZLAST:	ICOUNT
06900		PUSH	P,A
07000		MOVNI	A,"A"-1
07100		PUSHJ	P,SETLST
07200		POP	P,A
07300		SUBI	W,1		;REDUCE THE WORD LENGTH
07400		POPJ	P,
     

00100		SUBTTL	LOAD WORD
00200	LDWORD:	ICOUNT
00300		SETZM	WORDIN
00400		MOVE	Z,[XWD WORDIN,WORDIN+1]
00500		BLT	Z,WORDIN+5
00600		MOVE	Z,INPTR
00700		MOVE	Y,[POINT 5,WORDIN]
00800		ILDB	A,Z
00900		CAIL	A,"A"
01000		CAILE	A,"z"
01100		JRST	LDWRD3		;NOT A LETTER
01200		CAILE	A,"Z"
01300		CAIL	A,"a"
01400		TRZA	A,140		;YES, A LETTER. MAKE INTO FIVEBIT AND SKIP
01500		JRST	LDWRD3		;NOT A LETTER
01600		IDPB	A,Y
01700		BCHECK(Y,WORDIN+10)
01800		MOVEI	W,1	;COUNT FOR HASH
01900	LDWRD1:	ICOUNT
02000		MOVEM	Z,INPTR1
02100		ILDB	A,Z
02200		CAIE	A,"`"
02300		CAIN	A,"'"
02400		JRST	LDWRD1
02500		CAIL	A,"A"
02600		CAILE	A,"z"
02700		JRST	LDWRD2		;NOT A LETTER
02800		CAILE	A,"Z"
02900		CAIL	A,"a"
03000		TRZA	A,140		;A LETTER.  MAKE IT FIVEBIT AND SKIP
03100		JRST	LDWRD2		;NOT A LETTER
03200		IDPB	A,Y
03300		BCHECK(Y,WORDIN+10)
03400		AOJA	W,LDWRD1
03500	LDWRD2:	ICOUNT
03600		CAIL	A,"0"
03700		CAILE	A,"9"
03800		JRST	CPOPJ1	;WE HAVE A DELIM
03900	LDWRD3:	ICOUNT
04000		MOVEM	Z,INPTR1	;WHATEVER WE HAVE, IT'S NOT A WORD
04100					;SO PUT THE POINTER PAST IT.
04200		CAIL	A,"A"		;TEST FOR A DELIMITER
04300		CAILE	A,"z"
04400		JRST	MAYD.2	;MAYBE
04500		CAILE	A,"Z"
04600		CAIL	A,"a"
04700		JRST	NDLM.1	;NOT A DELIM
04800	MAYD.2:	CAIL	A,"0"
04900		CAILE	A,"9"
05000		POPJ	P,		;THIS IS A DELIM BUT NOT A WORD
05100	NDLM.1:	ILDB	A,Z		;NOT A DELIM
05200		JRST	LDWRD3		;FLUSH TO A DELIMITER
     

00100		SUBTTL	CHANNEL INITIALIZATION
00200	SDEF(BUFFNO,2)	;NUMBER OF I/O BUFFERS FOR DEVICES
00300	SDEF(MODE,14)	;BUFFERD BINARY WORD AT A TIME MODE.
00400	SDEF(AMODE,1)	;BUFFFERED CHARACTER AT A TIME
00500	
00600	INDICT:	ICOUNT
00700		INIT	DICT,AMODE
00800		SIXBIT	/DSK/
00900		XWD	0,DICTBF
01000		JRST	NODISK
01100		PUSH	P,A
01200		MOVE	A,DICTFF
01300		EXCH	A,JOBFF
01400		INBUF	DICT,BUFFNO
01500		EXCH	A,JOBFF		;RESTORE OLD
01600		MOVEM	A,NEWFF		;BUT SAVE NEW, IF WE ARE AT BEGINNING
01700		POP	P,A
01800		POPJ	P,
01900	INDCTO:	ICOUNT
02000		INIT	DICT,AMODE
02100		SIXBIT	/DSK/
02200		XWD	DICTBF,0
02300		JRST	NODISK
02400		PUSH	P,A
02500		MOVE	A,DICTFF
02600		EXCH	A,JOBFF
02700		OUTBUF	DICT,BUFFNO
02800		EXCH	A,JOBFF
02900		MOVEM	A,NEWFF
03000		POP	P,A
03100		POPJ	P,
03200	INDATA:	ICOUNT
03300		INIT	DATA,MODE
03400		SIXBIT	/DSK/
03500		XWD	0,DATABF
03600		JRST	NODISK
03700		PUSH	P,A
03800		MOVE	A,DATAFF
03900		EXCH	A,JOBFF
04000		INBUF	DATA,BUFFNO
04100		EXCH	A,JOBFF
04200		MOVEM	A,NEWFF
04300		POP	P,A
04400		POPJ	P,
04500	INEXCP:	ICOUNT
04600		INIT	EXCP,AMODE
04700		SIXBIT	/DSK/
04800		XWD	EXCPBF,0
04900		JRST	NODISK
05000		PUSH	P,A
05100		MOVE	A,EXCPFF
05200		EXCH	A,JOBFF
05300		OUTBUF	EXCP,BUFFNO
05400		EXCH	A,JOBFF
05500		MOVEM	A,NEWFF
05600		POP	P,A
05700		POPJ	P,
05800	INCORR:	ICOUNT
05900		INIT	CORR,MODE
06000		SIXBIT	/DSK/
06100		XWD	CORRBF,0
06200		JRST	NODISK
06300		PUSH	P,A
06400		MOVE	A,CORRFF
06500		EXCH	A,JOBFF
06600		OUTBUF	CORR,BUFFNO
06700		EXCH	A,JOBFF
06800		MOVEM	A,NEWFF
06900		POP	P,A
07000		POPJ	P,
     

00100		SUBTTL	I/O STUFF:
00200	COMMENT/
00300	RDDICT:	READ DICTIONARY FILE.  
00400	STOPGAP LINE NUMBERS ARE STRIPPED.
00500	CHARACTER RESULT IN A. SKIP RETURN IS NORMAL, NON SKIP FOR EOF.
00600	/
00700	RDDICT:	ICOUNT
00800		SOSLE	DICTBF+2
00900		JRST	RDICT1
01000		INPUT	DICT,
01100		STATZ	DICT,740000
01200		JRST	DIE
01300		STATZ	DICT,20000
01400		POPJ	P,			;DIRECT RETURN MEANS EOF
01500	RDICT1:	ICOUNT
01600		ILDB	A,DICTBF+1
01700		JUMPE	A,RDDICT
01800		PUSH	P,A
01900		MOVE	A,@DICTBF+1
02000		TRNE	A,1
02100		JRST	RDICT2
02200		POP	P,A
02300	CPOPJ1:	ICOUNT
02400		AOS	(P)
02500	CPOPJ:	ICOUNT
02600		POPJ	P,			;NORMALLY A SKIP RETURN
02700	RDICT2:	ICOUNT
02800		MOVE	A,DICTBF+2
02900		SUBI	A,5
03000		MOVEM	A,DICTBF+2		;FIX CHARACTER COUNT.
03100		AOS	DICTBF+1		;LIKEWISE FIX BYTE POINTER
03200		POP	P,A
03300		JRST	RDDICT			;BACK AND READ MORE.
     

00100		SUBTTL	THE DICTIONARY LOADER.
00200	;	CHECK IF WE ARE ADDING OR ARE VIRGIN
00300	LOADER:	ICOUNT
00400		SKIPN	DICTFL
00500		TTCALL	3,[ASCIZ/
00600	You must load a dictionary file. /]
00700		PUSHJ	P,INDICT
00800	LOAD.1:	ICOUNT
00900		TTCALL	3,[ASCIZ/Dictionary file name: /]
01000		PUSHJ	P,GETFIL	;PRESUMED TO RETURN IN K,L,M,N.
01100		JRST	[TTCALL	3,NULMSG
01200			JRST	LOAD.1]
01300		LOOKUP	DICT,K
01400		JRST	[PUSHJ	P,FNOTFM
01500			JRST	LOAD.1]
01600		TRZ	FL,IDUMP
01700		SKIPE	DICTFL
01800		JRST	LOAD.0		;ALREADY HAVE A DICTIONARY
01900		SETZM	HASHTB
02000		MOVE	A,[XWD HASHTB,HASHTB+1]
02100		BLT	A,HASHTB+HASHTL-1		;CLEAR HASH TABLE
02200		JRST	LOAD.2
02300	LOAD.0:	ICOUNT
02400		TTCALL	3,[ASCIZ/Type "I" to mark these as incremental insertions: /]
02500		TTCALL	4,A
02600		CAIE	A,"I"
02700		CAIN	A,"i"
02800		JRST	[TRO	FL,IDUMP
02900			PUSHJ	P,SETNUM
03000			JRST	.+1]
03100		PUSHJ	P,FLUTTY
03200	LOAD.2:	ICOUNT
03300		PUSHJ	P,RDICTW		;READ A DICTIONARY WORD
03400		JRST	LOAD.3
03500		PUSHJ	P,HASHCP		;COMPUTE HASH
03600		PUSHJ	P,SEARCH		;LOOKUP WORD
03700		JRST	.+2			;FAILED, I.E. NOT THERE
03800		JRST	LOAD.2
03900		PUSHJ	P,INSERY		;ADD IT TO THE LIST
04000		AOS	DICTFL			;INCREMENT WORD COUNT
04100		JRST	LOAD.2			;BACK FOR MORE
04200	LOAD.3:	ICOUNT
04300		CLOSE	DICT,			;DESELECT FILE
04400		TTCALL	3,[ASCIZ/There are now /]
04500		MOVE	A,DICTFL
04600		PUSHJ	P,DECPTR
04700		TTCALL	3,[ASCIZ/ words in the dictionary.  /]
04800		MOVE	A,JOBREL
04900		LSH	A,-12
05000		ADDI	A,1
05100		PUSHJ	P,DECPTR
05200		TTCALL	3,[ASCIZ/ K Core used.
05300	Do you want to save this core image?  /]
05400		TTCALL	4,A
05500		PUSHJ	P,FLUTTY
05600		CAIE	A,"Y"
05700		CAIN	A,"y"
05800		JRST	.+2
05900		POPJ	P,
06000		PUSHJ	P,SAVEME
06100		JRST	BEGIN		;HAVE TO REESTABLISH THE WORLD AFTER THE
06200					;BIG RESET.
     

00100		SUBTTL	READ A DICTIONARY WORD.
00200	COMMENT/
00300	SKIP RETURN, EXCEPT FOR EOF.
00400	CHARACTER COUNT IN W. 5 BIT TEXT IN WORDIN. 7 BIT ASCIZ IN WORDIX
00500	/
00600	
00700	RDICTW:	ICOUNT
00800		SETZB	W,WORDIN
00900		MOVE	A,[XWD WORDIN,WORDIN+1]
01000		BLT	A,WORDIX+12
01100		MOVE	X,[POINT 5,WORDIN]
01200		MOVE	Y,[POINT 7,WORDIX]
01300	RDCTW1:	ICOUNT
01400		PUSHJ	P,RDDICT
01500		POPJ	P,		;EOF. QUICK RETURN
01600		IDPB	A,Y
01700		CAIGE	A,"A"
01800		JRST	RDCTW3		;A DELIMITER
01900	RDCTW2:	ICOUNT
02000		TRZ	A,40		;INSURE UPPER CASE
02100		SUBI	A,"A"-1		;MAP A TO 1, Z TO 26 ETC.
02200		CAILE	A,37
02300		JRST	RDCTW3		;I THINK THIS CAN'T HAPPEN
02400		IDPB	A,X
02500		CAILE	W,50
02600		JRST	RDCTW4		;TOO LONG
02700		AOJA	W,RDCTW1	;BACK FOR MORE
02800	RDCTW3:	ICOUNT
02900		CAIE	A,12
03000		CAIN	A,14	;LF AND FF STOP US.
03100		JRST	[JUMPN	W,CPOPJ1
03200			JRST	RDICTW]		;DISALLOW ZERO LENGTH WORDS
03300		PUSHJ	P,RDDICT
03400		POPJ	P,
03500		JRST	RDCTW3
03600	RDCTW4:	ICOUNT
03700		TTCALL	3,[ASCIZ/Illegal dictionary entry: /]
03800		TTCALL	3,WORDIX
03900	RDCTW5:	ICOUNT
04000		PUSHJ	P,RDDICT
04100		POPJ	P,
04200		TTCALL	1,A
04300		CAIE	A,12
04400		CAIN	A,14	;FF OR LF WILL STOP US
04500		JRST	RDICTW		;BACK FOR A WHOLE NEW WORD
04600		JRST	RDCTW5
     

00100		SUBTTL	THE HASH COMPUTATION.
00200	COMMENT/
00300	HASHCP:	COMPUTES THE HASH INDEX TO THE TABLE HASHTB.
00400	
00500	ARGUMENTS:	W. WORD LENGTH
00600			WORDIX	5 BIT WORD
00700	
00800	RESULTS:	Z:	THE INDEX TO THE TABLE, EXCEPT
00900			Z=-1 IF W1.
01000			FLAG, LEFT (IN FL RIGHT) IS SET IF HASH CODE IS ON
01100			LEFT HALF, OTHERWISE, RIGHT HALF
01200	/
01300	
01400	HASHCP:	ICOUNT
01500		SETO	Z,
01600		JUMPLE	W,[TTCALL 3,[ASCIZ/0 LENGTH WORD AT HASHCP/]
01700			POPJ	P,]
01800		CAIG	W,1
01900		POPJ	P,		;SIMPLE FOR WORDS OF LENGTH 1.
02000		MOVE	X,[POINT 5,WORDIN]
02100		ILDB	A,X
02200		CAILE	A,32
02300		JRST	HASHER		;ERROR
02400		JUMPE	A,HASHER
02500		SUBI	A,1
02600		IMULI	A,32
02700		MOVE	Z,A
02800		ILDB	A,X
02900		CAILE	A,32
03000		JRST	HASHER
03100		JUMPE	A,HASHER
03200		ADDI	Z,-1(A)
03300		IMULI	Z,12
03400		MOVE	X,W
03500		SUBI	X,2
03600		CAILE	X,11
03700		MOVEI	X,11
03800		ADD	Z,X
03900		TRNE	Z,1
04000		TRZA	FL,LEFT		;ODD. RIGHT HALF
04100		TRO	FL,LEFT		;EVEN, SET LEFT FLAG
04200		LSH	Z,-1		;HALVE Z.
04300		POPJ	P,
04400	HASHER:	ICOUNT
04500		TTCALL	3,[ASCIZ/HASHING ERROR
04600	/]
04700		HALT
     

00100		SUBTTL	SCAN TTY FOR A FILE NAME
00200	GNCHTT:	ICOUNT
00300		TTCALL	4,A
00400		CAIN	A,33
00500		MOVEI	A,12
00600		CAIE	A,175
00700		CAIN	A,176
00800		MOVEI	A,12
00900		POPJ	P,
01000	
01100	SCAN:	ICOUNT
01200		SETZM	SCANT
01300		MOVE	B,[XWD SCANT,SCANT+1]
01400		BLT	B,SCANX+4
01500		SETZ	Y,		;INDEX TO PAGES.
01600	SCAN1:	ICOUNT
01700		MOVE	B,[POINT 6,SCANT]
01800		SETZB	C,SCANT	;IMPORTANT TO START RITE
01900	SCAN2:	ICOUNT
02000		PUSHJ	P,GNCHTT	;GET A CHARACTER
02100		CAIN	A,15
02200		JRST	SCAN2
02300		CAIN	A,12
02400		JRST	SCAND1
02500		CAIN	A,40
02600		JRST	SCAN2
02700		CAIN	A,"."	;FILENAME SEEN
02800		JRST	SCAND2
02900		CAIN	A,"/"
03000		JRST	SCAND0
03100		CAIN	A,"["
03200		JRST	SCPPN
03300		CAIGE	A,"a"
03400		JRST	.+3
03500		CAIG	A,"z"
03600		SUBI	A,40	;CONVERT TO UPPER CASE
03700		SUBI	A," "	;MAKE SIXBIT
03800		JUMPL	A,SCANER
03900		CAILE	A,77
04000		JRST	SCANER
04100		AOS	C
04200		CAIG	C,6
04300		IDPB	A,B
04400		JRST	SCAN2
04500	SCANER:	ICOUNT
04600		TTCALL	3,[ASCIZ/ILLEGAL CHARACTER IN SCAN./]
04700		PUSHJ	P,FLUTTY	;EMPTY TO NEXT CRLF
04800		TTCALL	3,[ASCIZ/Try again: /]
04900		JRST	SCAN
05000	SCAND1:	ICOUNT
05100		MOVEM	A,SAVCHR
05200		SKIPN	C
05300		JRST	SCNRET
05400		MOVE	A,SCANT
05500		SETZ	C,
05600		SKIPE	SCANX+1
05700		AOS	C
05800		MOVEM	A,SCANX+1(C)
05900		JRST	SCNRET
06000	SCAND2:	ICOUNT
06100		MOVE	A,SCANT
06200		MOVEM	A,SCANX+1
06300		JRST	SCAN1
06400	SCAND0:	ICOUNT
06500		JUMPE	C,SCANSW
06600		MOVE	A,SCANT
06700		SETZ	C,
06800		SKIPE	SCANX+1
06900		ADDI	C,1
07000		MOVEM	A,SCANX+1(C)
07100	SCANSW:	TTCALL	4,A
07200		TRZ	A,40	;ENSURE UPPER CASE
07300		MOVSI	B,-SWTBLN
07400		CAME	A,SWTAB1(B)
07500		AOBJN	B,.-1
07600		JUMPGE	B,[TTCALL 3,[ASCIZ/unrecognized switch  /]
07700			JRST	SCANER]
07800		XCT	SWTAB2(B)
07900		JRST	SCAN1
08000	SWTAB1:	"P"
08100		"T"
08200		"Q"
08300		"N"	;NO SUFFIX TESTING
08400	SDEF(SWTBLN,.-SWTAB1)
08500	SWTAB2:	TRO	FL,PICKUP
08600		TRO	FL,TRAIN!NOEXCP!NOCORR
08700		TRO	FL,QTRAIN!NOCORR
08800		SETOM	NOEND
08900	SCPPN:	ICOUNT
09000		SKIPN	C
09100		JRST	SCPPN0
09200		MOVE	A,SCANT
09300		SETZ	C,
09400		SKIPE	SCANX+1
09500		AOS	C
09600		MOVEM	A,SCANX+1(C)
09700	SCPPN0:	ICOUNT
09800		SETZB	B,C
09900	SCPPN1:	ICOUNT
10000		PUSHJ	P,GNCHTT
10100		CAIN	A,"]"
10200		JRST	SCPPN3
10300		CAIN	A,","
10400		JRST	SCPPN2
10500	IFN STANSW!IMSSS,<	CAIL	A,100
10600		TRZ	A,40		;MAKE LOWER CASE LETTER TO UPPER CASE
10700		SUBI	A," "
10800		JUMPL	A,SCANER
10900		CAILE	A,77
11000		JRST	SCANER
11100		LSH	B,6     >;stanford
11200	IFE STANSW!IMSSS,<	SUBI	A,"0"
11300		JUMPL	A,SCANER
11400		CAIL	A,PPNMUL
11500		JRST	SCANER
11600		IMULI	B,PPNMUL
11700	>
11800		ADD	B,A
11900		JRST	SCPPN1
12000	SCPPN2:	ICOUNT
12100		HRLZ	C,B
12200		SETZ	B,
12300		JRST	SCPPN1
12400	SCPPN3:	ICOUNT
12500		HRR	C,B
12600		MOVEM	C,SCANX+3
12700		JRST	SCAN1	;MAYBE MORE?
12800	SCNRET:	ICOUNT
12900		SKIPE	SCANX
13000		JRST	CPOPJ1
13100		SKIPE	SCANX+1
13200		JRST	CPOPJ1
13300		POPJ	P,
13400	
13500	GETFIL:	ICOUNT
13600		PUSHJ	P,SCAN
13700		POPJ	P,		;NULL TERM
13800		MOVE	K,SCANX+1
13900		HLLZ	L,SCANX+2
14000		SETZ	M,
14100		MOVE	N,SCANX+3
14200		JRST	CPOPJ1
     

00100		SUBTTL	ERROR MESSAGES
00200	DDE:	ICOUNT
00300		TTCALL	3,[ASCIZ/DEVICE DATA ERROR (OUTPUT)
00400	/]
00500		HALT
00600	FNOTFM:	ICOUNT
00700		TTCALL	3,[ASCIZ/FILE NOT FOUND. DSK:/]
00800		PUSHJ	P,TYFILN	;ARGS IN K,L,M,N
00900		POPJ	P,
01000	NODISK:	ICOUNT
01100		TTCALL	3,[ASCIZ/INIT FAILED ON DEVICE DSK: /]
01200		HALT
01300	DECPTR:	ICOUNT
01400		PUSH	P,B
01500		PUSHJ	P,DECPTX	;USES B. A IS ARGUMENT
01600		POP	P,B
01700		POPJ	P,
01800	DECPTX:	ICOUNT
01900		IDIVI	A,12
02000		PUSH	P,B
02100		SKIPE	A
02200		PUSHJ	P,DECPTX
02300		POP	P,A
02400		ADDI	A,"0"
02500		TTCALL	1,A
02600		POPJ	P,
02700	FLUTTY:	ICOUNT
02800		PUSH	P,A
02900	FLUTT1:	ICOUNT
03000		CAIE	A,12
03100		CAIN	A,175
03200		JRST	FLUTT2
03300		CAIE	A,33
03400		CAIN	A,176
03500		JRST	FLUTT2
03600		TTCALL	2,A
03700		JRST	FLUTT2
03800		JRST	FLUTT1
03900	FLUTT2:	ICOUNT
04000		POP	P,A
04100		POPJ	P,
04200	NOCORE:	ICOUNT
04300		TTCALL	3,[ASCIZ/INSUFFICIENT CORE AVAILABLE. I GIVE UP
04400	/]
04500		EXIT
04600	NULMSG:	ASCIZ/Null term illegal
04700	/
04800	ENTFAI:	ICOUNT
04900		TTCALL	3,[ASCIZ/Enter failed on: /]
05000		PUSHJ	P,TYFILN
05100		POPJ	P,
05200	DIE:	ICOUNT
05300		TTCALL	3,[ASCIZ/DEVICE ERROR (INPUT)
05400	/]
05500		HALT
05600	INTCFN:	ICOUNT
05700		TTCALL	3,[ASCIZ/
05800	
05900	Internal confusion in the spelling checker.  Called from location:  /]
06000		PUSH	P,A
06100		HRRZ	A,-1(P)
06200		PUSH	P,B
06300		SUBI	A,1
06400		PUSHJ	P,OCTPTR
06500	IFG COUNTS,<	PUSHJ	P,CRASH>
06600		POP	P,B
06700		POP	P,A
06800		TTCALL	3,[ASCIZ/
06900	
07000	please send a note to REG.
07100	
07200	You may continue, with doubtful results....
07300	/]
07400		HALT	CPOPJ
07500	OCTPTR:	ICOUNT
07600		IDIVI	A,10
07700		PUSH	P,B
07800		JUMPE	A,.+2
07900		PUSHJ	P,OCTPTR
08000		POP	P,B
08100		ADDI	B,60
08200		TTCALL	1,B
08300		POPJ	P,
     

00100		SUBTTL	SEARCH	LOOK IN DICTIONARY FOR A WORD.
00200	
00300	COMMENT/	THE SUBJECT OF THE SEARCH LIVES IN WORDIN.
00400		IT HAS W CHARACTERS.
00500		IT HAS HASH INDEX Z.
00600		IF Z<0 (OR W1) THEN WE WILL ALWAYS FIND IT AS A WORD.
00700		SKIP RETURN IF FOUND.
00800	
00900	/
01000	
01100	SEARCH:	ICOUNT
01200		JUMPL	Z,CPOPJ1	;EASY.
01300		TRNN	FL,LEFT		;MUST WE USE LEFT SIDE?
01400		JRST	SEAR00		;NO.
01500		HLRZ	X,HASHTB(Z)	;USE LEFT SIDE
01600		JRST	SEAR01		;SKIP
01700	
01800	SEAR00:	HRRZ	X,HASHTB(Z)	;USE RIGHT SIDE
01900	SEAR01:	PUSH	P,W
02000		PUSH	P,X
02100		IDIVI	W,7		;7 CHARS/WORD IN FIVEBIT
02200		JUMPE	X,.+2		;SKIP IF REMAINDER ZERO
02300		ADDI	W,1
02400		MOVEM	W,WWLEN		;WORD LENGTH IN MACHINE WORDS
02500		POP	P,X
02600		POP	P,W		;STACK  MUST BE HONEST
02700		JRST	SERCH1		;JUMP INTO LOOP.
02800	
02900	SERCH3:	ICOUNT			;HERE FOR FAILURE
03000		HRRZ	X,L		;LINK FORWARD.
03100	SERCH1:	ICOUNT
03200		JUMPE	X,CPOPJ		;SEARCH EXHAUSTED, A FAILURE.
03300		HRRZ	L,(X)		;THIS LOADS L WITH LINK TO THE NEXT.
03400					;X POINTS ONE BEFORE THE PRESENT ENTRY.
03500		ADDI	X,1		;X POINTS RIGHT THERE.
03600		MOVEI	Y,0		;Y WILL INDEX WORDIN.
03700	SERCH2:	ICOUNT
03800		MOVE	K,WORDIN(Y)
03900		CAME	K,(X)
04000		JRST	SERCH3		;FAILED
04100		ADDI	Y,1
04200		CAMGE	Y,WWLEN		;SKIP IF SUCCESS
04300		AOJA	X,SERCH2	;KEEP LOOKING IN HERE.
04400		SUBI	X,-1(Y)		;MAKE DIRECT POINTER IN X
04500		JRST	CPOPJ1		;WE ARE ALREADY AT THE LIST HEAD.
     

00100		SUBTTL	INSERT
00200	COMMENT/
00300	INSERT THE WORD AT WORDIN. LENGTH IS IN W. HASH INDEX IS IN Z.
00400	LISTFF CONTAINS THE ADDRESS OF THE FIRST FREE WORD OF CORE.
00500	/
00600	
00700	INSERT:	ICOUNT
00800		TRZA	FL,IDUMP
00900	INSRTX:	ICOUNT
01000		TRO	FL,IDUMP
01100	INSERY:	ICOUNT
01200		PUSH	P,W
01300		PUSH	P,X
01400		JUMPL	Z,.+2
01500		CAIL	Z,HASHTL
01600		PUSHJ	P,INTCFN
01700		JUMPL	W,.+2
01800		CAILE	W,62
01900		PUSHJ	P,INTCFN
02000		IDIVI	W,7		;7 CHARS/WORD IN FIVEBIT
02100		JUMPE	X,.+2
02200		ADDI	W,1
02300		ADDI	W,1		;TOTAL NUMBER OF WORD WE NEED TO USE
02400		MOVEM	W,WWLEN
02500		POP	P,X
02600		POP	P,W
02700		PUSHJ	P,CORECK	;SEE IF WE HAVE ENOUGH SPACE /GET MORE
02800		TRNE	FL,LEFT		;SKIP IF LEFT CLEAR
02900		HLRZ	K,HASHTB(Z)	;USE LEFT
03000		TRNN	FL,LEFT		;SKIP IF LEFT SET
03100		HRRZ	K,HASHTB(Z)	;USE RIGHT
03200		MOVE	L,LISTFF	;ADDRESS OF FREE STORAGE
03300		CAMG	L,K		;OUGHT TO BE BEYOND CURRENT POINTER
03400		PUSHJ	P,INTCFN
03500		TRNE	FL,IDUMP
03600		HRL	K,IDNUM		;D CONTAINS THE DICTIONARY NUMBER
03700		MOVEM	K,(L)
03800		MOVEI	K,(L)
03900		TRNE	FL,LEFT		;SKIP IF LEFT CLEAR
04000		HRLM	K,HASHTB(Z)	;DEPOSIT NEW LINK ON LEFT
04100		TRNN	FL,LEFT
04200		HRRM	K,HASHTB(Z)	;DEPOSIT ON RIGHT
04300		ADDI	L,1
04400		SOS	WWLEN
04500		SOS	WWLEN	;HACK,HACK. (STOP SMOKING)
04600	;NOW THAT THE LIST LINKS ARE HONEST, ADD THE WORD BENEATH (ABOVE)
04700	;THE NEWEST LINK.  L POINTS TO THE FREE CORE.
04800		SETZ	K,
04900	INSRT1:	ICOUNT
05000		MOVE	M,WORDIN(K)
05100		MOVEM	M,(L)
05200		ADDI	L,1
05300		CAMGE	K,WWLEN
05400		AOJA	K,INSRT1
05500		MOVEM	L,LISTFF	;UPDATE FREE POINTER
05600		HRLM	L,JOBSA			;HACK SO SAVE WILL WORK
05700		SETZM	(L)		;SUSPENDERS  (THE BELT WAS DELETED)
05800		POPJ	P,
     

00100		SUBTTL	CORE ROUTINES
00200	COMMENT/
00300	CORECK:	ADD WWLEN TO LISTFF AND IF THE RESULT >JOBREL REQUEST MORE.
00400	GETCOR:	EXPAND CORE BY 1 K.
00500	/
00600	
00700	CORECK:	ICOUNT
00800		PUSH	P,A
00900		MOVE	A,LISTFF
01000		ADD	A,WWLEN
01100		CAML	A,JOBREL
01200		PUSHJ	P,GETCOR
01300		POP	P,A
01400		POPJ	P,
01500	
01600	GETCOR:	ICOUNT
01700		PUSH	P,A
01800		MOVE	A,JOBREL
01900		ADDI	A,2000
02000		CORE	A,
02100		JRST	NOCORE
02200		POP	P,A
02300		POPJ	P,
02400	
     

00100		SUBTTL	TYPE FILE NAMES,READ NAMES, PLAY WITH TTY
00200	TYFILN:	ICOUNT
00300		PUSH	P,A
00400		PUSH	P,B
00500		PUSH	P,C
00600		MOVEI	C,6
00700		MOVE	B,[POINT 6,K]
00800	TYFLN1:	ICOUNT
00900		ILDB	A,B
01000		ADDI	A," "
01100		TTCALL	1,A
01200		SOJG	C,TYFLN1
01300		HLLZ	L,L
01400		JUMPE	L,TYFILP	;NOW DO PPN
01500		TTCALL	3,[ASCIZ/./]
01600		MOVEI	C,3
01700	TYFLN2:	ICOUNT
01800		ILDB	A,B
01900		ADDI	A," "
02000		TTCALL	1,A
02100		SOJG	C,TYFLN2
02200	TYFILP:	ICOUNT
02300		JUMPE	N,TYFILR
02400		MOVE	B,[POINT 6,N]
02500		MOVEI	C,3
02600		TTCALL	3,[ASCIZ/[/]
02700	TYFLP1:	ICOUNT
02800		ILDB	A,B
02900		ADDI	A," "
03000		TTCALL	1,A
03100		SOJG	C,TYFLP1
03200		TTCALL	3,[ASCIZ/,/]
03300		MOVEI	C,3
03400	TYFLP2:	ICOUNT
03500		ILDB	A,B
03600		ADDI	A," "
03700		TTCALL	1,A
03800		SOJG	C,TYFLP2
03900		TTCALL	3,[ASCIZ/]/]
04000	TYFILR:	ICOUNT
04100		POP	P,C
04200		POP	P,B
04300		POP	P,A
04400		TTCALL	3,[ASCIZ/
04500	/]
04600		POPJ	P,
     

00100		SUBTTL	TRYFIX	OUR HUMBLE ATTEMPT TO CORRECT THE WORD.
00200	COMMENT/
00300	
00400	THE SUSPECT WORD IS IN WORDIN AS FIVEBIT TEXT.
00500	IF WE FIND A BETTER CANDIDATE, WE WILL SLIP IT IN
00600	AND SKIP RETURN.  IF WE PLAN TO SKIP RETURN, WE HAVE TO COPY
00700	THE NEW WORD INTO THE OUTPUT BUFFER AND SCREW AROUND WITH
00800	SOME POINTERS TO CONVINCE PEOPLE THAT 1. WE HAVE READ THE
00900	INPUT WORD AND 2. THAT WE HAVE USED THE SPACE IN THE OUTPUT BUFFER
01000	SO NO ONE ELSE WILL STEP THERE.  
01100		IT WOULD ALSO BE NICE IF I WERE TO COPY IN LOWER CASE
01200	OR UPPER CASE, OR MIXED, DEPENDING ON THE ORIGINAL TEXT.
01300	(CHOICES ARE ALL UPPER, ALL LOWER OR FIRST LETTER IN UPPER,
01400	REMAINDER IN LOWER. McCarthy HAD BETTER SPELL HIS NAME RIGHT.)
01500	
01600	/
01700	
01800	TRYFIX:	ICOUNT
01900		SETZM	CANDID				;NUMBER OF CANDIDATES FOR THIS WORD
02000		PUSH	P,W
02100		PUSH	P,X
02200		IDIVI	W,7
02300		JUMPE	X,.+2
02400		ADDI	W,1
02500		MOVEM	W,WWLEN
02600		POP	P,X
02700		PUSH	P,WWLEN
02800		MOVE	W,-1(P)
02900		PUSHJ	P,X1SRCH			;TRY MAYBE ONE LETTER WRONG
03000		PUSHJ	P,XTRNP				;TRY SIMPLE TRANSPOSITION
03100		PUSHJ	P,X1EXL				;TRY MAYBE DELETE 1 EXTRA LETTER
03200		PUSHJ	P,X1LMS				;ADD ONE LETTER
03300		POP	P,WWLEN
03400		CAME	W,(P)
03500		PUSHJ	P,INTCFN			;OOPS W SHOULDN'T CHANGE 
03600		POP	P,W
03700		TRNE	FL,QTRAIN			;TRANING MODE?
03800		JRST	TRFQDO				;YES.
03900		MOVE	A,CANDID			;PICKUP COUNT
04000		CAILE	A,1				;THE EASY WAY?
04100		PUSHJ	P,REPCK				;MORE THAN ONE. CHECK FOR REPEATS
04200		TRNN	FL,HELPSN			;HELP MESSAGE BEEN SEEN?
04300	TRYFX0:	PUSHJ	P,HELMSZ			;DO THE HELP MESSAGE
04400		TRO	FL,HELPSN			;AND REMEMBER WE DID IT
04500	
04600	TRYFXA:	ICOUNT
04700		SKIPE	CANDID				;ANY CANDIDATES?
04800		JRST	TRYFXR				;YES. TELL THE GUY ABOUT THEM
04900	IFN STANSW,<TRNN FL,IIISW>
05000		TTCALL	3,[ASCIZ/Type A,I,R,X,W or D/]
05100		TTCALL	3,[ASCIZ/
05200	*/]
05300		TTCALL	4,A
05400		TRZ	A,40				;MAKE UPPER CASE
05500	TRYFXQ:	ICOUNT					;HERE WITH A COMMAND CHARACTER
05600		CAIN	A,"W"				;SAVE THE WORLD?
05700		JRST	[PUSHJ	P,SETNUM
05800			PUSHJ	P,IDMPD
05900			JRST	TRYFXA]
06000		CAIN	A,"I"				;INSERT?
06100		JRST	[PUSHJ P,HASHCP
06200			PUSHJ	P,SETNUM
06300			PUSHJ	P,INSRTX
06400			POPJ	P,]
06500		TTCALL	11,0				;FLUSH TYPE AHEAD
06600		CAIN	A,"X"				;X FOR EXIT?
06700		TROA	FL,SHUTUP			;SET THE QUICK FLAG AND SKIP
06800		CAIN	A,"A"				;A FOR ACCEPT?
06900		POPJ	P,				;YES. RETURN QUICK.
07000	
07100	IFG COUNTS,<
07200		CAIN	A,"$"				;DUMP STATISTICS COMMAND?
07300		JRST	[PUSHJ	P,DTRACY		;DUMP STUFF
07400			JRST	TRYFXA]			;AND ASK AGAIN
07500	>
07600	
07700		CAIN	A,"D"				;DISPLAY AGAIN?
07800		JRST	[TTCALL	3,LIBUF
07900			TTCALL	3,WORDIX
08000			TTCALL	3,[ASCIZ/
08100	/]
08200			JRST	TRYFXA]
08300		CAIE	A,"R"				;REPLACE?
08400		JRST	TRYFX0				;NONE OF THESE COMMANDS. DISPLAY HELP
08500	
08600		PUSHJ	P,CASECK			;CHECK UPPER/LOWER/MIXED CASE
08700		TTCALL	3,[ASCIZ/Replace with: /]
08800		MOVE	A,[XWD WORDIN,WORDIN+1]		;PREPARE TO GATHER TEXT
08900		SETZM	WORDIN
09000		BLT	A,WORDIN+5
09100		MOVE	A,[POINT 5,WORDIN]
09200		MOVEM	A,TLET.1
09300		SETZ	W,
09400	REPL.1:	ICOUNT
09500		TTCALL	4,A
09600		CAIE	A,175			;ALT MODE?
09700		CAIN	A,33			;ANOTHER ALT MODE?
09800		JRST	[TTCALL	11,0		;FLUSH TYPE AHEAD
09900			JRST	TRYFXA]		;AND LET HIM TRY AGAIN.
10000		CAIL	A,40
10100		CAIL	A,175
10200		JRST	REPL.2
10300		CAIL	A,"a"			;HAVE WE GOT LOWER CASE INPUT?
10400		CAILE	A,"z"			;SKIP IF LOWER CASE
10500		JRST	.+2			;NOT LOWER CASE
10600		TRZ	A,40			;MAKE IT UPPER CASE
10700		CAIGE	A,"A"			;IS THIS A LETTER?
10800		JRST	REPL1A			;NOT A LETTER
10900		TRNE	FL,LOWER		;IS RESULT SUPPOSED TO BE LOWER?
11000		TRO	A,40			;YES TURN ON THE BIT
11100		TRZE	FL,MIXED		;MIXED UPPER THEN LOWER?
11200		TRO	FL,LOWER		;TURN OFF MIXED FLAG AND SET LOWER
11300	REPL1A:	IDPB	A,OUTPTR		;STUFF CHARACTER INTO OUTPUT
11400		BCHECK(OUTPTR,LOBUF+40)
11500		TLZ	A,140
11600		IDPB	A,TLET.1
11700		BCHECK(TLET.1,WORDIN+10)
11800		AOJA	W,REPL.1
11900	REPL.2:	ICOUNT
12000		MOVE	A,INPTR1
12100		MOVEM	A,INPTR
12200		PUSHJ	P,FLUTTY
12300		PUSHJ	P,HASHCP
12400		PUSHJ	P,SEARCH
12500		JRST	.+2
12600		JRST	CPOPJ1
12700		TTCALL	3,[ASCIZ/
12800	type "I" to insert this replacement in the dictionary: /]
12900		TTCALL	4,A
13000		CAIE	A,"I"
13100		CAIN	A,"i"
13200		JRST	[PUSHJ	P,SETNUM
13300			PUSHJ	P,INSRTX
13400			JRST	.+1]
13500		PUSHJ	P,FLUTTY
13600		JRST	CPOPJ1
13700	
13800	TRYFXR:	ICOUNT			;HERE WHEN WE HAVE CANDIDATES TO SHOW HIM.
13900	IFN STANSW,<
14000		TRNE	FL,IIISW	;ON A III?
14100		JRST	TRYIII		;YES. DO FUNNY DISPLAY STUFF.
14200	>
14300		MOVE	A,CANDID	;CHECK TO SEE HOW MANY CANDIDATES WE HAVE
14400		CAIGE	A,2		;DO IT THE HARD WAY
14500		JRST	TRYFXO		;EXACTLY ONE CANDIDATE.
14600		TTCALL	3,[ASCIZ/Type A,I,R,X,D,W or S
14700	*/]
14800		TTCALL	4,A
14900		TRZ	A,40	;MAKE UPPER CASE
15000		CAIE	A,"S"
15100		JRST	TRYFXQ
15200		TTCALL	11,0
15300		PUSHJ	P,CORRSL	;SELECT FROM CHOICES
15400	TRFXR1:	ICOUNT
15500		MOVE	X,CANDBX
15600		PUSHJ	P,CASECK
15700		MOVE	B,[POINT 7,WORDIX]
15800		MOVE	Z,[POINT 5,(X)]
15900	TRFXR2:	ICOUNT
16000		ILDB	Y,Z
16100		JUMPE	Y,.+2
16200		TRO	Y,100
16300		IDPB	Y,B
16400		JUMPN	Y,TRFXR2
16500		MOVEI	B,[ASCIZ/Corrected to: /]
16600		PUSHJ	P,WRSEXC
16700		MOVEI	B,WORDIX
16800		PUSHJ	P,WRSEXC
16900		MOVEI	B,[ASCIZ/
17000	/]
17100		PUSHJ	P,WRSEXC
17200	;	COPY TEXT FROM WORDIX TO LOBUF
17300		MOVE	D,[POINT 7,WORDIX]
17400		ILDB	A,D
17500		TRNE	FL,LOWER
17600		TRO	A,40	;SET LOWERCASE
17700		IDPB	A,OUTPTR
17800		BCHECK(OUTPTR,LOBUF+40)
17900	
18000		TRNE	FL,MIXED
18100		TRO	FL,LOWER
18200	TRFXR3:	ICOUNT
18300		ILDB	A,D
18400		JUMPE	A,TRFXR4
18500		TRNE	FL,LOWER
18600		TRO	A,40
18700		IDPB	A,OUTPTR
18800		BCHECK(OUTPTR,LOBUF+40)
18900		JRST	TRFXR3
19000	TRFXR4:	ICOUNT
19100		MOVE	A,INPTR1
19200		MOVEM	A,INPTR
19300		JRST	CPOPJ1
19400	CASECK:	ICOUNT
19500		MOVE	A,INPTR		;THE POINTER TO THE ORIGINAL WORD
19600		TRZ	FL,MIXED!LOWER
19700		ILDB	B,A
19800		TRNN	B,40		;SKIP IF LOWER CASE
19900		JRST	CSECK1
20000		TRO	FL,LOWER
20100		POPJ	P,
20200	CSECK1:	ICOUNT
20300		ILDB	B,A
20400		TRNE	B,40		;SKIP IF BOTH ARE UPPER CASE
20500		TRO	FL,MIXED	;SECOND WAS LOWER
20600		POPJ	P,
20700	
20800	
20900	TRYFXO:	ICOUNT
21000		TTCALL	3,[ASCIZ/I guess: /]
21100		MOVE	X,CANDBF
21200		MOVEM	X,CANDBX
21300		PUSHJ	P,CNVRTY
21400		TTCALL	3,[ASCIZ/  Type C to make this correction, or A,I,R,X,D, or W
21500	*/]
21600		TTCALL	4,A
21700		CAIL	A,"a"
21800		TRZ	A,40
21900		CAIE	A,"C"
22000		JRST	TRYFXQ
22100		TTCALL	11,0
22200		JRST	TRFXR1
22300	TRFQDO:	SETZM	IDNUM
22400		AOS	IDNUM
22500		PUSHJ	P,HASHCP
22600		PUSHJ	P,INSRTX
22700		SKIPG	CANDID
22800		POPJ	P,
22900	
23000	COMMENT/
23100		NOW WE GO WRITE THIS WORD IN THE EXCEPTIONS, SINCE WE THINK
23200	THAT IT LOOKS LIKE SOME OTHER WORDS.
23300	
23400	/
23500		PUSHJ	P,CONVRT
23600		MOVEI	B,WORDIX
23700		PUSHJ	P,WRSEXC
23800		MOVEI	B,[ASCIZ/
23900	/]
24000		PUSHJ	P,WRSEXC
24100		POPJ	P,
     

00100		SUBTTL	TRYIII	FOR III DISPLAY OF GUESSES.
00200	IFN STANSW,<
00300	
00400	TRYIII:						;III & THERE ARE GUESSES TO DISPLAY
00500		MOVE	Z,[IOWD DPYLEN,DPYBUF]		;PDL POINTER TO DPYBUF
00600		PUSH	Z,[0]				;START THINGS OFF RIGHT
00700		MOVE	D,CANDID
00800		CAIG	D,1
00900		JRST	IIONE				;ONLY ONE WORD TO TRY
01000		SETZ	D,				;INDEX TO CANDIDATES
01100	TRII.1:	PUSH	Z,[LVW(400,000,I,A,7,3)]	;LVW TO POSITION THE TEXT. Y SET BELOW
01200		MOVNI	X,40				;LOAD A DIDDLE FACTOR
01300		IMULI	X,(D)				;TIMES THE WORD INDEX
01400		ADDI	X,700				;PLUS THE OFFSET
01500		DPB	X,[POINT 11,(Z),21]		;STORE THE Y POSITION
01600		MOVE	Y,[POINT 7,C]			;DEPOSIT POINTER.
01700		MOVEI	C,1
01800		MOVEI	A,1(D)				;GET THE INDEX+1. 
01900		PUSHJ	P,DECDIS			;DECIMAL DISPLAY
02000		MOVEI	A,"."				;AND
02100		PUSHJ	P,DISDEP
02200		MOVEI	A," "
02300		PUSHJ	P,DISDEP
02400		MOVE	X,CANDBF(D)			;GET ADDRESS OF A CANDIDATE
02500		HRLI	X,(<POINT 5,0>)			;MAKE A BYTE POINTER
02600	TRII.2:	ILDB	A,X				;GET A BYTE
02700		JUMPE	A,TRII.3			;JUMP IF DONE.
02800		ADDI	A,"A"-1				;MAKE IT 7 BIT ASCII
02900		PUSHJ	P,DISDEP			;DISPLAY DEPOSIT.
03000		JRST	TRII.2
03100	
03200	TRII.3:	PUSH	Z,C				;ADD THIS WORD TO THE OUTPUT
03300		ADDI	D,1
03400		CAMGE	D,CANDID
03500		JRST	TRII.1
03600		PUSH	Z,[LVW(-1000,200,I,A,7,4)]	;VECTOR OVER TO THE LEFT CENTER
03700		MOVEI	C,1
03800		MOVE	Y,[POINT 7,C]
03900		MOVE	X,[POINT 7,DIGMES]		;GET MESSAGE POINTER
04000		PUSHJ	P,COPX
04100		PUSH	Z,C
04200		HLRE	A,Z				;GET THE SIZE FIELD
04300		ADDI	A,DPYLEN
04400		MOVEM	A,DPYSIZ
04500		UPGIOT	1,DPYHDR			;TURN ON THE TEXT
04600	TRII5A:	TTCALL	3,[ASCIZ/
04700	*/]
04800		TTCALL	4,A				;WAIT FOR A CHARACTER
04900		CAIL	A,"0"
05000		CAILE	A,"9"				;DECIMAL DIGIT?
05100		JRST	TRIXIT				;NO. ALL THAT WORK FOR NOTHING.
05200		MOVEI	B,-"0"(A)			;OK
05300	TRII.6:	TTCALL	4,A
05400		CAIL	A,"0"
05500		CAILE	A,"9"
05600		JRST	TRII.7
05700		IMULI	B,12
05800		ADDI	B,-"0"(A)
05900		JRST	TRII.6
06000	TRII.7:	TTCALL	11,
06100		SUBI	B,1				;DECREASE TO MAKE INDEX
06200		CAML	B,CANDID			;LESS THAN CANDID?
06300		JRST	[TTCALL 3,[ASCIZ/NUMBER TOO BIG
06400	/]
06500			JRST	TRII5A]			;LOSER
06600		MOVE	A,CANDBF(B)
06700		MOVEM	A,CANDBX			;SAVE ADDRESS OF THIS STUFF
06800		MOVEI	A,1
06900		MOVEM	A,DPYSIZ			;STORE ONE WORD PROGRAM SIZE
07000		UPGIOT	1,DPYHDR			;FLUSH DISPLAY
07100		JRST	TRFXR1				;AND CORRECT THE WORD, ETC.
07200	
07300	TRIXIT:	MOVEI	B,1
07400		MOVEM	B,DPYSIZ
07500		UPGIOT	1,DPYHDR
07600		TRZ	A,40				;AMKE SURE OF UPPER CASE
07700		JRST	TRYFXQ
07800	
07900	COPX:	ILDB	A,X
08000		JUMPE	A,CPOPJ
08100		CAIN	A,11
08200		MOVEI	A,40			;TABS CAN'T BE DISPLAYED
08300		PUSHJ	P,DISDEP
08400		JRST	COPX
08500	
08600	IIONE:	PUSH	Z,[LVW(-1000,200,I,A,7,4)]
08700		MOVEI	C,1
08800		MOVEI	Y,[POINT 7,C]
08900		MOVE	X,[POINT 7,[ASCIZ/C Correct this to "/]]
09000		PUSHJ	P,COPX
09100		MOVE	X,CANDBF
09200		HRLI	X,(<POINT 5,0>)
09300	IIONE1:	ILDB	A,X
09400		JUMPE	A,IIONE2
09500		ADDI	A,"A"-1
09600		PUSHJ	P,DISDEP
09700		JRST	IIONE1
09800	IIONE2:	MOVE	X,[POINT 7,[ASCIZ/"
09900	/]]
10000		PUSHJ	P,COPX
10100		PUSH	Z,C
10200		HLRE	A,Z
10300		ADDI	A,DPYLEN
10400		MOVEM	A,DPYSIZ
10500		UPGIOT	1,DPYHDR
10600		TTCALL	3,[ASCIZ/
10700	*/]
10800		TTCALL	4,A
10900		MOVEI	B,1			;INDEX FOR TRII.7
11000		CAIE	A,"C"
11100		CAIN	A,"c"
11200		JRST	TRII.7
11300		JRST	TRIXIT
11400	
11500	DECDIS:	IDIVI	A,12				;DECIMAL PRINTER
11600		HRLM	B,(P)
11700		JUMPE	A,.+2
11800		PUSHJ	P,DECDIS
11900		HLRZ	A,(P)
12000		ADDI	A,"0"				;TURN DIGIT INTO A CHARACTER
12100							;FALL INTO PRINTER.
12200	DISDEP:	TLNN	Y,740000			;SKIP IF WE ARE WITHIN THE WORD.
12300		JRST	DISDP1				;WE ARE ABOUT TO OVERFLOW.
12400		IDPB	A,Y
12500		POPJ	P,
12600	DISDP1:	PUSH	Z,C				;ADD THIS WORD TO THE OUTPUT
12700		MOVEI	C,1
12800		MOVE	Y,[POINT 7,C]
12900		IDPB	A,Y
13000		POPJ	P,
13100	
13200	DIGMES:	ASCIZ/Select a displayed word by number
13300	/
13400	
13500	>				;END OF IFN STANSW, TRYIII
13600	
13700	
     

00100		SUBTTL	THE HELP MESSAGE
00200	
00300	HELMSG:						;HELP MESSAGE FOR TTY'S
00400		ASCIZ/A Accept word
00500	I Accept word and insert it
00600	  in the dictionary
00700	R Replace this word. User will
00800	  be able to type replacement word
00900	X accept this word,
01000	  then finish recopying without
01100	  any checking.
01200	W Save my present incremental insertions,
01300	  then ask again about this word.
01400	/
01500	HELMG1:	ASCIZ/D Display the current line again.
01600	S Select from list of guesses.
01700	/
01800	
01900	
02000	HELMSZ:						;HERE TO DISPLAY HELP MESSAGE
02100	IFG STANSW,<
02200		TRNN	FL,IIISW
02300		JRST	HELMX1		;NOT A III
02400		MOVE	Z,[IOWD DPYLEN,DPYBUF]
02500		PUSH	Z,[0]
02600		PUSH	Z,[LVW(-1000,700,I,A,4,4)]
02700		MOVE	X,[POINT 7,HELMSG]
02800		MOVE	Y,[POINT 7,C]
02900		MOVEI	C,1
03000		PUSHJ	P,COPX
03100		PUSH	Z,C
03200		HLRE	A,Z
03300		ADDI	A,DPYLEN
03400		MOVEM	A,DPYSIZ
03500		UPGIOT	0,DPYHDR	;WRITE USING THE POINTER
03600		POPJ	P,
03700	>
03800	HELMX1: TTCALL	3,[ASCIZ/
03900	In general, you have the following options:
04000	/]
04100		TTCALL	3,HELMSG
04200		TTCALL	3,HELMG1
04300		TTCALL	3,[ASCIZ/
04400	If you want to review this list, then type something not in the list
04500	/]
04600		POPJ	P,
04700	
     

00100		SUBTTL	CHECK FOR REPEATS OF THE SAME WORD.
00200	REPCK:	ICOUNT
00300		MOVE	X,CANDID
00400		CAIG	X,1
00500		POPJ	P,
00600		MOVEI	X,1
00700	REPK1:	ICOUNT
00800		MOVEI	Y,1(X)
00900	REPK2:	ICOUNT
01000		MOVE	Z,CANDBF-1(X)
01100		CAMN	Z,CANDBF-1(Y)
01200		JRST	[PUSH	P,Z
01300			SOS	Z,CANDID
01400			MOVE	Z,CANDBF(Z)
01500			MOVEM	Z,CANDBF-1(Y)
01600			POP	P,Z
01700			JRST	REPCK]
01800		CAMGE	Y,CANDID
01900		AOJA	Y,REPK2
02000		ADDI	X,1
02100		CAMGE	X,CANDID
02200		JRST	REPK1
02300		POPJ	P,
02400	SETNUM:	ICOUNT
02500		SETZ	B,
02600	SETNM1:	TTCALL	2,A
02700		JRST	SETNM2
02800	SETNM4:	SUBI	A,60
02900		JUMPL	A,SETNM2
03000		CAILE	A,11
03100		JRST	SETNM2
03200		IMULI	B,12
03300		ADD	B,A
03400		JRST	SETNM1
03500	SETNM2:	CAIN	A,12
03600		JRST	.+3
03700		TTCALL	0,A
03800		JRST	SETNM2
03900		CAIL	B,40
04000		JRST	SETNM3
04100		SKIPG	B
04200		MOVEI	B,1
04300		MOVEM	B,IDNUM
04400		POPJ	P,
04500	SETNM3:	TTCALL	11,0	;FLUSH THE REST
04600		TTCALL	3,[ASCIZ/Dictionary number too large. Maximum is 31. 
04700	Dictionary number:  /]
04800		TTCALL	4,A
04900		SETZ	B,
05000		JRST	SETNM4
     

00100		SUBTTL	TYPE OUT ALL THE WORDS WE FOUND
00200	CORRSL:	ICOUNT
00300		SETZ	D,
00400		TRON	FL,HELP2S
00500		PUSHJ	P,HELMSY
00600		TTCALL	3,[ASCIZ/Type Y,^,<altmode> or <cr>
00700	/]
00800	CORRS1:	ICOUNT
00900		MOVE	X,CANDBF(D)
01000		MOVEM	X,CANDBX
01100		PUSHJ	P,CNVRTY
01200	CORRS2:	ICOUNT
01300		TTCALL	3,[ASCIZ/
01400	*/]
01500		TTCALL	4,A
01600		TTCALL	11,0
01700		CAIE	A,"Y"
01800		CAIN	A,"y"
01900		POPJ	P,
02000		CAIGE	A,175
02100		CAIN	A,33
02200		JRST	[POP	P,(P)
02300			JRST TRYFXA]
02400		CAIN	A,"^"
02500		JRST	[SOJGE  D,CORRS1
02600			TTCALL	3,[ASCIZ/Can't get there from here.
02700	/]
02800			AOJA	D,CORRS1]
02900		CAIE	A,15
03000		JRST	[TTCALL	3,[ASCIZ/huh? /]
03100			TTCALL	3,HELMS2
03200			JRST	CORRS2]
03300		ADDI	D,1
03400		CAMGE	D,CANDID
03500		JRST	CORRS1
03600		TTCALL	3,[ASCIZ/Those are all the choices.  /]
03700		POP	P,(P)
03800		JRST	TRYFXR
03900	
04000	CNVRTY:	ICOUNT
04100		HRLI	X,(<POINT 5,0>)
04200	; NOTE THAT THIS ROUTINE DEPENDS ON THE FACT THAT 
04300	; BITS 0-4 INCLUSIVE OF A LINK WORD ARE ZERO.
04400	;AT PRESENT ALL BITS IN THE LEFT HALF ARE ZERO.
04500	
04600	CVTY1:	ICOUNT
04700		ILDB	A,X
04800		JUMPE	A,CPOPJ
04900		ADDI	A,"A"-1
05000		TTCALL	1,A
05100		JRST	CVTY1
05200	HELMS2:	ASCIZ/Type 
05300	Y<cr> to select a word
05400	<cr> to see next word
05500	<altmode> to escape from this mode
05600	or ^<cr> to back up in this list
05700	/
05800	HELMSY:	ICOUNT
05900		TTCALL	3,[ASCIZ/To select a choice: /]
06000		TTCALL	3,HELMS2
06100		TTCALL	3,[ASCIZ/To review this list, type anything else
06200	/]
06300		POPJ	P,
     

00100		SUBTTL	X1SRCH	TRY TO CORRECT ONE MISSPELLED LETTER
00200	
00300	X1SRCH:	ICOUNT
00400		PUSHJ	P,HASHCP
00500		JUMPL	Z,CPOPJ	;QUICK FAILURE
00600		PUSHJ	P,SR1WL		;SPECIAL SEARCH
00700		PUSHJ	P,SAVWD	;SAVE THE LOSING WORD
00800		MOVE	A,[POINT 5,WORDIN,9]	;TWEAKING THE SECOND LETTER
00900		MOVEM	A,X1BYPT
01000	X1SRC1:	ICOUNT
01100		MOVEI	A,32		;TRY ALL FIRST LETTERS
01200		MOVEM	A,TLET.1
01300	X1SRC2:	ICOUNT
01400		DPB	A,X1BYPT
01500		PUSHJ	P,HASHCP
01600		PUSHJ	P,SEARCH
01700		JRST	X1SRC3	;FAILURE
01800		AOS	A,CANDID
01900		MOVEM	X,CANDBF-1(A)
02000	X1SRC3:	ICOUNT
02100		SOSLE	A,TLET.1
02200		JRST	X1SRC2
02300		PUSHJ	P,UNSVWD
02400		MOVE	A,[POINT 5,WORDIN,4]	;SEE IF WE'VE TRIED FIRST YET
02500		CAMN	A,X1BYPT
02600		POPJ	P,
02700		MOVEM	A,X1BYPT
02800		JRST	X1SRC1
02900	
03000	
03100	COMMENT/
03200	SPECIAL SEARCH FOR ONE LETTER MISPELLINGS
03300	/
03400	
03500	SR1WL:	ICOUNT
03600		JUMPLE	Z,CPOPJ		;GIVEUP
03700		CAIGE	W,3
03800		POPJ	P,
03900		PUSH	P,W
04000		IDIVI	W,7
04100		JUMPE	X,.+2
04200		ADDI	W,1
04300		MOVEM	W,WWLEN
04400		POP	P,W
04500		TRNE	FL,LEFT
04600		HLRZ	X,HASHTB(Z)
04700		TRNN	FL,LEFT
04800		HRRZ	X,HASHTB(Z)
04900	SR1WL1:	ICOUNT
05000		JUMPE	X,CPOPJ		;TIME TO QUIT
05100		HRRZ	N,(X)		;NEXT IN THE CHAIN
05200		CAMG	X,N
05300		PUSHJ	P,INTCFN
05400		ADDI	X,1
05500		MOVE	Y,CANDID
05600		MOVEM	X,CANDBF(Y)	;THERE IN CASE OF SUCCESS
05700					;(WHAT YOU DO AT FAILURE IS YOUR
05800					;PROBLEM)
05900		SETZB	Y,TLET.1	;Y INDEX TO WORDIN, TLET.1 IS 
06000					;COUNT OF LETTERWISE MISMATCH
06100		SETZ	A,
06200	SRWL1A:	ICOUNT
06300		MOVE	K,(X)
06400		XOR	K,WORDIN(Y)
06500	SR1WL2:	ICOUNT
06600		JFFO	K,SRWL2A	;DON'T LET YOUR MOTHER SEE YOU DOING THIS.
06700	;	(WHAT DID HE MEAN BY THAT?)
06800	SR1WL3:	ICOUNT
06900		ADDI	Y,1
07000		CAMGE	Y,WWLEN
07100		AOJA	X,SRWL1A
07200		AOS	CANDID
07300	SR1WL4:	ICOUNT
07400		HRRZ	X,N
07500		JRST	SR1WL1
07600	SRWL2A:	ICOUNT
07700		CAIL	L,43
07800		JRST	SR1WL3		;(SHOULD NEVER HAPPEN, BUT...)
07900		IDIVI	L,5	;SAVE SPACE BY WASTING TIME
08000		DPB	A,SR1WLT(L)
08100		AOS	A,TLET.1
08200		CAIE	A,1
08300		JRST	SR1WL4		;TOO MANY MISTAKES
08400		SOJA	A,SR1WL2
08500	
08600	SR1WLT:	POINT 5,K,4
08700		POINT 5,K,9
08800		POINT 5,K,14
08900		POINT 5,K,19
09000		POINT 5,K,24
09100		POINT 5,K,29
09200		POINT 5,K,34
     

00100		SUBTTL	X1EXL	MAYBE HE TYPED ONE EXTRA LETTER
00200	COMMENT/
00300	FOR W TIMES, COPY W-1 LETTERS FROM WDSVWX TO WORDIN
00400	ON THE I'TH COPY, SKIP LETTER NUMBER W-I+1
00500	/
00600	
00700	X1EXL:	ICOUNT
00800		CAIGE	W,3
00900		POPJ	P,		;CAN'T CORRECT A SHORT WORD
01000		PUSHJ	P,SAVWD
01100		MOVEM	W,TLET.1	;TLET.1 WILL SELECT THE LETTER TO
01200					;SKIP
01300	X1EXL1:	ICOUNT
01400		SETZM	WORDIN		;READY FOR BLT
01500		MOVE	A,[XWD WORDIN,WORDIN+1]
01600		BLT	A,WORDIN+5
01700		MOVE	B,[POINT 5,WORDIN]
01800		MOVE	C,[POINT 5,SVWDWX]
01900		SETZ	D,		;COUNT THE CHARACTERS MOVED
02000	X1EXL2:	ICOUNT
02100		ILDB	A,C
02200		ADDI	D,1
02300		CAME	D,TLET.1
02400		IDPB	A,B
02500		BCHECK(B,WORDIN+10)
02600		CAMGE	D,W
02700		JRST	X1EXL2
02800		SUBI	W,1
02900		PUSHJ	P,HASHCP
03000		PUSHJ	P,SEARCH
03100		JRST	X1EXL3
03200		AOS	A,CANDID
03300		MOVEM	X,CANDBF-1(A)
03400	X1EXL3:	ICOUNT
03500		ADDI	W,1
03600		SOSLE	TLET.1
03700		JRST	X1EXL1
03800		PUSHJ	P,UNSVWD
03900		POPJ	P,
     

00100		SUBTTL	XTRNP	ONE PAIR TRANSPOSITION
00200	
00300	XTRNP:	ICOUNT
00400		PUSHJ	P,SAVWD
00500		MOVEM	W,TLET.1
00600		SOS	TLET.1
00700	XTRNP1:	ICOUNT
00800		SETZM	WORDIN
00900		MOVE	A,[XWD WORDIN,WORDIN+1]
01000		BLT	A,WORDIN+5
01100		MOVE	B,[POINT 5,WORDIN]
01200		MOVE	C,[POINT 5,SVWDWX]
01300		SETZ	D,
01400	XTRNP2:	ICOUNT
01500		ILDB	A,C
01600		ADDI	D,1
01700		CAMN	D,TLET.1
01800		JRST	[PUSH	P,A
01900			ILDB	A,C
02000			ADDI	D,1
02100			IDPB	A,B
02200			POP	P,A
02300			JRST  .+1]
02400		IDPB	A,B
02500		BCHECK(B,WORDIN+10)
02600		CAMGE	D,W
02700		JRST	XTRNP2
02800		PUSHJ	P,HASHCP
02900		PUSHJ	P,SEARCH
03000		JRST	XTRNP3
03100		AOS	A,CANDID
03200		MOVEM	X,CANDBF-1(A)
03300	XTRNP3:	ICOUNT
03400		SOSLE	TLET.1
03500		JRST	XTRNP1
03600		PUSHJ	P,UNSVWD
03700		POPJ	P,
     

00100		SUBTTL	ONE LETTER MISSING
00200	
00300	X1LMS:	ICOUNT
00400		PUSHJ	P,SAVWD
00500		MOVEM	W,TLET.2
00600		AOS	TLET.2
00700	X1LMS1:	ICOUNT
00800		SETZM	WORDIN
00900		MOVE	A,[XWD WORDIN,WORDIN+1]
01000		BLT	A,WORDIN+5
01100		MOVE	B,[POINT 5,WORDIN]
01200		MOVE	C,[POINT 5,SVWDWX]
01300		SETZ	D,
01400	X1LMS2:	ICOUNT
01500		ILDB	A,C
01600		ADDI	D,1
01700		CAMN	D,TLET.2
01800		IBP	B	;SLIDE PAST THIS BYTE
01900		IDPB	A,B
02000		BCHECK(B,WORDIN+10)
02100		CAMGE	D,W
02200		JRST	X1LMS2
02300		ADDI	W,1
02400		PUSHJ	P,HASHCP
02500		PUSHJ	P,SR1WL
02600		SUBI	W,1
02700		SOS	A,TLET.2
02800		CAILE	A,2
02900		JRST	X1LMS1
03000	COMMENT/  NOW TRY PLACING SLOTS IN THE FIRST TWO POSITIONS/
03100		SETZM	WORDIN
03200		MOVE	A,[XWD WORDIN,WORDIN+1]
03300		BLT	A,WORDIN+5
03400		MOVE	B,[POINT 5,WORDIN]
03500		MOVE	C,[POINT 5,SVWDWX]
03600		ILDB	A,C
03700		IDPB	A,B
03800		BCHECK(B,WORDIN+10)
03900		IBP	B	;SKIP SECOND CHARACTER
04000		MOVEI	D,1
04100	X1LMS3:	ICOUNT
04200		ILDB	A,C
04300		ADDI	D,1
04400		IDPB	A,B
04500		BCHECK(B,WORDIN+10)
04600		CAMGE	D,W
04700		JRST	X1LMS3
04800	;PLAY WITH CHARACTER 2, THEN WITH POSITION 1.
04900	;THIS HAS ALL THE UNPLEASANT CONNOTATIONS OF MASTURBATION.
05000		MOVE	A,[POINT 5,WORDIN,9]
05100		MOVEM	A,X1BYPT
05200		ADDI	W,1
05300	X1LM3A:	ICOUNT
05400		MOVEI	A,32
05500		MOVEM	A,TLET.2
05600	X1LMS4:	ICOUNT
05700		DPB	A,X1BYPT
05800		PUSHJ	P,HASHCP
05900		PUSHJ	P,SEARCH
06000		JRST	X1LMS5
06100		AOS	A,CANDID
06200		MOVEM	X,CANDBF-1(A)
06300	X1LMS5:	ICOUNT
06400		SOSLE	A,TLET.2
06500		JRST	X1LMS4
06600	;NOW THINK ABOUT PLAYING WITH FIRST SLOT.
06700		MOVE	D,[POINT 5,WORDIN,4]
06800		CAMN	D,X1BYPT
06900		JRST	[PUSHJ	P,UNSVWD
07000			POPJ	P,]
07100		LDB	A,D
07200		DPB	A,X1BYPT	;COPY FIRST LETTER TO SECOND
07300		MOVEM	D,X1BYPT	;NOW A POINTER TO SECOND SLOT
07400		JRST	X1LM3A
     

00100		SUBTTL	SAVEME  WRITE OUT CORE IMAGE USING SWAP UUO.
00200	
00300	COMMENT/  OTHER SYSTEMS WILL HAVE TO TRY DUMP  MODE I-O /
00400	
00500	IFG STANSW,<SAVEME:	ICOUNT
00600		TTCALL	3,[ASCIZ/
00700	By what name shall I save this? /]
00800		PUSHJ	P,GETFIL
00900		JRST	[TTCALL	3,[ASCIZ/Default name is SPELL.DMP
01000	/]
01100			MOVE	K,[SIXBIT/SPELL/]
01200			SETZB	L,N
01300			JRST	.+1]
01400		MOVSI	K-1,'DSK'
01500		;	FILE NAME IS IN K
01600		JUMPN	L,.+2
01700		MOVSI	L,'DMP'		;DEFAULT EXTENSION
01800		SETZ	M,	;USE EXISTING SIZE AND START ADDRESS
01900		MOVSI	0,K-1		;ADDRESS OF SWAP BLOCK INTO LEFT SIDE OF 0
02000		SWAP	0,
02100		POPJ	P,>
02200	IFE STANSW,<
02300	SAVEME:	ICOUNT
02400		TTCALL	3,[ASCIZ/SAVE THIS CORE IMAGE, THEN RESTART THE PROGRAM
02500	/]
02600		EXIT	1,
02700		POPJ	P,	;IF HE CAN CONTINUE.
02800	>
02900	
     

00100	IFN XCNT,<
00200	;THIS IS A ROUTINE TO COUNT THE LENGTHS OF THE HASH CHAINS
00300	LENGTH:	PUSHJ	P,INDCTO	;INIT DICTIONARY CHANNEL IN OUTPUT MODE
00400		MOVE	K,['SPELL ']
00500		MOVSI	L,'DAT'
00600		SETZB	M,N
00700		ENTER	DICT,K
00800		JRST	[OUTSTR	[ASCIZ/SPELL.DAT ENTER FAILED./]
00900			HALT	LENGTH]
01000		MOVEI	B,[ASCIZ/2	3	4	5	6	/]
01100		PUSHJ	P,WRSDCT
01200		MOVEI	B,[ASCIZ/7	8	9	10	11+
01300	/]
01400		PUSHJ	P,WRSDCT
01500		MOVSI	Z,-HASHTL	;THE MAIN INDEX - AOBJN
01600	LEN.1:	MOVEI	Y,0		;FLAG DENOTING SOMETHING TYPED
01700		HLRZ	X,HASHTB(Z)
01800		PUSHJ	P,LCNT		;DO LEFT SIDE
01900		HRRZ	X,HASHTB(Z)
02000		PUSHJ	P,LCNT		;DO RIGHT SIDE
02100		HLRZ	X,HASHTB+1(Z)
02200		PUSHJ	P,LCNT		;DO LEFT SIDE
02300		HRRZ	X,HASHTB+1(Z)
02400		PUSHJ	P,LCNT		;DO RIGHT SIDE
02500		HLRZ	X,HASHTB+2(Z)
02600		PUSHJ	P,LCNT		;DO LEFT SIDE
02700		HRRZ	X,HASHTB+2(Z)
02800		PUSHJ	P,LCNT		;DO RIGHT SIDE
02900		HLRZ	X,HASHTB+3(Z)
03000		PUSHJ	P,LCNT		;DO LEFT SIDE
03100		HRRZ	X,HASHTB+3(Z)
03200		PUSHJ	P,LCNT		;DO RIGHT SIDE
03300		HLRZ	X,HASHTB+4(Z)
03400		PUSHJ	P,LCNT		;DO LEFT SIDE
03500		HRRZ	X,HASHTB+4(Z)
03600		PUSHJ	P,LCNT		;DO RIGHT SIDE
03700		JUMPG	Y,LEN.2
03800		MOVEI	A,(Z)
03900		IDIVI	A,5			;DIVIDE 0 TO 675
04000		IDIVI	A,32			;FIRST LETTER IN A, SECOND IN B
04100		ADDI	A,"A"
04200		PUSHJ	P,WDICT			;WRITE ONE CHARACTER
04300		MOVEI	A,"A"(B)
04400		PUSHJ	P,WDICT			;WRITE ANOTHER
04500		MOVEI	B,[BYTE(7)15,12]	;CRLF
04600		PUSHJ	P,WRSDCT
04700	LEN.2:	ADD	Z,[5,,5]
04800		JUMPL	Z,LEN.1			;LOOP
04900		CLOSE	DICT,0
05000		STATZ	DICT,740000
05100		JRST	DDE
05200		POPJ	P,
05300	
05400	LCNT:	MOVEI	B,0			;COUNT THE NUMBER OF WORDS
05500	LCNT.1:	JUMPE	X,LCNT.2		;JUMP IF DONE
05600		HRRZ	X,0(X)			;LINK ON.
05700		AOJA	B,LCNT.1		;COUNT 1 AND LOOP
05800	
05900	LCNT.2:	JUMPE	B,LCNT.4		;JUMP IF THERE'S NOTHING TO TYPE
06000		JUMPL	Y,LCNT.3		;JUMP IF NO LEADING TABS...
06100		MOVEI	A,11
06200		SOJL	Y,.+3
06300		PUSHJ	P,WDICT			;WRITE ONE TAB
06400		JRST	.-2			;LOOP WRITING TABS
06500	LCNT.3:	MOVEI	A,(B)
06600		PUSHJ	P,LCNTD			;TYPE THE DIGITS
06700		JRST	LCNT.5			;TRAILING TAB
06800	
06900	LCNT.4:	JUMPGE	Y,[AOJA Y,CPOPJ]
07000	LCNT.5:	MOVEI	A,11			;OUTPUT A TAB
07100		JRST	WDICT
07200	
07300	LCNTD:	IDIVI	A,12
07400		HRLM	B,(P)
07500		JUMPE	A,.+2
07600		PUSHJ	P,LCNTD
07700		HLRZ	A,(P)
07800		ADDI	A,"0"
07900		JRST	WDICT
08000	>
     

00100		SUBTTL	SOME OF THE STORAGE STUFF
00200	SDEF(PDLEN,40)
00300	PDLIST:	BLOCK	PDLEN	;PUSH DOWN LIST STORAGE
00400	PATCH1:	BLOCK	10
00500	PATCH2:	BLOCK	10
00600	PATCH3:	BLOCK	10	;"PATCHES, I'LL ALWAYS BE TRUE..."
00700	DICTFF:	BLOCK	1
00800	DATAFF:	BLOCK	1
00900	EXCPFF:	BLOCK	1
01000	NOEND:	BLOCK	1
01100	CORRFF:	BLOCK	1
01200	DICTBF:	BLOCK	3
01300	DATABF:	BLOCK	3
01400	EXCPBF:	BLOCK	3
01500	CORRBF:	BLOCK	3
01600	SDEF(HASHTL,32*32*5)		;26*26*10/2
01700	HASHTB:	BLOCK	HASHTL		;"Ugh!"
01800	LISTFF:	BLOCK	1	;FIRST FF FOR LIST STRUCTURES.
01900	DICTFL:	0		;INSURE A 0 AT LOAD TIME
02000	WORDIN:	BLOCK	6
02100	WORDIX:	BLOCK	13
02200	SCANT:	BLOCK	1
02300	SCANX:	BLOCK	5
02400	SAVCHR:	BLOCK	1
02500	WWLEN:	BLOCK	1
02600	NEWFF:	BLOCK	1
02700	LIBUF:	BLOCK	40
02800	LOBUF:	BLOCK	40
02900	INPTR:	BLOCK	1
03000	OUTPTR:	BLOCK	1
03100	INPTR1:	BLOCK	1
03200	SVWDWX:	BLOCK	6
03300	LSTBPY:	BLOCK	1
03400	SVWDLN:	BLOCK	1
03500	CANDID:	BLOCK	1
03600	CANDBF:	BLOCK	50	;HOLDS ADDRESS OF CORRECTED WORD
03700	
03800	IFN STANSW,<
03900	DPYHDR:	DPYBUF		;POINTER TO DISPLAY BUFFER
04000	DPYSIZ:	0		;LENGTH OF DISPLAY BUFFER IS STORED HERE
04100	SDEF(DPYLEN,1000)	;MAXIMUM LENGTH OF DISPLAY BUFFER
04200	DPYBUF:	BLOCK	DPYLEN	;BUFFER FOR DISPLAY PROGRAM
04300	>
04400	
04500	TLET.1:	BLOCK	1
04600	X1BYPT:	BLOCK	1
04700	SAVEXS:	BLOCK	1
04800	TLET.2:	BLOCK	1
04900	CANDBX:	BLOCK	1
05000	PAGENO:	BLOCK	1
05100	LINENO:	BLOCK	1
05200	DICTBO:	BLOCK	1	;BOTTOM OF DICT
05300	IDNUM:	BLOCK	1	;NUMBER OF DICTIONARY TO SAVE IN
05400	PICKLN:	BLOCK	1
05500	PICKPG:	BLOCK	1
05600	IFG COUNTS,<
05700	ICTAB:	BLOCK	%QXX+1
05800	ICTABX:	BLOCK	1
05900	SDEF(%DTL,62)
06000	%DBT:	BLOCK	2*%DTL		;QUEUE FOR TRACE OF EXECUTION
06100	>
06200		END	BEGIN
06300	
