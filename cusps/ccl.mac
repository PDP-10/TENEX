00100	;<CLEMENTS>CCL.MAC;6    29-JAN-74 13:13:12	EDIT BY CLEMENTS
00200	;<CLEMENTS>CCL.MAC;5     8-AUG-73 16:40:52	EDIT BY CLEMENTS
00300	;<CLEMENTS>CCL.MAC;4    29-MAY-73 13:40:02	EDIT BY CLEMENTS
00400	;<CLEMENTS>CCL.MAC;3    24-MAY-73 00:50:59	EDIT BY CLEMENTS
00500	;<CLEMENTS>CCL.MAC;1    17-MAY-73 13:57:43	EDIT BY CLEMENTS
00600	TENEX==1		;ASSEMBLY AT BBN
00700	LINK10==1		;USE LINK10 (LOADER HAS PROBLEMS...SPR)
00800	TITLE COMPILE V22 -- CCL CONTROL CUSP
00900	;PROGRAM TO COMPILE, LOAD, EXECUTE AND DEBUG USER PROGRAMS
01000	SUBTTL WEIHER/CLEMENTS/RCC/PMH/NGP/DMN - 5-APR-73
01100	
01200	;***COPYRIGHT 1973, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.***
01300	
01400	VCOMPIL==22
01500	VUPDATE==0			;DEC UPDATE LEVEL
01600	VEDIT==143			;EDIT LEVEL
01700	VCUSTOM==4			;NON-DEC UPDATE LEVEL
01800	
01900	;THE ORIGINAL VERSION OF
02000	;THIS PROGRAM WAS WRITTEN AT THE STANFORD UNIVERSITY
02100	;ARTIFICIAL INTELLIGENCE LABORATORY BY WILLIAM F. WEIHER.
02200	;MR. WEIHER'S COOPERATION, AND THAT OF THE A-I LABORATORY,
02300	;ARE GRATEFULLY ACKNOWLEDGED.
02400	;
02500	;CONVERTED TO MACRO SOURCE LANGUAGE FROM FAIL ON
02600	;1 NOVEMBER 68 BY R CLEMENTS
02700	
02800	INTERN VCOMPILE,.JBVER	;FOR LOADER MAP AND LIBRARY
02900	
03000	LOC	<.JBVER==137>
03100		<VCUSTOM>B2+<VCOMPIL>B11+<VUPDATE>B17+VEDIT
03200	RELOC	0
03300	
03400	IFNDEF TEMP,<TEMP==1>		;TEMP=1 ALLOWS THE TMPCOR UUO TO BE USED
03500	
03600	IFNDEF RUNSW,<RUNSW==1>		;NON-ZERO TO USE THE RUN UUO
03700	IFNDEF PURESW,<PURESW==1>	;NON-ZERO FOR A SHARED VERSION OF COMPIL
03800	
03900	IFNDEF STANSW,<STANSW=0>	;NON-ZERO TO INCLUDE STANFORD FEATURES
04000	IFN STANSW,<FAIL==1>
04100	IFNDEF LSTRSW,<LSTRSW=0>	;NON-ZERO TO USE "LISTER" INSTEAD OF PIP
04200					;FOR TYPE AND LIST COMMANDS
04300	IFNDEF SAVEXT,<SAVEXT=='SAV'>	;USE DMP FOR PDP6'S
04400	IFNDEF FASTFS,<FASTFS=0>	;FASTEST FILE STRUCTURE
04500					;IF ZERO COMPIL WILL FIND IT AT RUN TIME
04600	IFNDEF DIRSW,<DIRSW==1>		;USE DIRECT CUSP IF NON-ZERO
04700	IFNDEF TENEX,<TENEX==0>		;CHANGES FOR TENEX OPERATION
04800	IFN TENEX,<
04900	FAIL==1
05000	BCPL==1
05100	PAL11==1
05200	MACX11==0
05300	SFDSW==0
05400	DEBSW==1
05500	PAL10==0
05600	>
05700	
05800	IFNDEF SNOBOL,<SNOBOL==0>	;ACCEPT SNOBOL AS A COMPILER
05900	IFNDEF MACX11,<MACX11==0>	;ACCEPT MACX11 (PDP-11) ASSEMBLER
06000	IFNDEF BLISS,<BLISS==1>		;ACCEPT BLISS COMPILER
06100	IFNDEF FAIL,<FAIL==0>		;FAIL ASSEMBLER
06200	IFNDEF SAIL,<SAIL==0>		;SAIL COMPILER
06300	IFNDEF BCPL,<BCPL==0>		;BCPL COMPILER
06400	IFNDEF PAL11,<PAL11==0>		;ANOTHER PDP11 ASSEMBLER
06500	IFNDEF PAL10,<PAL10==1>
06600	
06700	IFNDEF DEBSW,<DEBSW==0>		;DEBUGGING AIDS IF NON-ZERO
06800	IFNDEF SFDSW,<SFDSW==1>		;ENABLED FOR SUB-FILE DIRECTORY
06900	IFN SFDSW,<IFNDEF SFDLEN,<SFDLEN==5>>	;LENGTH ALLOWED
07000	IFDEF SFDLEN,<IFLE SFDLEN,<SFDSW==0>>	;NO SFD'S IF LENGTH.LE.0
07100	IFNDEF MANTIS,<MANTIS==0>	;SPECIAL F4 DEBUGGER
07200	IFNDEF FORTRAN,<FORTRAN==1>	;NON-ZERO IF BOTH F40 AND FORTRAN-10 ALLOWED
07300	IFNDEF DFORTRAN,<DFORTRAN==0>	;DEFAULT VALUE 0=F40, 1=FORTRAN-10
07400	IFNDEF LINK10,<LINK10==0>	;0 FOR LOADER, 1 FOR LINK-10
07500	IFNDEF EDITOR,<EDITOR=='LINED '>;EITHER LINED OR EDITS
     

00100	;ACS
00200	P=17		;PUSHDOWN POINTER
00300	C=16		;CHARACTERS RETURNED HERE
00400	CS=15		;CHARACTER STATUS BITS HERE
00500	SVPT=14		;POINTER TO CURRENT FILE IN LIST OF FILES (AOBJN)
00600	SWPT=13		;BYTE POINTER INTO SWITCH STORAGE AREA
00700	SWCNT=12	;NUMBER OF BYTES LEFT FOR SWITCH STORAGE
00800	FL3=11		;FLAG REGISTER (LEFT HALF IS GLOBAL SWITCHES)
00900	FL2=10		;FLAG REGISTER (LEFT HALF INDICATES PROCESSOR)
01000			;RIGHT HALF IS DEFAULT LOCAL PROCESSOR (SET BY /F ETC)
01100	IOP=7		;PDL FOR INPUT NESTING
01200	IOPNT=6	;POINTER TO CURRENT INPUT FILE
01300	
01400	T5=5		;USED IN OUTPUT ROUTINES ONLY (DMN)
01500	T4=4		;TEMPORARY ACCUMS
01600	T3=3
01700	T2=2
01800	T1=1
01900	FL=0		;FLAG REGISTER (LEFT HALF LOCAL SWITCHES)
02000			;(RIGHT HALF MISC BITS)
02100	
02200	IFN PURESW,<IFE RUNSW,<
02300	PRINTX ;ASSEMBLY SWITCHES CONFLICT>>
02400	
02500		SALL	;SUPPRESS ALL MACROS AND REPEATS
02600	
02700		MLON
02800	
02900	IFN TENEX,<
03000	SEARCH STENEX		;GET THE TENEX OPERATION CODES
03100	OPDEF	RESET	[CALLI	0]		;THE ONLY CONFLICTING JSYS/CALLI
03200	>
03300	IFE DEBSW,<OPDEF GOTO [JRST]>
03400	IFN DEBSW,<OPDEF GOTO [PUSHJ P,]	;LEAVE TRACES IN STACK>
03500	
03600	IFE SFDSW,<PDL==100	;LENGTH OF PDL>
03700	IFN SFDSW,<PDL==200	;NESTING TAKES UP MORE SPACE>
03800	SWBK==5		;NUMBER OF WORDS FOR SWITCHES TO PROCESSOR
03900	LODSCT==^D40+^D40*LINK10	;NUMBER OF LOADER SWITCHES PER FILE ALLOWED
04000	.TYSPL==(1B13)	;DEVTYP BIT FOR SPOOLING
     

00100	;FLAGS (RH OF FL)
00200	
00300	PROCS==1	;PROCESSOR SWITCHES SEEN
00400	DOLOD==2	;WE WANT TO DO LOADING
00500	PCM1==4		;FIRST COMMA SEEN IN PROCESSOR SWITCHES
00600	PCM2==10	;SECOND COMMA SEEN
00700	IDF==20		;SCAN SAW AN IDENTIFIER
00800	LODOUT==40	;SOME OUTPUT HAS BEEN DONE TO LOADER
00900	SOSF==100	;SOS FOR AN EDITOR?
01000	PERF==200	;PERMANENT TYPE FLAGS
01100	LINKFL==400	;LINK-10 REQUIRED (RATHER THAN LOADER)
01200	CMDSN==1000	;THE COMMAND SHOULD BE WRITTEN AS SVC OR EDS
01300	INCRF==2000	;WE ARE FINISHING CREF OUTPUT
01400	INPRNT==4000	;WE ARE PRINTING A CHARACTER STRING IN ERROR MSG
01500	PIPF==10000	;DOING SOMETHING FOR PIP
01600	EDITF==20000	;IN EDIT OR CREATE
01700	CREATF==40000	;CREATE
01800	FFLG==PCM1	;/F FLAG IN DIRECTORY COMMAND
01900	LPTFG==PCM2	;/L FLAG IN DIRECTORY COMMAND
02000	NODAT==PCM1	;FILE FROM OTHER THAN DSK
02100	NOLOOK==PCM2	;LOOKUP FAILED
02200	TECOF==100000	;WE WANT TECO
02300	RECALF==200000	;WE ARE READING A COMMAND SAVE FILE
02400	
02500	
02600	;TABLE OF NEW DEVICES
02700	DEFINE DEVICE<
02800	X NEW,NEW
02900	X OLD,OLD
03000	X SYS,SYS
03100	X SELF,DSK
03200	>
03300	;FLAGS (SWITCH TYPE)
03400	LISTSW==1	;DO LISTING
03500	CRSW==2		;DO A CREF
03600	LIBSW==4	;DO A LIBRARY SEARCH OF THIS FILE
03700	COMPLS==20	;COMPILE REGARDLESS OF DATES
03800	NOBINSW==40		;DON'T DO A REL FILE
03900	MANTSW==100	;COMPIL SPECIAL MANTIS CODE IF F4
04000	NOMANTSW==200	;DON'T
04100	F40SW==400		;COMPILE FORTRAN WITH F40
04200	F10SW==1000		;COMPILE FORTRAN WITH FORTRAN-10
04300	KA10SW==2000		;COMPIL CODE FOR KA-10
04400	KI10SW==4000		;COMPIL CODE FOR KI-10
04500	CPUSW==KA10SW!KI10SW	;SPECIFIC CPU REQUIRED
04600	OPTSW==10000		;OPTIMIZED CODE
04700	NOPTSW==20000		;NON-OPTIMIZED CODE
04800	;NEWSW==(1B0)		;USE DEVICE NEW:
04900	;OLDSW==(1B1)		;USE DEVICE OLD:
05000	;SYSSW==(1B2)		;USE DEVICE SYS:
05100	;SELFSW==(1B3)		;USE DEVICE DSK:
05200	DEVSW==(1B0)		;INITIAL VALUE
05300	DEVSWS==0		;SUM OF DEVSW
05400	DEFINE X(A,B)<
05500	A'SW==DEVSW
05600	DEVSWS==DEVSWS!DEVSW
05700	DEVSW==DEVSW_-1>
05800	DEVICE
05900	
     

00100	REPEAT 0,< THE MACRO PROCESS DEFINES DETAILS ABOUT THE VARIOUS
00200		PROCESSORS WHICH COMPILE IS EXPECTED TO HANDLE BY CALLING
00300		THE MACRO X WHICH IS REDEFINED TO PRODUCE THE INFORMATION REQUIRED.
00400		THE ARGUMENTS ARE SWITCH NAME,EXTENSION,PROCESSOR NAME
00500		<OPTIONAL>EXTENSION OF NEXT PROCESSOR IF MUST BE PROCESSED MORE
00600		THAN ONCE (AS COBOL),EXTENSION PRODUCED, DEBUGGING AID USED ON DEBUG
00700		COMMAND (DDT IF NULL)
00800	>
00900	
01000	DEFINE PROCESS<
01100	IFN DFORTRAN,<
01200	IFN MANTIS,<X FORTRAN,FOR,FORTRAN,,,MANTIS>
01300	IFE MANTIS,<X FORTRAN,FOR,FORTRAN>>
01400	IFE DFORTRAN,<
01500	IFN MANTIS,<X FORTRAN,FOR,F40,,,MANTIS>
01600	IFE MANTIS,<X FORTRAN,FOR,F40>>
01700	X MACRO,MAC,MACRO
01800	X COBOL,CBL,COBOL,,,COBDDT
01900	X ALGOL,ALG,ALGOL
02000	IFN SNOBOL,<X SNOBOL,SNO,SNOBOL>
02100	IFN MACX11,<X MACX11,P11,MACX11>
02200	IFN BLISS,<X BLISS,BLI,BLIS10>
02300	IFN FAIL,<X FAIL,FAI,FAIL>
02400	IFN SAIL,<X SAIL,SAI,SAIL>
02500	IFN BCPL,<X BCPL,BCP,BCPL>
02600	IFN PAL11,<X PAL11,P11,PAL11>
02700	IFN PAL10,<X PAL10,PAL,PAL10>
02800	>
02900	
03000	DEFINE XPROCESS<
03100	X LOADER,LOD,LOADER
03200	IFE TENEX,<X LINK,LNK,LINK>
03300	IFN TENEX,<X LINK10,LNK,LINK10>	;DUE TO NAME CONFLICT WITH LINK
03400					; TTY COMMUNICATIONS COMMAND
03500	X CREF,CRF,CREF
03600	X PIP,PIP,PIP
03700	X EDT,EDT
03800	IFN LSTRSW,<X LIST,LST,LISTER>
03900	>
04000	
     

00100	;PROCESSOR FLAGS IN FL2
00200	RELSW==1	;DO A LOAD ONLY ON THIS FILE (PROCESSOR IS LOADER)
00300	ALPROC==RELSW	;OR OF BITS FOR ALL THE PROCESSORS
00400	NPROCS==0	;NUMBER OF PROCESSORS
00500	PROCBIT==400000	;USE TO ASSIGN PROCESSOR FLAGS
00600	MXPROC==^D17		;MAXIMUM PROCESSORS ALLOWED (REAL COMPILERS)
00700	XTPROC==0		;EXTRA "PROCESSORS (PIP,LOADER, ETC)
00800	SPRC==0		;BITS FOR THOSE PROCESSORS WHICH OUTPUT TO ANOTHER
00900	
01000	DEFINE X (A,B,C,D,E,F)<
01100	CHN'B==NPROCS	;INDEX TO OUTPUT ROUTINE
01200	B'SW==PROCBIT	;PROCESSOR BIT
01300	IFDIF <D><>,<SPRC==SPRC!PROCBIT>
01400	ALPROC==ALPROC!PROCBIT
01500	NPROCS==NPROCS+1
01600	PROCBIT==PROCBIT_-1>
01700	
01800	PROCESS
01900	IFG NPROCS-MXPROC,<PRINTX TOO MANY PROCESSORS DEFINED>
02000	
02100	
02200	DEFINE X (A,B,C,D,E,F)<
02300	CHN'B==MXPROC+XTPROC
02400	XTPROC==XTPROC+1>
02500	XPROCESS
02600	
02700	IFE BLISS,<BLISW==0>	;MAKES TESTS EASIER AND NEATER
02800	LOOK==0		;CHANNEL FOR DOING LOOKUPS FOR INFORMATION
02900	NFILE==^D40	;NUMBER OF FILES PERMITTED IN A + CONSTRUCTION
03000	IFNDEF NESTDP,<NESTDP==17>	;MAXIMUM NESTING DEPTH TO PERMIT
03100	IFLE NESTDP,<NESTDP==17>
03200	IFG NESTDP-17,<NESTDP==17>
03300	
     

00100	EXTERN	.JBFF,.JBREL,.JBERR,.JBSA
00200	
00300	%LOREL:!			;RELOCATABLE BEGINNING OF LOW SEGMENT
00400	
00500	IFN PURESW,<	TWOSEGMENTS
00600	.ZZ:
00700		RELOC	400000>
00800	
00900	OPDEF	STRING	[TTCALL	3,]
01000	OPDEF	PJRST	[JRST]		;POPJ RETURN
01100	
01200	DEFINE SKIP (J)<JRST .+1+'J>
01300	
01400	;MACROS FOR THE DATA STORAGE IN PURE AND IMPURE VERSIONS
01500	
01600	DEFINE WORDS(A)<
01700	IRP A,<
01800	U(A,1)>>
01900	
02000	IFE PURESW,<
02100	DEFINE U(A,B)<
02200	A:	BLOCK B>>
02300	
02400	IFN PURESW,<
02500	DEFINE U(A,B)<
02600		RELOC
02700	A:	BLOCK B
02800		RELOC>>
     

00100	SUBTTL	COMMAND AND SWITCH TABLES
00200	
00300	DEFINE CTABLE<
00400	COMAND	COMPILE,<TRZ	FL,DOLOD>
00500	COMAND	LOAD,JFCL
00600	COMAND	DEBUG,<PUSHJ	P,DEBUG>
00700	COMAND	EXECUTE,<PUSHJ	P,XCTR>
00800	COMAND	EDIT,<TRO	FL,EDITF>
00900	COMAND	CREATE,<TRO	FL,EDITF!CREATF>
01000	COMAND	LIST,<JRST	LISTR>
01100	COMAND	CREF,<JRST	CREFIT>
01200	COMAND	CROSS,<JRST	CREFIT>
01300	COMAND	DELETE,<JRST	DODEL>
01400	COMAND	TECO,<TRO	FL,EDITF!TECOF>
01500	COMAND	MAKE,<TRO	FL,EDITF!TECOF!CREATF>
01600	COMAND	RENAME,<JRST	DOREN>
01700	COMAND	TYPE,<JRST	TYPR>
01800	COMAND	COPY,<JRST	DOCOPY>
01900	COMAND	PRESERVE,<JRST	DOPRES>
02000	COMAND	PROTECT,<JRST	DOPROT>
02100	COMAND	REWIND,<JRST	DOREW>
02200	COMAND	UNLOAD,<JRST	DOUNLD>
02300	COMAND	ZERO,<JRST	DOZERO>
02400	COMAND	ZER,<JRST	DOZERO>
02500	COMAND	SKIP,<JRST	DOSKIP>
02600	COMAND	BACKSPACE,<JRST	DOBKSP>
02700	COMAND	EOF,<JRST	DOEOF>
02800	COMAND	FUDGE,<JRST	FUDGIT>
02900	COMAND	CTEST,<JRST	TESTIT>
03000	COMAND	DIRECTORY,<JRST	DODIR>
03100	COMAND	HELP,<JRST	RUNAME>
03200	COMAND	INITIA,<JRST	RUNAME>
03300	COMAND	SYSTAT,<JRST	RUNAME>
03400	COMAND	PLEASE,<JRST	RUNAME>
03500	COMAND	FILE,<JRST	MOUNT>
03600	COMAND	SOS,<TRO	FL,EDITF!SOSF>
03700	COMAND	LABEL,<JRST	IDENT>
03800	>
03900	
04000	IFN DIRSW,<SYN	RUNAME,DODIR>
     

00100		DEFINE STABLE<
00200	SWITCH LIST,<XWD LISTSW,CRSW>
00300	SWITCH CREF,<XWD CRSW!LISTSW,0>
00400	SWITCH C,<XWD CRSW!LISTSW,0>
00500	SWITCH SEARCH,<LIBSW,,0>
00600	SWITCH LIBRARY,<LIBSW,,0>
00700	SWITCH NOLIST,LISTSW
00800	SWITCH NOSEARCH,LIBSW
00900	SWITCH L,<XWD LISTSW,CRSW>
01000	SWITCH N,LISTSW
01100	SWITCH COMPILE,<XWD COMPLS,0>
01200	SWITCH NOCOMPILE,COMPLS
01300	SWITCH	NOBIN,<NOBINSW,,0>
01400	SWITCH	BIN,NOBINSW
01500	IFN MANTIS,<SWITCH MANTIS,<XWD MANTSW,NOMANTSW!RELSW>
01600	SWITCH NOMANTIS,<XWD NOMANTSW,MANTSW!RELSW>>
01700	SWITCH	F40,<F40SW,,F10SW>
01800	SWITCH	F10,<F10SW,,F40SW>
01900	SWITCH	KA10,<KA10SW,,KI10SW>
02000	SWITCH	KI10,<KI10SW,,KA10SW>
02100	SWITCH	OPTIMIZE,<OPTSW,,NOPTSW>
02200	SWITCH	NOPTIMIZE,<NOPTSW,,OPTSW>
02300	SWITCH	NEW,<NEWSW,,DEVSWS>
02400	SWITCH	OLD,<OLDSW,,DEVSWS>
02500	SWITCH	SYS,<SYSSW,,DEVSWS>
02600	SWITCH	SELF,<SELFSW,,DEVSWS>
02700	>
02800	
02900	DEFINE PTABLE<
03000	SWITCH REL,<XWD RELSW,ALPROC>
03100	SWITCH M,<XWD MACSW,ALPROC>
03200	SWITCH F,<XWD FORSW,ALPROC>
03300	PROCESS
03400	>
03500	
03600	DEFINE	ATABLE<
03700	SWITCH	MAP,<0,,SETMAP>
03800	SWITCH	LMAP,<0,,SETMPL>
03900	SWITCH	FUDGE,<0,,SETFUD>
04000	SWITCH	DDT,<0,,SETDDT>
04100	SWITCH	FOROTS,<0,,FOROTS>
04200	SWITCH	FORSE,<0,,FORSE>
04300	SWITCH	LOADER,<0,,LOADIT>
04400	SWITCH	LINK,<0,,LINKIT>
04500	>
     

00100	SUBTTL	RUN UUO
00200	
00300	IFE RUNSW,<
00400	NUNPNT==6
00500	NUNTOP==7
00600	EXTERN	.JBDDT,.JBSA,.JBS41,.JBCOR
00700	
00800	OFFSET==INHERE-74
00900	
01000	NUNCOM:	IOWD 0,INHERE
01100		0
01200	NUNGO2:	CALLI 15,11	;GET PROPER CORE SIZE
01300		JRST NOCOR	;LOSE
01400		IN 1,NUNCOM	;GET IT
01500		JRST NUNGO3	;OK
01600	NUNERR:	CALLI NUNPNT,3	;WE LOSE, PRINT ERROR
01700		CALLI 12
01800	NUNERM:	ASCIZ #?LINKAGE ERROR - I/O#
01900	NUNGO3:	SKIPE 12,OFFSET+.JBCOR	;GET JOBCOR
02000		CAMG 12,.JBREL	;AND SEE IF WE SHOULD EXPAND
02100		JRST NUNGO4	;NO, START THE BLT
02200		MOVEI NUNPNT,NUNCER
02300		CALLI 12,11	;YES, DO IT
02400		JRST NUNERR	;LOSE
02500		MOVE 12,OFFSET+.JBS41	;RESET 41
02600		MOVEM 12,41
02700		JRST NUNGO4	;WIN
02800	NUNCER:	ASCIZ /?CORE NEEDED/
02900	INHERE:
03000	
03100	NUNAC:	PHASE 0	;THE CODE TO GO IN THE ACS
03200	NUNGO4:	MOVE 12,OFFSET+.JBDDT	;SET JOBDDT
03300		CALLI 12,2
03400	NUNBLT:	BLT NUNTOP,0
03500		CALLI	;RESET THE WORLD
03600		AOS 1,.JBSA	;GET STARTING ADDRESS
03700		JRST (1)
03800		NUNERM
03900		XWD INHERE+1,75	;THE BLT WORD
04000	DEPHASE
04100	%RNBLK==NAME-1
04200	>
     

00100	MOUNT:	SKIPA	T1,['UMOUNT']	;RUN MOUNT CUSP
00200	RUNAME:	MOVE	T1,COMTAB(T1)	;GET NAME OF CUSP TO RUN
00300		SETZ	T2,
00400		JRST	NUNDO+1		;START AT NORMAL ENTRY
00500	
00600	CREFIT:	SKIPA	T1,[SIXBIT /CREF/]
00700	FUDGIT:	MOVSI	T1,'PIP'
00800	NUNDO:	MOVSI	T2,1		;START ADDR PLUS ONE
00900		MOVEM	T1,%RNBLK+1	;SET FILE NAME SINCE WE HAVE IT IN T1
01000		RESET			;RESET THINGS
01100		SETZ	 %RNBLK+4	;USE DEFAULT PPN
01200		MOVE	T1,RUNCOR	;GET CORE ARG (USUALLY 0)
01300		MOVEM	T1,%RNBLK+5	;BUT NOT FOR COPY (^D10)
01400	IFN RUNSW,<
01500		SKIPN	T1,PCDEV	;USE SPECIAL DEVICE IF SET
01600		MOVSI	T1,'SYS'	;GET SYS DEVICE
01700		MOVEM	T1,%RNBLK	;SET IT IN LOW SEG RUN BLOCK
01800		SETZM	%RNBLK+2	;CLEAR EXTENSION - LET MONITOR CHOOSE
01900		SETZM	%RNBLK+3	;THIS ALSO (DATE, TIME, ETC)
02000		HRRI	T2,%RNBLK	;GET LOWSEG ADDRESS OF RUN BLOCK
02100		MOVSI	T1,1		;SET TO REMOVE HIGH SEGMENT
02200		HRRI	T1,%LENTH-1	;REDUCE LOWSEG FOR SIMILAR REASON
02300		MOVE	T3,[%RUN1,,%LOREL]	;GET READY TO PHASE CODE INTO LOWSEG
02400		BLT	T3,%RNBLK-1	;PERFORM THE TRANSFER
02500		MOVEM	T2,%RUNT2	;INCASE OF FAILURE
02600		JRST	%LOREL		;DO UUO'S IN LOWSEG SINCE HIGH SEG GONE
02700	
02800	%RUN1:
02900		PHASE	%LOREL
03000		CORE	T1,		;ALREADY SET UP IN HIGH SEG
03100		  JFCL			;DON'T CARE IF IT FAILS
03200	%RUN:	RUN	T2,		;T2 ALREADY SET UP ABOVE
03300		HRRZ	T1,T2		;GET ERROR CODE
03400		CAIN	T1,10		;NOT ENOUGH CORE ERROR?
03500		SKIPN	%RNBLK+5	;ONLY IF TOO MUCH ASKED FOR
03600		JRST	%RUN2		;NO, U LOSE
03700		SETZM	%RNBLK+5	;USE WHAT WE GET
03800		SKIPA	T2,.+1		;RESET T2
03900	%RUNT2:	Z			;SET FROM HIGH SEG
04000		JRST	%RUN		;TRY AGAIN
04100	
04200	%RUN2:	OUTSTR	RUNER1		;WARN USER OF FAILURE
04300		IDIVI	T1,^D10		;MAY BE 2 DIGITS
04400		JUMPE	T1,.+3		;NO, ONLY ONE
04500		ADDI	T1,"0"		;MAKE ASCII
04600		OUTCHR	T1		;OUTPUT IT
04700		ADDI	T2,"0"
04800		OUTCHR	T2
04900		OUTSTR	RUNER2		;REST OF MESSAGE
05000		MOVE	T2,%RNBLK	;PICK UP DEVICE
05100		SETZ	T1,		;CLEAR OUT JUNK
05200		LSHC	T1,6		;MOVE LEADING CHARACTER INTO T1
05300		MOVEI	T1,40(T1)	;FORM ASCII
05400		OUTCHR	T1		;PRINT IT
05500		JUMPN	T2,.-4		;MORE TO GO
05600		MOVEI	T1,":"		;USUAL SEPARATOR
05700		OUTCHR	T1
05800		MOVE	T2,%RNBLK+1	;FILE NAME
05900		SETZ	T1,
06000		LSHC	T1,6
06100		MOVEI	T1,40(T1)
06200		OUTCHR	T1
06300		JUMPN	T2,.-4
06400		EXIT			;AND GIVE UP
06500	
06600	RUNER1:! ASCIZ	/?RUN UUO failure (/
06700	RUNER2:! ASCIZ	/) for /
06800	
06900	%RNBLK:!			;SIZE OF PHASED CODE FOR BLT
07000	%LENTH==%RNBLK+6		;FOR CORE UUO WHICH INCLUDES RUN BLOCK
07100		DEPHASE>
07200	
07300	IFE RUNSW,<
07400	NORUN:	INIT 1,16	;GET A DSK IN DUMP MODE
07500		EXP SYSDEV	;SIXBIT SYS OR DSK
07600		0
07700		JRST DSKNA
07800		MOVSI T1,SAVEXT		;SIXBIT FOR SAVE OR DMP.
07900		MOVEM T1,NAME+1
08000		LOOKUP 1,NAME
08100		JRST NOFIL
08200		MOVE T1,NAME	;SET NAME OF NEW PROCESSOR
08300		CALL T1,[SIXBIT /SETNAM/]
08400		HLRO 15,NAME+3	;GET COUNT
08500		HRLM 15,NUNCOM
08600		MOVNS 15	;MAKE POSITIVE
08700		MOVEI 16,73(15)	;GET END
08800		ADDI 15,INHERE	;CHECK CORE SIZE
08900		IORI 15,1777
09000		MOVSI NUNTOP,NUNAC
09100		BLT NUNTOP,NUNTOP	;GET ACS LOADER
09200		HRR NUNBLT,16	;AND SET END OF BLT
09300		JRST NUNGO2
09400	>
     

00100	SUBTTL	SCANNER
00200	
00300	TERMF==200000
00400	NUMF==100000
00500	SPCF==400000
00600	SPACT==40000	;SPECIAL ACTION TO BE TAKEN ON CHAR
00700	
00800	SCANAM:	PUSHJ	P,SCAN		;GET NEXT CHAR. FIRST
00900	GETNAM:	SETZM SVNAM(SVPT)	;ZERO OUT CELLS IN CASE NOTHING
01000		SETZM SVEXT(SVPT)	;GETS PUT THERE
01100		SETZM SVPPN(SVPT)
01200		SETZM SWBKS(SVPT)
01300		SETZM SVDEV(SVPT)
01400	IFN SFDSW,<X==0			;INITIAL CONDITION
01500	REPEAT SFDLEN,<
01600		SETZM	SVSFD+X(SVPT)
01700	X==X+NFILE>
01800	>	;END OF IFN SFDSW
01900		TRNE FL,IDF		;WAS THE THING SCANNED AN IDENT
02000		JRST	GETDEV		;YES, SEE WHAT WE'VE GOT
02100		CAIE	C,"["		;MIGHT BE A PPN
02200		JRST	SYNERP		;NO, LOSE UNLESS A PIP COMMAND
02300		PUSHJ	P,GETPP1	;READ THE PPN
02400		PUSHJ	P,SCAN		;AND GET RID OF "]"
02500		CAIE	C,"="		;= IS A COPY DELIMITER
02600		JRST	GETDEV
02700		TRNE	FL,PIPF		;BUT ONLY IN PIP
02800		POPJ	P,		;IT IS, SO RETURN
02900	GETDEV:	PUSH P,ACCUM
03000		PUSHJ P,SCANS	;CHECK FOR EXT OR PPN
03100		CAIE C,":"	;IS IT A DEVICE NAME
03200		JRST NODEV	;NO
03300		POP P,SVDEV(SVPT)	;WE WERE HIDING IT IN THE STACK
03400		PUSHJ P,SCAN	;BYPASS
03500		PUSHJ P,SCAN	;AND GET NEXT
03600		CAIN	C,"["	;CHECK FOR PROJ-PROG
03700		PUSHJ P,[PUSHJ P,GETPP1
03800			JRST	SCAN]	;POPJ RETURN
03900		TRNN FL,IDF	;MUST BE AN IDENT
04000		POPJ	P,	;RETURN, ONLY DEVICE SEEN
04100		PUSH P,ACCUM
04200		PUSHJ P,SCANS
04300		SETZM	SVPPP	;CLEAR STICKY PPN ON NEW DEVICE
04400	IFN SFDSW,<
04500		SETZM	SVSFP	;AND STICKY SFD
04600		MOVE	T1,[SVSFP,,SVSFP+1]
04700		BLT	T1,SVSFP+SFDLEN-1>
04800	NODEV:	POP P,SVNAM(SVPT)
04900	IFE SFDSW,<SKIPE T1,SVPPN(SVPT)	;FOUND A NEW STICKY PPN?
05000		MOVEM	T1,SVPPP	;YES>
05100	IFN SFDSW,<SKIPN T1,SVPPN(SVPT)	;STICKY PPN?
05200		JRST	NOTSTK		;NO
05300		MOVEM	T1,SVPPP	;YES
05400	X==<Y==0>			;INITIAL CONDITION
05500	REPEAT SFDLEN,<
05600		MOVE	T1,SVSFD+X(SVPT)
05700		MOVEM	T1,SVSFP+Y
05800	X==X+NFILE
05900	Y==Y+1>
06000		JRST	GOTSTK		;DON'T MOVE IT BACK AGAIN
06100	NOTSTK:>
06200		MOVE	T1,SVPPP	;GET STICKY PPN
06300		MOVEM	T1,SVPPN(SVPT)	;SET PPN INCASE ONE NOT FOLLOWING
06400	IFN SFDSW,<X==<Y==0>		;INITIAL CONDITION
06500	REPEAT SFDLEN,<
06600		MOVE	T1,SVSFP+Y
06700		MOVEM	T1,SVSFD+X(SVPT)
06800	X==X+NFILE
06900	Y==Y+1>
07000	GOTSTK:>
07100		CAIN C,"["	;IS IT PPN
07200		JRST GETPP
07300		CAIE C,"."	;NO, EXT?
07400		POPJ P,		;NEITHER, RETURN
07500		PUSHJ P,SCAN	;NO. GO OVER DOT
07600		PUSHJ P,SCANS	;PEEK AT NEXT CHAR
07700		SKIPG SAVCHR	;ALPHANUMERIC?
07800		JRST	GETN1	;NO. IT MAY BE A STAR IN PIP MODE
07900	GETN2:	PUSHJ P,SCAN	;GET EXT
08000		TRNN FL,IDF
08100		GOTO SYNERR
08200		MOVE T1,ACCUM
08300		HLLZM T1,SVEXT(SVPT)
08400		PUSHJ P,SCANS
08500		CAIE C,"["	;CHECK FOR PPN AGAIN
08600		POPJ P,
08700		JRST	GETPP	;READ PROG-PROG PAIR
08800	
08900	GETN1:	TRNE	FL,PIPF	;PIP MODE?
09000		CAIE	C,52	;YES. ASTERISK?
09100		CAIA		;NO. NULL EXTENSION.
09200		JRST	GETN2	;WILD EXTENSION. GO GET IT.
09300		HLLOS	SVEXT(SVPT)	;MARK NULL EXT WITH -1
09400		TRNN	FL,IDF	;ALREADY READ THE IDENTIFIER?
09500		PJRST	SCAN	;NO, GET IT
09600		POPJ	P,
     

00100	GETPP:	PUSHJ P,SCAN
00200	GETPP1:	PUSHJ P,SCAN
00300		SETZM	SVPPN(SVPT)	;INCASE NOT FIRST TIME IN
00400	IFN SFDSW,<X==0			;INITIAL CONDITION
00500	REPEAT SFDLEN,<
00600		SETZM	SVSFD+X(SVPT)
00700	X==X+NFILE>>
00800		TRNN FL,IDF
00900		JRST	[SKIPN	T1,MYPPN	;ALLOW [,,]
01000			PUSHJ	P,USRPPN	;NOT GOT IT YET
01100			HLLZM	T1,SVPPN(SVPT)
01200			JRST	GETPP2]
01300		MOVE T1,ACCUM
01400		PUSHJ P,RJUST	;THIS NEED TO BE RIGHT JUSTIFIED
01500		HRLM T1,SVPPN(SVPT)	;STORE LEFT HALF
01600		PUSHJ P,SCAN
01700	GETPP2:	CAIE C,","
01800		GOTO SYNERR
01900		PUSHJ P,SCAN
02000		TRNN FL,IDF
02100		JRST	[SKIPN	T1,MYPPN
02200			PUSHJ	P,USRPPN	;GET USERS PPN VIA UUO
02300			HRRM	T1,SVPPN(SVPT)
02400			JRST	GETPP3]
02500		MOVE T1,ACCUM
02600		PUSHJ P,RJUST
02700		HRRM T1,SVPPN(SVPT)
02800		PUSHJ P,SCAN
02900	GETPP3:	CAIN C,"]"
03000		POPJ P,		;ALL DONE
03100	IFN SFDSW,<CAIE	C,","		;COMMA MEANS SFD COMING
03200		JRST	ENDSFD		;NO, ALL OVER
03300		HRRZ	T2,SVPT		;STORAGE POINTER IN RIGHT
03400		HRLI	T2,-SFDLEN	;AOBJN WORD FOR ALL SFD'S
03500	GETSFD:	PUSHJ	P,SCAN		;GET SOMETHING
03600		MOVE	T1,ACCUM	;GET WHAT WAS SEEN
03700		MOVEM	T1,SVSFD(T2)	;STORE IT
03800		PUSHJ	P,SCAN		;GET NEXT CHAR
03900		CAIN	C,"]"		;END OF PPN
04000		POPJ	P,		;YES
04100		CAIE	C,","		;MORE TO COME
04200		JRST	ENDSFD		;NO
04300		ADDI	T2,NFILE-1	;ADD DIFFERENCE OVER FILE
04400		AOBJN	T2,GETSFD	;MORE TO COME
04500		GOTO	SFDERR		;YES, BUT YOU LOSE
04600	ENDSFD:	>	;END OF IFN SFDSW
04700		TLNN	CS,TERMF	;END OF LINE?
04800		GOTO	SYNERR		;NO
04900		MOVEI	C,"]"		;FAKE CLOSING  BRACKET
05000		MOVEM	CS,SAVCHR	;SEE TRMF NEXT TIME
05100		POPJ	P,		;RETURN
05200	
05300	USRPPN:	GETPPN	T1,		;GET USER'S LOGGED IN PPN
05400		  JFCL			;INCASE JACCT ON
05500		MOVEM	T1,MYPPN	;SAVE IT
05600		POPJ	P,
05700	
05800	IFN STANSW,<
05900	RJUST:	TRNE T1,77
06000		POPJ P,	;GET IT OVER THERE
06100		LSH T1,-6
06200		JRST RJUST>
06300	
06400	IFE STANSW,<
06500	RJUST:	PUSH	P,T3
06600		MOVE T3,T1	;CONVERT SIXBIT TO OCTAL
06700		MOVEI T1,0
06800	CONVOC:	MOVEI T2,0
06900		LSHC T2,6
07000		CAIL T2,20
07100		CAILE T2,27
07200		GOTO SYNERR
07300		LSH T1,3
07400		IORI T1,-20(T2)
07500		JUMPN T3,CONVOC
07600		POP	P,T3
07700		POPJ P,0
07800	>
     

00100	SCANS:	MOVNI T1,1	;FLAG AS NOTHING SEEN YET
00200		SKIPN CS,SAVCHR	;CHARACTER WAITING?
00300	SCNS2:	PUSHJ P,GETCH
00400		JUMPN CS,SCNS1	;FOUND SOMETHING
00500		MOVEI T1,0
00600		JRST SCNS2
00700	SCNS1:	JUMPL CS,SCNS4	;SPECIAL CHARACTER
00800		MOVEM CS,SAVCHR	;SAVE THAT CHARACTER
00900		JUMPL T1,SCNS3	;DO NOTHING ELSE IF NO BLANKS SEEN
01000		MOVEM T1,SAVCHR	;IF BLANKS SEEN, SAVE ONE
01100		MOVSI T1,70000
01200		ADDM T1,@GETB3(IOPNT)	;AND BACK UP POINTER
01300	SCNS3:	TDZA CS,CS	;IN EITHER CASE, RETURN 0
01400	SCNS4:	MOVEM CS,SAVCHR	;SAVE SPECIAL CHARACTER
01500		HRRZ C,CS		;GET A CHARACTER TO RETURN
01600		POPJ P,
     

00100	SCAN:	TRZ FL,IDF	;RESET IN CASE NOT
00200		SKIPN CS,SAVCHR	;WAS THERE SOMETHING LEFT OVER
00300	CONSN:	PUSHJ P,GETCH	;NO, GET ANOTHER
00400		JUMPE CS,.-1	;IGNORE BLANKS
00500		JUMPL CS,SPCHR	;IS IT A SPECIAL CHARACTER
00600		SETZM ACCUM	;PREPARE TO STORE IT
00700		MOVE T1,[POINT 6,ACCUM]
00800	SCAN1:	TLNE T1,770000	;ALL SIX STORED?
00900		IDPB CS,T1	;NO, STORE ANOTHER
01000		PUSHJ P,GETCH	;GET NEXT
01100		JUMPG CS,SCAN1	;ANOTHER ALPHA
01200		TRO FL,IDF	;IT SURE IS
01300		MOVEM CS,SAVCHR
01400		SETZB C,CS	;TO AVOID CONFUSION
01500		POPJ P,
01600	SPCHR:	HRRZ C,CS	;RETURN HIM THE HALF OF IT
01700		SETZM SAVCHR	;NOTHING SAVED BY NOW
01800		CAIN C,"*"
01900		TRNN FL,PIPF
02000		JRST SPCHR1
02100		PUSH P,[SIXBIT /*/]	;IN PIP MODE * IS AN IDENT
02200		POP P,ACCUM
02300		TROA FL,IDF
02400	SPCHR1:	TLNN CS,SPACT	;DO WE WANT SPECIAL ACTION?
02500		POPJ P,		;NO
02600		JRST (CS)	;YES, RH IS DISPATCH
     

00100	;GETCH RETURNS 7-BIT ASCII CHAR IN C, TABLE ENTRY IN CS
00200	
00300	GETCH:	SOSLE @GETB1(IOPNT)	;USE CORRECT BUFFER HEADER
00400		JRST OKPICK
00500	IFN TEMP,<	MOVE C,TMPFLG(IOPNT)	;IS TMPCOR BEING USED
00600		CAMN C,[-1]		;SET TO -1 IF YES
00700		JRST [SETZM TMPFLG(IOPNT)	;CLEAR TMPFLAG
00800			JRST POPFIL+1]		;YES FINISHED WITH THIS READ>
00900		XCT GETB2(IOPNT)	;AN IN UUO
01000		JRST	OKPICK
01100		XCT GETB4(IOPNT)	;TO A STATZ
01200		JRST READER	;AN INPUT ERROR
01300		JRST POPFIL	;GO GET PREVIOUS FILE
01400	
01500	OKPICK:	IBP @GETB3(IOPNT)
01600		MOVE C,@GETB3(IOPNT)	;PICK UP THE NEW BYTE POINTER
01700		MOVE CS,(C)	;GET THE WORD IT CAME FROM
01800		TRNE CS,1	;AND CHECK FOR SEQ NUM
01900		JRST 	[AOS @GETB3(IOPNT)	;ADVANCE POINTER
02000			MOVNI CS,5	;AND ADJUST COUNT
02100			ADDB CS,@GETB1(IOPNT)
02200			SKIPG CS	;CHECK FOR BUFFER OVERRUN
02300			PUSHJ P,GETCH	;GET RID OF TAB
02400			JRST GETCH]
02500		LDB C,@GETB3(IOPNT)
02600		JUMPE C,GETCH	;IGNORE NULLS
02700		CAIN	C,";"	;IS IT A COMMENT?
02800		TRNE	FL,INPRNT	;IN PRINTING ERROR
02900		JRST	EOFRT	;YES, DONT PROCESS ";"
03000	SEMIC:	TRO	FL,INPRNT	;HACK SO THAT "@" COME HERE
03100		PUSHJ	P,GETCH		;READ CHRS
03200		MOVE	CS,CTBL(C)	;GET STATUS
03300		TLNN	CS,TERMF	;END OF LINE?
03400		JRST	SEMIC		;NO, KEEP GOING
03500		TRZ	FL,INPRNT	;CLEAR FLAG AGAIN
03600	EOFRT:	MOVE CS,CTBL(C)	;GET STATUS BITS
03700	EOFRT1:	TRNN FL,INPRNT	;IF PRINTING ERROR, DO NOT NEST
03800		CAIE C,100	;IS IT @
03900		POPJ P,
04000		JRST NEST	;SPECIAL
04100	
     

00100	XALL		;BACK TO NORMAL LISTING
00200	CTBL:	0
00300	REPEAT 10,<XWD SPCF,.-CTBL>
00400		0		;TAB
00500	XWD SPCF!SPACT!TERMF+12,CHKTRM
00600	XWD SPCF!SPACT!TERMF+13,CHKTRM	;VTAB
00700	XWD SPCF!SPACT!TERMF+14,CHKTRM	;FORM
00800		0		;CARRET
00900	REPEAT 15,<XWD SPCF,.-CTBL>
01000	XWD SPCF!TERMF!SPACT+44,CHKTRM
01100	REPEAT 4,<XWD SPCF,.-CTBL>
01200		0		;SPACE
01300	REPEAT 17,<XWD SPCF,.-CTBL>
01400	REPEAT 12,<XWD NUMF,.-CTBL-40		;DIGIT>
01500	REPEAT 5,<XWD SPCF,.-CTBL>
01600		EXP	.-CTBL-40	;?
01700		XWD SPCF,100
01800	REPEAT 32,<EXP .-CTBL-40		;UPPER CASE LETTERS>
01900	REPEAT 6,<XWD SPCF,.-CTBL>
02000	REPEAT 32,<EXP .-CTBL-100		;LOWER CASE LETTERS>
02100		XWD SPCF,.-CTBL
02200		XWD SPCF,.-CTBL
02300		XWD SPCF!TERMF!SPACT+44,CHKTRM
02400		XWD SPCF!TERMF!SPACT+44,CHKTRM
02500		XWD SPCF!SPACT,POPFIL
02600	
     

00100	COMMA==CTBL+","
00200	
00300	CHKTRM:	PUSH P,CS	;SAVE MAGIC BITS
00400	TERMC1:	PUSHJ P,GETCH
00500		JUMPE CS,TERMC1	;ALSO IGNORE TABS AND SPACES
00600		TLNE CS,TERMF
00700		JRST TERMC1	;BYPASS TERMINATORS
00800		CAMN CS,COMMA	;CHECK FOR , AFTER CRET
00900		JRST	[POP P,(P)	;GET STACK IN SYNC
01000			POPJ P,]	;RETURN THE COMMA
01100		MOVEM CS,SAVCHR	;SAVE FOR LATER
01200		POP P,CS
01300		MOVEI C,0	;AS GOOD AS ANYTHING ELSE
01400		POPJ P,
01500	
01600	DEFINE QQ<
01700	N==1
01800	REPEAT NESTDP,<MAC(\N)
01900		N==N+1>>
02000	
02100	GETB1:	DINCT
02200	DEFINE MAC(X)<IBUF'X+2>
02300	QQ
02400	GETB2:	HALT
02500	DEFINE MAC(X)<IN X,0>
02600	QQ
02700	GETB3:	DINPT
02800	DEFINE MAC(X)<IBUF'X+1>
02900	QQ
03000	GETB4:	HALT
03100	DEFINE MAC(X)<STATZ X,740000>
03200	QQ
03300	
     

00100	SUBTTL	COMMAND NESTING
00200	
00300	NEST:	PUSH P,ACCUM	;SAVE STATE OF SCANNER
00400		PUSH P,FL	;SAVE THE FLAGS (AS IDF?)
00500		PUSH P,T1
00600		SETZM SAVCHR
00700		PUSH P,NAME	;AND THIS OTHER STUFF
00800		PUSH P,NAME+1
00900		PUSH P,NAME+2
01000		PUSH P,NAME+3
01100		AOBJP SVPT,TMNER	;GET A CLEAR SPACE FOR NAME
01200		PUSHJ P,SCANAM	;GET ONE TO USE
01300		PUSH IOP,SAVCHR
01400		PUSHJ P,CHKRM		;GET BUFFER SPACE
01500		AOBJP IOPNT,NESTTD	;TOO DEEP?
01600		SKIPE	C,SVDEV(SVPT)	;WAS A DEVICE SPECIFIED?
01700		JRST	NSTDEV		;YES, USE IT
01800	IFN TEMP,<MOVE C,.JBFF		;GET START OF BUFFER
01900		MOVEM C,BUFTAB(IOPNT)	;SAVE IT FOR RELEASING INFO
02000		MOVEM C,TMPFIL+1	;SAVE IOWD FOR TMPCOR UUO
02100		MOVEM C,@GETB3(IOPNT)	;DUMMY UP BYTE POINTER
02200		SOS TMPFIL+1		;MAKE TMPFIL INTO CORRECT IOWD FORMAT
02300		MOVNI C,200		;GET BUFFER LENGTH
02400		HRLM C,TMPFIL+1		;STORE NEGATIVE WORD COUNT
02500		MOVE C,SVNAM(SVPT)	;PICK UP FILNAM
02600		XOR	C,JOBNAM	;ONLY ALLOW TMPCOR IF CURRENT JOB NUMBER
02700		TLNE	C,-1		;OTHERWISE WE MIGHT READ XXXPIP ETC
02800		JRST	NOTMP		;NOT A VALID TMPCOR FILE NAME
02900		HRLZM C,TMPFIL	;STORE RIGHT THREE LETTERS
03000		MOVE C,[XWD 1,TMPFIL]	;SET UP FOR TMPCOR READ
03100		TMPCOR C,		;READ FILE AND DON'T DELETE
03200		JRST NOTMP		;NO SUCH FILE, TRY THE DISK
03300		SETOM TMPFLG(IOPNT)	;FLAG THAT TMPCOR READ WAS DONE
03400		IMULI C,5		;CALCULATE CHARACTER COUNT
03500		MOVEM C,@GETB1(IOPNT)	;STORE IN BUFFER HEADER
03600		MOVEI C,440700		;SET UP BYTE POINTER
03700		HRLM C,@GETB3(IOPNT)	;BUFFER HEADER FINALLY SET UP
03800		JRST NEXT2		;CONTINUE INTO MAIN STREAM
03900	NOTMP:			>
04000		MOVSI	C,'DSK'
04100	NSTDEV:	SETZM	OPENB
04200		MOVEM	C,OPENB+1
04300		MOVE C,NESTB(IOPNT)	;GET BUFFER POINTER
04400		MOVEM C,OPENB+2
04500		MOVE	C,[OPEN .-.,OPENB]
04600		DPB IOPNT,[POINT 4,C,12]
04700		XCT	C
04800		  JRST DSKNA	;LOSE BIG
     

00100		MOVE C,.JBFF
00200		MOVEM C,BUFTAB(IOPNT)	;SAVE THE PLACE PUT
00300		XCT INTAB(IOPNT)	;DO AN INBUFF
00400		MOVE C,SVNAM(SVPT)
00500		MOVEM C,LNAM	;SET UP FOR LOOKUP
00600		SKIPN C,SVEXT(SVPT)
00700		JUMPE	C,NEST1		;NOT EXT SUPPLIED
00800		TRZA	C,-1		;INCASE NULL SUPPLIED
00900	NEST1:	MOVSI C,SIXBIT '   CMD'	;TRY .CMD
01000		MOVEM C,LEXT
01100		MOVE C,SVPPN(SVPT)
01200	IFN SFDSW,<SKIPE SVSFD(SVPT)	;ANY SFD'S SEEN?
01300		PUSHJ	P,SETSFD	;YES, SET PATH>
01400		MOVEM C,LPPN
01500		XCT LKTAB(IOPNT)
01600		JRST	[TRNE FL,INCRF	;SPECIAL IF TRYING TO READ QQCREF
01700			JRST DNCRF
01800			HLLZ C,LEXT	;SEE IF BLANK USED
01900			JUMPN C,NOFIL	;NO, NOT THERE
02000			JRST NEST1]
02100	NEXT2:	SUB SVPT,[XWD 1,1]	;GET HIM POINTED BACK RIGHT
02200		POP P,NAME+3	;RESTORE THINGS
02300		POP P,NAME+2
02400		POP P,NAME+1
02500		POP P,NAME
02600		POP P,T1
02700		POP P,FL
02800		POP P,ACCUM
02900		TRZ FL,RECALF	;WE HAVE DONE THE FIND
03000	;	JRST GETCH	;AND CONTINUE TO GET THAT CHR
03100		MOVEI	C," "	;SUPPLY A FREE BLANK IF "@" SO COM@FOO WORKS
03200		SETZ	CS,	;STATUS OF A BLANK
03300		POPJ	P,	;BYPASS GETCH AND RETURN BLANK TO CALLER
03400	
03500	IFN SFDSW,<
03600	SETSFD:	MOVEM	C,LSFDPP	;STORE PPN
03700	X==<Y==0>
03800	REPEAT SFDLEN,<	MOVE	C,SVSFD+X(SVPT)
03900		MOVEM	C,LSFD+Y
04000	X==X+NFILE
04100	Y==Y+1>
04200		MOVEI	C,LSFDAD	;TO STORE SFD BLOCK IN LPPN
04300		POPJ	P,		;RETURN
04400	>
04500	
04600	POPFIL:
04700	;TEMP FIX FOR PIP FUNCTION PROBLEM WITH SCANNER
04800	;SCANNING TO FAR AND ENDING UP AT POPFIL
04900	;THIS CURES SYMPTOMS NOT THE DESEASE
05000		TRNN	IOPNT,-1	;ALREADY AT TOP LEVEL?
05100		TRNN	FL,PIPF		;YES, BUT IS IT PIP?
05200		CAIA			;NO
05300		JRST	[MOVEI	C,12	;YES, FAKE A LF
05400			MOVE	CS,CTBL(C)
05500			POPJ	P,]	;AND RETURN IT
05600	;END OF "FIX"
05700		XCT RELTAB(IOPNT)	;RELEASE HIM
05800	IFN TEMP,<	SETZM TMPFLG(IOPNT)	;CLEAR TMPCOR FLAG>
05900		MOVE C,BUFTAB(IOPNT)
06000		MOVEM C,FREBUF(IOPNT)	;MARK BUFFER FREE
06100		POP IOP,CS
06200		HRRZ C,CS
06300		SUB IOPNT,[XWD 1,1]	;POINT IT BACK
06400		JRST EOFRT1	;AND GIVE BACK THE CHARACTER
06500	
     

00100		SALL
00200	NESTB:	0
00300	DEFINE MAC(X)<IBUF'X>
00400	QQ
00500	DEFINE MAC(X)<U (IBUF'X,3)>
00600	QQ
00700	IFN TEMP,<U(TMPFLG,NESTDP+2)>
00800	INTAB:	HALT	;INBUFS
00900	DEFINE MAC(X)<INBUF X,2>
01000	QQ
01100	
01200	LKTAB:	HALT
01300	DEFINE MAC(X)<LOOKUP X,NAME>
01400	QQ
01500	RELTAB:	JRST ALLDON
01600	DEFINE MAC(X)<RELEAS X,0>
01700	QQ
     

00100	SUBTTL	ERROR ROUTINES
00200	
00300	IFDEF SALL,<SALL>	;MAKE LISTING NEATER
00400	ETMS:	STRING [ASCIZ /?Too many switches: /]
00500	ERRCOM:	MOVEI T1,20	;SET TO TYPE SOME CHRS TO TELL WHERE ERROR
00600		MOVE T2,[POINT 7,ERRBUF]	;IS FROM
00700		TRO FL,INPRNT	;IN CASE EOF WHILE READING CHRS TO TYPE
00800		SKIPN C,SAVCHR	;FIND THE ONE LEFT
00900		JRST PUTER
01000		TLNE C,SPACT	;IS IT SPECIAL
01100		MOVSS C	;YES. GET IT
01200		SKIP 1
01300	PUTER:	PUSHJ P,GETCH
01400		CAIN C,177	;THIS IS EOF
01500		JRST NOFIL0
01600		IDPB C,T2
01700		SOJGE T1,PUTER
01800	NOFIL0:	MOVE	T1,T2
01900		JRST NOFIL1	;PRINT WITH CR/LF
02000	TMNER:	STRING [ASCIZ /?Too many names: /]
02100		JRST ERRCOM
02200	DSKNA:	STRING [ASCIZ /?Disk not available: /]
02300		JRST ERRCOM
02400	OUTER:	STRING [ASCIZ /?Output error: /]
02500		JRST ERRCOM
02600	PROCON:	STRING [ASCIZ /?Language processor conflict: /]
02700		JRST ERRCOM
02800	NOCOR:	STRING [ASCIZ /?Not enough core: /]
02900		JRST ERRCOM
03000	READER:	STRING [ASCIZ /?Input error: /]
03100		JRST ERRCOM
03200	SYNRR1:	SUB IOPNT,[XWD 1,1]	;GET HIM BACK TO RIGHT PLACE
03300	SYNERR:	STRING [ASCIZ /?Command error: /]
03400		JRST ERRCOM
03500	NESTTD:	STRING [ASCIZ /?Nesting too deep: /]
03600		JRST ERRCOM
03700	AMBIGU:	STRING [ASCIZ /?Ambiguous abbreviation: /]
03800		SKIP	1
03900	UNRECS:	STRING [ASCIZ /?Unrecognizable switch: /]
04000		MOVE T3,ACCUM	;BAD SWITCH IN HERE
04100		JRST ERRBF1
04200	XPDERR:	STRING	[ASCIZ	/?Explicit device required /]
04300		JRST	NOFIL1
     

00100	NOFIL:	TRNN	FL,RECALF	;WE WERE LOOKING UP A SVC FILE
00200		JRST	NOFIL3		;YES, USE STANDARD MESSAGE
00300		TRNN	FL,SOSF		;NO, TEST FOR LOOKING FOR SOS FILE
00400		JRST	SYNRR1		;NO, SO GIVE SPECIAL MESSAGE
00500		MOVSI	T1,'SOS'	;YES,RUN SOS WITHOUT CMD FILE
00600		JRST	NUNDO		;SOS WILL ASK USER
00700	
00800	NOFIL3:	STRING	@ERRTAB		;USE STANDARD MESSAGE
00900	NAMCOM:	MOVE T1,[POINT 7,ERRBUF]
01000		MOVE T3,NAME
01100		PUSHJ P,SIXOUT
01200		HLLZ T3,NAME+1
01300		JUMPE T3,NOFIL1
01400		MOVEI T2,"."
01500		IDPB T2,T1
01600	NOFIL2:	PUSHJ P,SIXOUT
01700	NOFIL1:	MOVEI T2,0
01800		IDPB T2,T1
01900		STRING ERRBUF
02000		CLRBFI		;CLEAR INPUT BUFFER SO GARBAGE IS NOT READ
02100		RESET
02200		EXIT		;GO AWAY
02300	
02400	SIXOUT:	MOVEI T2,0
02500		LSHC T2,6
02600		ADDI T2,40
02700		IDPB T2,T1
02800		JUMPN T3,SIXOUT
02900		POPJ P,
03000	
03100	DEVNA:	STRING [ASCIZ /?Device not available - /]
03200		MOVE T3,LOKNAM
03300	ERRBF1:	MOVE T1,[POINT 7,ERRBUF]
03400		JRST NOFIL2
03500	
03600	
03700	SYNERP:	TRNN	FL,PIPF		;A PIP COMMAND?
03800		GOTO	SYNERR		;NO, YOU LOSE
03900		CAIN	C,"["		;START OF PPN?
04000		JRST	GETPP1		;YES, AND PROBABLY NO DEVICE
04100		POPJ	P,		;RETURN AND HOPE IT MAKES SENSE
04200	
04300	UNKERR:	STRING	[ASCIZ /?Unknown command: /]
04400		MOVE	T3,ACCUM	;GET IT
04500		JRST	ERRBF1		;OUTPUT IT
04600	
04700	IFN SFDSW,<
04800	SFDERR:	STRING	@ERRTAB+25	;SFD PATH TOO LONG
04900		JRST	ERRCOM
05000	>
     

00100	FIU:	HRRZ	T1,LEXT		;GET ERROR CODE
00200		CAIL	T1,TABLND-ERRTAB	;SEE IF LEGAL
00300		SKIPA	T1,TABLND	;NO USE CATCHALL MESSAGE
00400		MOVE	T1,ERRTAB(T1)	;GET ADDRESS OF MESSAGE
00500		STRING	(T1)		;OUTPUT IT
00600		JRST NAMCOM
00700	
00800	ERRTAB:	[ASCIZ /?(0) file was not found - /]
00900		[ASCIZ /?(1) no directory for project-programmer number - /]
01000		[ASCIZ /?(2) protection failure - /]
01100		[ASCIZ /?(3) file was being modified - /]
01200		[ASCIZ /?(4) rename file name already exists - /]
01300		[ASCIZ /?(5) illegal sequence of UUOs - /]
01400		[ASCIZ /?(6) bad UFD or bad RIB - /]
01500		[ASCIZ /?(7) not a SAV file - /]
01600		[ASCIZ /?(10) not enough core - /]
01700		[ASCIZ /?(11) device not available - /]
01800		[ASCIZ /?(12) no such device - /]
01900		[ASCIZ /?(13) not two reloc reg. capability - /]
02000		[ASCIZ /?(14) no room or quota exceeded - /]
02100		[ASCIZ /?(15) write lock error - /]
02200		[ASCIZ /?(16) not enough monitor table space - /]
02300		[ASCIZ /?(17) partial allocation only - /]
02400		[ASCIZ /?(20) block not free on allocation - /]
02500		[ASCIZ /?(21) can't supersede (enter) an existing directory - /]
02600		[ASCIZ /?(22) can't delete (rename) a non-empty directory - /]
02700		[ASCIZ /?(23) SFD not found - /]
02800		[ASCIZ /?(24) search list empty - /]
02900		[ASCIZ /?(25) SFD nested too deeply - /]
03000		[ASCIZ /?(26) no-create on for specified SFD path - /]
03100	
03200	TABLND:	[ASCIZ /?(?) lookup,enter,or rename error - /]
     

00100	SUBTTL	ALL DONE
00200	
00300	ALLDON:	TRNE	FL,INCRF	;JUST FOUND END OF QQCREF FILE
00400		JRST	DNCRF
00500		SKIPE	FDGFLG		;WRITING A FUDGE FILE?
00600		PUSHJ	P,DNFUDG	;YES, CLOSE IT
00700		TRNE	FL,INPRNT
00800		JRST	NOFIL0		;IF PRINTENG AND EOF THEN FIINSH UP
00900		HRRZ	T1,(P)		;GET THE ADDRESS WE WANT TO RETURN TO
01000		CAIE	T1,NXFIL1	;THIS SHOULD BE HERE
01100		GOTO	SYNERR		;ELSE ERROR
01200		SETZM	PCNAM		;NO LINK NAME TO START WITH
01300		SETZM	PCDEV		;AND DEVICE
01400		MOVEI	T3,CHNLOD	;START WITH LOADER
01500		TRNN	FL,DOLOD	;ARE WE LOADING?
01600		JRST	ALDN1		;NO
01700	ALDN4:	SKIPN	T2,EXECFL	;WANT EXECUTION?
01800		JRST	.+4		;NO
01900		PUSHJ	P,OUTSIX	;YES, /E
02000		TRNE	FL,LINKFL	;LINK-10?
02100		PUSHJ	P,OUTSPC	;NEEDS SEPARATOR
02200		SKIPN	T2,MAPSW	;SKIP IF MAP REQUIRED
02300		MOVSI	T2,'/G '	;SET UP FOR TERMINATE LOADING
02400		PUSHJ	P,OUTSIX	;YES, PUT IT OUT
02500		TRNE	FL,LINKFL	;LINK-10?
02600		PUSHJ	P,OUCRLF	;YES, BUG IN SCAN REQUIRES EOL MARKER
02700		HLLZ	T1,LODDEV	;LOADER RUN DEV: IN SPECIAL PLACE
02800		HLLM	T1,TMPCHN(T3)	;WHERE IT AUGHT TO BE
02900		TRNN	FL,LINKFL	;DO WE NEED LINK-10?
03000		JRST	ALDN1		;NO
03100		SETZ	T1,		;YES
03200		EXCH	T1,TMPCHN(T3)	;MOVE DATA FROM LOADER
03300		MOVEI	T3,CHNLNK	;TO LINK-10
03400		MOVEM	T1,TMPCHN(T3)	;
03500	ALDN1:	SKIPN	TMPCHN(T3)	;HAS THAT PROCESSOR BEEN SET UP FOR OUTPUT?
03600		SOJGE	T3,ALDN1	;NO, TRY NEXT (BUT NOT TOO MANY)
03700		JUMPL	T3,DONE		;IF OUT OF PROCESSORS THEN DONE
03800		SKIPN	PCNAM		;IS THERE A PROCESSOR FOR IT TO CALL?
03900		JRST	NONAM		;NO
04000	IFN FORTRAN,<
04100		CAIN	T3,CHNFOR	;IS THIS FORTRAN?
04200		JRST	[SKIPN	T1,FORPRC	;YES, BUT SEE WHICH
04300			MOVE	T1,PRCNAM(T3)	;EITHER F40 OR F-10
04400			CAME	T1,['FORTRA']	;F-10 IS SPECIAL
04500			JRST	.+1		;F40
04600			MOVE	T2,['/RUN: ']	;AS IT USES SCAN
04700			PUSHJ	P,OUTSIX
04800			SKIPE	T2,PCDEV	;USE DEVICE IF GIVEN
04900			PUSHJ	P,OUTDEV
05000			MOVE	T2,PCNAM	;NAME WE WANT TO RUN
05100			PUSHJ	P,OUTSIX
05200			PUSHJ	P,OUCRLF
05300			JRST	NONAM]>
05400		SKIPE	T2,PCDEV	;GET DEVICE IF GIVEN
05500		PUSHJ	P,OUTDEV
05600		MOVE	T2,PCNAM	;RECOVER NAME OF PROCESSOR
05700		PUSHJ	P,OUTSIX	;YES, PUT OUT ITS NAME
05800		MOVEI	T1,"!"		;AND THE LOAD SYMBOL
05900		PUSHJ	P,TMPOUT
06000		PUSHJ	P,OUCRLF
06100	NONAM:	PUSHJ	P,TMPCHK	;CLOSE IT
06200		CAIE	T3,CHNLNK	;IS THIS LINK-10?
06300		CAIN	T3,CHNLOD	;IS THIS THE LOADER?
06400		SKIPA	T1,PROCTB(T3)	;YES, IT'S SPECIAL
06500		MOVE	T1,PRCNAM(T3)	;GET THE NAME OF THAT PROCESSOR
06600	IFN FORTRAN,<			;WE HAVE A CHOICE OF FORTRAN COMPILERS
06700		CAIE	T3,CHNFOR	;BUT ONLY IF THIS IS FORTRAN
06800		SKIP	2		;NOT
06900		SKIPE	FORPRC		;USE DEFAULT
07000		MOVE	T1,FORPRC	;USE WHATEVER IS SET>
07100		MOVEM	T1,PCNAM	;AND SET AS THE ONE TO LINK TO
07200	NOPDEV:	SOJGE	T3,ALDN1	;GO BACK IF MORE TO LOOK AT
     

00100	DONE:	TRNE FL,CMDSN	;DID WE SEE COMMAND FROM TTY?
00200		JRST DONE1	;NO, DO NOT WRITE FILE
00300		MOVE T1,JOBNAM
00400		HRRI T1,'SVC'
00500		TRNE FL,EDITF
00600		HRRI T1,'EDS'
00700		MOVEM T1,LNAM	;SET UP OUTPUT FILE
00800	IFN TEMP,<	HRLZM T1,TMPFIL		;SAVE NAME IN TMPFIL>
00900		MOVE T1,TTYPT			;GET BYTE POINTER
01000		MOVNI T2,4			;SET UP FOR CHARACTER COUNT
01100		ILDB T3,T1			;GET NEXT CHARACTER
01200		CAIE T3,177			;IS IT A EOF CHARACTER
01300		SOJA T2,.-2			;NO, TRY AGAIN
01400		IDIVI T2,5			;CALCULATE CHARACTER COUNT
01500		HRLM T2,TMPFIL+1		;STORE IN TMPCOR OUTPUT BLOCK
01600		LDB T3,[POINT 6,T1,5]		;PICK UP BIT POS OF LAST CHAR
01700		SETO T2,			;PREPARE TO BUILD MASK
01800		LSH T2,7(T3)			;MASK OFF REST OF LAST WORD
01900		ANDM T2,(T1)			;  IN TTY BUFFER
02000		HRRZ T2,TTYPT			;GET START OF BUFFER
02100		SUBI	T2,1			;FOR IOWD
02200		HRRM T2,TMPFIL+1		;STORE IN WRITE BLOCK FOR TMPCOR UUO
02300	IFN TEMP,<MOVE T2,[XWD 3,TMPFIL]	;SET UP FOR WRITE
02400		TMPCOR T2,			;WRITE OUT FILE INTO CORE
02500		  JRST	NOFIT			;IT DID NOT FIT, TRY DISK
02600		JRST DONE1			;GO CLEAN UP AND LEAVE
02700	NOFIT:			>
02800		MOVE	T1,TMPFIL+1		;GET IOWD
02900		MOVEM	T1,TMPFIL		;TO FIRST WORD OF PAIR
03000		SETZM	TMPFIL+1		;ZERO SECOND WORD
03100		MOVSI T1,'TMP'
03200		MOVEM T1,LEXT
03300		SETZM LDAT
03400		SETZM LPPN
03500		CLOSE LOOK,20	;MAKE SURE NOTHING USING THIS CHANEL
03600	IFE FASTFS,<
03700		SKIPN	FSNAME		;IS F/S FOUND
03800		PUSHJ	P,FNDFST	;NO FIND IT>
03900		RELEAS	LOOK,0		;GIVE UP THE CHANNEL
04000		MOVEI	T1,16		;DUMP MODE
04100		MOVEM	T1,FSINIT	;INCASE NOT YET SETUP
04200		OPEN	LOOK,FSINIT	;INIT THE CHAN.
04300		  JRST	DSKNA		;SHOULD N'T HAPPEN
04400		ENTER LOOK,LNAM	;GET SET TO WRITE
04500		  JRST FIU	;TREAT THIS AS A FATAL ERROR
04600		OUTPUT	LOOK,TMPFIL	;OUTPUT THE DMP IOWD LIST
04700	DONE2:	CLOSE	LOOK,20	;SAVE THE NAME BLOCKS (LEVEL D)
04800		RELEASE LOOK,0	;LET IT GO
04900	DONE1:	SKIPE	TMPCHN+CHNCRF	;DID WE DO ANY CREF?
05000		PUSHJ P,FINCRF	;YES, FINISH OFF CREF
05100		SKIPN T1,PCNAM	;IS THERE ONE TO LOAD?
05200		EXIT		;NO, EXIT
05300		JRST NUNDO	;GO LOAD IT
     

00100	CHKRM:	PUSH P,T1	;SAVE THE REGISTERS WE ARE USING
00200		PUSH P,T2
00300		MOVSI T1,-<NESTDP+1>	;LOOK TO SEE IF ANY FREED BUFFERS
00400		SKIPN T2,FREBUF(T1)
00500		AOBJN T1,.-1	;TRY AGAIN
00600		JUMPGE T1,USTOP	;NO, GET IT FROMTOP OF STORAGE
00700		MOVEM T2,.JBFF	;YES, SET JOBFF THERE
00800		SETZM FREBUF(T1)	;AND MARK IT USED
00900		JRST TPOPJ2	;THATS ALL FOR NOW
01000	USTOP:	MOVE T1,SVJFF	;GET THE CURRENT TOP OF BUFFER AREA
01100		MOVEM T1,.JBFF
01200		ADDI T1,<203*2>+1	;LEAVE THIS MUCH ROOM
01300		MOVEM T1,SVJFF	;THATS THE NEW TOP
01400		CAMGE T1,CORTOP	;WILL THAT RUN US OUT OF CORE?
01500		JRST TPOPJ2	;NO, LEAVE
01600		PUSH P,CTPOPJ
01700	XPAND:	MOVEI T1,2000	;GET SET TO EXPAND
01800		ADDM T1,CORTOP
01900		ADDM T1,CORT1
02000		ADD T1,.JBREL	;NEW TOP DESIRED
02100		CALLI T1,11	;ASK FOR IT
02200		JRST NOCOR	;LOSE BIG
02300		MOVE T1,.JBREL
02400	MVCR:	MOVE T2,-2000(T1)	;MVOVE CORE UP
02500		MOVEM T2,(T1)
02600		CAMLE T1,CORTOP	;ARE WE DONE?
02700		SOJA T1,MVCR
02800	CTPOPJ:	POPJ	P,TPOPJ2
     

00100	IFE FASTFS,<
00200				;USE FIRST F/S IF SEARCH LIST IS OF FORM
00300				; DSKA/N,DSKB,...FENCE
00400	FNDFST:
00500	IFN TEMP,<PUSH	P,T1		;SAVE SOME ACS
00600		PUSH	P,T2
00700		PUSH	P,T3
00800		PUSH	P,T4>
00900					;THIS TEST INCASE USE HAS ASSIGNED XXX AS DSK
01000		MOVEI	T1,T2		;ADDRESS OF DATA BLOCK
01100		MOVSI	T2,'DSK'	;AND DATA IN IT
01200		DSKCHR	T1,		;GET FIRST ARG
01300		  JRST	USEDSK		;LOSE SOON
01400		TLNE	T1,(7B17)	;TESR FOR GENERIC DSK
01500		JRST	USEDSK		;IT WAS N'T SO USE WHAT USER REQUESTED
01600		MOVE	T1,[3,,T2]	;SET UP BLOCK
01700		SETOB	T2,T4		;REQUEST FIRST F/S
01800		JOBSTR	T1,		;GET FIRST F/S IN SEARCH LIST
01900		  JRST	USEDSK		;LEVEL C
02000		JUMPL	T4,USEDSK	;SWP BIT SET
02100		TLNN	T4,200000	;IS NO CREATE SET?
02200		JRST	USEDSK		;NO, GENERIC DSK WILL USE THIS F/S
02300		DSKCHR	T1,		;GET FIRST 3 ARGS
02400		  JRST	USEDSK		;SHOULD NEVER HAPPEN BUT ...
02500		TLNN	T1,740200	;RHB!OFL!HWP!SWP!NNA! SET?
02600		CAIGE	T3,10		;ANY ROOM? ,TEN SHOULD BE ENOUGH
02700	USEDSK:	MOVSI	T2,'DSK'	;JUST USE DSK
02800		MOVEM	T2,FSNAME	;STORE FASTEST F/S NAME
02900	IFE TEMP,<POPJ	P,	;RETURN>
03000	;IFN TEMP,<JRST TPOPJ4	;RESTORE ACS>
03100	>
03200	TPOPJ4:	POP P,T4
03300	TPOPJ3:	POP P,T3
03400	TPOPJ2:	POP P,T2
03500	TPOPJ1:	POP P,T1
03600		POPJ P,0
03700	
03800	RPGSET:	MOVE T1,[POINT 7,FCOMD]
03900		MOVEM T1,DINPT
04000		MOVEI FL,RECALF!CMDSN
04100		JRST RPGRET
04200	
     

00100	SUBTTL	INITIALIZATION
00200	
00300	STPT:	TDZA	T4,T4		;NORMAL ENTRY
00400		MOVNI	T4,1		;REENTRY FROM AN EDITOR
00500	IFN PURESW,<	SETZM	.ZZ		;MUST CLEAR LOW CORE
00600		MOVE	T1,[XWD .ZZ,.ZZ+1]
00700		BLT	T1,LOWTOP
00800		MOVE T1,[XWD INIDAT,INILOW]
00900		BLT T1,INILOW+INILEN
01000	>
01100		JUMPL	T4,RPGSET
01200	IFE TENEX,<
01300		TTCALL	10,0		;RESET POINTER TO START OF COMMAND>
01400	IFN TENEX,<
01500		OUTSTR	[ASCIZ /
01600	./]>
01700		MOVEI FL,0
01800		HLRZ	T1,.JBSA		;GET .JBFF (AFTER RESET)
01900		HRLI	T1,(POINT 7)		;FORM BYTE POINTER
02000		MOVEM	T1,TTYPT		;SAVE INITIAL TTY POINTER
02100		MOVEM T1,DINPT
02200		SETZM	(T1)	;CLEAR WORD INCASE BIT 35 ON
02300	START1:	INCHWL	T2	;READ A COMMAND CHAR INTO T2
02400		MOVEI	T4,1(T1)	;GET NEXT ADDRESS PLUS SPARE
02500		CAMGE	T4,.JBREL	;WILL IT FIT
02600		JRST	.+3		;YES
02700		CORE	T4,		;NO, GET MORE
02800		  JRST	NOCOR		;YOU LOSE
02900		IDPB	T2,T1		;STORE IN DDTINBUF
03000		TLNN	T1,760000	;THIS WORD FULL?
03100		SETZM	1(T1)		;YES, CLEAR NEXT INCASE BIT 35 ON
03200		MOVE	T3,CTBL(T2)	;GET CHARACTER DESCRIPTOR
03300		TLNN	T3,TERMF	;IS IT A BREAK CHAR?
03400		JRST	START1		;NO. GO GET MORE.
03500		MOVEI	T2,177		;MARK END WITH AN EOF FLAG
03600		SETZM	1(T1)		;MAKE SURE BIT 35 IS OFF
03700		IDPB T2,T1
03800		IDPB T2,T1	;MAKE SURE
03900		ADDI	T1,1		;SAVE THE LAST WORD
04000		HRLM	T1,.JBSA	;CHANGE .JBFF
04100	RPGRET:	RESET
04200		SKIPA	P,.+1		;SET UP PDL
04300		IOWD	PDL,PDLB
04400	IFN FASTFS,<MOVE T1,[EXP FASTFS]	;IF GIVEN FASTEST F/S
04500		MOVEM	T1,FSNAME	;USE IT>
04600	IFE TEMP,<IFE FASTFS,<
04700		PUSHJ	P,FNDFST	;MAY AS WELL GET IT OVER WITH>>
     

00100		MOVNI	T1,1		;STANDARD KA/KI TEST
00200		AOBJN	T1,.+1
00300		SKIPN	T1
00400		AOS	CPU		;KA=0, KI=1
00500		MOVEI T1,3
00600		PJOB T2,
00700		IDIVI T2,12
00800		ADDI T3,20	;TO SIXBIT
00900		LSHC T3,-6
01000		SOJG T1,.-3	;THREE DIGITS
01100		HLLZM T4,JOBNAM	;SAVE TO MAKE UNIQUE NAMES
01200		TLO T4,404040	;NOW TO ASCII FOR ASCIZ'S
01300		MOVEI T1,3	;THREE CHARS
01400		LSH T3,1
01500		LSHC T3,6	;BRING IN A CHAR
01600		SOJG T1,.-2
01700		DPB T3,[POINT 21,CRFRDR,27]	;SAVE IN ASCIZ
01800		DPB T3,[POINT 21,FCOMD,27]
01900		DPB T3,[POINT 21,FCOMD2,27]
02000		MOVSI T1,377777	;SET COUNT TO A LARGE NUMBER
02100		MOVEM T1,DINCT
02200		MOVE IOP,[IOWD <NESTDP+1>*3,IOPD]	;AND IO PDL
02300		MOVSI IOPNT,-<NESTDP>	;SET NEXT LIMIT
02400	IFE LINK10,<TRO FL,DOLOD	;WE WANT TO LOAD>
02500	IFN LINK10,<TRO	FL,DOLOD!LINKFL	;LOAD USING LINK-10>
02600		MOVEI	T1,FORSW		;ASSUME FORTRAN
02700		MOVEM	T1,DFPROC	;AS DEFAULT PROCESSOR
02800		SETZM	LOKNAM		;NO ALTERNATE DEVICE YET
02900		SETZB	FL2,FL3		;AND NO FLAGS EITHER
03000		OPEN LOOK,DSKLK	;GET THE DSK
03100		JRST DSKNA
03200		INBUF LOOK,2
03300	IFE PURESW,<SETZM FREBUF	;MARK NO FREED BUFFERS
03400		MOVE T1,[XWD FREBUF,FREBUF+1]
03500		BLT T1,FREBUF+NESTDP>
03600		MOVE T1,.JBFF
03700		MOVEM T1,SVJFF
     

00100		MOVE T1,.JBREL
00200		MOVEM T1,CORTOP
00300		MOVEM T1,CORT1
00400	IFE PURESW,<SETZM SAVCHR	;TO START THINGS>
00500		HLLZS .JBERR	;RESET ERROR COUNT
00600		MOVSI SVPT,-NFILE
00700	TESTIT:	PUSHJ P,SCAN	;SCAN PAST THE COMPILE ETC
00800		MOVE T1,ACCUM	;FIND OUT WHICH COMMAND
00900		MOVNI T2,1
01000	STPT1:	LSH T1,6
01100		LSH T2,-6
01200		JUMPN T1,STPT1
01300		MOVSI T1,-COMTLG
01400		SETOM	NUMAT	;-1 TO NUMBER FOUND
01500	STPT2:	MOVE T3,COMTAB(T1)
01600		CAMN T3,ACCUM	;EXACT MATCH?
01700		JRST COMATC	;YES, ALL DONE
01800		ANDCM T3,T2
01900		CAME T3,ACCUM
02000		JRST STPT3	;NO MATCH
02100		AOS	NUMAT	;POSSIBLE MATCH
02200		MOVEM T1,SVIND	;SAVE POINTER
02300	STPT3:	AOBJN T1,STPT2
02400		SKIPGE	NUMAT	;WAS THERE AT LEAST ONE
02500		JRST	UNKERR	;NO
02600		SKIPE	NUMAT	;BUT NO MORE THAN ONE
02700		JRST	AMBIGU	;NO, SO COMMAND IS AMBIGUOUS
02800		MOVE T1,SVIND	;RESTORE THE POINTER
02900	COMATC:	XCT COMT2(T1)	;DO THE APPROPRIATE THING
03000		PUSHJ P,SCAN	;GET NEXT THING
03100		TRNN IOPNT,-1	;IF DOWN A LEVEL ITS OK
03200		TLNN CS,TERMF	;OR IF NOTHING SEEN
03300		SKIP 1
03400		JRST COMAT1
03500		TRNE FL,EDITF
03600		JRST DOEDT1
03700		JRST NXFIL1
03800	COMAT1:	MOVE T1,[POINT 7,FCOMD]	;GENERATE FAKE COMMAND TO READ
03900		TRNE FL,EDITF
04000		MOVE T1,[POINT 7,FCOMD2]
04100		MOVEM T1,DINPT	;SAVE FILE
04200		TRO FL,RECALF+CMDSN	;MARK RECALLING FILE, DONT WRITE
04300		SETZM SAVCHR	;CLEAR OUT SCANNER
04400		MOVSI IOPNT,-<NESTDP+1>	;ALLOW EXTRA NESTING
04500		PUSHJ P,SCAN
04600		TRNE FL,EDITF
04700		JRST DOEDIT
     

00100	NXFIL:	PUSHJ P,SCAN
00200	NXFIL1:	MOVSI SVPT,-NFILE	;SET UP FOR NUMBER OF FILES
00300		MOVEI SWCNT,SWBK*5	;SET UP FOR SWITCHES
00400		MOVE SWPT,[POINT 7,SWBLK]	;AND POINTER
00500		SETZM SWBKL
00600		SETZM SWBKB
00700		SETZM ONAM
00800		SETZM	OEXT
00900		SETZM	OPPN
01000		SETZM SVRPP		;NO SAVED PPN OF REL FILE
01100		SETZB	FL2,LOKNAM	;CLEAR LAST PROCESSOR FLAGS AND SOURCE DEV
01200	IFN SFDSW,<X==0
01300	REPEAT SFDLEN,<	SETZM	OSFD+X
01400	X==X+1>
01500	>
01600		HLL FL3,FL	;SET TEMP FLAGS FROM PERM FLAGS
01700		MOVE T1,[POINT 7,LODSBK]	;SET POINTER TO LOADER
01800		MOVEM T1,LODSP		;SWITCH BLOCK
01900		MOVEI T1,LODSCT
02000		MOVEM T1,LODCTR
02100		MOVEM	T1,LODCT2	;AND SET COUNT FOR AFTER FILE NAME SWITCHES
02200		MOVE T1,[POINT 7,LODSB2]
02300		MOVEM T1,LODSP2
02400		SETZM BROCNT	;CLEAR OUT THE <> COUNT
02500		JRST	ILP0A
02600	
02700		XALL
     

00100	SUBTTL	COMMAND DISPATCH
00200	
00300	DEFINE COMAND (A,B)<
00400	<SIXBIT /A/>>
00500	
00600	COMTAB:	CTABLE
00700	COMTLG==.-COMTAB
     

00100	DEFINE COMAND (A,B)<
00200	B>
00300	
00400	COMT2:	CTABLE
00500	
00600		SALL
00700	DEBUG:	SETOM	DEBFL		;DEFER UNTIL WE SEE FIRST FILE
00800		POPJ	P,
00900	
01000	XCTR:	MOVSI T2,'/E '
01100		MOVEM	T2,EXECFL	;DEFER UNTIL WE GET CHANCE TO SEE /LINK
01200		POPJ	P,
01300	
     

00100	SUBTTL	MAIN LOOP FOR READING INPUT
00200	
00300	ILP0:	PUSHJ P,SCAN	;GET FIRST "THING"
00400	ILP0A:	CAIN C,"/"	;CHECK FOR PERM COMPILE SWITCHES
00500		JRST COMPS1
00600		CAIN C,"%"	;CHECK FOR PERM LOADER FLAGS
00700		JRST LOADS1
00800	ILP1A:	TRZ FL,PROCS	;NO PROCESSOR SWITCHES SEEN YET
00900	ILP1:	PUSHJ P,GETNAM	;GO GET A FILE NAME
01000		PUSH	P,C	;INCASE WE NEED TO RESTORE IT
01100		MOVE C,LODSP	;EXCHANGE POINTERS
01200		EXCH C,LODSP2
01300		MOVEM C,LODSP
01400		MOVE C,LODCTR
01500		EXCH C,LODCT2
01600		MOVEM C,LODCTR
01700		POP	P,C	;RESTORE C
01800		CAIE	C,"]"	;GET RID OF CLOSING PPN IF LAST WAS ONE
01900		TRNE	FL,IDF	;ALREADY SCANNED FAR ENOUGH IF NO FILE NAME
02000	ILP2A:	PUSHJ P,SCAN	;GET THE SPECIAL CHR OR WHATEVER
02100	ILP2:	CAIE C,","	;DONE WITH THIS SET OF NAMES?
02200		TLNE CS,TERMF	;WILL ACCEPT A TERMINATOR
02300		JRST SETUP	;GO SET UP THE FILES FOR PROCESSORS
02400		CAIN C,"("	;MAYBE SWITCHES TO BE PASSED TO PROCESSORS
02500		JRST PROCSW
02600		CAIN C,"/"	;OR FOR US
02700		JRST COMPSW
02800		CAIN C,"%"
02900		JRST LOADS2
03000		CAIN C,">"
03100		JRST ENDBRO	;THIS IS THE END OF A BROKET STRING
03200		CAIN C,"="	;MAYBE HE IS SETTING THE OUTPUT NAME
03300		JRST SETONM
03400		CAIN C,"["	;IS IT PROJECT-PROGRAMMER NUMBER?
03500		JRST GETDIR	;YES
03600		CAIE C,"+"	;IS THIS A SECOND FILE
03700		GOTO SYNERR	;IT SHOULD HAVE BEEN ONE OF THOSE
03800		AOBJP SVPT,TMNER	;MAYBE TOO MANY FILES
03900		MOVE C,LODSP	;EXCHANGE POINTERS AGAIN
04000		EXCH C,LODSP2
04100		MOVEM C,LODSP
04200		MOVE C,LODCTR
04300		EXCH C,LODCT2
04400		MOVEM C,LODCTR
04500		PUSHJ P,SCAN	;GET NEXT
04600		CAIE C,"<"	;IS THIS THE <> CONSTRUCTION
04700		JRST ILP0A	;NO
     

00100		AOS BROCNT	;WE ARE ONE DEEPER IN BROKETS
00200		PUSHSZ==.
00300	IFN SFDSW,<X==SFDLEN-1
00400	REPEAT SFDLEN,<	PUSH	P,OSFD+X
00500	X==X-1>
00600	>
00700		PUSH	P,OPPN
00800		PUSH P,OEXT
00900		PUSH P,SVPT	;SAVE AWAY ALL THE IMPORTANT INFORMATION
01000		PUSH P,SWPT
01100		PUSH P,SWCNT
01200		PUSH P,LODSP
01300		PUSH P,LODSP2
01400		PUSH P,LODCTR
01500		PUSH P,LODCT2
01600		PUSH P,SWBKL
01700		PUSH P,SWBKB
01800		PUSH P,ONAM
01900		PUSHSZ==.-PUSHSZ
02000		JRST ILP0	;GO FINISH THINGS UP
02100	
02200	GETDIR:	PUSHJ	P,GETPP1	;GO GET [PPN]
02300		JRST	ILP2A		;AND SEE WHAT ELSE WE HAVE
02400	
02500	ENDBRO:	PUSHJ P,SCAN	;GO GET NEST THING (SHOULD BE A ",")
02600		TLNN CS,TERMF
02700		CAIN C,","
02800		SKIP	1	;"," AND TERMF ARE OK
02900		CAIN	C,">"	;SO IS ANOTHER END-BRACKET
03000		SOSGE BROCNT	;ALSO ERROR IF NO < WAS SEEN
03100		GOTO SYNERR
03200		SUB P,[PUSHSZ,,PUSHSZ]	;RESET PDL
03300		CAIN	C,">"	;END-BRACKET GETS DIFFERENT TREATMENT
03400		JRST	ENDBRO	;TO COMMA
03500		JRST SETUP	;GO TAKE CARE OF THINGS
03600	
     

00100	NXFILP:	SKIPG BROCNT	;ARE WE DONING BROKETS?
00200		JRST NXFIL	;NO, JUST CONTINUE
00300		MOVE T1,(P)
00400		MOVEM T1,ONAM
00500		MOVE T1,-1(P)
00600		MOVEM T1,SWBKB
00700		MOVE T1,-2(P)
00800		MOVEM T1,SWBKL
00900		MOVE T1,-3(P)
01000		MOVEM T1,LODCT2
01100		MOVE T1,-4(P)
01200		MOVEM T1,LODCTR
01300		MOVE T1,-5(P)
01400		MOVEM T1,LODSP2
01500		MOVE T1,-6(P)
01600		MOVEM T1,LODSP
01700		MOVE SWCNT,-7(P)
01800		MOVE SWPT,-10(P)
01900		MOVE SVPT,-11(P)
02000		MOVE T1,-12(P)
02100		MOVEM T1,OEXT
02200		MOVE	T1,-13(P)
02300		MOVEM	T1,OPPN
02400	IFN SFDSW,<X==0
02500	REPEAT SFDLEN,<MOVE	T1,SFDLEN-PUSHSZ-X(P)
02600		MOVEM	T1,OSFD+X
02700	X==X+1>
02800	>
02900		JRST ILP0
     

00100	COMPS:	PUSHJ P,SCAN	;GET THE NAME OF THE SWITCH
00200		TRNN FL,IDF	;WAS THERE REALLY AN IDENTIFIER THERE?
00300		GOTO SYNERR	;LOSE
00400		MOVE T1,ACCUM	;GET ITS SIXBIT
00500		MOVNI T2,1	;SET UP MASK
00600	CMP1:	LSH T1,6
00700		LSH T2,-6
00800		JUMPN T1,CMP1	;WHEN DONE T2 HAS 0'S FOR ALL CHRS IN T1
00900		MOVSI T1,-TBLG	;GET SET TO SCAN FOR NAME
01000		SETOM NUMAT	;-1 TO NUMBER FOUND
01100	CMP3:	MOVE T3,SWTAB(T1)	;GET A SWITCH
01200		CAMN T3,ACCUM	;EXACT MATCH?
01300		JRST MATCH	;YES, ALL DONE
01400		ANDCM T3,T2	;0 OUT UNNECESSARY CHRS
01500		CAME T3,ACCUM
01600		JRST CMP2	;NO MATCH
01700		AOS NUMAT	;POSSIBLE MATCH
01800		MOVEM T1,SVIND	;SAVE POINTER
01900	CMP2:	AOBJN T1,CMP3
02000		SKIPGE	NUMAT	;WAS THERE AT LEAST ONE MATCH
02100		JRST UNRECS
02200		SKIPE	NUMAT	;BUT NO MORE THAN ONE?
02300		JRST	AMBIGU	;NO, SO COMMAND IS AMBIGUOUS
02400		MOVE	T1,SVIND	;RESTORE THE POINTER
02500	MATCH:	HRRZ	T1,T1		;INDEX ONLY
02600		CAIL	T1,ASWTAB-SWTAB	;IN ADDRESS TABLE?
02700		JRST	[MOVE	T1,SWTAB2(T1)	;YES, LOAD UP JUMP ADDRESS
02800			JRST	(T1)]		;GO TO ROUTINE (LEFT HALF MAY BE SET)
02900		CAIL	T1,PSWTAB-SWTAB	;IN PROCESSOR TABLE?
03000		JRST	PMATCH		;YES, USE OTHER FLAGS
03100		MOVE T1,SWTAB2(T1)	;NO, GET ACTION
03200		TLZ FL3,(T1)	;TURN OFF SWITCHES AS NEEDED
03300		TRNE FL,PERF	;PERMANENT?
03400		TLZ FL,(T1)	;SET THAT TOO
03500		MOVSS T1
03600		TLO FL3,(T1)	;AND TURN ON OTHERS
03700		TRNE FL,PERF
03800		TLO FL,(T1)
03900		ANDI	T1,DEVSWS	;SEE IF FIRST DEVICE SWITCH
04000		SKIPN	LODDEV		; AND IF SO
04100		HRLOM	T1,LODDEV	; SAVE AS LOADER DEVICE (RH SET TO -1)
04200		JRST SCAN	;GET SOMETHING ELSE
04300	
04400	PMATCH:	MOVE	T1,SWTAB2(T1)	;GET SWITCHES
04500		TRZ	FL2,(T1)	;TURN OFF LOCAL PROCESSOR
04600		MOVSS	T1
04700		TRO	FL2,(T1)	;TURN IT ON
04800		TRNE	FL,PERF
04900		HRRZM	T1,DFPROC	;CHANGE DEFAULT PROCESSOR TO
05000		JRST	SCAN
05100	
     

00100		XALL
00200	DEFINE X (A,B,C,D,E,F)<
00300	SWITCH A,<XWD B'SW,ALPROC>>
00400	
00500	DEFINE SWITCH (A,B)<
00600	<	SIXBIT /A/>>
00700	
00800	SWTAB:	STABLE
00900	PSWTAB:	PTABLE
01000	ASWTAB:	ATABLE
01100	TBLG==.-SWTAB
     

00100	DEFINE SWITCH (A,B)<
00200		B>
00300	
00400	SWTAB2:	STABLE
00500		PTABLE
00600		ATABLE
     

00100	;HERE ON "/" AFTER A FILE NAME
00200	
00300	COMPSW:	TRZ FL,PERF	;DOING TEMP
00400		PUSHJ P,COMPS
00500		JRST ILP2
00600	
00700	;HERE ON "/" AS FIRST CHAR OF IDENT, I.E. PERM SW
00800	
00900	COMPS1:	TRO FL,PERF
01000		PUSHJ P,COMPS
01100		CAIE	C,","	;IS NEXT CHAR. A COMMA
01200		JRST ILP0A
01300		JRST	ILP0	;YES,SO SCAN FOR CHAR. AFTER IT
01400	
01500	SETMPL:	TRNN	FL,DOLOD	;OR NOT LOADING?
01600		SKIPA	T3,[-1]		;DON'T STORE ANYTHING
01700		MOVEI	T3,CHNLOD
01800		MOVE	T2,['(F1MG)']
01900		TRNN	FL,LINKFL	;LINK-10
02000		JRST	SETMP		;NO
02100		MOVEI	T1,","		;MIGHT NEED A SEPARATOR
02200		SKIPE	TMPCHN(T3)	;UNLESS NOTHING OUTPUT YET
02300		PUSHJ	P,TMPOUT	;SEP FROM PREV FILE SPEC
02400		MOVE	T2,['/CONTE']	;USE NEW SWITCHES
02500		PUSHJ	P,OUTSIX
02600		MOVE	T2,[':LOCAL']
02700		PUSHJ	P,OUTSIX
02800		PUSHJ	P,OUTSPC	;AND PUT /GO IN MAPSW
02900		JRST	LNKMAP		;NOW FOR /MAP
03000	
03100	SETMAP:	TRNN	FL,DOLOD	;OR NOT LOADING?
03200		SKIPA	T3,[-1]		;DON'T STORE ANYTHING
03300		MOVEI	T3,CHNLOD
03400		MOVE	T2,['(FMG) ']
03500		TRNN	FL,LINKFL	;LINK-10
03600		JRST	SETMP		;NO
03700		MOVEI	T1,","		;MIGHT NEED A SEPARATOR
03800		SKIPE	TMPCHN(T3)	;UNLESS NOTHING OUTPUT YET
03900		PUSHJ	P,TMPOUT	;SEP FROM PREV FILE SPEC
04000	LNKMAP:	MOVSI	T2,'/G '	;JUST TO TERMINATE
04100	SETMP:	SKIPN	MAPSW		;ALREADY SET?
04200		MOVEM	T2,MAPSW	;STORE AND USE AS FLAG
04300		TRNN	FL,LINKFL	;NOTHING TO OUTPUT YET
04400		PUSHJ	P,OUCRLF
04500		PUSHJ	P,SCAN		;LOOK AT NEXT CHAR.
04600		CAIE	C,":"		;IS THIS A KEY WORD SPECIFICATION
04700		JRST	SETMP1		;NO
04800		AOBJP	SVPT,NESTTD	;MAKE SPACE FOR FIELDS
04900		PUSHJ	P,SCANAM	;YES, SO GO GET SPECIFICATIONS
05000		SKIPE	T2,SVDEV(SVPT)	;A DEVICE SPECIFIED?
05100		PUSHJ	P,OUTDEV	;YES
05200		SKIPE	T2,SVNAM(SVPT)	;NAME SPECIFIED?
05300		JRST	.+4		;YES
05400		TRNE	FL,LINKFL	;NO, BUT LINK-10 MAKES ITS OWN
05500		JRST	.+3		;SO DON'T DO IT HERE
05600		MOVSI	T2,'MAP'	;DEFAULT NAME
05700		PUSHJ	P,OUTSIX	;OUTPUT IT
05800		SKIPE	T2,SVEXT(SVPT)	;AN EXTENSION ALSO?
05900		PUSHJ	P,OUTEXT	;YES
06000		SUB	SVPT,[1,,1]	;BACK TO WHERE IT WAS
06100		PUSHJ	P,SCAN
06200		TRNN	FL,LINKFL	;IF LINK-10 DON'T FORGET /MAP
06300		JRST	SETMP2
06400	
     

00100	SETMP1:	MOVSI T2,'MAP'		;DEFAULT NAME
00200		TRNE	FL,LINKFL	;LINK-10?
00300		MOVSI	T2,'/M '	;YES
00400		PUSHJ P,OUTSIX
00500		TRNE	FL,LINKFL
00600		PUSHJ	P,OUTSPC
00700	SETMP2:	MOVEI	T1,"="		;NEW STANDARD
00800		PUSHJ	P,TMPOUT
00900		TRZ FL,LODOUT	;DO NOT NEED A COMMA FOR NEXT FILE
01000		POPJ	P,
01100	
01200	SETDDT:	SETOM	DDTFL
01300		PJRST	SCAN		;RETURN VIA SCAN
01400	
01500	FORSE:	MOVSI	T1,'/1F'
01600		TRNE	FL,LINKFL	;LINK-10?
01700		MOVE	T1,['/FORSE']	;YES
01800		JRST	SETOTS		;STORE RESULT
01900	
02000	FOROTS:	MOVSI	T1,'/2F'
02100		TRNE	FL,LINKFL	;LINK-10?
02200		MOVE	T1,['/FOROT']	;YES
02300	SETOTS:	MOVEM	T1,FORLIB
02400		PJRST	SCAN
02500	
02600	LOADIT:	TRZA	FL,LINKFL	;MAKE SURE NOT SET
02700	LINKIT:	TRO	FL,LINKFL	;WANTS LINK-10
02800		PJRST	SCAN
     

00100	PROCSW:	TROE FL,PROCS	;HAVE WE ALREADY SEEN SOME?
00200		GOTO SYNERR	;YES, I DEFINE THIS AS ILLEGAL
00300		MOVEM SWPT,SWBKS(SVPT)	;SAVE BYTE POINTER TO NEW ONES
00400		TRZ FL,PCM1!PCM2	;NO COMMAS YET
00500	PROCS1:	PUSHJ P,GETCH	;GIVE ME A CHARACTER
00600		CAIN C,")"	;DONE?
00700		JRST ESTR	;YES
00800		CAIN C,","	;POSSIBLY COMMA
00900		JRST PCCOM	;GO TAKE GOOD CARE OF IT
01000		CAIN	C," "	;SPACE?
01100		JRST	[SETZ	C,	;YES, MAKE NULL
01200			JRST	PROCS2]	;AND STORE
01300	IFE DEBSW,<JUMPLE CS,SYNERR	;NOT ANUMBER OR LETTER, HE LOSES>
01400	IFN DEBSW,<SKIPG CS		;SAME CODE BUT LONGER
01500		GOTO	SYNERR>
01600	PROCS2:	IDPB C,SWPT	;SAVE IT AWAY
01700		SOJG SWCNT,PROCS1	;NEXT PLEASE
01800		JRST ETMS	;TOO MANY SWITCHES FOR SPACE RESERVED
01900	
02000	PCCOM:	TROE FL,PCM1	;IS THIS THE FIRST OR SECOND COMMA
02100		JRST NOTBIN	;NOT FIRST, TRY FOR SECOND
02200		CAMN SWPT,SWBKS(SVPT)	;WAS ANYTHING STORED?
02300		JRST PROCS1	;NO, JUST IGNORE
02400		SKIPE SWBKB	;ARE THERE ALREADY BINARY SWITCHES
02500		GOTO SYNERR	;YES, MORE NOT ALLOWED
02600		MOVE T1,SWBKS(SVPT)	;GIVE THIS TO BINARY
02700		MOVEM T1,SWBKB
02800	COMCOM:	MOVEI C,0	;MARK END OF STRING
02900		IDPB C,SWPT
03000		SOJLE SWCNT,ETMS	;HAVE WE RUN OUT?
03100		MOVEM SWPT,SWBKS(SVPT)	;AND A NEW ONE FOR SRC
03200		JRST PROCS1
03300	NOTBIN:	TROE FL,PCM2	;SECOND ALREADY SEEN?
03400		GOTO SYNERR	;YES, THREE NOT PERMITTED
03500		CAMN SWPT,SWBKS(SVPT)	;ANYTHING THERE?
03600		JRST PROCS1	;HE WOULD HAVE BEEN JUST AS WELL WITHOUT IT
03700		SKIPE SWBKL	;ALREADY LIST SWITCHES?
03800		GOTO SYNERR	;YES, HE LOSES
03900		MOVE T1,SWBKS(SVPT)	;AND GIVE TO CORRECT PERSON
04000		MOVEM T1,SWBKL
04100		JRST COMCOM
04200	ESTR:	CAMN SWPT,SWBKS(SVPT)	;WAS ANYTHING STORED?
04300		JRST	[SETZM SWBKS(SVPT)	;NO, ZERO IT
04400			JRST ILP2A]
04500		MOVEI C,0
04600		IDPB C,SWPT	;MARK
04700		SOJLE SWCNT,ETMS
04800		JRST ILP2A	;NEXT
     

00100	SETONM:	SKIPE	ONAM	;OUTPUT NAME GIVEN BEFORE?
00200		SKIPLE	BROCNT	;BUT OK IN BROKETS
00300		TRNE FL,PROCS	;PROCESSOR SWITCHES NOT PERMITTED HERE
00400		GOTO SYNERR
00500		MOVE T1,SVNAM(SVPT)	;GET THE NAME
00600		MOVEM T1,ONAM	;AND SAVE IT AWAY
00700		MOVE	T1,SVEXT(SVPT)
00800		MOVEM	T1,OEXT
00900		MOVE	T1,SVPPN(SVPT)
01000		MOVEM	T1,OPPN
01100		MOVE	T1,SVDEV(SVPT)
01200		MOVEM	T1,ODEV		;SAVE OUTPUT DEVICE
01300	IFN SFDSW,<X==<Y==0>
01400	REPEAT SFDLEN,<	MOVE	T1,SVSFD+X(SVPT)
01500		MOVEM	T1,OSFD+Y
01600	X==X+NFILE
01700	Y==Y+1>
01800	>
01900		PUSHJ P,SCAN
02000		JRST ILP1
02100	
02200	LOADS1:	PUSHJ P,LODS1
02300		JRST ILP0
     

00100	LOADS2:	PUSH	P,[ILP2A]	;SET RETURN POINT
00200	LODS1:	PUSHJ	P,GETCH		;NEXT CHR
00300		CAIG	C," "		;NON-PRINTING CHARS. NOT ALLOWED
00400		GOTO	SYNERR		;THIS REALLY IS A BUG
00500		TRNE	FL,LINKFL	;LINK-10?
00600		JRST	LODS2		;YES, SPECIAL HANDLING
00700		CAIN	C,"&"		; SYMBOLIC SWITCH
00800		JRST	LODSWS
00900		CAIN	C,"-"		;SPECIAL CHECK FOR -SWITCH
01000	LODS1A:	TLO	CS,NUMF		;PRETEND ITS A NUMBER
01100		IDPB	C,LODSP		;SAVE IT
01200		SOSG	LODCTR		;CHECK SIZE
01300		JRST	ETMS
01400		TLNN	CS,NUMF		;A NUMBER
01500		POPJ	P,		;NO, DONE
01600		JRST	LODS1		;YES, THEY GET PASSED ON
01700	
01800	;HERE FOR SYMBOLIC SWITCHES %&SYMBOL&SWITCH
01900	LODSWS:	IDPB	C,LODSP
02000		SOSG	LODCTR
02100		JRST	ETMS
02200		PUSHJ	P,GETCH
02300		CAIE	C,"&"
02400		JRST	LODSWS
02500		JRST	LODS1A
02600	
     

00100	;HERE FOR LINK-10 SWITCHES
00200	;THEY ARE IN FORM %'SWITCH:ARG'
00300	LODS2:	PUSH	P,C		;SAVE TERMINATOR
00400		CAIL	C,"0"		;LOOK FOR POTENTIALLY DANGEROUS
00500		CAILE	C,"9"		;SWITCH DELIMITERS
00600		CAIA			;I.E. THOSE THAT COULD BE
00700		JRST	LODS4		;LOADER SINGLE CHAR SWITCHES
00800		CAIL	C,"A"		;WARN USER
00900		CAILE	C,"Z"		;BUT CONTINUE
01000		CAIA			;REMOVE AT SOME FUTURE DATA
01100		JRST	LODS4		;WHEN LINK-10 HAS REPLACED LOADER
01200		CAIL	C,"a"
01300		CAILE	C,"z"
01400		CAIA
01500		CAIE	C,"-"		;DONT FORGET MINUS
01600		CAIN	C,"&"		;OR SYMBOLIC SWITCH
01700		JRST	LODS4
01800	LODS3:	PUSHJ	P,GETCH		;NEXT CHR
01900		CAIG	C," "		;NON-PRINTING CHARS. NOT ALLOWED
02000		GOTO	SYNERR		;THIS REALLY IS A BUG
02100		CAMN	C,0(P)		;TERMINATOR?
02200		SETZ	C,		;YES, STORE ZERO AND RETURN
02300		IDPB	C,LODSP		;SAVE IT
02400		SOSG	LODCTR		;CHECK SIZE
02500		JRST	ETMS
02600		JUMPN	C,LODS3		;LOOP FOR MORE
02700		POP	P,0(P)		;REMOVE JUNK
02800		POPJ	P,		;FINISHED
02900	
03000	;HERE TO WARN USER INCASE CTL FILE CONTAINS LOADER SWITCHES
03100	LODS4:	STRING	[ASCIZ	/%Illegal LINK-10 switch delimiter: /]
03200		OUTCHR	C
03300		STRING	[ASCIZ	\
03400	\]
03500		JRST	LODS3
     

00100	SETUP:	MOVE T1,SVNAM(SVPT)	;LAST FILE NAME
00200		SKIPN ONAM	;SET ONAM IF NOT ALREADY
00300		MOVEM T1,ONAM
00400	ONSET:	TRZ FL,NODAT	;WE HAVE NOT SEEN A DIFFERENT DEVICE
00500		SETZM SDAT	;LATEST DATE
00600		SETZM STIM	;AND LATEST TIME
00700		TLZ FL2,-1		;NO PROCESSOR YET
00800		PUSHJ P,GETPRO	;GO FIND DATE AND PROCESSOR
00900	IFN MANTIS,<SKIPE DEBFL		;IF NOT DEBUGGING
01000		SKIPE	DDTFL		;OR EXPLICIT DDT REQUEST
01100		JRST	ONSET1		;DON'T WANT MANTIS
01200		TLNN	FL2,FORSW	;FIRST PROG F4?
01300		JRST	ONSET1		;NO, THEN NOT MANTIS BY DEFAULT
01400		TLNN	FL3,NOMANTSW	;WANT MANTIS FOR THIS PROG?
01500		TLO	FL3,MANTSW	;YES
01600		TLO	FL,MANTSW	;AND FOR WHOLE
01700	ONSET1:>
01800		TLNE FL2,RELSW	;IF A REL FILE
01900		JRST	LDREL	;GO LOAD IT NOW
02000		TRNE FL,NODAT	;NO DATES ON OTHER DEVICES
02100		JRST	LBCOMP	;BUT CHECK FOR /LIB FIRST
02200		TLC	FL3,NOBINSW!LISTSW	;INVERT /NOBIN/LIST SWITCHES
02300		TLCE	FL3,NOBINSW!LISTSW	;TEST FOR BOTH ON
02400		TLNE	FL3,COMPLS	;DO WE ALWAYS WANT TO COMPILE?
02500		JRST DOCOM5		;YES, COMBINATION FORCES COMPILE
02600					; AND DON'T CHECK FOR SAVED REL PPN
02700	IFN SFDSW,<MOVE T1,SVPPN(SVPT)	;GET PPN
02800		SKIPN	SVSFD(SVPT)	;ANY SFD'S SPECIFIED?
02900		JRST	REREL0		;NO
03000		MOVEM	T1,LSFDPP	;STORE PPN
03100	X==<Y==0>			;INITIAL CONDITION
03200	REPEAT SFDLEN,<	MOVE	T1,SVSFD+X(SVPT)
03300		MOVEM	T1,LSFD+Y
03400	X==X+NFILE
03500	Y==Y+1>
03600		SKIPA	T1,[EXP LSFDAD]	;POINT TO SFD BLOCK IN LPPN>
03700	IFE SFDSW,<SKIPA T1,SVPPN(SVPT)	;LOOK ON THIS AREA FOR REL>
03800	REREL:	SETZ	T1,
03900	REREL0:	MOVEM T1,LPPN	;BUT ONLY FIRST TIME
04000		MOVEM T1,SVRPP	;SO WE KNOW IF SECOND TIME
04100		MOVE T1,ONAM	;SEE IF REL IS THERE
04200		MOVEM T1,LNAM
04300		SKIPN	T1,OEXT	;USE SPECIFIED OUTPUT EXT.
04400		MOVSI T1,'REL'
04500	IFN MACX11,<
04600		TLNN FL2,P11SW	;USE 'OBJ' IF MACX11 INSTEAD OF 'REL'
04700		JRST REREL1	;NOT MACX11, SO DON'T BOTHER
04800		SKIPN T1,OEXT	;USE OUTPUT EXT IF SPECIFIED
04900		MOVSI T1,'OBJ'	;USE PDP-11 DEFAULT BINARY EXTENSION
05000	REREL1:>
05100		MOVEM T1,LEXT
05200		LOOKUP LOOK,LNAM	;IS IT THERE
05300		  JRST	LBCOMP	;NO, WE MUST RECOMPILE
05400	IFN TENEX,<			;GET EXACT TIMES IN TENEX SYSTEM
05500		PUSHJ P,GDTLOK		;GET DATE AND TIME OF LOOK CHANNEL
05600		  JRST REREL2		;NOT IN THE COMPATIBILITY
05700		HLRZ T2,LDAT		;OK. LH LDAT IS DATE IN TENEX FORMAT
05800		CAMGE T2,SDAT
05900		JRST DOCOMP		;COMPILE THIS
06000		CAME T2,SDAT		;SAME DATE?
06100		JRST NOCOM1		;NO. DON'T COMPILE
06200		HRRZ T2,LDAT		;GET TIME IN SECONDS
06300		CAMLE T2,STIM		;NEWER?
06400		JRST NOCOM1		;SOURCE OLDER
06500		JRST DOCOMP		;SOURCE NEWER OR EQUAL
06600	
06700	GDTLOK:	PUSH P,T1		;SAVE SOME ACS
06800		PUSH P,T2
06900		PUSH P,T3
07000		MOVEI T1,LOOK		;CHANNEL
07100		CALL T1,['FILJFN']	;TENEX HANDLE OF THIS CHANNEL
07200		  JRST TPOPJ3		;NOT FOUND. NOT IN PA1050?
07300		PUSH P,T1		;SAVE JFN
07400		DVCHR			;GET DEVICE BITS
07500		POP P,T1		;RESTORE JFN
07600		TLNE T2,777		;ON DISK?
07700		JRST TPOPJ3		;NO.
07800		MOVE T2,[1,,14]		;POINT TO THE WRITE DATE AND TIME
07900		MOVEI T3,LDAT		;PUT IT IN LOOKUP BLK DATE WRD
08000		GTFDB			;DO IT
08100		AOS -3(P)		;SUCCESS RETURN
08200		JRST TPOPJ3		;RESTORE 3 TEMPS AND RETURN
08300	
08400	>
     

00100	REREL2:	LDB T2,[POINT 12,LDAT,35]	;GET DATE
00200		CAMGE T2,SDAT	;EARLIER
00300		JRST DOCOMP	;YES, COMPILE
00400		CAME T2,SDAT	;SAME?
00500		JRST NOCOM1	;NO, ALL OK
00600		LDB T2,[POINT 11,LDAT,23]	;YES, GET TIME
00700		CAMG T2,STIM	;LATER?
00800		JRST	DOCOMP	;NO, RECOMPILE
00900	
01000	NOCOM1:	TLNN	FL2,FORSW	;FORTRAN PROG
01100		JRST	NOCOM3		;NO, SKIP CHECKING REL FILE
01200		PUSHJ	P,CHKREL	;SEE WHAT TYPE OF REL FILE WE HAVE
01300		  JRST	DOCOMP		;ERROR, SO RECOMPILE
01400	NOCOM3:	SKIPN SVRPP	;DID WE FIND THE REL FILE SOMEWHERE ELSE?
01500		JRST NOCOMP	;NO
01600		MOVE T1,OEXT	;GET REL FILE EXT, IF ANY.
01700		MOVEM T1,SVEXT	;EXT OF MAIN SOURCE FILE
01800		TLO FL2,RELSW	;AND PRETEND HE SAID .REL
01900		JRST NOCOMP
02000	
     

00100	DOCOMP:	SKIPE SVRPP	;DID WE LOOK ON THIS AREA?
00200		JRST REREL	;NO, TRY IT
00300	DOCOM5:	MOVE	T1,FL2		;GET PROCESSOR FLAGS
00400		JFFO	T1,.+1		;GET COUNT IN T2
00500	REPEAT 0,<	JFFO IS FASTER
00600		MOVEI T2,0	;GET THE PROCESSOR
00700		SKIPA T1,FL2
00800	DC1:	LSH T1,1	;TRY NEXT BIT
00900		TLNN T1,400000	;IS HIGH BIT ON YET?
01000		AOJA T2,DC1	;TURNS IT INTO A NUMBER
01100	>	;END OF REPEAT 0
01200		MOVEM T2,PCNUM	;SAVE IT FOR LATER
01300		MOVE T3,T2		;GET THE # OF THE OUTPUT ROUTINE
01400		TLNE	FL3,NOBINSW	;REL FILE NOT WANTED?
01500		JRST	[MOVEI	T1,"-"		;NO, LOAD T1
01600			CAIN	T3,CHNCBL	;IN CASE THIS IS COBOL
01700			PUSHJ	P,TMPOUT	;WHAT A LOSER COBOL IS
01800			JRST	DOCOM1]		;BUT LIST ANY RELEVANT SWITCHES
01900		MOVE T2,ONAM	;START PUTTING OUT
02000		PUSHJ P,OUTSIX
02100		SKIPE	T2,OEXT	;EXTENSION EXPLICITLY GIVEN?
02200		PUSHJ	P,OUTEXT	;YES
02300	IFN SFDSW,<SKIPN OPPN		;OUTPUT PPN GIVEN?
02400		SKIPE	OSFD		;OR SFD?>
02500	IFE SFDSW,<SKIPE OPPN		;OUTPUT PPN?>
02600		PUSHJ	P,SFDPPN	;YES
02700	IFN MANTIS,<
02800		TLNN	FL2,FORSW	;FORTRAN PROGRAM?
02900		JRST	DOCOM1		;NO, CERTAINLY DON'T WANT MANTIS
03000		MOVSI	T2,'/D '	;ASSUME WE DO
03100		TLNE	FL3,MANTSW	;WELL DO WE?
03200		PUSHJ	P,OUTSIX	;YES, OUTPUT DEBUG SWITCH>
03300	DOCOM1:	SKIPE	T2,SWBKB	;ARE THERE SWITCHES
03400		PUSHJ	P,OUTSW		;YES, OUTPUT THEM
03500		TLNE	FL2,FORSW	;FORTRAN?
03600	IFE DFORTRAN,<			;YES, BUT IS IT F-10
03700		TLNN	FL3,F10SW	;DEFINITELY?>
03800	IFN DFORTRAN,<
03900		TLNE	FL3,F40SW	;DEFINITELY NOT>
04000		JRST	DOCOM2		;WE DONT WANT FORTRAN-10
04100		TLNN	FL3,CPUSW	;YES, BUT DO WE CARE WHICH TYPE OF CPU?
04200		JRST	DOCOMA		;NO, TAKE DEFAULT
04300		MOVE	T2,['/KA10 ']
04400		TLNN	FL3,KA10SW	;GUESS RIGHT?
04500		HRLI	T2,'/KI'	;NO
04600		PUSHJ	P,OUTSIX
04700	DOCOMA:	TLNN	FL3,OPTSW!NOPTSW	;OPTIMIZER INFO?
04800		JRST	DOCOM2		;NO, TAKE DEFAULT
04900		MOVE	T2,['/OPT  ']
05000		TLNN	FL3,OPTSW	;OPTIMIZE?
05100		MOVE	T2,['/NOPT ']	;NO
05200		PUSHJ	P,OUTSIX
05300	DOCOM2:	TLNN	FL3,LISTSW	;LISTING REQUESTED?
05400		JRST	[MOVSI	T2,',- '	;NO
05500			CAIN	T3,CHNCBL	;TEST FOR COBOL
05600			PUSHJ	P,OUTSIX	;YES
05700			JRST	NOLST]
05800		MOVEI T1,","	;YES, NEED A COMMA
05900		PUSHJ P,TMPOUT
06000		TLNN	FL2,CBLSW!BLISW	;SKIP /CREF IF COBOL OR BLISS (SPECIAL)
06100		TLNN	FL3,CRSW	;USE DSK IF /CREF
06200		SKIPLE	T2,SPDLPT	;OTHERWISE USE SPOOLED LPT
06300		JRST	DOCOM3		;WE KNOW WE'RE NOT SPOOLED
06400		JUMPE	T2,[MOVSI T1,'LPT'	;TEST FOR SPOOLED LISTING DEVICE
06500			MOVEM	T1,SPDLPT	;ASSUME TRUE
06600			DEVTYP	T1,
06700			  CAIA			;CERTAINLY NOT SPOOLED
06800			TLNN	T1,.TYSPL	;TEST SPOOL BIT
06900			HRRZM	P,SPDLPT	;SET POSITIVE TO SHOW NOT SPOOLED LPT
07000			SKIPL	T2,SPDLPT	;SEE IF WE WON
07100			JRST	DOCOM3		;NO
07200			JRST	.+1]		;YES
07300		PUSHJ	P,OUTDEV	;SET LIST DEVICE
07400	DOCOM3:	MOVE T2,ONAM	;SET IT UP
07500		PUSHJ P,OUTSIX
07600	IFN SFDSW,<SKIPN OPPN		;OUTPUT PPN GIVEN?
07700		SKIPE	OSFD		;OR SFD?>
07800	IFE SFDSW,<SKIPE OPPN		;OUTPUT PPN?>
07900		PUSHJ	P,SFDPPN	;YES
08000		TLNN FL3,CRSW	;CREF MAYBE
08100		JRST NOLST1
     

00100		MOVSI T2,'/C '
00200		PUSHJ P,OUTSIX
00300		PUSH P,T3
00400		TLNN	FL2,CBLSW!BLISW	;DON'T WRITE /CREF IF COBOL OR BLISS (SPECIAL)
00500		PUSHJ P,ENTCRF	;PUT IT IN THE ###CREF FILE
00600		POP P,T3
00700	NOLST1:	SKIPE T2,SWBKL	;SWITCHES?
00800		PUSHJ P,OUTSW
00900	NOLST:	MOVEI T1,"_"
01000		PUSHJ P,TMPOUT
01100		MOVE	T4,SVPT		;SAVE CURRENT POINTER
01200		MOVSI	SVPT,-NFILE	;RESET TO START
01300	PRCLP:	SKIPE T2,SVDEV(SVPT)	;IS THERE A DEVICE THERE
01400		PUSHJ P,OUTDEV	;YES, PRINT IT
01500		MOVE T2,SVNAM(SVPT)	;PUT OUT NAME
01600		PUSHJ P,OUTSIX
01700		SKIPE T2,SVEXT(SVPT)	;AND EXT IF NECESSARY
01800		PUSHJ P,OUTEXT
01900		SKIPE	T2,SVPPN(SVPT)	;NEED PPN?
02000		PUSHJ P,OUTPPN	;PUT THEM OUT
02100		SKIPE T2,SWBKS(SVPT)	;AND SWITCHES
02200		PUSHJ P,OUTSW
02300		CAMN T4,SVPT	;ALL DONE?
02400		JRST ENDPRC	;YES, GO FINISH UP AND CONSIDER LOADING
02500		MOVEI T1,","
02600		PUSHJ P,TMPOUT	;NEXT FILE
02700		AOBJN SVPT,PRCLP
02800		MOVE	SVPT,T4		;SHOULD NEVER GET HERE
02900	
03000	ENDPRC:	PUSHJ	P,OUCRLF
03100	IFN FORTRAN,<			;CHOICE OF FORTRAN COMPILERS
03200		TLNE	FL2,FORSW	;IGNORE IF NOT FORTRAN
03300		TLNN	FL3,F40SW!F10SW	;AND IF NOTHING OF INTEREST
03400		JRST	ENDFOR		;SKIP REST OF TESTS
03500		MOVSI	T1,'F40'	;ASSUME F40 WANTED
03600		TLNN	FL3,F40SW	;GOOD GUESS?
03700		MOVE	T1,['FORTRA']	;NO, EXACTLY WRONG
03800		SKIPN	FORPRC		;SETUP ALREADY?
03900		MOVEM	T1,FORPRC	;NO, DO SO NOW
04000	ENDFOR:>
04100	IFN SPRC,<
04200		TLNN FL2,SPRC>
04300		JRST NOCOMP	;GO LOAD
04400	IFN SPRC,<
04500		MOVSI SVPT,-NFILE	;RESET POINTER
04600		MOVE T1,ONAM	;AND FAKE WORLD
04700		MOVEM T1,SVNAM
04800		MOVE T3,PCNUM	;GET BACK PROCESSOR NUMBER
04900		MOVE T1,INTEXT(T3)	;GET EXTENSION
05000		MOVEM T1,SVEXT
05100		SETZM SVPPN
05200		SETZM SWBKS
05300		SETZM SWBKB
05400		SETZM SWBKL
05500		HRL FL2,NXPC(T3)	;SET FOR NEXT PROCESSOR
05600		JRST DOCOMP	;AND GO EMIT CALLS
05700	>
     

00100	;HERE TO TEST FOR /LIB
00200	;COMPLICATED BY FACT THAT FOO.LIB IS PROBABLY BINARY
00300	;THEREFORE ONLY COMPIL IF EXT IS A KNOWN ONE
00400	; I.E. FOR, F40, MAC, ALG, CBL, BLI, FAI ETC
00500	
00600	LBCOMP:	TLNN	FL3,LIBSW	;/LIB?
00700		JRST	DOCOMP		;NO, RECOMPILE
00800		MOVE	T1,FL2		;GET PROCESSOR FLAGS
00900		JFFO	T1,.+1		;COUNT THE EASY WAY
01000		HLLZ	T1,SVEXT(SVPT)	;GET EXT OF INPUT
01100		CAME	T1,F4		;ALTERNATIVE FORTRAN EXT
01200		CAMN	T1,PXTAB+1(T1+1);TEST AGAINST EXPECTED EXT
01300		JRST	DOCOMP		;IT IS SO RECOMPILE
01400	IFN BLISS,<CAMN	T1,B10		;TEST AGAINST ALTERNATIVE EXT
01500		JRST	DOCOMP		;YES, SO RECOMPILE>
01600		MOVEM	T1,OEXT		;FAKE OUTPUT EXT SO LOADER SEES IT
01700		JRST	LDREL		;NOT, SO ASSUME BINARY
01800	
01900	
02000	SFDPPN:	MOVEI	T1,"["		;START OUT RIGHT
02100		HRRZM	T2,SAVPPN	;SAME CODE AS OUTPPN (ALMOST)
02200		PUSHJ	P,TMPOUT
02300		HLRZ	T1,T2		;GET NUMBER (LH)
02400		JUMPE	T1,.+2		;ZERO IS JUST ,
02500		PUSHJ	P,OUTOCT
02600		MOVEI	T1,","
02700		PUSHJ	P,TMPOUT
02800		SKIPA	T1,SAVPPN
02900		PUSHJ	P,OUTOCT
03000	IFN SFDSW,<X==0			;INITIAL CONDITION
03100	REPEAT SFDLEN,<	SKIPN	T2,OSFD+X
03200		JRST	SFDPP1
03300		PUSHJ	P,SFDOUT
03400	X==X+1>
03500	SFDPP1:	>			;END OF IFN SFDSW
03600		MOVEI	T1,"]"
03700		PJRST	TMPOUT
     

00100	LDREL:	TRNE SVPT,-1	;CHECK FOR ONLY ONE FILE
00200		JRST NOFIL		;IF MORE THAN ONE, THERE IS AN ERROR
00300	NOCOMP:	SKIPE	FDGFLG		;NEED TO MAKE FUDGED LIBRARY?
00400		PUSHJ	P,ENTFUD	;YES
00500		TRNN FL,DOLOD	;DO WE WANT TO LOAD?
00600		JRST NXFILP	;NO, GO TO NEXT
00700		MOVEI C,0
00800		IDPB C,LODSP	;END SECOND SET OF SWITCHES
00900		IDPB C,LODSP2
01000		MOVEI T3,CHNLOD	;SET FOR LOADER
01100		TRZE FL,LODOUT	;IS THERE ALREADY OUTPUT THERE?
01200		PUSHJ P,[TRNN	FL,LINKFL	;LINK10?
01300			PJRST	OUCRLF		;NO, OUTPUT A CRLF AS SEPARATOR
01400			MOVEI	T1,","		;YES
01500			PJRST	TMPOUT]		;YES, ALL ON SAME LINE SAVES TIME
01600		SKIPL	DEBFL		;DEBUG SEEN AND NOT YET SET?
01700		JRST	NODDT		;NO
01800		SKIPE	DDTFL		;PRE-EMPTED TO DDT?
01900		JRST	[MOVSI	T2,'/T '	;YES
02000			TRNN	FL,LINKFL	;LINK-10?
02100			JRST	ISDDT		;NO, ALWAYS USE UST DDT
02200			MOVSI	T2,'/D '	;DDT BY DEFAULT
02300			PUSHJ	P,OUTSIX
02400			PUSHJ	P,OUTSPC	;TERMINATE SWITCH
02500			JRST	NODDT]
02600		HLLZ	T1,FL2		;GET PROCESSOR
02700		MOVEI	T2,^L<MACSW>-22	;PRESET INCASE REL ONLY
02800		TLNE	T1,ALPROC-RELSW	;SEE IF ANY SET
02900		JRST	GETDDT		;YES, FIND OUT WHICH
03000		HRLZ	T1,FL2		;TRY LOCAL PROCESSOR SWITCHES
03100		TLNE	T1,ALPROC-RELSW
03200	GETDDT:	JFFO	T1,.+1		;YES, SO SEE WHICH
03300		PUSH	P,DEBAID(T2)	;STORE NAME
03400		CAIN	T2,^L<CBLSW>-22	;COBOL IS A LOSER
03500		JRST	[SOS	DEBFL	;AS IT MUST LOAD COBDDT
03600			JRST	NODDT1]	;AFTER MAIN PROG
03700		TRNE	FL,LINKFL	;IF LINK-10
03800		JRST	[MOVSI	T2,'/D '
03900			SKIPE	(P)		;BUG IN SCAN (LINK-10)
04000			TRO	T2,' : '		;OBJECTS TO /D: FOR DDT
04100			PUSHJ	P,OUTSIX
04200			SKIPE	T2,(P)		;GET NAME OF DEBUGGING AID
04300			PUSHJ	P,OUTSIX	;DEFAULT IS DDT IF 0
04400			PUSHJ	P,OUTSPC	;TERMINATE
04500			JRST	NODDT]
04600		MOVSI	T2,'/T '	;USE DDT
04700		SKIPN	(P)		;IF NULL
04800		PUSHJ	P,OUTSIX
04900		MOVE	T2,['SYS:  ']	;GET IT FROM SYS
05000		SKIPE	(P)		;IF NEEDED
05100		PUSHJ	P,OUTSIX
05200		POP	P,T2		;RECOVER FILE
05300		JUMPE	T2,NODDT	;DONE
05400		PUSHJ	P,OUTSIX
05500		MOVE	T2,[',/E/S ']	;SWITCHES AND SEPARATOR
05600		TRNN	FL,LINKFL	;BUT LINK-10 IS HARDER
05700		JRST	ISDDT		;JUST LOADER
05800		HRRI	T2,'/L '	;CHANGE /S TO /L
05900		PUSHJ	P,OUTSIX	;SWITCH
06000		PUSHJ	P,OUTSPC	;FOLLOWED BY SPACE
06100		JRST	NODDT
06200	
06300	NODDT1:	MOVE	T2,['/E/S  ']	;COBOL ONLY
06400		TRNN	FL,LINKFL	;LINK-10
06500		JRST	ISDDT		;NO
06600		HRRI	T2,'L  '	;CHANGE /S TO /L
06700		PUSHJ	P,OUTSIX
06800		PUSHJ	P,OUTSPC	;TERMINATE WITH SPACE
06900		JRST	NODDT
07000	
07100	ISDDT:	PUSHJ	P,OUTSIX
07200	NODDT:	MOVE T2,[POINT 7,LODSBK]	;OUTPUT FIRST SWITCHES
07300		PUSHJ P,OUTSW
07400		MOVSI T2,'DSK'
07500		TLNN FL3,LIBSW
07600		TLNE FL2,RELSW	;USING A REL FILE?
07700	LODR0:	SKIPE T2,LOKNAM	;ON NON-DISK DEVICE?
07800	LODR3:	PUSHJ P,OUTDEV	;YES. OUTPUT DEVICE
07900	LODR1:	MOVE T2,ONAM	;NOW FILE NAME
08000		PUSHJ P,OUTSIX
08100		TLNN FL2,RELSW	;REL
08200		JRST	[SKIPE	T2,OEXT	;EXTENSION GIVEN?
08300			PUSHJ	P,OUTEXT;YES
08400			TLNN FL3,LIBSW	;IF LIBRARY
08500			JRST	ELOD3	;NO, CONTINUE
08600			JRST	LODR2]	;YES
08700		SKIPE T2,SVEXT	;ALSO USE EXT IF GIVEN
08800		PUSHJ P,OUTEXT
08900	LODR2:	SKIPE T2,SVPPN	;THEN THINK ABOUT PPN
09000		PUSHJ P,OUTPPN
09100		MOVSI	T2,'/L '	;TELL LOADER
09200		TRNE	FL,LINKFL	;LINK-10
09300		MOVSI	T2,'/S '	;USES SEARCH
09400		TLNN	FL3,LIBSW	;LIBRARY?
09500		JRST	ELOD		;NO
09600		PUSHJ	P,OUTSIX
09700		TRNE	FL,LINKFL	;LINK-10
09800		PUSHJ	P,OUTSPC	;NEEDS SPAC
09900	ELOD:	MOVE	T2,[POINT 7,LODSB2]	;OUTPUT SECOND SET OF SWITCHES
10000		PUSHJ	P,OUTSW
10100		SKIPN	T2,FORLIB	;FORSE/FOROTS SWITCH SET?
10200		JRST	ELOD2		;NO
10300		PUSHJ	P,OUTSIX	;YES
10400		SETZM	FORLIB		;ONLY DO IT ONCE
10500		TRNE	FL,LINKFL
10600		PUSHJ	P,OUTSPC
10700	ELOD2:	TRO	FL,LODOUT	;MARK AS HAVING OUTPUT THERE
10800		AOSL	DEBFL		;ARE WE FINISHED WITH DDT?
10900		JRST	NXFILP
11000		TRNE	FL,LINKFL	;LINK-10?
11100		JRST	[MOVSI	T2,'/D:'	;YES, PUT AFTER FILE NAME
11200			PUSHJ	P,OUTSIX
11300			POP	P,T2		;JUNK
11400			MOVE	T2,['COBOL ']
11500			PUSHJ	P,OUTSIX
11600			PUSHJ	P,OUTSPC
11700			JRST	ELOD4]		;OUTPUT /DEBUG:COBOL
11800		MOVE	T2,[',SYS: ']	;NO, MUST BE COBOL
11900		PUSHJ	P,OUTSIX
12000		POP	P,T2		;GET FILE
12100		PUSHJ	P,OUTSIX
12200	ELOD4:	AOS	DEBFL		;AT LAST
12300		JRST	NXFILP
12400	
12500	ELOD3:
12600	IFN SFDSW,<SKIPN OPPN		;OUTPUT PPN GIVEN?
12700		SKIPE	OSFD		;OR SFD?>
12800	IFE SFDSW,<SKIPE OPPN		;OUTPUT PPN?>
12900		PUSHJ	P,SFDPPN	;YES
13000		JRST	ELOD		;AND CONTINUE
     

00100	;HERE TO CHECK REL FILE TO SEE IF IT IS WHAT WE EXPECT
00200	;MAINLY FOR F40 VS FORTRAN-10
00300	;RETURN
00400	;+1	FILE NOT OK, SHOULD RECOMPILE
00500	;+2	FILE OK
00600	
00700	CHKREL:	PUSHJ	P,INSREL	;INSPECT REL FILE, T2 POINTS TO WORD IN FILE
00800		  POPJ	P,		;ERROR, SO RECOMPILE
00900					;T3 CONTAINS TYPE
01000					;T2 CONTAINS CPU INFO
01100		SOJE	T3,CHKF40	;1=F40
01200		CAIE	T3,10-1		;MAKE SURE IT FORTRAN-10
01300		JRST	CPOPJ1		;NO, SO LEAVE ALONE
01400	
01500	CHKFOR:				;10 IS FORTRAN-10
01600	IFE DFORTRAN,<			;IF DEFAULT IS F40
01700		TLNN	FL3,F10SW	;RECOMPILE UNLESS DEFINITELY WANTS F-10>
01800	IFN DFORTRAN,<			;BUT IF DEFAULT IS F-10
01900		TLNE	FL3,F40SW	;RECOMPILE ONLY IF DEFINITELY WANTS F40>
02000		POPJ	P,
02100					;OK, NOW CHECK KA/KI TYPE
02200		SOJE	T2,CHKFKA	;KA-10 =1
02300		SOJE	T2,CHKFKI	;KI-10 =2
02400		JRST	CPOPJ1		;DON'T CARE
02500	
02600	CHKFKI:				;KI-10 TYPE
02700		MOVE	T2,CPU		;GET HOST CPU
02800		XCT	[TLNE	FL3,KI10SW	;RECOMPILE UNLESS DEFINITELY WANTS KI-10
02900			TLNN	FL3,KA10SW](T2)	;RECOMPILE ONLY IF DEFINITELY WANTS KA-10
03000		AOS	(P)		;SKIP RET, THIS REL WILL DO
03100		POPJ	P,
03200	
03300	CHKFKA:		;HERE IF FOUND REL IS F-10 KA-10 TYPE
03400		MOVE	T2,CPU		;GET HOST CPU
03500		XCT	[TLNN	FL3,KI10SW	;RECOMPILE ONLY IF DEFINITELY WANTS KI-10
03600			TLNE	FL3,KA10SW](T2)	;RECOMPILE UNLESS DEFINITELY WANTS KA-10
03700		AOS	(P)		;SKIP RET, THIS REL WILL DO
03800		POPJ	P,
03900	
04000	CHKF40:				;HERE IF FOUND REL WAS F40 STYLE
04100	IFE DFORTRAN,<			;IF DEFAULT IS F40
04200		TLNE	FL3,F10SW	;RECOMPILE ONLY IF DEFINITELY WANTS F10>
04300	IFN DFORTRAN,<			;BUT IF DEFAULT IS F10
04400		TLNN	FL3,F40SW	;RECOMPILE UNLESS DEFINITELY WANTS F40>
04500		POPJ	P,
04600	IFE MANTIS,<JRST CPOPJ1		;SKIP RET, THIS FILE WILL DO>
04700	IFN MANTIS,<
04800		TLNE	FL3,MANTSW	;DO WE WANT SPECIAL DATA
04900		TRC	T2,1		;YES SO COMPLEMENT TYPE CODE
05000		CAIN	T2,400		;SHOULD WE RECOMPILE?
05100		AOS	(P)		;NO, RIGHT KIND OF CODE
05200		POPJ	P,		;YES, WRONG KIND OF REL FILE>
05300	
     

00100	;HERE TO READ REL FILE IN USERS [DIRECTORY] ON DSK
00200	;RETURNS
00300	;+1	FILE ERROR, FORCE RECOMPILATION
00400	;+2	FILE READ,	T3 = PROCESSOR CODE
00500	;			T2 = CPU TYPE
00600	
00700	INSREL:
00800	INSRL1:	IN	LOOK,		;YES, MUST CHECK FOR DEBUGGER DATA
00900		  JRST	INSRL3		;IN OK, PICKUP BUFFER ADDRESS
01000		MOVE	T1,SVJFF	;RESTORE PREV 
01100		MOVEM	T1,.JBFF	;.JBFF AFTER  INPUT FAILS
01200	INSRL2:	POPJ	P,		;ERROR, SO FORCE RECOMPILE
01300	
01400	INSRL3:	MOVE	T2,LOOKBF	;GET BUFFER POINTER
01500		ADDI	T2,2		;POINT TO FIRST DATA WORD
01600	INSNXT:	HLRZ	T3,(T2)		;GET LOADER BLOCK TYPE
01700		CAIN	T3,6		;LOOK FOR NAME BLOCK
01800		JRST	FNDTY6		;FOUND IT
01900		CAIE	T3,4		;MUST BE EITHER ENTRY OR NAME
02000		JRST	[SETZ	T3,		;UNLESS NOT A REL FILE
02100			JRST	CPOPJ1]		;IN WHICH CASE DON'T REASSEMBLE
02200		HRRZ	T3,(T2)		;GET WORD COUNT
02300		CAIG	T3,^D18		;MORE THAN 1 SUB BLOCK?
02400		AOJA	T3,INSNXB	;NO
02500		IDIVI	T3,^D18		;YES, ACCOUNT FOR 1 BYTE WORD
02600		IMULI	T3,^D19		;PER 18 WORD SUB BLOCK
02700		JUMPE	T4,INSNXB	;ANY REMAINDER?
02800		ADDI	T3,1(T4)	;YES, DON'T FORGET BYTE WORD
02900	INSNXB:	ADDI	T2,1(T3)
03000		JRST	INSNXT		;TRY AGAIN
03100	FNDTY6:	HRRZ	T3,0(T2)	;GET WORD COUNT
03200		SOSLE	T3		;USE ZERO IF NO 2ND WORD
03300		HLRZ	T3,3(T2)	;GET PROCESSOR TYPE FROM 2ND DATA WORD
03400	IFN MANTIS,<HLRZ T1,4(T2)	;GET NEXT BLOCK INCASE F40/MANTIS>
03500		HRRZ	T2,T3		;AND COPY FOR CPU INFO
03600		ANDI	T3,7777		;BITS 6-17
03700		LSH	T2,-^D12	;BITS 0-5
03800	IFN MANTIS,<CAIN T3,1		;IF F40 AND WANTS MANTIS
03900		MOVE	T2,T1		;PUT 400 OR 401 IN CPU BLOCK>
04000		MOVE	T1,SVJFF	;RESTORE .JBFF
04100		MOVEM	T1,.JBFF	;AS IT WAS BEFORE INPUT
04200	CPOPJ1:	AOS	(P)		;SKIP RETURN
04300		POPJ	P,
04400	
     

00100		SALL
00200	GETPRO:	MOVSI T1,-NFILE	;NUMBER OF FILES
00300		TRNN	FL2,-1		;LOCAL PROCESSOR SET?
00400		HRR	FL2,DFPROC	;NO, SET FROM GLOBAL
00500		TRNN	FL2,RELSW	;IF USER SAID /REL
00600		JRST	GETPR1
00700		TLO	FL2,RELSW	;DON'T WASTE TIME ON LOOKUPS
00800		PUSH	P,SVDEV(T1)	;AND COPY "SOURCE" DEVICE
00900		POP	P,LOKNAM	;TO OUTPUT DEVICE
01000		POPJ	P,		;JUST SET PROCESSOR=LOADER
01100	
01200	GETPR1:	MOVEI T3,NPROCS+1	;SET UP LOOK OF EXTENSION POINTER
01300	NFIL:	MOVE T2,SVNAM(T1)	;SET UP NAME AND PPN
01400		MOVEM T2,LNAM
01500		HLLZ T2,SVEXT(T1)
01600	NXEXT:	MOVEM T2,LEXT	;START WITH ORIGINAL EXT
01700		MOVEM T2,OLDEXT	;SAVE FOR RAS SYSTEM
01800		MOVE T2,SVPPN(T1)
01900	IFN SFDSW,<SKIPN SVSFD(T1)	;ANY SFD'S?
02000		JRST	NXSFD		;NO
02100		MOVEM	T2,LSFDPP	;SAVE PPN
02200	X==<Y==0>			;INITIAL CONDITION
02300	REPEAT SFDLEN,<	MOVE	T2,SVSFD+X(T1)
02400		MOVEM	T2,LSFD+Y
02500	X==X+NFILE
02600	Y==Y+1>
02700		MOVEI	T2,LSFDAD	;POINTER
02800	NXSFD:	>			;END OF IFN SFDSW
02900		MOVEM T2,LPPN
03000		SKIPN T2,SVDEV(T1)	;A DEVICE?
03100		SKIPE T2,LOKNAM	;OR SAVING ONE UP
03200		JRST ALTDEV
03300	OKLOOK:	LOOKUP LOOK,LNAM
03400		  JRST NOTYET	;HAVE NOT FOUND IT YET
03500	DNLOK:	HLLZ T2,LEXT	;GET THE EXTENSION
03600		CAME T2,OLDEXT	;WAS IT WHAT WE ASKED FOR
03700		JRST NOTYET	;TREAT AS IF LOOKUP FAILED
03800		MOVEM T2,SVEXT(T1)	;SAVE EXT (WILL HELP <> CODE)
03900	IFN TENEX,<
04000		PUSHJ P,GDTLOK		;GET DATE AND TIME OF LOOK CHAN
04100		  JRST DNLOK1		;NOT IMPL OR NOT DSK
04200		HLRZ T2,LDAT		;DO THE COMPARES
04300		CAMLE T2,SDAT
04400		JRST [	MOVEM T2,SDAT
04500			HRRZ T2,LDAT	;GET TIME
04600			JRST SETTM]	;STORE IT
04700		CAME T2,SDAT
04800		JRST OLDAT
04900		HRRZ T2,LDAT
05000		CAMLE T2,STIM
05100		JRST SETTM
05200		JRST OLDAT
05300	>
05400	DNLOK1:	LDB T2,[POINT 12,LDAT,35]	;GET DATE
05500		CAMLE T2,SDAT	;AND CHECK TO SEE IF LATEST
05600		JRST SETDT
05700		CAME T2,SDAT
05800		JRST OLDAT
05900		LDB T2,[POINT 11,LDAT,23]
06000		CAMLE T2,STIM
06100	SETTM:	MOVEM T2,STIM	;MARK WITH LATER ONE
06200	OLDAT:	HLLZ T2,LEXT	;GET THE EXTENSION WE FOUND
06300		JUMPE T2,SETCP	;SET TO CURRENT PROCESSOR
06400		MOVSI T3,-<NPROCS+1>	;LOOK AT EXTENSION TO FIND PROCESSOR
06500		CAMN	T2,F4		;TEST FOR ALT FORTRAN EXT
06600		JRST	[HRROI	T3,^L<FORSW>-21	;FAKE FORTRAN SEEN
06700			JRST	.+3]		;AND PROCCESS IT
06800		CAME T2,PXTAB(T3)
06900		AOBJN T3,.-1
07000	IFE BLISS,<JUMPGE T3,SETCP	;NOT THERE>
07100	IFN BLISS,<JUMPL T3,.+4		;JUMP IF FOUND SOMETHING
07200		CAME	T2,B10		;IS IT ALTERNATIVE BLISS EXT
07300		JRST	SETCP		;NO
07400		HRROI	T3,CHNBLI+1	;YES, SET FOR BLISS>
07500		TLNE FL2,@ISPTAB(T3)	;IS THAT ONE ALREADY SET?
07600		JRST NFIL2
07700		TLNE FL2,ALPROC	;IS ANY SET?
07800		JRST FIXCON	;YES, WE MAY HAVE A CONFLICT
07900		TLO FL2,@ISPTAB(T3)	;SET UP FOR THIS ONE
08000	NFIL2:	CAME T1,SVPT	;ARE WE DONE?
08100	NFIL1:	AOBJN T1,GETPR1	;NO, GO ON
08200		POPJ P,
     

00100		;THERE IS NO CONFLICT IF THIS IS A REL FILE
00200	
00300	FIXCON:	MOVE	T2,ONAM
00400		CAMN	T2,LNAM
00500		TRNE	T3,-1		;IF NOT OUTPUT REL FILE
00600		JRST	PROCON		;THEN WE HAVE A CONFLICT
00700	FIX1:	SETOM	SDAT		;FORCE USE OF REL FILE
00800		POPJ	P,		;AND RETURN TO SETUP
00900	
01000	SETDT:	MOVEM T2,SDAT
01100		LDB T2,[POINT 11,LDAT,23]	;AND TIME
01200		JRST SETTM
01300	
01400	SETCP:	CAME T1,SVPT	;AT END?
01500		JRST NFIL1	;NO, DO NOT SET
01600		TLNN FL2,ALPROC	;SOMETHING ALREDY SET?
01700		HRL FL2,FL2	;NO, SET TO CURRENT PROCESSOR
01800		POPJ P,		;AND DONE
01900	
02000	NOTYET:	MOVE T2,SVEXT(T1)	;GET THE CURRENT EXT
02100		JUMPN T2,OKREL	;IF HE SPECIFIED AN EXT WE LOSE
02200		TLZE	T3,-1		;WAS THIS A RETRY WITH ALT EXT?
02300		JRST	NOTYT1		;YES, ONLY DO IT ONCE
02400		CAIN	T3,CHNFOR+1	;FORTRAN USES EITHER .FOR OR .F4
02500		MOVE	T2,F4		;SO TRY OTHER
02600		CAIN	T3,CHNBLI+1	;BLISS USES .BLI OR .B10
02700		MOVE	T2,B10		;TRY OTHER
02800		JUMPE	T2,NOTYT1	;NO SUCH LUCK
02900		TLO	T3,-1		;MARK IT SO WE DONT LOOP
03000		JRST	NXEXT		;AND TRY AGAIN
03100	
03200	NOTYT1:	MOVE T2,PXTAB-1(T3)	;ELSE PICK UP ONE
03300		SOJGE T3,NXEXT
03400		HLLZ T2,SVEXT(T1)	;GET THE ORIGINAL EXT
03500		MOVEM T2,LEXT
03600		JRST NOFIL	;ARE OUT OF THINGS TO TRY
03700	
03800		;MAKE IT OKAY IF THE OUTPUT REL FILE IS THERE
03900	
04000	OKREL:	TRNN	FL,DOLOD	;IF NOT JUST COMPILING
04100		JRST	LOSE1		;THEN
04200		MOVE	T3,LNAM		;PROTECT CURRENT NAME
04300		MOVE	T1,ONAM		;TRY LOOKING UP
04400		MOVEM	T1,LNAM		;OUTPUT FILE
04500		SKIPN	T1,OEXT		;USUNG EXTENSION
04600		MOVSI	T1,'REL'	;IF GIVEN
04700		MOVEM	T1,LEXT		;AND TRYING SVPPN
04800		MOVE	T1,SVPPN
04900	OKREL1:	MOVEM	T1,LPPN
05000		LOOKUP	LOOK,LNAM
05100		  JRST	.+2
05200		JRST	FIX1		;FOUND SO NO COMPIL
05300		JUMPE	T1,LOSE		;IF THIS WASN'T OUR PPN
05400		SETZ	T1,		;THEN TRY IT NOW
05500		JRST	OKREL1
05600	
05700	LOSE:	MOVEM	T3,LNAM		;RESTORE FILE NAME FOR ERROR MESSAGE
05800	LOSE1:	MOVEM	T2,LEXT		;RESTORE EXTENSION
05900		JRST	NOFIL		;OUT OF THINGS TO TRY
     

00100	ALTDEV:	MOVEM T2,LOKNAM	;SAVE FOR LATER
00200		MOVEM T2,SVDEV(T1)	;AND IN DEVICE FOR OUTPUT
00300		DEVCHR T2,	;GET CHARACTERISTICS
00400		TLNE T2,200000	;A DSK?
00500		JRST	ALTDSK	;YES
00600		TLNE T2,4	;A DECTAPE?
00700		JRST	ALTDAT	;YES, 
00800		TRO FL,NODAT	;NO DATES ON OTHER DEVICES
00900		JRST OLDAT	;DON'T BOTHER WITH LOOKUP
01000	
01100	ALTDSK:	MOVSI 	T2,'DSK'
01200		CAMN	T2,LOKNAM	;LOGICAL NAME?
01300		JRST	OKLOOK	;NO, STILL DSK
01400	ALTDAT:	TRZ FL,NOLOOK	;NOT FAILED YET
01500		OPEN LOOK,LOKINT	;OPEN FOR INPUT
01600		  JRST DEVNA	;NOT THERE
01700		LOOKUP LOOK,LNAM	;SEE IF FILE IS
01800		  TRO FL,NOLOOK	;NO
01900		OPEN LOOK,DSKLK	;GET THE DSK BACK
02000		JRST DSKNA	;I HOPE THIS NEVER HAPPENES
02100		TRZE FL,NOLOOK	;SEE IF FAILED
02200		JRST NOTYET	;IT DID
02300		TLNN	T2,4	;DECTAPE?
02400		JRST DNLOK	;NO, BUT LOOKUP HAPPENED
02500		HLRZ	T2,LEXT	;GET EXTENSION LOOKED UP
02600		CAIE	T2,'REL'
02700		AOS	LDAT	;IF SOURCE FILE MAKE IT MIDNIGHT TONIGHT
02800		JRST	DNLOK	;AND CONTINUE
02900	
03000	IFE STANSW,<
03100	OUTPPN:	HRRZM T2,SAVPPN	;CONVERT TO SIXBIT FOR OUTPUT
03200		MOVEI T1,"["	;START OUT
03300		PUSHJ P,TMPOUT
03400		HLRZ T1,T2	;GET NUMBER
03500		JUMPE	T1,.+2	;JUST COMMA IF ZERO
03600		PUSHJ P,OUTOCT
03700		MOVEI T1,","
03800		PUSHJ P,TMPOUT
03900		SKIPE T1,SAVPPN
04000		PUSHJ P,OUTOCT
04100	IFN SFDSW,<SKIPE SVSFD(SVPT)	;AN SFD SEEN?
04200		PUSHJ	P,OUTSFD	;YES>
04300		MOVEI T1,"]"
04400		JRST TMPOUT
04500	
04600	OUTOCT:	IDIVI T1,10	;OCTAL OUTPUT
04700		HRLM T2,(P)
04800		SKIPE T1
04900		PUSHJ P,OUTOCT
05000		HLRZ T1,(P)
05100		ADDI T1,"0"
05200		PJRST TMPOUT
05300	>
     

00100	SUBTTL	OUTPUT ROUTINES
00200	
00300	OUTSIX:	MOVEI T1,0
00400		LSHC T1,6
00500		ADDI T1,40
00600		PUSHJ P,TMPOUT
00700		JUMPN T2,OUTSIX
00800	CPOPJ:	POPJ P,
00900	
01000	OUTSPC:	MOVEI	T1," "
01100		PJRST	TMPOUT
01200	
01300	IFN STANSW,<
01400	OUTPPN:	MOVEM T1,SAVPPN	;SAVE IT AWAY
01500		ANDCMI T2,-1
01600		MOVEI T1,"["
01700		PUSHJ P,TMPOUT
01800		PUSHJ P,OUTSIX	;PRINT IT
01900		MOVEI T1,","	;AND A COMMA
02000		PUSHJ P,TMPOUT
02100		HRLZ T2,SVPPN
02200		PUSHJ P,OUTSIX
02300		MOVEI T1,"]"
02400		JRST TMPOUT
02500	>
02600	
     

00100	OUTSW:	MOVEM T2,SVSWP	;SAVE THE POINTER
00200		ILDB T1,T2	;PICK UP THE FIRST CHR
00300		JUMPE T1,CPOPJ	;AND CHECK FOR NULL AS A PRECAUTION
00400		TRNE	FL,LINKFL	;LINK-10?
00500		JRST	OUTSW2		;YES, SPECIAL
00600		CAIN	T3,CHNFOR	;OR FORTRAN-10
00700		TLNN	FL,F10SW
00800		CAIA			;NO
00900		JRST	OUTSW2		;YES, ALSO USES SCAN
01000		MOVEI T1,"("
01100		PUSHJ P,TMPOUT	;SWITCHES ARE IN () TO PROCESSOR
01200	OUTSW1:	ILDB T1,SVSWP
01300		JUMPE T1,LPAR
01400		PUSHJ P,TMPOUT
01500		JRST OUTSW1	;A NULL WILL MARK THE END
01600	LPAR:	MOVEI T1,")"
01700		JRST TMPOUT
01800	
01900	;HERE FOR LINK-10 SWITCHES
02000	;OUTPUT AS /SWITCH:ARG
02100	;SINGLE NULL MARKS END OF SWITCH
02200	;DOUBLE NULL MARKS END OF SET OF SWITCHES
02300	
02400	OUTSW2:	MOVEI	T1,"/"		;LINK-10 WANT A SLASH FIRST
02500		PUSHJ	P,TMPOUT
02600	OUTSW3:	ILDB	T1,SVSWP	;GET NEXT CHAR
02700		JUMPE	T1,OUTSW4	;END OF THIS SWITCH IF NULL
02800		PUSHJ	P,TMPOUT
02900		JRST	OUTSW3		;KEEP GOING
03000	
03100	OUTSW4:	MOVEI	T1," "		;NEED A SPACE
03200		PUSHJ	P,TMPOUT	;INCASE FILE NAME FOLLOWING
03300		MOVE	T2,SVSWP	;GET COPY OF BYTE POINTER
03400		ILDB	T1,T2		;SEE IF END
03500		JUMPN	T1,OUTSW2	;NO, MORE SWITCHES
03600		POPJ	P,		;END
     

00100	SUBTTL	CREF
00200	
00300	ENTCRF:	MOVE T1,CORTOP	;CHECK TO SEE IF NAME ALREADY THERE
00400		MOVE T2,ONAM
00500	ENTC1:	CAMN T1,CORT1
00600		JRST ENTC2
00700		CAMN T2,1(T1)
00800		POPJ P,	;NAME THERE, EXIT
00900		AOJA T1,ENTC1	;CHECK ANOTHERE
01000	ENTC2:	MOVEM T2,@CORTOP	;SAVE IT
01100		SOS T1,CORTOP
01200		CAMG T1,SVJFF	;CHECK TO SEE IF CORE EXCEEDED
01300		PUSHJ P,XPAND
01400		MOVEI T3,CHNCRF
01500		MOVEI T1,"_"
01600		PUSHJ P,TMPOUT
01700		MOVE T2,ONAM
01800		PUSHJ P,OUTSIX
01900		PJRST	OUCRLF
02000	
02100	FINCRF:	MOVSI IOPNT,-2	;PERMIT ONLY THIS ONE LEVEL
02200		TRO FL,INCRF	;SAY WE ARE FINISHING
02300		MOVEM P,SVPDL	;SAVE THE PDL FOR LATER
02400		MOVE T1,[POINT 7,CRFRDR]
02500		MOVEM T1,DINPT
02600	FINC1:	PUSHJ P,SCAN	;GET SOMETHING
02700		TRNN FL,IDF	;IGNORE ALL BUT IDENTIFIERS
02800		JRST FINC1
02900		MOVE T1,ACCUM
03000		MOVEM T1,ONAM	;SET AS NAME
03100		PUSHJ P,ENTCRF	;ENTER IT
03200		JRST FINC1
03300	
03400	DNCRF:	MOVEI	T3,CHNCRF
03500		PUSHJ	P,TMPCHK	;CLOSE OUTPUT
03600		MOVE P,SVPDL	;GET THE ENTERING PDL BACK
03700		TRZ FL,INCRF	;NO LONGER THERE
03800		POPJ P,
     

00100	SUBTTL	FUDGE
00200		CHNFUD==CHNPIP
00300	
00400	SETFUD:	SKIPE	FDGFLG		;ENTER DONE ALREADY?
00500		POPJ	P,		;YES , RETURN
00600		MOVEI	T3,CHNFUD	;USE PIP FOR NOW
00700		PUSHJ	P,SCAN		;LOOK AT NEXT CHAR
00800		CAIE	C,":"		;THERE BETTER BE A NAME
00900		GOTO	SYNERR		;YOU LOSE
01000		AOBJP	SVPT,NESTTD	;MAKE SPACE FOR FIELDS
01100		PUSHJ	P,SCANAM	;GO GET THEM
01200		SKIPE	T2,SVDEV(SVPT)	;A DEVICE?
01300		PUSHJ	P,OUTDEV	;YES
01400		SKIPN	T2,SVNAM(SVPT)	;THERE HAS TO BE A NAME
01500		GOTO	SYNERR		;NOT FOUND
01600		PUSHJ	P,OUTSIX	;OUTPUT IT
01700		SKIPN	T2,SVEXT(SVPT)	;EXTENSION?
01800		MOVSI	T2,'REL'	;USE REL  IF MISSING
01900		PUSHJ	P,OUTEXT
02000		SKIPE T2,SVPPN(SVPT)	;PPN
02100		PUSHJ	P,OUTPPN	;YES
02200		SUB	SVPT,[1,,1]	;BACK AS IT WAS
02300		MOVSI	T2,'/B_'	;FORSE BINARY
02400		PUSHJ	P,OUTSIX
02500		SETOM	FDGFLG		;ONLY DO IT ONCE
02600		PJRST	SCAN		;RETURN VIA SCAN
02700	
02800	ENTFUD:	PUSH	P,T3		;SAVE T3
02900		MOVEI	T3,CHNFUD	;USE PIP TIL FUDGE2 FIXED FOR CCL
03000		MOVEI	T1,","		;SETUP COMMA
03100		SKIPL	FDGFLG		;BUT NOT FIRST TIME THROUGH
03200		PUSHJ	P,TMPOUT	;OUTPUT SEPARATING COMMA
03300		MOVE	T2,ONAM		;GET NAME
03400		PUSHJ	P,OUTSIX	;OUTPUT IT
03500		SKIPN	T2,OEXT		;SPECIFIED EXT?
03600		MOVSI	T2,'REL'	;NO USE DEFAULT
03700		PUSHJ	P,OUTEXT
03800		HRRZS	FDGFLG		;COMMA NEXT TIME
03900		POP	P,T3		;RESTORE T3
04000		POPJ	P,		;RETURN
04100	
04200	DNFUDG:	MOVEI	T3,CHNFUD	;MAKE SURE USING PIP
04300		PUSHJ	P,OUCRLF	;TERMINATE LINE
04400		PUSHJ	P,TMPCHK
04500		SETZM	FDGFLG		;CLEAR FLAG
04600		POPJ	P,		;RETURN
04700	
04800		
     

00100	SUBTTL	TABLES
00200	
00300		XALL
00400	
00500		DEFINE X (A,B,C,D,E,F)<
00600	<SIXBIT /C/>>
00700	
00800	PRCNAM:	PROCESS
00900	DEFINE X (A,B,C,D,E,F)<
01000	SIXBIT /B/>
01100	
01200	PXTAB:	SIXBIT /REL/
01300		PROCESS
01400	IFN BLISS,<
01500	B10:	SIXBIT	/B10/		;ALTERNATIVE BLISS EXT>
01600	F4:	SIXBIT	/F4/
01700	
01800	DEFINE X (A,B,C,D,E,F)<
01900	B'SW>
02000	
02100	ISPTAB:	RELSW
02200		PROCESS
02300	
02400	
02500		DEFINE X (A,B,C,D,E,F)<
02600	IFNB <E>,<SIXBIT /E/>>
02700	INTEXT:	PROCESS
02800	
02900	IFN SPRC,<	DEFINE X (A,B,C,D,E,F)
03000		<D'SW>
03100	NXPC:	PROCESS
03200	
03300	SW==0>
03400	
03500		DEFINE X (A,B,C,D,E,F)<
03600		SIXBIT /F/>
03700	DEBAID:	PROCESS
03800	
03900	DEFINE X (A,B)<
04000	<	SIXBIT	/B/>>
04100	PRCDEV:	DEVICE
04200	
04300		SALL
     

00100	SUBTTL	DIRECT
00200	
00300	IFE DIRSW,<
00400	DODIR:	TROA	FL,PIPF	;SO *.* WILL WORK
00500	DODIR0:	PUSHJ P,GETPP1	;GET PROJ-PROG
00600	DODIR1:	PUSHJ P,SCAN	;FIND OUT IF HE WANTS /L OR /F SWITCH
00700	DODIR2:	TRNN FL,IDF	;WAS IT AN IDENT?
00800		JRST SLSH	;NO, CHECK FOR  "/"
00900		PUSH	P,SVPPN	;IN CASE WE HAVE SEEN PPN ALREADY
01000		PUSHJ P,GETNAM	;GET DEV AND FILE NAME
01100		POP	P,T2	;GET PREVIOUS PPN
01200		JUMPE	T2,.+3	;WASN'T ONE
01300		SKIPN	SVPPN	;SEEN ONE AFTER DEVICE?
01400		MOVEM	T2,SVPPN;NO SO USE ONE BEFORE
01500		CAIE	C,"]"	;SCAN OVER PPN
01600		TRNE	FL,IDF	;LAST THING AN IDENT.?
01700		PUSHJ P,SCAN	;YES, GET NEXT CHAR
01800	SLSH:	CAIE C,"/"
01900		JRST NOSLSH
02000		PUSHJ P,SCAN	;WHICH ONE
02100		TRNN FL,IDF	;MUST SEEN AN IDENTIFIER
02200		JRST	[PUSHJ	P,SCAN	;TRY NEXT (NUL EXT FAILS)
02300			TRNN	FL,IDF	;FOUND IDENT. NOW?
02400			GOTO	SYNERR	;NO, FATAL ERROR
02500			JRST	.+1]	;OK NOW
02600		MOVS T1,ACCUM
02700		CAIN T1,'F  '
02800		JRST SETF
02900		CAIE T1,'L  '
03000		GOTO SYNERR	;DO NOT RECOGNIZE THIS SWITCH
03100		TROA FL,LPTFG	;HE WANTS IT ON THE LINE PRINTER
03200	SETF:	TRO FL,FFLG
03300		JRST DODIR1	;BACK FOR MORE
03400	
03500	
03600	NOSLSH:	CAIN	C,"["	;PROJ-PROG NUMBER
03700		JRST	DODIR0	;YES
03800		MOVE T2,['TTY:/L']
03900		TRNE FL,LPTFG	;ON LINE PRINTER INSTEAD?
04000		HRLI T2,'LPT'	;YES
04100		MOVEI T3,CHNPIP
04200		TRNE FL,FFLG
04300		HRRI T2,':/F'
04400		PUSHJ P,OUTSIX
04500		MOVEI	T1,"_"
04600		PUSHJ	P,TMPOUT
04700	DODIR3:	SKIPE T2,SVDEV	;SEE IF DEVICE SPECIFIED
04800		PUSHJ	P,OUTDEV	;OUTPUT DEVICE AND COLON
04900		PUSHJ	P,OUTNAM	;SEE IF NAME AND EXT  OR PROJ-PROG
05000	OPIP1A:	CAIE	C,","
05100		JRST	OPIP1	;FINISHED
05200		MOVEI	T1,","
05300		PUSHJ	P,TMPOUT
05400		PUSHJ	P,SCAN
05500		CAIN	C,","		;STILL ON COMMA?
05600		JRST	.-2		;YES, GET RID OF IT
05700		PUSHJ	P,GETNAM
05800		JRST	DODIR3
05900		JRST	OPIP1
06000	>
06100	
     

00100	SUBTTL	DELETE
00200	
00300	DODEL:	TRO FL,PIPF	;SET TO ALLOW * AS AN IDENT
00400		PUSHJ P,SCANAM
00500		MOVSI T1,'DSK'
00600		SKIPN SVDEV	;FORCE TO DSK IF NONE
00700		MOVEM T1,SVDEV
00800		JRST DEL2
00900	DEL3:	PUSHJ P,SCANAM
01000	DEL2:	MOVEI T3,CHNPIP
01100		SKIPN T2,SVDEV	;DEVICE?
01200		JRST NODVC
01300		PUSHJ	P,OUCRLF
01400		PUSHJ P,OUTSIX	;DUMP NAME
01500		MOVE T2,[':/D_  ']
01600		PUSHJ P,OUTSIX
01700		JRST DIDDEV
01800	NODVC:	MOVEI T1,","	;IF NO DEV, JUST A ,
01900		PUSHJ P,TMPOUT
02000	DIDDEV:	PUSHJ P,OUTNAM	;WRITE THE NAME
02100		PUSHJ P,SCAN	;SEE IF MORE THERE
02200		CAIN C,","
02300		JRST DEL3	;GO ON
02400		TLNN CS,TERMF	;MAKE SURE THAT LINE ENDS PROPERLY
02500		GOTO SYNERR
02600	OPIP1:	PUSHJ	P,OUCRLF
02700	OPIP2:	PUSHJ	P,TMPCHK	;OUTPUT TMP FILE NOW
02800		MOVSI T1,'PIP'
02900		MOVEM T1,PCNAM	;LOAD THIS ONE
03000		JRST DONE1
     

00100	SUBTTL	RENAME/COPY
00200	
00300	DOCOPY:	MOVEI	T2,9*2000-1	;USE 5K LOW SEG
00400		MOVEM	T2,RUNCOR	;RUN PIP IN 5K+4K FOR COPY
00500		SKIPA	T2,['/X_',,0]	;FOR COPY
00600	DOREN:	MOVSI	T2,'/R_'	;SET FOR RENAME
00700		PUSH	P,T2		;SAVE IT
00800		TRO FL,PIPF	;PERMIT * IN FILES
00900	NXTNAM:	PUSHJ	P,SCAN		;GET A FILE NAME
01000	NXTNM0:	PUSHJ	P,GETNAM
01100		MOVEI	T3,CHNPIP
01200		CAIE	C,"/"		;CHECK FOR SINGLE SWITCH
01300		CAIN	C,"("		;CHECK FOR SWITCHES
01400		JRST	[JFCL		;RETURNS HERE FROM COPYSW
01500			CAIA
01600			PUSHJ	P,COPYSW	;OUTPUT THEM
01700			CAIN	C,"^"		;MIGHT ALSO HAVE ID?
01800			PUSHJ	P,TAPEID
01900			JRST	NXTNM0]+2	;TRY AGAIN FOR NAME
02000		CAIN	C,"^"		;TAPE ID?
02100		PUSHJ	P,TAPEID	;YES
02200		SKIPN T2,SVDEV	;SEE IF DEVICE SPECIFIED
02300		MOVE T2,LOKNAM	;OR SAVED
02400		MOVEM T2,LOKNAM
02500		JUMPE	T2,.+2	;IF NO NAME SPECIFIED
02600		PUSHJ P,OUTDEV	;PUT IT OUT
02700		PUSHJ P,OUTNAM
02800		CAIE	C,"]"		;ALWAYS GET RID OF SPARE "]"
02900		TRNE	FL,IDF		;DON'T SCAN IF WE ALREADY HAVE IT
03000		PUSHJ P,SCAN
03100		CAIN	C,"^"		;TAPE ID?
03200		PUSHJ	P,TAPEID	;YES
03300		CAIE	C,"<"	;IS IT PROTECTION?
03400		JRST	NXTNM1	;NO
03500		PUSHJ	P,SCAN	;GET NUMBER
03600		PUSHJ	P,SCAN	;AND DELIMITER
03700		CAIE	C,">"	;IT BETTER BE
03800		GOTO	SYNERR	;IT WASN'T
03900		HLRZ	T2,ACCUM;GET 3 NUMBERS
04000		TLO	T2,'<'
04100		LSH	T2,^D12	;SHIFT TO LEFT END
04200		TRO	T2,' > '
04300		PUSHJ	P,OUTSIX
04400		PUSHJ P,SCAN
04500		CAIE	C,"["		;CHECK FOR PROJ-PROG
04600		JRST	NXTNM1		;NO
04700		PUSHJ	P,GETPP1	;YES, GET IT
04800		SKIPE T2,SVPPN		;IF NON-ZERO
04900		PUSHJ	P,OUTPPN	;PUT IT OUT
05000		PUSHJ	P,SCAN		;GO BEYOND "]"
05100	NXTNM1:	CAIE	C,"/"		;CHECK FOR SINGLE SWITCH
05200		CAIN	C,"("		;CHECK FOR SWITCHES
05300		PUSHJ	P,COPYSW	;AND OUTPUT THEM
05400		CAIN	C,"^"		;TAPE ID?
05500		PUSHJ	P,TAPEID	;YES
05600		MOVE	T2,(P)
05700		CAME	T2,['/X_',,0]	;IS IT COPY?
05800		JRST	NOTCPY		;NO, MUST BE RENAME
05900		MOVS	T1,SVNAM	;GET NAME
06000		JUMPE	T1,NOTCPY	;ZERO FILE NAME NEEDS /X
06100		CAIN	T1,'*  '	;WILD CARD?
06200		JRST	NOTCPY		;YES, USE /X
06300		TLC	T1,'?  '	;STUPID TEST FOR ? IN FILE NAME
06400		TLCN	T1,'?  '
06500		JRST	NOTCPY		;WELL WE FOUND ONE, USE /X
06600		LSH	T1,6		;SHIFT LEFT
06700		JUMPN	T1,.-4		;TRY NEXT CHAR
06800		MOVS	T1,SVEXT	;NO, TRY EXT
06900		CAIN	T1,'*  '	;IS THIS WILD CARD?
07000		JRST	NOTCPY		;YES, /X NEEDED
07100		TLC	T1,'?  '	;SAME TEST FOR EXT
07200		TLCN	T1,'?  '
07300		JRST	NOTCPY		;WELL WE FOUND ONE, USE /X
07400		LSH	T1,6		;SHIFT LEFT
07500		JUMPN	T1,.-4		;TRY NEXT CHAR
07600		MOVSI	T2,'_  '	;NO, SO JUST COPY
07700	NOTCPY:	PUSHJ P,OUTSIX
07800		CAIE C,"="	;= MUST BE THERE
07900		GOTO SYNERR
08000		SETZM	SVPPP		;CLEAR STICKY PPN ON OUTPUT SIDE
08100	COPY1:	PUSHJ P,SCANAM
08200		MOVEI T3,CHNPIP		;RESET
08300		CAIN	C,"^"		;TAPE ID?
08400		PUSHJ	P,TAPEID	;YES
08500		SKIPE	T2,SVDEV	;DEVICE SEEN?
08600		PUSHJ	P,OUTDEV
08700		PUSHJ P,OUTNAM
08800		SETZM	SVPPP		;CLEAR STICK PPN NOW PIP HAS SEEN IT
08900		MOVE	T1,(P)		;GET EITHER /X OR /R
09000		CAMN	T1,['/X_',,0]	;WHICH IS IT?
09100		JRST	COPY2		;IT WAS COPY
09200		PUSHJ P,SCAN	;CHECK FOR MORE
09300	FINCPY:	PUSHJ	P,OUCRLF
09400		CAIN C,","
09500		JRST NXTNAM	;YES
09600		TLNN CS,TERMF	;NO MORE, SEE IF END
09700		GOTO SYNERR
09800		POP	P,T2		;CLEAR STACK
09900		JRST OPIP2
10000	
10100	COPY2:	CAIE	C,"]"		;IF WE FINISHED ON PPN GET RID OF CHAR
10200		TRNE	FL,IDF		;SKIP IF WE ALREADY HAVE NEXT CHAR
10300		PUSHJ	P,SCAN		;GET NEXT CHAR
10400		CAIE	C,"/"
10500		CAIN	C,"("		;FIRST SEE IF ANY SWITCHES
10600		PUSHJ	P,COPYSW	;YES
10700		CAIE	C,","		;MORE COMMAND?
10800		JRST	FINCPY		;NO, GIVE UP
10900		MOVEI	T1,","		;OUTPUT THE COMMA
11000		PUSHJ	P,TMPOUT
11100		JRST	COPY1		;GET NEXT NAME
11200	
11300	
     

00100	SUBTTL	LABEL/TAPE ID
00200	
00300	IDENT:	TRO	FL,PIPF		;WHY NOT, IT IS PIP
00400		PUSHJ	P,SCANAM	;GET DEVICE
00500		MOVEI	T3,CHNPIP	;PIP TMP FILE
00600		SKIPN	T2,SVDEV	;DEVICE SPECIFIED?
00700		GOTO	XPDERR		;NO, ERROR
00800		PUSHJ	P,OUTDEV	;YES, USE IT
00900		SKIPN	T2,SVNAM	;FILENAME = TAPE ID
01000		JRST	[PUSHJ P,TAPEID	;NO, USING DELIMITERS
01100			JRST	IDENT1]	;FINISH OFF ID WITH UP ARROW
01200		MOVEI	T1,"^"		;PIP EXPECTS ^ AS DELIMITER
01300		PUSHJ	P,TMPOUT
01400		PUSHJ	P,OUTSIX	;OUTPUT SIXBIT LABEL
01500		MOVEI	T1,"^"		;AND DELIMITER
01600		PUSHJ	P,TMPOUT
01700	IDENT1:	MOVEI	T1,"="
01800		PUSHJ	P,TMPOUT
01900		PUSHJ	P,OUCRLF	;FINISH LINE
02000		PUSHJ	P,SCAN		;SEE WHATS NEXT
02100		CAIN	C,","		;MORE
02200		JRST	IDENT		;YES
02300		JRST	OPIP2		;NO GIVE UP
02400	
02500	TAPEID:	TRO	FL,INPRNT	;TREAT @ AND ; AS NORMAL CHARS
02600		PUSH	P,C		;SAVE DELIMITER
02700		MOVEI	T1,"^"
02800		PUSHJ	P,TMPOUT
02900	IDENT2:	PUSHJ	P,GETCH
03000		HRRZ	T1,C
03100		CAMN	T1,(P)		;SAME DELIMITER?
03200		JRST	IDENT3		;YES
03300		CAIN	C,177		;EOF ?
03400		GOTO	SYNERR		;YES, GET OUT OF LOOP
03500		PUSHJ	P,TMPOUT	;NO
03600		JRST	IDENT2		;READ MORE
03700	
03800	IDENT3:	TRZ	FL,INPRNT	;@ AND ; ARE SPECIAL AGAIN
03900		SETZM	SAVCHR		;CLEAR "^"
04000		POP	P,T1		;CLEAR STACK
04100		MOVEI	T1,"^"		;AND DELIMITER
04200		PJRST	TMPOUT		;UP ARROW AND RETURN
     

00100	SUBTTL	PRESERVE/PROTECT
00200	
00300	DOPROT:
00400	DOPRES:	MOVE	T2,[12,,16]	;TABLE FOR STANDARD PROTECTION
00500		GETTAB	T2,		;GET IT
00600		  MOVSI	T2,057000	;BETTER THAN NOTHING
00700		TLNN	T2,(7B2)	;TEST FOR ALREADY PRESERVED
00800		TLO	T2,(1B2)	;PRESERVE BIT
00900		MOVEI	T1,'<'		;START WITH OPEN ANGLE
01000		LSH	T1,3		;GET FIRST DIGIT
01100		LSHC	T1,3		;IN AS SIXBIT
01200		ADDI	T1,20
01300		JUMPN	T2,.-3		;FOR ALL OF NUMBER
01400		LSH	T1,^D12		;LEFT JUSTIFY
01500		TRO	T1,'> '		;CLOSE PROTECTION
01600		PUSH	P,T1		;AND SAVE IT
01700		SETZM	LOKNAM		;NO DEVICE YET
01800		MOVEI	T3,CHNPIP	;USE PIP
01900		TRO	FL,PIPF		;SO *.* WILL WORK
02000	PROT1:	PUSHJ	P,SCANAM	;GO GET FILE NAME ETC
02100		CAIN	C,"]"		;DID WE HAVE A PPN?
02200		PUSHJ	P,SCAN		;YES, GET RID OF "]"
02300		SKIPN	T2,SVDEV	;A NEW DEVICE?
02400		SKIPA	T2,LOKNAM	;WELL AN OLD ONE THEN?
02500		MOVEM	T2,LOKNAM	;STORE NEW ONE AS OLD ONE
02600		CAIE	C,"<"		;PROTECTION FIELD?
02700		JRST	.+3		;NO 
02800		SKIPN	SVNAM		;NAME SEEN YET?
02900		JRST	PROT3		;NO, GET DEFAULT PROTECTION
03000		SKIPE	T2,LOKNAM	;DID WE FIND A DEVICE?
03100		PUSHJ	P,OUTDEV	;YES, OUTPUT IT
03200		TRNE	FL,IDF		;DON'T IF WE ALREADY HAVE IT
03300		PUSHJ	P,SCAN
03400		CAIE	C,"<"		;PROTECTION CODE
03500		JRST	PROT2		;NO
03600		PUSHJ	P,GTPROT	;GET PROTECTION IN T2
03700		PUSHJ	P,OUTSIX
03800		PUSHJ	P,SCAN
03900		CAIE	C,"["		;CHECK AGAIN FOR PPN
04000		JRST	PROT4		;NO
04100		PUSHJ	P,GETPP1	;YES, GET IT
04200		PUSHJ	P,SCAN		;PASS OVER "]"
04300		JRST	PROT4		;ALREADY PUT OUT PROTECTION
04400	
04500	PROT2:	MOVE	T2,(P)		;GET DEFAULT PROTECTION
04600		PUSHJ	P,OUTSIX	;USE IT EVEN IF ZERO
04700	PROT4:	MOVSI	T2,'/R_'	;RENAME FOR PIP
04800		PUSHJ	P,OUTSIX
04900		PUSHJ	P,OUTNAM	;NAME.EXT [PPN]
05000		PUSHJ	P,OUCRLF	;END WITH CR-LF
05100		CAIN	C,","		;MORE TO COME
05200		JRST	PROT1		;YES
05300		SUB	P,[1,,1]	;PUT STACK BACK
05400		JRST	OPIP2		;AND EXIT
05500	
05600	GTPROT:	PUSHJ	P,SCAN		;GET NUMBER
05700		PUSHJ	P,SCAN		;AND DELIMITER
05800		CAIE	C,">"		;IT BETTER BE RIGHT ONE
05900		GOTO	SYNERR		;IT WASN'T
06000		HLRZ	T2,ACCUM	;GET 3 NUMBERS
06100		TLO	T2,'<'
06200		LSH	T2,^D12		;SHIFT TO LEFT
06300		TRO	T2,'> '
06400		POPJ	P,		;RETURN WITH PROTECTION IN T2 IN SIXBIT
06500	
06600	PROT3:	PUSHJ	P,GTPROT	;GET PROTECTION
06700		MOVEM	T2,(P)		;SAVE AS NEW DEFAULT
06800		JRST	PROT1		;SCAN AGAIN FOR FILE NAME
     

00100	SUBTTL	EDIT
00200	
00300	DOEDIT:	PUSHJ P,SCAN	;START ON THE FILE NAME
00400	DOEDT1:	PUSHJ P,GETNAM
00500		MOVEI	T3,CHNEDT
00600		MOVEI	T1,"S"		;COMMAND FOR LINED
00700	;CROCK IN TECO DELETES FIRST CHARACTER
00800		TRNN	FL,SOSF		;DON'T GIVE SOS THE S
00900		PUSHJ	P,TMPOUT	;OUTPUT THE S
01000		TRNE	FL,TECOF!SOSF	;IF TECO OR SOS
01100		SKIPN	T2,SVDEV	;AND A DEVICE SEEN
01200		JRST	.+2		;NO, NOT BOTH CONDITIONS
01300		PUSHJ	P,OUTDEV	;OUTPUT THE DEVICE
01400		PUSHJ	P,OUTNAM	;OUTPUT THE NAME & EXT
01500	;THIS CODE PASSES REST OF LINE TO THE EDITOR SO SWITCHES CAN BE USED
01600		TLNE	CS,TERMF	;ALREADY TERMINATED?
01700		JRST	%NOSLS		;YES - HANDLE NORMALLY
01800		CAIE	C,"]"		;GET RID OF "]" IF JUST SEEN PPN
01900		JRST	%GIVE		;PASS REMAINDER OF STRING TO NEXT CUSP
02000	%MORE:	PUSHJ	P,GETCH		;MORE CHARS COMING (MAYBE SWITCHES)
02100		CAIN	C,175		;OLD STYLE ALTMODE?
02200		JRST	DOEDT3		;YES
02300		CAIN	C,176		;ANOTHER OLD ALTMODE?
02400		JRST	DOEDT3		;YES
02500		CAIN	C,33		;A SHINY NEW ESCAPE CHARACTER?
02600		JRST	DOEDT3		;YES - IT IS THE NEW STYLE ALTMODE
02700		TLNE	CS,TERMF	;SOME OTHER KIND OF TERMINATOR?
02800		JRST	%NOSLS		;YES - FINISH UP NORMALLY
02900	%GIVE:	MOVE	T1,C		;PASS THE CHARACTER TO THE EDITOR
03000		PUSHJ	P,TMPOUT	;LEAVE ERROR DETECTION TO THE EDITOR
03100		JRST	%MORE		;GO BACK FOR ANOTHER CHAR
03200	%NOSLS:	TRNE	FL,CREATF	;EDIT OR CREATE?
03300		JRST	DOEDT3		;CREATE (OR MAKE)
03400		PUSHJ	P,OUCRLF	;EDIT (OR TECO) - OUTPUT CRLF
03500	DOEDT2:	PUSHJ	P,TMPCHK
03600		MOVE	T1,[EXP	EDITOR]
03700		TRNE	FL,SOSF		;SOS?
03800		MOVSI	T1,'SOS'	;YES
03900		TRNE	FL,TECOF
04000		JRST	ISTECO		;TECO OR MAKE COMMAND
04100	ENDED:	MOVEM	T1,PCNAM
04200		JRST	DONE	;GO GET IT LOADED
04300	
04400	DOEDT3:	MOVEI	T1,175		;OLD ALTMODE
04500		PUSHJ	P,TMPOUT	;ENDS CREATE OR MAKE COMMAND
04600		JRST	DOEDT2
04700	
04800	ISTECO:	MOVE	14,SVNAM	;EDITING THIS PROGRAM
04900		TRNE	FL,CREATF	;CHECK FOR MAKE COMMAND
05000		CAME	14,[SIXBIT /LOVE/]	;WITH ARGUMENT OF LOVE
05100		JRST	ISTEC1		;NO SUCH HACK
05200		SKIPE	SVEXT		;BUT ONLY IF EXT IS BLANK
05300		JRST	ISTEC1		;NO SUCH LUCK
05400		MOVEI	T2,2		;YES. PAUSE THOUGHTFULLY
05500		CALLI	T2,31		;BY SLEEPING
05600		STRING [ASCIZ /not WAR?
05700	/]
05800	ISTEC1:	MOVE	T1,[SIXBIT /TECO/]	;NAME OF CUSP
05900		JRST	ENDED
06000	
06100	;NOTE: LEAVE THE ABOVE HACK IN FOR SALES DEMOS
     

00100	SUBTTL	TYPE/LIST
00200	
00300	IFE LSTRSW,<
00400	CHNLST==CHNPIP		;USE PIP FOR A LISTER
00500	>
00600	
00700	TYPR:	SKIPA T2,['TTY:/T']
00800	LISTR:	MOVE T2,['LPT:/X']
00900		MOVEI T3,CHNLST
01000		PUSHJ P,OUTSIX
01100		MOVEI	T1,"_"
01200		PUSHJ	P,TMPOUT	;DON'T FORGET "_"
01300	IFE LSTRSW,<TRO	FL,PIPF>	;IF IT'S PIP, ALLOW *.MAC, ETC.
01400	LSTLP:	PUSHJ P,SCANAM	;GET NAME
01500		SKIPN T2,SVDEV
01600		JRST	LSTLP1	;USE PREV NAME IF NO NEW NAME
01700		PUSHJ P,OUTDEV	;OUTPUT IT
01800	LSTLP1:	PUSHJ P,OUTNAM	;FILE NAME
01900		PUSHJ P,SCAN
02000	IFE LSTRSW,<
02100		CAIE	C,"/"
02200		CAIN	C,"("		;SWITCHES?
02300		PUSHJ	P,COPYSW	;YES, OUTPUT THEM>
02400	IFN LSTRSW,<
02500		CAIE C,"("	;PAGE SPEC?
02600		JRST ENDLST	;NO
02700		MOVEI T1,"("	;OUTPUT THE ( TO FILE
02800		PUSHJ P,TMPOUT
02900	LST1:	PUSHJ P,GETCH	;COPY PAGE SPEC
03000		MOVE T1,C	;TO OUTPUT AC
03100		PUSHJ P,TMPOUT	;THENCE TO FILE
03200		CAIE C,")"	;THROUGH END OF ARG
03300		JRST LST1	;MORE
03400		PUSHJ P,SCAN	;NOW WHAT?
03500	>
03600	ENDLST:	CAIN C,","	;SHOULD BE COMMA OR CR
03700		JRST [MOVEI T1,","
03800			PUSHJ P,TMPOUT
03900			JRST LSTLP]
04000		TLNN CS,TERMF	;SHOULD BE TERMINATOR
04100		GOTO SYNERR	;WASNT
04200	IFE LSTRSW,<JRST OPIP1>
04300	IFN LSTRSW,<PUSHJ P,OUCRLF	;ADD CRLF TO COMMAND
04400		PUSHJ	P,TMPCHK	;OUTPUT THE FILE
04500		MOVE T1,[SIXBIT /LISTER/]
04600		MOVEM T1,PCNAM
04700		JRST DONE1>
04800	
     

00100	SUBTTL	TAPE FUNCTIONS
00200	
00300	DOEOF:	SKIPA	T2,['(MF)_ ']
00400	DOZERO:	MOVSI	T2,'/Z_'
00500		TRO	FL,PIPF		;INCASE *.*
00600		PUSH	P,T2		;SAVE COMMAND
00700		MOVEI	T3,CHNPIP	;OUTPUT CHANNEL
00800	TAPEF:	PUSHJ	P,SCANAM	;GO GET DEVICE ETC
00900		MOVS	T2,(P)		;GET CODE FROM PDL
01000		CAIN	T2,'/Z_'	;TEST FOR .ZERO
01100		SKIPE	SVDEV		;TEST FOR EXPLICIT DEVICE
01200		SKIP	1		; OK IF NOT .ZERO OR IF DEVICE GIVEN
01300		GOTO	XPDERR		;".ZERO <CR>" IS AN ERROR
01400		SKIPE	T2,SVDEV	;WAS DEVICE SPECIFIED?
01500		PUSHJ	P,OUTDEV	;YES, OUTPUT IT
01600		PUSHJ	P,OUTNAM	;FILENAME AND PPN
01700		MOVE	T2,(P)		;GET TAPE FUNCTION
01800		PUSHJ	P,OUTSIX
01900		PUSHJ	P,OUCRLF	;FINISH LINE
02000		CAIE	C,","		;MORE COMMAND?
02100		JRST	OPIP2		;NO, EXIT
02200		TRNE	FL,IDF		;MORE THAN JUST DEVICE?
02300		PUSHJ	P,SCAN		;YES, PASS OVER COMMA
02400		JRST	TAPEF		;YES
02500	
02600	DOSKIP:	TDZA	T2,T2		;SIGNAL FORWARDS BY 0
02700	DOBKSP:	SETO	T2,		;BACKWARDS BY -1
02800		PUSH	P,T2		;STORE IT
02900		PUSH	P,[0]		;AND COUNT
03000		TRO	FL,PIPF		;JUST INCASE
03100	TAPESP:	MOVEI	T3,CHNPIP	;USE PIP
03200		PUSHJ	P,SCANAM	;GO GET SOMETHING
03300		SKIPE	T2,SVDEV	;FIND A DEVICE?
03400		PUSHJ	P,OUTDEV	;YES
03500		SKIPN	T2,SVNAM	;FIND SOMETHING IN FILE NAME?
03600		GOTO	SYNERR		;MUST FIND SOMETHING
03700		SETO	T1,		;FIND THE MASK
03800		LSH	T1,-6		;MUST BE AT LEAST ONE CHAR. ANYWAY
03900		TDNE	T2,T1		;DON'T MASK REAL CHAR.
04000		JRST	.-2		;SHIFT AND TRY AGAIN
04100		SETZ	T4,		;START AT FRONT OF TABLE
04200	TPSRCH:	MOVE	T3,TPTBL(T4)	;GET FUNCTION
04300		ANDCM	T3,T1		;MASK IT
04400		CAMN	T2,T3		;FOUND IT?
04500		JRST	TPFND		;YES
04600		CAIGE	T4,TPLEN	;STILL IN TABLE
04700		AOJA	T4,TPSRCH	;YES, TRY NEXT
04800		TLNE	T2,(1B0)	;IS IT A NUMBER?
04900		GOTO	SYNERR		;NO
05000		MOVEM	T2,(P)		;REPLACE DUMMY COUNT
05100		JRST	TAPESP
05200	
05300	
     

00100	TPFND:	MOVEI	T3,CHNPIP	;RESTORE PIP
00200		MOVSI	T2,'(M '	;START OF SWITCH
00300		SKIPE	(P)		;NUMBER SPECIFIED
00400		TLO	T2,'  #'	;YES
00500		PUSHJ	P,OUTSIX	;OUTPUT IT
00600		POP	P,T2		;GET NUMBER
00700		SKIPE	T2		;DON'T BOTHER IF ZERO
00800		PUSHJ	P,OUTSIX
00900		MOVE	T2,TPFN(T4)	;PICK UP PIP CHAR
01000		SKIPE	(P)		;IF FORWARDS
01100		MOVSS	T2		;NO, BACKSPACE
01200		HLLZS	T2		;CLEAR RIGHT
01300		PUSHJ	P,OUTSIX
01400		PUSHJ	P,OUCRLF	;FINISH WITH CRLF
01500		CAIE	C,","		;MORE TO COME
01600		JRST	OPIP2		;NO, EXIT
01700		PUSHJ	P,SCAN		;PASS OVER COMMA
01800		JRST	DOBKSP+2	;YES, START AGAIN
01900	
02000	TPTBL:	SIXBIT	/FILES/
02100		SIXBIT	/RECORD/
02200		SIXBIT	/EOT/
02300	TPLEN==.-TPTBL
02400	
02500	TPFN:	'A)_',,'B)_'
02600		'D)_',,'P)_'
02700		'T)_',,'T)_'
02800	
     

     

00100	DOREW:	SKIPA	T2,[1]
00200	DOUNLD:	MOVEI	T2,11
00300		TRO	FL,PIPF
00400		PUSH	P,T2		;SAVE FUNCTION
00500	DOMTP:	PUSHJ	P,SCANAM	;GET A DEVICE ETC
00600	DOMTP0:	SKIPN	T1,SVDEV	;GET THE DEVICE
00700		JRST	NOMTPD		;NO DEV: SEEN
00800	DOMTP1:	MOVEM	T1,LOKNAM	;STORE IN LOOKUP BLOCK
00900		OPEN	LOOK,LOKINT	;INIT
01000		  JRST	DODVNA		;NO SUCH DEVICE
01100		MTAPE	LOOK,0		;WAIT ON FREE DEVICE
01200		MTAPE	LOOK,@(P)	;DO FUNCTION
01300		RELEASE	LOOK,		; AND FREE UP THE DRIVE
01400	DOMTPC:	CAIE	C,","		;MORE TO DO?
01500		EXIT	1,		;NO
01600		TRNE	FL,IDF		;UNLESS DONE ALREADY
01700		PUSHJ	P,SCAN		;PASS OVER THE COMMA
01800		JRST	DOMTP		;GET NEXT
01900	
02000	NOMTPD:	SKIPN	T1,SVNAM	;DID WE SEE A FILE NAME?
02100		GOTO	SYNERR	;NO, U LOSE
02200		CAIN	C,","		;IF A COMMA WE'RE AT END OF THIS SPEC
02300		JRST	DOMTP1		;SO USE "FILE NAME" AS DEVICE
02400		PUSH	P,T1		;SAVE IT
02500		SETZM	SVNAM		;CLEAR NAME
02600		PUSHJ	P,SCANAM	;SEE IF MORE SPECIFIED
02700		POP	P,T1		;RECOVE PREV NAME
02800		SKIPE	SVDEV		;FOUND A DEV AT LAST?
02900		JRST	DOMTP0		;YES, USE IT
03000		SKIPE	SVNAM		;BUT NOT 2 NAMES
03100		GOTO	SYNERR
03200		JRST	DOMTP1		;USE SINGLE "FILE NAME"
03300	DODVNA:	STRING	[ASCIZ /?Device not available - /]
03400		MOVE	T3,LOKNAM
03500		MOVE	T1,[POINT 7,ERRBUF]
03600		PUSHJ	P,SIXOUT
03700		MOVEI	T2,":"
03800		IDPB	T2,T1
03900		MOVEI	T2,15
04000		IDPB	T2,T1
04100		MOVEI	T2,12
04200		IDPB	T2,T1
04300		MOVEI	T2,0
04400		IDPB	T2,T1
04500		STRING	ERRBUF
04600		JRST	DOMTPC		;SEE IF MORE TO DO
04700	
     

00100	SUBTTL	OUTPUT ROUTINES
00200	
00300	OUTDEV:	PUSHJ	P,OUTSIX	;OUTPUT DEVICE
00400		MOVEI	T1,":"		;AND A COLON
00500		PJRST	TMPOUT		;RETURN TO USER
00600	
00700	OUTNAM:	SKIPN	T2,SVPPP	;STICKY PPN?
00800		JRST	OUTNM1		;NO
00900	IFN SFDSW,<PUSH	P,SVPPN	;SAVE 
01000		SETZM	SVPPN		;MARKER FOR OUTSFD/OUTSFP>
01100		PUSHJ	P,OUTPPN	;OUTPUT [DIRECTORY]
01200	IFE SFDSW,<MOVE T2,SVPPP
01300		CAMN	T2,SVPPN	;SAME AS NON-STICKY?>
01400	IFN SFDSW,<POP	P,SVPPN		;RESTORE
01500		PUSHJ	P,CHKSFD	;SEE IF WHOLE SFD SAME>
01600		  SETZM	SVPPN		;YES, PIP CAN HANDLE IT OK
01700	OUTNM1:	SKIPN T2,SVNAM
01800		JRST OUTPP
01900		PUSHJ P,OUTSIX
02000		SKIPE T2,SVEXT
02100		PUSHJ P,OUTEXT
02200	OUTPP:	SKIPE	T2,SVPPN	;GET PPN
02300		PJRST	OUTPPN		;OUTPUT IF NON-ZERO
02400		POPJ	P,
02500	
02600	OUTEXT:	MOVEI	T1,"."
02700		PUSHJ	P,TMPOUT
02800		HLLZ	T2,T2		;3 CHAR ONLY
02900		JRST	OUTSIX
03000	
03100	OUCRLF:	MOVEI	T1,15		;CARRIAGE RETURN
03200		PUSHJ	P,TMPOUT		;TO CURRENT OUTPUT FILE
03300		MOVEI	T1,12		;LINE FEED
03400		JRST	TMPOUT		;TO OUTPUT FILE
03500	
03600		PUSHJ	P,GETCH		;COPY THE SWITCH
03700	COPYSW:	CAIN	C,"/"		;SINGLE SWITCH
03800		JRST	COPYS1		;YES
03900		MOVE	T1,C		;TO OUTPUT AC
04000		PUSHJ	P,TMPOUT		;THENCE TO FILE
04100		CAIE	C,")"		;UNTIL END OF SWITCH
04200		JRST	COPYSW-1	;BUT NOT YET
04300	COPYSR:				;BACKUP 3 LOCS INCASE MORE SWITCHES
04400	REPEAT 3,<	SOS	(P)>
04500		JRST	SCAN		;GET NEXT AND RETURN
04600	
04700	COPYS1:	MOVE	T1,C		;GET "/"
04800		PUSHJ	P,TMPOUT	;OUTPUT IT
04900		PUSHJ	P,GETCH		;GET NEXT CHAR
05000		MOVE	T1,C
05100		PUSHJ	P,TMPOUT	;OUTPUT SWITCH
05200		JRST	COPYSR		;RETURN
05300	
     

00100	IFN SFDSW,<
00200	OUTSFD:	SKIPN	SVPPN(SVPT)	;STICKY SFD MARKER?
00300		JRST	OUTSFP		;YES
00400		X==0			;INITIAL CONDITION
00500	REPEAT SFDLEN,<	SKIPE	T2,SVSFD+X(SVPT)
00600		PUSHJ	P,SFDOUT
00700	X==X+NFILE>
00800		POPJ	P,		;RETURN TO PRINT "]"
00900	
01000	OUTSFP:	X==0			;INITIAL CONDITION
01100	REPEAT SFDLEN,<	SKIPE	T2,SVSFP+X
01200		PUSHJ	P,SFDOUT
01300	X==X+1>
01400		POPJ	P,		;RETURN TO PRINT "]"
01500	
01600	SFDOUT:	MOVEI	T1,","		;SEPARATOR
01700		PUSHJ	P,TMPOUT		;OUTPUT IT
01800		PJRST	OUTSIX		;FOLLOWED BY SFD
01900	
02000	CHKSFD:	MOVSI	T1,-SFDLEN	;AOBJN POINTER
02100		MOVE	T2,SVPPN
02200		CAME	T2,SVPPP	;CHECK PPN FIRST
02300		JRST	CPOPJ1		;SKIP IF DIF
02400		MOVE	T2,SVSFD(T1)	;GET SFD
02500		CAME	T2,SVSFP(T1)
02600		JRST	CPOPJ1
02700		ADDI	T1,NFILE-1	;LENGTH APPART
02800		AOBJN	T1,.-4		;LOOP FOR ALL SFD'S
02900		POPJ	P,		;NON-SKIP IF IDENTICAL
03000	
03100	>
     

00100	SUBTTL	TMP FILE ROUTINES
00200	
00300	;USEFUL SYMBOLS
00400	TMPFST==0		;POINTER TO FIRST BUFFER
00500	TMPCUR==1		;POINTER TO CURRENT BUFFER
00600	TMPPTR==2		;BYTE POINTER
00700	TMPCNT==3		;BYTE COUNT (LEFT TO FILL)
00800	TMPHDR==4		;SIZE OF BUFFER "HEADER"
00900	
01000	TMPBUF==^D128+2		;SIZE OF DATA BUFFER
01100	TMPIOW==0		;IOWD FOR DUMP MODE
01200	TMPLNK==1		;LINK TO NEXT BLOCK (GOTO WORD)
01300	TMPDAT==2		;FIRST DATA WORD
01400	
01500	
01600	;ENTER WITH OUTPUT BYTE IN T1
01700	;INDEX TO TABLE IN T3
01800	;USES T5 AS ADDRESS OF "BUFFER HEADER"
01900	
01910	TMPOUT:	JUMPL T3,TMOUT1		;HANDLE IF TEMP FILE NON-EXISTANT
02000		SKIPN	T5,TMPCHN(T3)	;ALREADY SET UP "HEADER AND BLOCK"?
02100		PUSHJ	P,TMPINI	;NO, DO SO
02200		SOSG	TMPCNT(T5)	;ANY ROOM
02300		PUSHJ	P,TMPOU1	;NONE LEFT
02400		IDPB	T1,TMPPTR(T5)	;YES, DUMP BYTE
02500	TMOUT1:	POPJ	P,		;AND RETURN
02600	
02700	TMPINI:	PUSH	P,[EXP	TMPRET]	;WHERE TO RETURN TO ON POPJ
02800		PUSH	P,T1		;SAVE T1
02900		PUSH	P,T2		;AND T2
03000		MOVEI	T1,TMPHDR	;LENGTH WE NEED
03100		PUSHJ	P,GETSPC	;GET IT, OR ABORT
03200		HLL	T1,FL3		;GET NEW!OLD!SYS!SELF
03300		TLZ	T1,-1-DEVSWS	;BUT ONLY THOSE
03400		MOVEM	T1,TMPCHN(T3)	;STORE INFO
03500		HRRZ	T5,T1		;AND INTO T5
03600		MOVEI	T1,TMPBUF	;LENGTH OF DATA BLOCK
03700		PUSHJ	P,GETSPC	;GET 1 BLOCK TO START WITH
03800		MOVEM	T1,TMPFST(T5)	;STORE IN HEADER BLOCK
03900		PJRST	TMPOU2		;AND CLEAR BUFFER
04000	TMPRET:	AOS	TMPCNT(T5)	;SET COUNT TO ^D<5*128>
04100		POPJ	P,
04200	
04300	TMPOU1:	PUSH	P,T1		;SAVE T1
04400		PUSH	P,T2		;AND T2
04500		MOVEI	T1,TMPBUF	;LENGTH OF DATA BLOCK
04600		PUSHJ	P,GETSPC	;GET 1 BLOCK
04700		MOVE	T2,TMPCUR(T5)	;LINK THIS TO CURRENT
04800		HRRZM	T1,TMPLNK(T2)
04900	TMPOU2:	MOVEM	T1,TMPCUR(T5)	;STORE IN HEADER BLOCK
05000		HRRZ	T2,T1		;GET ANOTHER COPY
05100		ADDI	T1,TMPDAT	;POINT TO DATA AREA
05200		HRLI	T1,(POINT 7,)	;FORM BYTE POINTER
05300		MOVEM	T1,TMPPTR(T5)	;STORE BYTE POINTER
05400		MOVEI	T1,^D<5*128>-1	;BYTE COUNT
05500		MOVEM	T1,TMPCNT(T5)	;PER BUFFER
05600		HRRZ	T1,T2		;START OF DATA
05700		HRL	T1,T1		;FORM XWD
05800		SETZM	(T1)		;ZERO FIRST WORD
05900		ADDI	T1,1		;FORM BLT WORD
06000		BLT	T1,TMPBUF-1(T2)	;CLEAR ALL BUFFER
06100		POP	P,T2
06200		POP	P,T1
06300		POPJ	P,		;NOW DO STORE BYTE
     

00100	;HERE TO CLOSE THE TMP AREA AND WRITE OUT FILES
00200	
00300	TMPCHK:	SKIPN	T5,TMPCHN(T3)	;THERE BETTER BE ONE
00400		POPJ	P,		;NO, SO GIVE UP
00500		PUSH	P,T1		;SAVE T1 JUST INCASE
00600		PUSH	P,T2		;T2 ALSO
00700		HLLZ	T1,T5		;GET RUN DEV: BITS
00800		JUMPE	T1,.+3		;NO
00900		JFFO	T1,.+1		;GET INDEX
01000		MOVE	T1,PRCDEV(T2)	;GET DEVICE
01100		MOVEM	T1,PCDEV	;SET TO LINK TO IT
01200		MOVE	T1,TMPCUR(T5)	;POINT TO LINK IN LAST BLOCK
01300		ADDI	T1,TMPDAT-1	;POINT TO DATA-1
01400		HRRZM	T1,@TMPCUR(T5)	;STORE START ADDRESS
01500		MOVEI	T1,^D<5*128>+4	;BYTE COUNT INITIALLY (PLUS REMAINDER)
01600		SUB	T1,TMPCNT(T5)	;MINUS WHAT'S LEFT IS WHAT'S USED
01700		IDIVI	T1,5		;GET WORD COUNT
01800		POP	P,T2
01900		MOVN	T1,T1		;NEGATE
02000		HRLM	T1,@TMPCUR(T5)	;IOWD IS SET UP
02100		MOVE	T5,TMPCHN(T3)	;GET POINTER TO HEADER AGAIN
02200		MOVE	T1,TMPFST(T5)	;POINT TO LINK IN FIRST BLOCK
02300		SKIPE	TMPLNK(T1)	;ONLY ONE BLOCK
02400		JRST	TMPDSK		;NO SUCH LUCK, USE DSK
02500		HLLZ	T1,PROCTB(T3)	;GET NAME
02600		CAMN	T1,['LIN   ']	;IS THIS LINK-10
02700		MOVSI	T1,'LNK'	;BETTER 3 LETTER NAME
02800		MOVEM	T1,TMPFIL	;INTO TMPCOR BLOCK
02900		MOVE	T1,@(T5)	;PICK UP SINGLE IOWD
03000		MOVEM	T1,TMPFIL+1	;STORE IT
03100		MOVE	T1,[3,,TMPFIL]	;SET UP FOR WRITE
03200		TMPCOR	T1,		;TRY IT
03300		  JRST	TMPDS2		;YOU LOSE, TRY DSK
03400	TMPXIT:	SETZM	TMPCHN(T3)	;ONLY DO IT ONCE
03500		POP	P,T1
03600		POPJ	P,
03700	
03800	TMPDSK:	MOVE	T5,(T5)		;POINT TO FIRST DATA BLOCK
03900	TMPDS1:	SKIPGE	(T5)		;IOWD SET UP YET?
04000		JRST	TMPDS2		;YES, REACHED END
04100		MOVSI	T1,-^D128	;NO, USE 128 WORD BLOCKS
04200		HRRI	T1,1(T5)	;POINT TO DATA
04300		MOVEM	T1,(T5)		;STORE IOWD
04400		SKIPE	T5,1(T5)	;GET NEXT POINTER
04500		JRST	TMPDS1		;NOT DONE YET
04600	TMPDS2:	HLRZ	T1,PROCTB(T3)	;GET PROCESSOR
04700		CAIN	T1,'LIN'	;CHANGE LINK-10 
04800		MOVEI	T1,'LNK'	;AS THIS IS BETTER
04900		HLL	T1,JOBNAM	;GET JOB NUMBER IN SIXBIT
05000		MOVEM	T1,NAME
05100		MOVE	T1,@TMPCHN(T3)	;MOVE IO LIST POINTER TO
05200		MOVEM	T1,TMPFIL	;A COMMON TEMP CELL
05300		PUSHJ	P,TMPDS0	;USE COMMON ROUTINE, FROM "DONE" TOO
05400		JRST	TMPXIT		;WRAP UP USE OF THIS CHANNEL
05500	
05600	TMPDS0:	MOVSI	T1,'TMP'
05700		MOVEM	T1,NAME+1
05800		SETZM	NAME+2
05900		SETZM	NAME+3
06000	IFE TENEX,<
06100	IFE FASTFS,<
06200		SKIPN	FSNAME		;DO WE HAVE FASTEST F/S
06300		PUSHJ	P,FNDFST	;NO, GET IT>
06400		MOVEI	T1,16		;DUMP RECORD
06500		MOVEM	T1,FSINIT
06600		SETZM	FSBHD		;CLEAR BUFFER HEADER
06700		OPEN	LOOK,FSINIT	;INIT THE F/S
06800		  EXIT			;ERROR
06900		ENTER	LOOK,NAME
07000		  JRST	FIU		;ERROR
07100		MOVE	T1,@TMPCHN(T3)	;GET ADDRESS OF IOWD LIST
07200		OUTPUT	LOOK,(T1)	;OUTPUT THE DATA
07300		CLOSE	LOOK,20		;SAVE THE NAME BLOCKS
07400	>
07500	IFN TENEX,<
07600		PUSH P,T3		;SAVE THE CHANNEL NUMBER
07700		MOVE T4,[POINT 7,GJFNST];WHERE NAME WILL GO
07800		MOVE T2,NAME		;JOB NUMBER AND PROCESSOR
07900		MOVEI T1,0		;CLEAR AC FOR ASCII CHAR
08000		LSHC T1,6		;PUT A SIXBIT CHAR IN IT
08100		ADDI T1,40		;MAKE ASCII
08200		IDPB T1,T4		;TO NAME
08300		JUMPN T2,.-4		;BUILD 6 CHARS OF NAME
08400		MOVE T1,T4		;APPEND FOLLOWING STRING TO IT
08500		HRROI T2,[ASCIZ /.TMP;0/]
08600		MOVEI T3,0
08700		SOUT
08800		POP P,T3		;RECOVER CHANNEL NUMBER
08900		MOVSI T1,401001		;OUTPUT SHORT STRING IGNR DEL
09000		HRROI T2,GJFNST		;STRING STORAGE
09100		GTJFN
09200		  JRST FIU
09300		PUSH P,T1		;SAVE THE JFN
09400		MOVE T2,[440000,,100000];WRITE 36 BIT MODE
09500		OPENF
09600		  JRST	[POP P,T1
09700			CLOSF
09800			  JFCL
09900			JRST FIU]
10000		MOVE T1,(P)		;JFN
10100		MOVEM T3,(P)		;CHANNEL INDEX
10200		MOVEI T4,TMPFIL		;GET INITIAL IO LIST POINTER
10300		MOVE T2,[1,,1]		;UNDELETE THE FILE
10400		MOVEI T3,T3		;GET CONTROL BITS
10500		GTFDB			; ..
10600		HRLI T1,1		;CHANGE WORD 1
10700		MOVSI T2,(1B3)		;THIS BIT
10800		TLZ T3,(1B3)		;TO THIS VALUE (0)
10900		CHFDB
11000		HRRZS T1		;GET JFN BACK
11100	TMPDSL:	SKIPN T2,(T4)		;END?
11200		JRST TMPDS3		;YES
11300		JUMPG T2,[HRRZ T4,T2	;NO. IF PLUS, A JUMP WORD
11400			  JRST TMPDSL]	;GO TO IT
11500		HLRE T3,T2		;NEGATIVE COUNT
11600		HRLI T2,4400		;BYTE POINTER WILL COUNT TO FIRST WD
11700		SOUT			;SEND IT
11800		AOJA T4,TMPDSL		;LOOP THRU IO LIST
11900	
12000	TMPDS3:	POP P,T3		;RESTORE CHANNEL NUMBER
12100		CLOSF			;CLOSE FILE IN T1
12200		  JFCL
12300	U (GJFNST,4)		;FOR JFN STRING STORAGE
12400	>
12500		POPJ	P,0		;END OF TMPDS0 ROUTINE
12600	
12700	
12800	;HERE TO GET SPACE FROM FREE CORE, ENTER WITH T1 CONTAINING
12900	; SPACE REQUIRED, EXIT WITH ADDRESS IN T1
13000	
13100	GETSPC:	ADD	T1,SVJFF	;GET ADDRESS OF NEXT FREE WORD
13200		CAMGE	T1,CORTOP	;ENOUGH SPACE?
13300		JRST	GOTSPC		;YES
13400		PUSH	P,T1		;SAVE ACCS
13500		PUSH	P,T2
13600		MOVEI	T1,2000		;INCREMENT BY 1K
13700		ADDM	T1,CORTOP
13800		ADDM	T1,CORT1
13900		ADD	T1,.JBREL	;NEW TOP
14000		CORE	T1,
14100		  JRST	NOCOR		;LOSE
14200		MOVE	T1,.JBREL
14300		MOVE	T2,-2000(T1)	;MOVE CORE UP
14400		MOVEM	T2,(T1)
14500		CAMLE	T1,CORTOP	;DONE?
14600		SOJA	T1,.-3		;NO
14700		POP	P,T2
14800		POP	P,T1
14900	GOTSPC:	MOVEM	T1,.JBFF	;STORE HIGHEST LOC IN USE
15000		EXCH	T1,SVJFF	;AND HERE ALSO
15100		POPJ	P,
15200	
     

00100	SUBTTL	TABLE OF PROCESSOR NAMES
00200	DEFINE X (A,B,C,D,E,F)<
00300	IFDIF <A><MACX11>,<
00400		<SIXBIT /A/>>
00500	IFIDN <A><MACX11>,<
00600		<SIXBIT	/B/>>
00700	>
00800	PROCTB:	PROCESS
00900	REPEAT MXPROC-NPROCS,<0>	;FILL IN MISSING ONES
01000		XPROCESS	;AND THESE
     

00100	SUBTTL	DATA STORAGE ASSIGNMENTS
00200		SALL
00300	WORDS <PCNAM,PCDEV,LODDEV,SAVPPN,SVSWP,PCNUM,OLDEXT,SDAT,STIM,SAVCHR>
00400	WORDS <ACCUM,DINPT,DINCT,SVJFF,CORTOP,CORT1,SVRPP,NUMAT,DFPROC>
00500	WORDS <SVIND,SVPDL,JOBNAM,BROCNT,LODSP2,LODCT2,LODSP,LODCTR>
00600	
00700	U (LODSBK,<LODSCT/5+1>)
00800	U (LODSB2,<LODSCT/5+1>)
00900	
01000	WORDS <SWBKB,SWBKL>
01100	
01200	U (SWBKS,NFILE)
01300	
01400	U (ODEV,1)
01500	U (ONAM,1)
01600	U (OEXT,1)
01700	U (OPPN,1)
01800	IFN SFDSW,<U (OSFD,SFDLEN)>
01900	
02000	U (SVDEV,NFILE)
02100	U (SVNAM,NFILE)
02200	U (SVEXT,NFILE)
02300	U (SVPPN,NFILE)
02400	U (SVPPP,1)
02500	IFN SFDSW,<U (SVSFD,<NFILE*SFDLEN>)
02600	U (SVSFP,SFDLEN)>
02700	
02800	U (TTYPT,1)
02900	U (LOOKBF,3)
03000	U (PDLB,PDL+1)
03100	U (SWBLK,SWBK+1)
03200	U (OPENB,3)
03300	U (IOPD,<<NESTDP+1>*3+1>)
03400	U ERRBUF,22		;FOR TYPEOUTS
03500	U BUFTAB,<NESTDP+1>		;WHERE THE BUFFERS ARE FOR FILES
03600	U FREBUF,<NESTDP+1>		;FREED BUFFERS
03700	U (TMPFIL,2)
03800	U (TMPCHN,<MXPROC+XTPROC>)	;NUMBER OF "CHANNELS" REQUIRED
03900	WORDS	<FSINIT,FSNAME,FSBHD>
04000	WORDS <MAPSW,FDGFLG,DEBFL,EXECFL,DDTFL,FORLIB,RUNCOR,MYPPN,SPDLPT,CPU>
04100	IFN FORTRAN,<U (FORPRC,1)>
     

00100	;THIS IS THE PART THAT MUST BE INITIALIZED IF PURE.
00200	;JUST USED AS IS IF IMPURE
00300	
00400	WORDS <NAME,LEXT,LDAT,LPPN>
00500	LNAM=NAME
00600	IFN SFDSW,<
00700	WORDS <LSFDAD,LSFDSC,LSFDPP>
00800	U (LSFD,SFDLEN)>
00900	IFN PURESW,<
01000	INIDAT:
01100	U (INILOW,0)		;WHERE IT GOES IN THE LOW SEGMENT
01200		PHASE	INILOW>
01300	
01400	LOKINT:	1
01500	LOKNAM:	0
01600		XWD LOOKBF,LOOKBF
01700	DSKLK:	1
01800		SIXBIT /DSK/
01900		XWD LOOKBF,LOOKBF
02000	
02100	FCOMD:	ASCII /@***SVC.TMP
02200	/
02300		BYTE (7) 177,177	;MARK EOF
02400	
02500	FCOMD2:	ASCII /@***EDS.TMP
02600	/
02700		BYTE (7) 177,177
02800	
02900	CRFRDR:	ASCII /@***CRE.TMP/
03000		BYTE (7) 177,177
03100	
03200	IFN PURESW,<
03300		DEPHASE
03400	INITOP==.		;END OF INITIALIZED DATA
03500	INILEN==INITOP-INIDAT	;LENGTH OF DATA
03600	U (INILOW,INILEN)	;BLOCK OF STORAGE FOR DATA
03700	>
03800	U (LOWTOP,0)
03900	IFN DEBSW,<
04000	PATCH:
04100	PAT:	BLOCK	40	;PATCH AREA FOR DEBUGGING>
04200	
04300		END	STPT
04400	>
     

