00100	SUBTTL DIRECT-VIEW-STORAGE-TUBE SECTION
00200	;COMMON ROUTINES FOR DIRECT-VIEW-STORAGE-TUBES.
00300	
00400	
00500	COMMENT $
00600	
00700	A COMPLETE COPY OF ANY CURRENT PICTURES IS KEPT IN CORE.
00800	THUS, WHEN A PORTION OF THE SCREEN CHANGES, AND PIECES
00900	(OR THE WHOLE SCREEN) MUST BE ERASED, THE CORE COPY OF
01000	THE RELEVANT PICTURES CAN BE USED TO RE-PAINT THE DISPLAY.
01100	
01200	A PICTURE MAY BE IN ONE OF SEVERAL STATES:
01300	
01400	
01500	LOGICALLY:  |   POSTED   |   UNPOSTED    |   KILLED
01600	
01700	            |            |               |
01800	PHYSICALLY  |            |               |
01900	------------|------------|---------------|---------------
02000	            |            |               |
02100	PAINTED     |     PP     |     UP        |      KP
02200	            |            |               |
02300	------------|------------|---------------|---------------
02400	            |            |               |
02500	UNPAINTED   |     PU     |     UU        |    (FREE STORAGE)
02600	            |            |               |
02700	------------|------------|---------------|---------------
02800	
02900	
03000	THE FOLLOWING TRANSITIONS ARE MADE:
03100	
03200	1. WHEN A PICTURE IS 'POSTED', IT IS MOVED FROM UP TO PP OR FROM
03300		UU TO PU.  IN EITHER CASE, ITS STATE OF PAINTING ON THE
03400		ACTUAL TUBE REMAINS UNCHANGED.
03500	
03600	2. WHEN A PICTURE IS 'UNPOSTED', IT IS MOVED FROM PP TO UP OR FROM
03700		PU TO UU.  AGAIN, ITS STATE OF PAINTING REMAINS UNCHANGED.
03800	
03900	3. WHEN A PICTURE IS KILLED, IT IS MOVED FROM (PP OR UP) TO KP;
04000		ALTERNATIVELY IT IS MOVED FROM (PU OR UU) TO FREE STORAGE.
04100		NOTICE THAT EVEN THOUGH A PICTURE HAS BEEN KILLED, IT MAY
04200		STILL BE AROUND IN KP. THIS IS BECAUSE A COPY OF IT MAY
04300		BE REQUIRED FOR DOING SELECTIVE ERASURE.
04400	
04500	4. WHEN A PICTURE IS GENERATED, BLOCKS FROM FREE STORAGE ARE CONSUMED
04600		IN ORDER TO GENERATE IT.  WHEN IT IS CLOSED, IT IS ENTERED
04700		INTO THE UU LIST.
04800	
04900	5. AT PAINT TIME, THE FOLLOWING HAPPENS:
05000	
05100		IF UP IS NOT EMPTY OR KP IS NOT EMPTY THEN (
05200			IF SELECTIVE-ERASE & DECIDE-TO-USE-SELECTIVE-ERASE THEN
05300				(SELERASE UP AND KP) ELSE (ERASE WHOLE SCREEN; PAINT PP);
05400			MOVE PICS IN KP TO THE FREE STORAGE LIST.
05450			MOVE PICS IN UP TO UU LIST.
05500		) ELSE IF ANY APPENDS WERE DONE TO PP, PAINT THEM;
05600	
05700		PAINT PU;  PUT ANY PICS IN PU INTO PP.
05800	
05900	
06000		SO, WHEN WE ARE DONE, UP,KP AND PU ARE ALL EMPTY.
06100	
06200	
06300	
06310	
06316	WHEN A PICTURE IS PAINTED, USE IS MADE OF THREE DEVICE-DEPENDENT
06322	ROUTINES: ERASE, INTERP, AND CURSOR.
06328	
06334		ERASE		ERASES WHOLE SCREEN.
06340		INTERP		INTERPRETS INSTRUCTION IN REGISTER A
06346				BEGIN CAREFUL NOT TO CLOBBER REGISTER F.
06352				SKIP-RETURNS IF IT IS A %OHLT
06358		CURSOR		POSITIONS CURSOR WHEN ALL DONE SO
06364				THAT IT IS WHERE THE USER WANTS.
06370	
06376	'CURSOR' WILL ALWAYS BE THE LAST ROUTINE CALLED, AND IT
06382	SHOULD BE CAREFUL TO LEAVE THE TERMINAL IN A MODE IN WHICH
06388	CHARACTERS TYPED IN TO THE SYSTEM WILL BE ECHOED, ETC.
06394	
06400	
06500	
06600	THE FORMAT OF A PICTURE IS VERY SIMPLE:
06700	
06800	THE PICTURE IS POINTED TO BY ITS 'GETCOR' POINTER FOR THE FIRST
06900	BLOCK OF THE PICTURE.  THE LENGTH FIELD SUPPLIED BY GETCOR IS
07000	USED AS THE LENGTH OF THE BLOCK.  THE LINK FIELD THROUGH
07100	%DNEXT (SAME WORD AS LENGTH FIELD) POINTS TO SUBSEQUENT FREE-STORAGE
07200	BLOCKS USED TO MAKE THIS PICTURE.
07300	
07400	THE FIRST THREE WORDS OF THE FIRST BLOCK OF THE PICTURE ARE:
07500	
07600		%DNUM			PICTURE NUMBER
07700		%THREAD			TWO-WAY LINK FOR THE LIST THIS PIC IS ON.
07800		%LIST,,%APPND		%LIST POINTS TO THE HEAD OF THE
07900					LIST THIS PIC IS ON.  %APPND
08000					POINTS TO THE FIRST BLOCK IN THIS PIC
08100					WHERE APPENDING WAS DONE.
08200		%BEG THRU END		FOR CODE FOR THE PICTURE.
08300	
08400	
08500	
08600	CODE WORDS IN THE PICTURE ARE AS FOLLOWS:
08700	
08800	BITS 0-3		4-BIT OP-CODE, WHICH IN PART DETERMINS
08900				HOW THE REMAINING BITS ARE INTERPRETED.
09000	
09100	
09200	%OHLT			HALT.  THERE ARE NO MORE CODE WORDS IN
09300				THIS PARTICULAR BLOCK.
09400	%OMOV			MOVE.  BITS 8-17 ARE X COORD, 26-35 Y.
09500	%ODOT			DOT.   LIKE MOVE, BUT PUT A 'DOT' THERE
09600	%ODRW			DRAW.  BITS 8-17 ARE X COORD, 26-35 Y.
09700	%OTXT			TEXT.  REMAINING 32 BITS ARE 8-BIT BYTES.
09800					ALL 1'S MEANS NULL CHAR.
09900	%OSCL			SCALE FACTOR FOR TEXT.
10000	
11600	A WORD ABOUT COORDINATE SYSTEMS:
11700	
11800	THE COORDINATE SYSTEM FOR EVERY STORAGE TUBE HAS (0,0) IN THE
11900	LOWER LEFT-HAND CORNER OF THE VISIBLE PART OF THE SCREEN.
12000	THE FACTOR 'SMID' IS THEN USED TO SAY HOW MANY RESOLVABLE
12100	POINTS THERE ARE FROM THIS 0,0 POINT TO THE PLACE WHERE THE
12200	'NORMAL VIEWPORT COORDINATE' IS 1.0.  IF THE ORIGIN OF THE
12300	COORDINATE SYSTEM IS REALLY (SAY) IN THE CENTER OF THE
12400	SCREEN, THEN THE OUTPUT ROUTINES (DEVICE-DEPENDENT) ARE
12500	RESPONSIBLE FOR THE CONVERSION.  THE REASONS FOR THIS 0,0
12600	CONVENTION ARE: (1) SIMPLIFIES THE DWIND/DPORT CODE BELOW.
12700	(2) SIMPLIFIES 'PLOTX', WHICH IS EXPECTED TO MAKE PLOT FILES
12800	FROM THESE TUBES, ETC.
12900	$
13000	
13100	
13200	
13300	
13400	
13500	;DATA FOR EVERYONE.
13600	;FIRST THE LIST HEADERS.  THEY MUST MUST MUST BE IN THIS
13700	;ORDER SO THAT THE LIST-TO-LIST TRANSFERS WORK NICELY
13800	
13900		XR (PP)		;POSTED AND PAINTED
14000		XR (PU)		;POSTED AND UNPAINTED
14100		XR (UU)		;UNPOSTED AND UNPAINTED
14200		XR (UP)		;UNPOSTED BUT PAINTED
14300	
14400		XR (KP)		;KILLED BUT PAINTED.
14500	
14600		XR (NXTBYT)		;POINTER TO PUT DOWN INSTRUCTIONS
14700		XR (CURCORGET)		;BLOCK OF CORE WORKING ON RIGHT NOW
14800		XR (GENTOP)		;FIRST BLOCK OF A THE PICTURE
14900	
15000		XR (CURMOV)		;COMMAND TO POSITION CURSOR.
15100	
15200	
15300	%DNUM__0
15400	%THREAD__1
15500	%APPND__2
15600	%LIST__2
15700	%BEG__3
15800	
15900	
16000	;OP CODES FOR PICTURES
16100	
16200	%OHLT__0*40000
16300	%OMOV__1*40000
16400	%ODOT__2*40000
16500	%ODRW__3*40000
16600	%OTXT__4*40000
16700	%OSCL__5*40000
     
00100	
00200	;NOW FOR SOME CODE.
00300	
00400	QGET:	TLO	DISRUN		;SAY DISPLAY IS GOING.
00500		PUSHJ	P,REPAINT(S)	;REPAINT EVERYTHING,
00600		PUSHJ	P,CURSOR(S)	;AND POSITION CURSOR
00700		JRST	@.TRET(S)	;AND RETURN.
00800	
00900	QREL:	TLZ	DISRUN
01000		PUSHJ	P,ERASE(S)	;ERASE WHOLE SCREEN (AND HOME UP)
01100		JRST	@.RET(S)
01200	
01300	QPOST:	MOVE	A,(P)		;GET PICTURE NUMBER
01400		TLNE	PICOPN		;IS A PICTURE CURRENTLY OPEN?
01500		CAME	A,.CURPIC(R)	;AND IS IT OURS?
01600		 JRST	 QPOST0(S)	;NO
01700		PUSHJ	P,CLOSE(S)	;YES -- CLOSE IT
01800		JRST	QPOST(S)	;RESTORE PICTURE NUMBER
01900	QPOST0:	MOVE	G,[XWD -2,UU](S) ;LOOK FOR PICTURE IN
02000		PUSHJ	P,FIND(S)	;UU AND UP
02100		JUMPE	B,QPOST1(S)	;NOT FOUND.
02200		AOS	.POSTN(R)	;ONE MORE PIC POSTED.
02300	QOP:	PUSHJ	P,REMOV(S)	;REMOVE IT FROM LIST IT IS IN.
02400		MOVEI	F,UU+PU		;DECIDE WHICH LIST TO GO TO.
02500		SUBI	F,(G)		;THIS IS WHERE TO GO.
02600		PUSHJ	P,PUTIN(S)	;PUT IN LIST ==> BY F
02700	QPOST1:	MOVE	A,.POSTN(R)	;RETURN NUMBER OF PICS POSTED.
02800		POP	P,(P)
02900		JRST	@.IRET(S)	;AND RETURN TO USER.
03000	
03100	
03200	QUNPOST: MOVE	A,(P)		;GET PICTURE NUMBER
03300		MOVE	G,[XWD -2,PP](S) ;LOOK IN PP AND PU
03400		PUSHJ	P,FIND(S)	;LOOK.
03500		JUMPE	B,QPOST1(S)	;NOT FOUND -- RETURN OLD POSTNUMBER
03600		SOS	.POSTN(R)
03700		JRST	QOP(S)		;JOIN POST CODE.
03800	
03900	QKILL:	POP	P,A		;GET PICTURE NUMBER
04000		MOVE	G,[XWD -4,PP](S) ;LOOK IN MANY LISTS.
04100		PUSHJ	P,FIND(S)
04200		JUMPE	B,[ERR <KILLING NON-EX PIC>,4,<@.RET>](S)
04300		PUSHJ	P,KILL(S)	;GO KILL IT.
04400		JRST	@.RET(S)	;RETURN
04500	
04600	QAPPEND: TLNE	PICOPN		;IF A PICTURE IS OPEN
04700		 PUSHJ	 P,CLOSE(S)	;CLOSE IT.
04800		TLO	APPEND
04900		JRST	QOP0(S)		;AND JOIN OPEN CODE.
05000	QOPEN:	TLNE	PICOPN		;IS THERE A PIC OPEN?
05100		 PUSHJ	 P,CLOSE(S)	;YES -- CLOSE IT.
05200		TLZ	APPEND		;NOT APPENDING
05300	QOP0:	TLO	PICOPN
05400		POP	P,.CURPIC(R)	;CURRENT PIC NUMBER.
05500		SETZM	CURCORGET(R)	;NO BLOCK YET.
05600		PUSHJ	P,BLOCK(S)	;GET ONE.
05700	;	MOVE	B,CURCORGET(R)
05800		HRRZM	B,GENTOP(R)	;SAVE POINTER TO FIRS BLOCK.
05900		SETOM	.IXBEAM(R)	;BEAM NOT IN POSITION.
06000		TLNE	APPEND
06100		 JRST	 @.RET(S)	;RETURN.
06200		MOVEI	C,%BEG
06300		MOVEI	A,0
06400		PUSHJ	P,STOBYT(S)	;STORE IT.
06500		SOJG	C,.-1(S)	;STORE %BEG TIMES.
06600		JRST	@.RET(S)	;ALL DONE.
06700	
06800	QCLOSE:	PUSHJ	P,CLOSE(S)
06900		JRST	@.RET(S)
07000	
07100	
07200	CLOSE:	HRRZ	C,NXTBYT(R)	;GET THE NEXT BYTE.
07300		MOVSI	A,%OHLT		;PUT DOWN A HALT CODE.
07400		MOVEM	A,(C)		;AS THE LAST WORD.
07500		MOVE	B,CURCORGET(R)	;THIS THE PIECE OF CORE WE ARE WORKING ON
07600		PUSHJ	P,PUTCOR(S)	;RETURN ANY CORE LEFT.
07700		TLZ	PICOPN		;NO LONGER ANY PICTURE OPEN.
07800		MOVE	A,.CURPIC(R)	;GET PICTURE NUMBER
07900		MOVE	G,[XWD -4,PP](S) ;LOOK FOR A PREVIOUS VERSION.
08000		PUSHJ	P,FIND(S)	;...
08100		TLZE	APPEND		;ARE WE APPENDING?
08200		 JRST	 CLO1(S)	;YES -- GO APPEND TO THIS PIC.
08300		SKIPE	B
08400		 PUSHJ	 P,KILL(S)	;REMOVE FROM LIST AND KILL (MAY ONLY GO TO KP)
08500		MOVE	B,GENTOP(R)	;THIS IS OUR BABY.
08600		MOVEM	A,%DNUM(B)	;SAVE PIC NUMBER
08700		MOVEI	F,UU
08800		JRST	PUTIN(S)	;PUT IN UNPOSTED AND UNPAINTED.
08900	
09000	CLO1:	JUMPE	B,[ERR <APPENDING TO NON-EX PIC>,6](S)
09100		TLO	APNDED		;WE HAVE APPENDED
09200		MOVEI	A,-1
09300		MOVE	C,GENTOP(R)
09400		TDNN	A,%APPND(B)	;DOES THIS PIC ALREADY HAVE APPENDS?
09500		 HRRM	 C,%APPND(B)	;NO -- THIS IS THE FIRST.
09600		TDNE	A,-1(B)		;SEARCH FOR LAST BLOCK IN LIST
09700		 JRST	 [HRRZ B,-1(B)	;LOOK FOR MORE.
09800			  JRST .-1(S)](S)
09900		HRRM	C,-1(B)		;NOW LINKED IN.
10000		POPJ	P,
10100	
10200	;QCURSOR	SET CURSOR X,Y POSITION TO GO TO
10300	;		WHEN PAINTING DONE EACH TIME.
10400	
10500	QCURSOR: POP	P,A		;Y VIEWPORT POSITION
10550		POP	P,B		;X VIEWPORT POSITION
10552		PUSHJ	P,CURSET(S)	;SET IT NOW.
10554		JRST	@.RET(S)	;AND RETURN.
10556	
10600	CURSET:	FMPR	A,[SMID](S)
10700		PUSHJ	P,@.FIX(S)	;FIX THE STUFF.
10800		HRRM	A,CURMOV(R)	;SAVE CURSOR Y
10900		MOVE	A,B		;GET X
11000		FMPR	A,[SMID](S)
11100		PUSHJ	P,@.FIX(S)
11200		TRO	A,%OMOV		;MAKE INTO A MOVE INSTRUCTION.
11300		HRLM	A,CURMOV(R)	;AND SAVE IT.
11302		POPJ	P,		;DONE
11500	
11600	
11700	;QDONE	COME HERE WHEN WE WISH TO ACTUALLY UPDATE THE SCREEN
11800	;	TO SHOW PICTURES AS THEY ARE NOW CONSTITUTED.
11900	;	THIS IS THE INTERESTING GUTS OF THE PROGRAM.
12000	
12100	QDONE:	TLZ	UPDONE!BEAMUNDEF	;BEAM LOCATION NOT DETERMINED.
12200		SKIPN	UP(R)		;ANYTHING BEING DELETED?
12300		SKIPE	KP(R)		;
12400		 JRST	 DELIT(S)	;YES -- GO DO SEL ERASE OR WHOLE ERASE.
12500	QD0:	TLNE	DISRUN		;DO NOT APPEND IF DISPLAY NOT RUNNING
12600		TLNN	APNDED		;WAS ANYTHING APPENDED?
12700		 JRST	 QD4(S)		;NO -- DO NOT LOOK IN PP.
12800		MOVE	B,PP(R)
12900	QD1:	JUMPE	B,QD4(S)	;ALL DONE WITH PP
13000		HRRZ	F,%APPND(B)	;IF ANYTHING WAS APPENDED TO THIS
13100		 JUMPE	 F,QD3(S)	;PICTURE, THEN PAINT::
13200		PUSH	P,B		;SAVE PIC POINTER
13300		PUSHJ	P,IBLO(S)	;GO INTERPRET THESE BLOCKS.
13400		POP	P,B
13500		HLLZS	%APPND(B)	;NO MORE APPENDS.
13600	QD3:	HRRZ	B,%THREAD(B)	;CDR DOWN LIST
13700		JRST	QD1(S)		;AND LOOK SOME MORE
13800	QD4:	SKIPN	F,PU(R)		;ANYTHING TO PAINT?
13900		 JRST	 QD5(S)		;NO -- POSITION CURSOR
14000		PUSHJ	P,PAINT(S)	;YES -- PAINT THE LIST.
14002		MOVEI	F,PU(R)		;MOVE PU --> PP
14004		PUSHJ	P,PMOV(S)	;BY SUBROUTINE
14700	QD5:	TLNE	UPDONE		;IF ANY UPDATES DONE,
14800		PUSHJ	P,CURSOR(S)	;REPOSITION CURSOR
14900		JRST	@.RET(S)
15000	
15002	PMOV:	SKIPN	B,(F)		;ANYTHING IN LIST?
15004		 POPJ	 P,		;NO -- DONE.
15006		PUSHJ	P,REMOV(S)	;REMOVE FROM PREVIOUS LIST
15008		SUBI	F,1		;PUT ON ONE LIST LOWER.
15010		PUSHJ	P,PUTI0(S)	;WITH THIS SUBROUTINE
15012		AOJA	F,PMOV(S)	;AND LOOP UNTIL LIST EMPTY.
15014	
15100	DELIT:	
15200	IFN 0,<  ;SELECTIVE ERASE
15300		PUSHJ	P,SELERS(S)	;CALL SELECTIVE ERASE.
15400		SKIPE	F,UP(R)		;THIS IS CALLED AS COROUTINE.
15500		PUSHJ	P,PAINT(S)
15600		SKIPE	F,KP(R)		;ERASE BY PAINTING!!!!
15700		PUSHJ	P,PAINT(S)	;PAINT AND FALL THRU TO FREEUP
15800	>
15900	
16000	IFE 0,<  ;WHOLE ERASE
16100		PUSHJ	P,REPAINT(S)	;ERASE AND REPAINT WHOLE SCREEN.
16200	>
16300	
16400		MOVEI	F,UP(R)		;MOVE UP --> UU
16500		PUSHJ	P,PMOV(S)
16600		MOVEI	F,KP(R)		;AND FREE THIS LIST
16700		PUSHJ	P,FREEUP(S)
16800		JRST	QD0(S)		;AND PAINT NEW THINGS.
16900	
17000	
17100	
17200	REPAINT: TLZ	APNDED		;NO MORE APPENDS.
17300		JUMPGE	CPOPJ(S)	;DISPLAY NOT RUNNING -- DO NOTHING.
17400		PUSHJ	P,ERASE(S)	;ERASE WHOLE SCREEN.
17500		SKIPE	F,PP(R)		;IF ANYTHING POSTED,
17600		 PUSHJ	 P,PAINT(S)	;PAINT IT.
17700		JRST	UPREC(S)	;RECORD THAT UPDATES DONE
17800	
17900	
18000	PAINT:	JUMPGE	CPOPJ(S)	;ONLY PAINT IF DISPLAY RUNNING
18100		JUMPE	F,CPOPJ(S)	;RETURN IF NOTHING IN LIST.
18200		PUSH	P,F		;SAVE LIST POINTER.
18300		HLLZS	%APPND(F)	;NO MORE APPENDS.
18400		PUSHJ	P,IBLO0(S)	;PAINT STARTING WITH FIRST BLOCK.
18500		POP	P,E		;RESTORE LIST POINTER
18600		HRRZ	F,%THREAD(E)	;NEXT ENTRY
18700		JRST	PAINT(S)	;LOOP
18800	
18900	IBLO0:	PUSH	P,-1(F)		;POINTER TO NEXT BLOCK.
19000		HLL	F,-1(F)		;GET COUNT IN LEFT HALF.
19100		ADD	F,[XWD %BEG+2,%BEG](S); BUMP.
19200		JRST	IBLO1(S)	;AND ENTER BLOCK LOOP.
19300	IBLO:	PUSH	P,-1(F)
19400		HLL	F,-1(F)
19500		ADD	F,[XWD 2,0](S)	;SUBTRACT 2 BECAUSE OF GETCOR OVERHEAD
19600	IBLO1:	MOVE	A,(F)		;PICK UP INSTRUCTION
19700		PUSHJ	P,INTERP(S)	;DEVICE-DEPENDENT INTERPRETATION.
19800		AOBJN	F,IBLO1(S)	;LOOP.  INTERP SKIPS IF NEEDS NEW BLOCK.
19900		POP	P,F
20000		TRNE	F,-1
20100		 JRST	 IBLO(S)	;LOOP FOR NEXT BLOCK.
20200	UPREC:	TLO	UPDONE		;HAVE UPDATED SCREEN.
20300		POPJ	P,
20400	
20500	
20600	;PLOT ROUTINE FOR STORAGE TUBES.
20700	; 	FORMAT IS XWD -1,ADDRESS 
20800	;	   FOLLOWED BY DUMP OF ALL CODE BLOCKS.
20900	
21000	PLTIT:	MOVEI	E,PP-%THREAD(R)	;LOOK IN PP.
21100	PLT0:	HRRZ	E,%THREAD(E)	;NEXT IN LIST.
21200		JUMPE	E,CPOPJ(S)	;NONE LEFT.
21300		HRROI	A,-1(E)		;XWD -1,ADDRESS
21400		PUSHJ	P,PL(S)		;WRITE
21500		MOVEI	B,(E)		;SAVE ADDRESS
21600	PLT1:	MOVEI	C,(B)		;ADDRESS AGAIN.
21700		HLL	B,-1(B)
21800		MOVE	A,-1(B)		;GET WORD.
21900		PUSHJ	P,PL(S)		;WRITE
22000		AOBJN	B,.-2(S)	;LOOP FOR THIS BLOCK.
22100		HRRZ	B,-1(C)		;POINTER TO NEXT BLOCK.
22200		JUMPE	B,PLT0(S)	;NONE.
22300		JRST	PLT1(S)		;YES -- WRITE IT TOO.
22400	
22500	
     
00100	; ***** ROUTINES FOR GENERATING CODE-WORDS *****
00200	
00300	PGEN:	TLNE	DISIFY		;IF WE ARE NOT INTENSIFYING
00400		 JRST	 PGEN0(S)	;AND
00500		CAMN	B,.IXBEAM(R)	;IF BEAM IS ALRADY THERE,
00600		CAME	C,.IYBEAM(R)	;THEN DO NOTHING.
00700		 JRST	 PGEN0(S)	;MUST POSITION BEAM
00800		POPJ	P,		;NOTHING TO DO.
00900	PGEN0:	MOVEM	B,.IXBEAM(R)	;SAVE POSITION.
01000		MOVEM	C,.IYBEAM(R)
01100		MOVS	A,B
01200		HRR	A,C		;X,,Y
01300		TLZ	A,740000	;SAFETY FACTOR -- REMOVE OP-CODE BITS.
01400		TLNE	DISIFY		;DOT ?
01500		 TLOA	 A,%ODOT	;YES
01600		TLO	A,%OMOV		;MOVE INSTRUCTION
01700		JRST	STOBYT(S)	;AND STORE IT.
01800	
01900	VGEN:	POP	P,C		;CALLED WITH DELTA X, DELTA Y ON STACK.
02000		POP	P,A		;DELTA Y
02100		ADDB	A,.IYBEAM(R)	;BUMP IYBEAM
02200		POP	P,B		;DELTA X
02300		ADDB	B,.IXBEAM(R)	;AND IXBEAM
02400		HRL	A,B
02500		TLO	A,%ODRW		;DRAW COMMAND
02600		PUSH	P,C		;RESTORE RETURN ADDRESS.
02700		JRST	STOBYT(S)	;AND STORE COMMAND
02800	
02900	
03000	
     
00100	
00200	;***** MISCELLANEOUS ROUTINES FOR HANDLING LISTS, ETC *****
00300	
00400	
00500	;FIND	LOOKS FOR PIC NUMBERED IN A. ENTER WITH G ==>
00600	;	AN AOBJN POINTER WHICH POINTS TO THE LISTS TO LOOK IN.
00602	;	EXITS WITH POINTER TO PIC IN B; ZERO IF NONE FOUND
00700	
00800	FIND:	MOVEI	B,(G)		;COPY LIST POINTER.
00900		ADDI	B,-%THREAD(R)	;RELOCATE.
01000		JRST	.+3(S)		;AND JUMP INTO LOOP
01100		CAMN	A,%DNUM(B)	;IS THIS IT?
01200		 POPJ	 P,		;YES
01300		HRRZ	B,%THREAD(B)	;LOOK AT NEXT PICTURE.
01400		JUMPN	B,.-3(S)	;IF IT EXISTS.
01500		AOBJN	G,FIND(S)	;END OF LIST, TRY FOR ANOTHER LIST
01600		POPJ	P,		;NO MORE LISTS TO LOOK IN.
01700	
01800	
01900	;REMOV	REMOVES PICTURE POINTED TO BY B FROM THE LIST
02000	;	IT IS IN.  CLOBBERS C,D
02100	
02200	REMOV:	MOVE	C,%THREAD(B)	;GET TWO-WAY LINKS.
02300		MOVS	D,C
02400		TLNN	C,-1		;LEFT LINK?
02500		 JRST	 [HLRZ D,%LIST(B) ;NO -- FIND WHICH LIST IT IS IN.
02600			  HRRZM C,(D)	;AND PUT POINTER THERE.
02700			  JRST .+2(S)](S)
02800		HRRM	C,%THREAD(D)	;FIX LEFT NEIGHBOR.
02900		TRNE	C,-1		;IF RIGHT NEIGHBOR
03000		 HLLM	 C,%THREAD(C)	;FIX HIM.
03100		POPJ	P,		;AND RETURN.
03200	
03300	
03400	;PUTIN	PUT B IN THE LIST POINTED TO BY F (UNRELOCATED)
03500	;
03600	
03700	PUTIN:	ADDI	F,(R)
03800	PUTI0:	HRRZ	C,(F)		;GET CURRENT LIST CONTENTS.
03900		MOVEM	C,%THREAD(B)	;STORE IN THREAD.
04000		TRNE	C,-1
04100		 HRLM	 B,%THREAD(C)	;MAKE IT LEFT NEIGHBOR
04200		HRRZM	B,(F)		;NEW LIST.
04300		HRLM	F,%LIST(B)	;SAVE AS LIST IT IS ON.
04400		POPJ	P,
04500	
04600	;KILL	KILL PICTURE POINTED TO BY B.  WILL FIRST BE REMOVED
04700	;	FROM THE LIST IT IS ON. WILL EITHER GO TO KP OR
04702	;	FREE STORAGE LIST.
04800	
04900	KILL:	PUSHJ	P,REMOV(S)	;REMOVE IT.
05000		MOVEI	F,KP		;PREPARE TO PUT ON KP.
05100		HLRZ	C,%LIST(B)	;SEE WHAT LIST IT WAS ON
05200		CAIE	C,PP(R)		;IF ON PP
05300		CAIN	C,UP(R)		;OR ON UP
05400		 JRST	 PUTIN(S)	;THEN PUT IT IN KP.
05402	
05404	;KILL0	RETURNS PICTURE POINTED TO BY B TO FREE STORAGE
05406	;	LIST. CLOBBERS ALL AC'S BECAUSE RELCOR IS CALLED.
05408	
05500	KILL0:	HRRZ	E,-1(B)		;POINTER TO NEXT BLOCK.
05600		PUSH	P,E
05700		PUSHJ	P,RELCOR(S)	;RELEASE CORE.
05800		POP	P,B
05900		JUMPN	B,KILL0(S)	;LOOP FOR ALL BLOCKS.
06000		POPJ	P,
06100	
06200	;FREEUP	FREES AN ENTIRE LIST.  ENTER WITH F ==> LIST HEADER
06300	;	(RELOCATED)
06400	
06500	FREEUP:	MOVEI	B,0
06600		EXCH	B,(F)		;ZERO LIST, GET ITS CONTENST.
06700	FR0:	JUMPE	B,CPOPJ(S)	;NOTHING THERE.
06800		HRRZ	C,%THREAD(B)	;NEXT ONE.
06900		PUSH	P,C		;SAVE IT.
07000		PUSHJ	P,KILL0(S)	;KILL THIS PICTURE.
07100		POP	P,B		;NEW ONE.
07200		JRST	FR0(S)		;LOOP.
07300	
07400	
07500	
07600	;STOBYT	STORES A WORD IN THE CURRENT PICTURE.
07700	;	AC 'A'  IS THE WORD.
07800	;	**** OTHER AC'S CLOBBERED AT WILL. ****
07900	
08000	STOBYT:	TLNE	NOMOCOD		;ARE WE ALLOWED?
08100		 POPJ	 P,		;NO
08200		TLNN	PICOPN		;IS A PICTURE OPEN?
08300		 ERR 	 <CODE IN UNOPENED PIC>,3
08400		MOVE	B,NXTBYT(R)	;PICK UP POINTER.
08500		MOVEM	A,(B)		;STORE WORD.
08600		AOBJN	B,STO0(S)	;BUMP POINTER.
08700		JRST	BLOCK(S)	;RAN OUT -- GET MORE FOR NEXT TIME.
08800	STO0:	MOVEM	B,NXTBYT(R)	;SAVE IT.
08900		POPJ	P,
09000	
09100	
09200	;BLOCK	GETS A NEW BLOCK OF CORE TO WORK WITH FOR STORING
09300	;	CODES INTO.  CLOBBERS LOTS OF AC'S BY CALLING GETCOR.
09302	;	STORES NEW BLOCK ADDRESS IN CURCORGET(R).  SETS UP
09304	;	NXTBYT(R) WITH AN AOBJN POINTER TO CORE BLOCK.
09400	
09500	BLOCK:	MOVEI	C,400
09600		PUSHJ	P,GETCOR(S)	;TRY TO GET CORE.
09700		JUMPE	B,BLO0(S)	;NONE
09800		HLL	C,-1(B)		;GET LENGTH
09900		ADD	C,[XWD 2,0](S)	;BUMP TO ACCOUNT GETCOR OVERHEAD.
10000		HRRI	C,(B)		;PUT IN THE POINTER.
10100		MOVEM	C,NXTBYT(R)	;THIS IS THE NEW AOBJN POINTER.
10200		SKIPE	C,CURCORGET(R)	;ANY PREVIOUS PIECE?
10300		 HRRM	 B,-1(C)	; YES -- LINK IN.
10400		MOVEM	B,CURCORGET(R)
10500		POPJ	P,
10600	
10700	BLO0:	SKIPN	CURCORGET(R)	;IS THIS THE FIRST TIME?
10800		 POPJ	 P,		;YES
10900		MOVE	B,GENTOP(R)	;NO -- RELEASE ALL PREVIOUS
11000		JRST	KILL0(S)	;PARTS OF THE LIST.
11100	
11200	
11225	;	PICINI USED FOR GT40, ADAGE ONLY
11250	IPICTA:
11300	QSTAT:	POPJ	P,		;NO USE WITH THIS STUFF
