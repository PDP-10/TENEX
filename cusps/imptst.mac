;<LIEB>IMPTST.MAC;2     5-APR-75 11:25:13    EDIT BY LIEB
;CORRECT PION TO NOT ASSEMBLE FOR TENEX
;<TOMLINSON>IMPTST.MAC;2     6-JUN-74 10:32:25    EDIT BY TOMLINSON
; ADDED MORE PATTERNS. RUNTIME NUMBER OF LINKS. NOP SUPPRESSOR
; SUPPRESS VARIOUS ERROR PRINTOUTS.
;<DIAGNOSTICS>IMPTST.MAC;6    18-DEC-73 10:32:08	EDIT BY TOMLINSON
; FIXED RANDOM NUMBER INITIALIZER FOR PI VERSION
;<DIAGNOSTICS>IMPTST.MAC;5    26-MAR-73 10:11:11	EDIT BY BURCHFIEL
; INSTALLED WAIT FOR HOST READY LINE TO SETTLE
;<DIAGNOSTICS>IMPTST.MAC;4    26-SEP-72 15:05:13	EDIT BY TOMLINSON
; INSTALLED WAIT FOR OUTPUT BUFFER EMPTY AT RSTART
;<DIAGNOSTICS>IMPTST.MAC;3    26-SEP-72 15:01:44	EDIT BY TOMLINSON
; INSTALLED PI OPTION FOR BARE MACHINE
;<DIAGNOSTICS>IMPTST.MAC;2    15-SEP-72  8:36:15	EDIT BY TOMLINSON
;<TOMLINSON>IMPTST.MAC;12    14-SEP-72 17:19:47	EDIT BY TOMLINSON
;<TOMLINSON>IMPTST.MAC;11    14-SEP-72 13:29:07	EDIT BY TOMLINSON
;<TOMLINSON>IMPTST.MAC;10    14-SEP-72 13:01:35	EDIT BY TOMLINSON
;<TOMLINSON>IMPTST.MAC;9    14-SEP-72 13:00:46	EDIT BY TOMLINSON
;<TOMLINSON>IMPTST.MAC;8    14-SEP-72 11:44:57	EDIT BY TOMLINSON
;<TOMLINSON>IMPTST.MAC;7    14-SEP-72 10:26:35	EDIT BY TOMLINSON
;<TOMLINSON>IMPTST.MAC;5    13-SEP-72 20:28:45	EDIT BY TOMLINSON
;<TOMLINSON>IMPTST.MAC;4    13-SEP-72 20:13:23	EDIT BY TOMLINSON
;<TOMLINSON>IMPTST.MAC;3    13-SEP-72 20:12:33	EDIT BY TOMLINSON
;<TOMLINSON>IMPTST.MAC;2    13-SEP-72 20:05:06	EDIT BY TOMLINSON
;<TOMLINSON>IMPTST.MAC;1    13-SEP-72 20:02:55	EDIT BY TOMLINSON

	TITLE	IMPTST
	SUBTTL	R.S.TOMLINSON 14 SEP 72

; System definition

BARE==0
DEC==1
TENEX==2

IFNDEF SYS,<DEFINE SYS<XWD 550,TENEX>>

SYSTEM==<SYS>&777777
IMP=<SYS>/1000000
IFE SYSTEM-BARE,<IFNDEF PIF,<PIF==1>>
IFN SYSTEM-BARE,<PIF==0>

; Parameters

IFN SYSTEM-TENEX,<
JIFSEC==^D60>		; Ticks per second
IFN PIF,<
APRCHN==1
TTYCHN==2
OUTCHN==3
INCHN==4
NTTBUF==400>
MAXERR==6		; Max errors printed per message
IPTCNT==^D200	; Messages per pattern
MLINKS==4		; Links to use for testing
FLINK==340		; First link to use
MAXL==^D8000/^D36	; Max message length
RFNMWT==^D60000		; Rfnm time-out
RDYWT==^D1000		; Time to let ready line settle
ABRTWT==^D5000		; Time to wait after abort
PATWT==^D120000		; Time to wait before changing pattern
HUNGWT==^D120000	; Hang time-out
SUMWT==^D60000*^D10	; Summary interval

; Cono bits

CLRERR==200000		; Clear "imp was down" bit
MAK10D==100000		; Drop our ready line
STPOUT==40000		; Clear empty bit
ENDOUT==20000		; End of output message
GOTEND==10000		; End of input message seen
ENBEND==4000		; Enable end interrupt
ENBOUT==200		; Enable out interrupt
ENBIN==10		; Enable input interrupt

; Coni bits

PWRUP==200000		; Interface has power on
DOWN10==100000		; Host ready line is down
ERR==40000		; Imp was down
IMPDWN==20000		; Imp ready line is down
ENDIN==14000		; End of input message
EMPTY==200		; Ready for more output
FULL==10		; Input waiting
 ; Switch bit names

SW.STE==0
SW.DNG==1	; Ring bell on errors
SW.NNP==2	; Suppress sending NOP's
SW.SLE==3	; Suppress length errors
SW.SFM==4	; Suppress unexpected messages
SW.SCT==5	; Suppress printing control msgs
SW.SSM==6	; Suppress summaries
SW.SDE==7	; Suppress data error msgs
SW.SWE==8	; Suppress unsolicited msgs (from other sites)

; Accumulators

CONDS=0		; Imp coni word
A=1		; General temps
B=2
C=3
P=17		; Stack pointer
INPC=16		; Where to resume input process
OUTPC=15	; Where to resume output process
ILCB=14		; Pointer to current input link control block
OLCB=13		; Pointer to current output link control block
ILNK=12		; Current input link index
OLNK=11		; Current output link index
LINK=10		; Link extracted from header
HOST=7		; Host number extracted from header
TYPE=6		; Message type extracted from header
ERRC=5		; Error code of imp-host messages
PAT=4		; Current pattern

; Macroes

DEFINE	MESSAGE(S)<HRROI A,[ASCIZ \S\]
	PUSHJ P,OUTMSG>

DEFINE	ABORT(S)<JRST [	IFN PIF,<CONO PI,1000+1B<^D28+INCHN>+1B<^D28+OUTCHN>>
		PUSHJ P,PRTOD
		MESSAGE<S>
		JRST ABRT]>

DEFINE	ERROR(S)<JRST [	AOSN FLAG
			PUSHJ P,PRID
			MESSAGE <S>
			PUSHJ P,CRLF
			JRST .+1]>

; UUO's

OPDEF	SKIPSW	[1B8]
OPDEF	NSKPSW	[2B8]

IFN PIF,<
OPDEF	PION	[CONO PI,200]
OPDEF	PIOFF	[CONO PI,400]
>

; Jsys's

IFE SYSTEM-TENEX,<SEARCH STENEX>

; Main program loop

START:	MOVE P,[XWD -100,PDL-1]	; Initialize pdl
	PUSHJ P,INISYS		; Initialize system
	PUSHJ P,INITTY
	IFN PIF,<PUSHJ P,INIPI>	; INITIALIZE PI
	SETOM ADDRES
	SETOM MSGLEN
	SETZM SLFLUP
	MOVEI A,FLINK+MLINKS-1
	MOVEM A,LLINK		; LAST LINK TO USE IN DEFAULT CASE
	MOVSI A,-MLINKS
	MOVEM A,MNLINK
	MOVEI A,NPAT-1
	MOVEM A,SPAT
	SETZM XMTFLG
	SETZM RCVFLG
	MESSAGE <
IMP TESTER
>
FSTART:	PUSHJ P,SETOPT		; Set options
	IFN PIF,<
		SKIPLE TTOCT
		 JRST .-1>
	PUSHJ P,CRLF
	PUSHJ P,INICLK		; Initialize clock
	PUSHJ P,INIERR		; Initialize error info
RSTART:	MOVE P,[XWD -100,PDL-1]	; Reset pdl in case we start over
	PUSHJ P,INILNK		; Initialize active links
	PUSHJ P,INIIMP		; Initialize imp interface
	PUSHJ P,RCLOCK
	ADDI A,HUNGWT
	MOVEM A,HTIME		; When to declare interface hung
MAINLP:	IFN SYSTEM-BARE,<
	MOVEI A,1000
	MOVEM A,OPCNT>
INRLP:	CONI IMP,CONDS		; Read status of interface
	IFE PIF,<
		TRNE CONDS,FULL		; Word ready to come in?
		 JRST [	CONI IMP,CONDS	; Yes, get real status
			JRST @INPC]	; And continue with input process
	EIN:	TRNE CONDS,EMPTY	; Room to send?
		 JRST @OUTPC		; Yes
	EOUT:>
	TRNE CONDS,PWRUP
	TRNE CONDS,ERR!IMPDWN!DOWN10
	 JRST ABNCND		; Some abnormal condition
	IFN SYSTEM-BARE,<
	SOSLE OPCNT>
	IFE SYSTEM-BARE,<
	IFE PIF,<	CONSO 1000>>
	IFE PIF,<	 JRST INRLP>
	IFE SYSTEM-BARE,<
	IFE PIF,<CONSZ TTY,40>
	IFN PIF,<SKIPE TTICT>>
	IFE SYSTEM-DEC,<SIBE>
	IFE SYSTEM-TENEX,<MOVEI A,100
			SIBE>
	PUSHJ P,TCICHK		; Check input
	PUSHJ P,RCLOCK		; Get current time
	CAML A,HTIME		; Past hung time?
	 ABORT <TIME-OUT>
	CAML A,STIME
	 SETOM SFLAG		; Signal summary wanted asap
	SKIPE SFLAG
	SKIPE MOUTC
	 JRST MAINLP		; Wait no outstanding messages
	IFN PIF,<
	CONO PI,1000+1B<28+INCHN>+1B<28+OUTCHN>>
	PUSHJ P,PRSUM		; Summary now
	IFN PIF,<
	CONO PI,2000+1B<28+INCHN>+1B<28+OUTCHN>>
	JRST MAINLP

; Abnormal coni

ABNCND:	TRNE CONDS,IMPDWN
	 ABORT <IMP IS DOWN>
	TRNE CONDS,ERR
	 ABORT <IMP WAS DOWN>
	TRNE CONDS,DOWN10
	 ABORT <IMP INTERFACE TURNED OFF>
	 ABORT <NO POWER ON INTERFACE>

; Check tty input

TCICHK:	IFN PIF,<	CONO PI,1000+1B<^D28+INCHN>+1B<^D28+OUTCHN>>
	PUSHJ P,CRLF
	PUSHJ P,TCI
	CAIN A,"R"
	 ABORT <MANUALLY RESTARTED>
	CAIN A,177
	 JRST [	PUSHJ P,PRTOD
		MESSAGE <NEW PARAMETERS>
		PUSHJ P,PRSUM
		JRST FSTART]
	CAIN A,"S"
	 SETOM SFLAG
	PUSHJ P,CRLF
	IFN PIF,<	CONO PI,2000+1B<^D28+INCHN>+1B<^D28+OUTCHN>>
	POPJ P,

; Read clock

RCLOCK:	PUSH P,B
	IFE SYSTEM-BARE,<
		IFE PIF,<
			CONSO 1000
			 JRST .+3
			AOS CLOCK
			CONO 1000>
		MOVE A,CLOCK
		IMULI A,^D1000
		IDIVI A,JIFSEC>
	IFE SYSTEM-DEC,<
		DATIME A,
		IMULI A,^D1000
		IDIVI A,JIFSEC>
	IFE SYSTEM-TENEX,<
		TIME>
	POP P,B
	POPJ P,

; APR INTERUPT ROUTINE

IFN PIF,<

APRINT:	0
	CONSO APR,1000
	 JRST 4,START
	AOS CLOCK
	CONO 1000+APRCHN
	JEN @APRINT
>

; ABORT SEQUENCE

ABRT:	PUSHJ P,PRSUM
	MESSAGE <
RESTART
>
	MOVEI A,ABRTWT
	PUSHJ P,WAIT
	JRST RSTART

UUOH:	PUSH P,A
	LDB A,[POINT 9,40,8]
	CAIL A,1
	CAILE A,2
	 JRST 4,.
	PUSHJ P,UUOD-1(A)
	POP P,A
	POPJ P,

UUOD:	JRST .SKPSW
	JRST .NSKPS

.SKPSW:	DATAI A
	ROT A,@40
	SKIPGE A
	AOS -2(P)
	POPJ P,

.NSKPS:	DATAI A
	ROT A,@40
	SKIPL A
	 AOS -2(P)
	POPJ P,

; Initialize system

INISYS:	IFE SYSTEM-BARE,<CONO 675550
		CONO PI,10000>
	IFE SYSTEM-DEC,<CALLI 0
		MOVEI A,0
		TRPSET A,
		 JRST [	MESSAGE <
USER I/O PRIVILEGE NOT AVAILABLE
>
		EXIT]>
	IFE SYSTEM-TENEX,<
		RESET
		MOVE A,[SIXBIT /NETRDY/]
		SYSGT
		MOVE A,B
		HRLI A,1
		GETAB
		 SETO A,
		JUMPN A,[MESSAGE <
NETWORK BEING USED BY SYSTEM.  RESET NETON FIRST.>
			HALTF]
		USRIO
		 JRST [	MESSAGE <
USER I/O PRIVILEGE NOT AVAILABLE
>
			HALTF]>
	MOVE A,[PUSHJ P,UUOH]
	MOVEM A,41
	POPJ P,

; INITIALIZE TTY


; INITIALIZE TTY

INITTY:	IFE SYSTEM-BARE,<
	IFE PIF,<CONO TTY,3410>
	IFN PIF,<MOVE A,TTOBPT
		MOVEM A,TTOIPT
		MOVEM A,TTOOPT
		SETZM TTOCT
		SETZM TTICT
		CONO TTY,3410+TTYCHN>>
	POPJ P,

; INITIALIZE PI SYSTEM

IFN PIF,<
INIPI:	MOVE A,[XWD IPIVEC,42]
	BLT A,57
	CONO PI,2200+1B<^D28+TTYCHN>+1B<^D28+APRCHN>
	POPJ P,

IPIVEC:	BLOCK 60-42

DEFINE	IPI(CHN,INST)<
	ORG IPIVEC-2+2*CHN
	INST>
	IPI(TTYCHN,<JSR TTYINT>)
	IPI(APRCHN,<JSR APRINT>)
	IPI(INCHN,<JSR ININT>)
	IPI(OUTCHN,<JSR OUTINT>)
ORG IPIVEC-2+2*10
>

; Initialize clock

INICLK:	IFE SYSTEM-BARE,<SETZM CLOCK
	IFN PIF,<CONO APR,2000+APRCHN>>
	POPJ P,

; Initialize error accounting

INIERR:	MOVE A,[XWD HBITER,HBITER+1]
	SETZM HBITER
	BLT A,HBITER+^D35
	MOVE A,[XWD IBITER,IBITER+1]
	SETZM IBITER
	BLT A,IBITER+^D15
	SETZM TOTERR
	SETZM TOTBIT
	SETZM TOTMSG
	SETOM FSTERR
	SETOM FSTHDR
	PUSHJ P,RCLOCK
	ADD A,[SUMWT]
	MOVEM A,STIME
	SETZM SFLAG
	POPJ P,

; Initialize link control blocks

INILNK:	IFE SYSTEM-TENEX,<TIME>
	IFE SYSTEM-DEC,<DATIME A,>
	IFE SYSTEM-BARE,<PUSHJ P,RCLOCK>
	LSH A,1
	TSC A,A
	IORI A,1
	SKIPN XMTFLG
	SKIPE RCVFLG
	 MOVE A,[331652763451]
	SETZM MOUTC
	MOVE ILNK,MNLINK
INILN1:	MOVE ILCB,PLCB(ILNK)
	SETZM HDR(ILCB)
	MOVEI B,FLINK(ILNK)
	DPB B,[POINT 8,HDR(ILCB),23]
	MOVE B,ADDRES
	DPB B,[POINT 8,HDR(ILCB),15]
	SETZM IMSC(ILCB)
	SETZM OMSC(ILCB)
	MOVE A,SPAT
	MOVEM A,PATI(ILCB)
	MOVEM A,PATO(ILCB)
	MOVEI A,IPTCNT
	MOVEM A,IPTC(ILCB)
	MOVEM A,OPTC(ILCB)
	SETOM RFNMT(ILCB)
	MUL A,[XWD 1,5]
	LSH B,1
	LSHC A,-1
	MOVEM B,IRND(ILCB)
	MOVEM B,ORND(ILCB)
	MOVE A,B
	MOVSI B,(1B0)
	MOVEM B,OFLO(ILCB)
	MOVEM B,IFLO(ILCB)
	MOVE B,[252525252525]
	MOVEM B,IALT(ILCB)
	MOVEM B,OALT(ILCB)
	AOBJN ILNK,INILN1
	MOVE ILNK,MNLINK
	MOVE OLNK,MNLINK
	POPJ P,

; Initialize imp interface

INIIMP:	SETZM OUTSTT
	CONO IMP,MAK10D!ENBEND!ENBOUT!ENBIN
	MOVEI A,RDYWT
	PUSHJ P,WAIT
	CONO IMP,0	; SET HOST READY
	MOVEI A,RDYWT
	PUSHJ P,WAIT
	DATAI IMP,A
	CONO IMP,CLRERR!GOTEND
	DATAO IMP,CNOP
	PUSHJ P,RCLOCK
	MOVEI A,4
	MOVEM A,NOPCNT
	MOVEI INPC,STRTIN
	MOVEI OUTPC,STRTO
IFN PIF,<
	CONO IMP,ENBOUT+20*OUTCHN+ENBIN+INCHN
	CONO PI,2000+1B<^D28+INCHN>+1B<^D28+OUTCHN>>
	POPJ P,

; Set options

DEFINE	D(LTR,ADR)<
	CAIN A,"LTR"
	 JRST ADR>

SETOPT:	MESSAGE <
OPTIONS(ANY OF G,N,H,P,L,S,T,R,?)>
SETOP1:	MESSAGE <
*>
	MOVEI A,"H"
	SKIPL ADDRES
	PUSHJ P,TCI
	CAIE A,15
	CAIN A,"G"
	 POPJ P,		; Done
	PUSHJ P,[
		D(N,SETNLK)
		D(H,SETSIT)
		D(L,SETLEN)
		D(P,SETPAT)
		D(S,SETSLF)
		D(T,SETXMT)
		D(R,SETRCV)
		D(?,PRTOPT)
		AOS (P)
		POPJ P,]
	JRST SETOP1
	MESSAGE < ?>
	JRST SETOP1

; Print options

PRTOPT:	HRROI A,OPTMSG
	PUSHJ P,OUTMSG
	POPJ P,

OPTMSG:	ASCIZ \
OPTIONS ARE:
G  TERMINATES OPTION SETTING
N  SETS NUMBER OF LINKS TO USE
H  SET SITE NUMBER
L  SET MESSAGE LENGTH (RANDOM ASSUMED)
P  SET PATTERN (ALL PATTERNS ASSUMED)
S  SET SELF LOOP MODE (NOT SELF LOOP ASSUMED)
T  SET TRANSMIT ONLY MODE, SITE SHOULD BE ELSEWHERE
R  SET RECEIVE ONLY MODE, SITE SHOULD BE ELSEWHERE
\

SETNLK:	MESSAGE < NUMBER OF LINKS TO USE(1 - 4): >
	PUSHJ P,GNUM
	 JRST SKPRET
	CAIN A,15
	CAILE B,MLINKS
	 JRST SKPRET
	JUMPLE B,SKPRET
	MOVN A,B
	HRLZM A,MNLINK
	ADDI B,FLINK-1
	MOVEM B,LLINK
	POPJ P,

SETXMT:	MESSAGE < TRANSMIT ONLY? >
	PUSHJ P,YNO
	 POPJ P,
	 JRST SKPRET
	MOVEM A,XMTFLG
	SETZM RCVFLG
	POPJ P,

SETRCV:	MESSAGE < RECEIVE ONLY? >
	PUSHJ P,YNO
	 POPJ P,
	 JRST SKPRET
	MOVEM A,RCVFLG
	SETZM XMTFLG
	POPJ P,

; Set site number

SETSIT:	MESSAGE < HOST#(8)= >
	PUSHJ P,GNUM
	 JRST SKPRET
	CAIN A,15
	CAILE B,377
	 JRST SKPRET
	JUMPL B,SKPRET
	MOVEM B,ADDRES
	POPJ P,

; Set pattern

SETPAT:	MESSAGE < PATTERN (E,A,R,O,Z,FO,FZ,?,<DEL>): >
	PUSHJ P,TCI
	CAIN A,177
	 POPJ P,
	CAIN A,"?"
	 JRST [	MESSAGE <
E = EVERY
R = RANDOM
O = ONES
Z = ZEROES
A = ALTERNATING 1/0
D = DOUBLE BIT ALTERNATING 1100
FO= FLOATING ONE
FZ= FLOATING ZERO
S = SPECIAL
>
		JRST SETPAT]
	SETZ PAT,
	CAIN A,"E"
	 MOVEI PAT,NPAT-1
	CAIN A,"A"
	HRROI PAT,APAT
	CAIN A,"D"
	 HRROI PAT,DPAT
	CAIN A,"R"
	 HRROI PAT,RPAT
	CAIN A,"O"
	 HRROI PAT,OPAT
	CAIN A,"Z"
	 HRROI PAT,ZPAT
	CAIN A,"F"
	 JRST [	PUSHJ P,TCI
		CAIN A,177
		POPJ P,
		CAIN A,"O"
		 HRROI PAT,FOPAT
		CAIN A,"Z"
		 HRROI PAT,FZPAT
		JRST .+1]
	CAIN A,"S"
	 JRST SETSPT
	JUMPE PAT,SKPRET
SETPA1:	MOVEM PAT,SPAT
	POPJ P,

SETSPT:	MESSAGE<PECIAL = >
	PUSHJ P,GNUM
	 JRST SKPRET
	CAIE A,15
	 JRST SKPRET
	MOVEM B,SPCPAT
	HRROI PAT,SPPAT
	JRST SETPA1

; Set message length

SETLEN:	MESSAGE < MESSAGE LENGTH (2-336 OR R): >
	PUSHJ P,GNUM
	 JRST [	CAIN A,177
		 POPJ P,
		CAIE A,"R"
		 JRST SKPRET
		SETO B,
		PUSHJ P,TCI
		JRST SETLE1]
	CAIL B,2
	CAILE B,MAXL
	 JRST SETLEN
SETLE1:	CAIE A,15
	 JRST SKPRET
	MOVEM B,MSGLEN
	POPJ P,

; Determine self loop status

SETSLF:	MESSAGE < SELF LOOP? >
	PUSHJ P,YNO
	 POPJ P,
	 JRST SKPRET
	MOVEM A,SLFLUP
	POPJ P,

; Output routine

; OUTPUT INTERRUPT ROUTINE

IFN PIF,<

OUTINT:	0
	PUSH P,A
	PUSH P,B
	PUSH P,C
	PUSH P,PAT
	JRST @OUTPC

EOUT:	POP P,PAT
	POP P,C
	POP P,B
	POP P,A
	JEN @OUTINT
>

STRTON:	DATAO IMP,CNOP		; Start with nop's
STRTO1:	JSP OUTPC,EOUT
STRTO:	CONO IMP,ENDOUT
	JSP OUTPC,EOUT
	SOSLE NOPCNT
	 JRST STRTON
	JRST NXOLNK		; DONE WITH NOP'S. NOW REGULAR CONN'S

STRTOW:	SKIPSW SW.NNP		; SUPPRESS NOP'S?
	IFN PIF,<
	 JRST [	PION
		JRST STRTON]>
	IFE PIF,<
	 JRST STRTON>
	CONO IMP,STPOUT
	SETOM OUTSTT
	IFN PIF,<PION>
	JRST STRTO1

NXOLNK:	IFN PIF,<
	PIOFF			; PREVENT INTERRUPTS
	MOVEI A,NTTBUF*5-^D600
	CAML A,TTOCT>		; SEND NOP'S WHILE OUTPUT BUSY
	SKIPE RCVFLG
	 JRST STRTOW
	MOVEM OLNK,SOLNK	; SAVE WHERE WE START
STRTOL:	MOVE OLCB,PLCB(OLNK)
	SKIPGE RFNMT(OLCB)	; RFNM STILL OUT?
	 JRST DOOLNK		; NO, DO THIS LINK
	AOBJN OLNK,.+2
	 MOVE OLNK,MNLINK
	CAMN OLNK,SOLNK
	 JRST STRTOW
	JRST STRTOL

DOOLNK:	AOS MOUTC
	IFN PIF,<PION>
	DATAO IMP,HDR(OLCB)
	JSP OUTPC,EOUT
	DATAO IMP,OMSC(OLCB)
	SKIPG A,MSGLEN
	 PUSHJ P,GOLEN
	SUBI A,2		; Account for header and msc sent
	MOVEM A,OMSGL
OUTLP:	MOVE PAT,PATO(OLCB)
	SKIPLE OMSGL
	XCT GODAT(PAT)		; Get output data
	JSP OUTPC,EOUT
	SOSGE OMSGL
	 JRST OUTDUN
	DATAO IMP,ODAT(OLCB)
	JRST OUTLP

; Output done

OUTDUN:	CONO IMP,ENDOUT
	AOS OMSC(OLCB)
	PUSHJ P,RCLOCK
	ADDI A,RFNMWT
	SKIPN SLFLUP		; IF NOT SELF LOOP
	MOVEM A,RFNMT(OLCB)	; SET RFNM TIMEOUT
	ADDI A,HUNGWT-RFNMWT
	MOVEM A,HTIME
	SOSGE OPTC(OLCB)
	 JRST [	MOVEI A,IPTCNT
		MOVEM A,OPTC(OLCB)
		SKIPL PATO(OLCB)
		SOSL PATO(OLCB)
		 JRST .+1
		MOVEI A,NPAT-1
		MOVEM A,PATO(OLCB)
		JRST .+1]
	JSP OUTPC,EOUT
	JRST NXOLNK

; Dispatch to get output data

GODAT:
APAT==.-GODAT
	PUSHJ P,[SETCMB A,OALT(OLCB)
		MOVEM A,ODAT(OLCB)
		POPJ P,]
DPAT==.-GODAT
	PUSHJ P,[MOVE A,[614614614614]
		MOVEM A,ODAT(OLCB)
		POPJ P,]
RPAT==.-GODAT
	PUSHJ P,[PUSHJ P,ORAND
		MOVEM A,ODAT(OLCB)
		POPJ P,]
OPAT==.-GODAT
	SETOM ODAT(OLCB)
ZPAT==.-GODAT
	SETZM ODAT(OLCB)
FOPAT==.-GODAT
	PUSHJ P,[MOVE A,OFLO(OLCB)
		ROT A,-1
		MOVEM A,OFLO(OLCB)
		MOVEM A,ODAT(OLCB)
		POPJ P,]
FZPAT==.-GODAT
	PUSHJ P,[MOVE A,OFLO(OLCB)
		ROT A,-1
		MOVEM A,OFLO(OLCB)
		SETCAM A,ODAT(OLCB)
		POPJ P,]
NPAT==.-GODAT
SPPAT==.-GODAT
	PUSHJ P,[MOVE A,SPCPAT
		MOVEM A,ODAT(OLCB)
		POPJ P,]
	JFCL

; Get output message length

GOLEN:	PUSHJ P,ORAND
	LSH A,-1
	MULI A,MAXL-2
	ADDI A,2
	POPJ P,

; Output random number generator

ORAND:	MOVE A,ORND(OLCB)
	MUL A,[XWD 1,3]
	LSH B,1
	LSHC A,-1
	MOVEM B,ORND(OLCB)
	XOR A,B
	POPJ P,

; INPUT INTERRUPT

IFN PIF,<

ININT:	0
	PUSH P,A
	PUSH P,B
	PUSH P,C
	PUSH P,PAT
	CONI IMP,CONDS
	JRST @INPC

EIN:	POP P,PAT
	POP P,C
	POP P,B
	POP P,A
	JEN @ININT
>

; Input routine

STRTIN:	DATAI IMP,A		; Get header
	LDB LINK,[POINT 8,A,23]
	LDB HOST,[POINT 8,A,15]
	LDB TYPE,[POINT 8,A,7]
	LDB ERRC,[POINT 8,A,31]
	ANDI A,17
	MOVEM A,REST
	CAIE TYPE,5
	 JUMPN TYPE,CONTRL	; Non-rfnm control
	TRNN TYPE,340
	CAME HOST,ADDRES	; From this site?
	 JRST WEIRDO		; No.
	SKIPE XMTFLG		; If not transmit only
	CAIN TYPE,5		; Or if rfnm
	SKIPA			; Then continue
	 JRST WEIRDO		; Else weirdo
	CAIG LINK,LLINK
	CAIGE LINK,FLINK
	 JRST LNKOOR
	MOVEI ILNK,-FLINK(LINK)
	MOVE ILCB,PLCB(ILNK)
	JUMPN TYPE,RFNM
	SETOM FLAG
	AOS TOTMSG
	DATAO PI,TOTMSG
	MOVEI B,1
	MOVEM B,IWORDN
	SKIPG A,MSGLEN
	 PUSHJ P,GILEN
	SUBI A,2
	MOVEM A,IMSGL
	ADDI A,2
	IMULI A,^D36		; Bits in message
	ADDM A,TOTBIT
	SKIPE SLFLUP		; If self loop
	 JRST NOPAD		; Then no padding to account for
	ADDI A,^D16
	IDIVI A,^D16		; Bits in message from imp
	IMULI A,^D16
	ADDI A,^D35
NOPAD:	IDIVI A,^D36
	SUBI A,2		; Account for header and msg num
	MOVEM A,IMSGL0		; Number of words in received msg
	TRNE CONDS,ENDIN
	 JRST INDUN		; Short message
	JSP INPC,EIN
	DATAI IMP,A
	CAME A,IMSC(ILCB)
	 PUSHJ P,MISMAT

INLP:	MOVE PAT,PATI(ILCB)
	SKIPLE IMSGL
	XCT GIDAT(PAT)
	TRNE CONDS,ENDIN
	 JRST INDUN
	JSP INPC,EIN
	AOS IWORDN
	DATAI IMP,A
	SOS IMSGL0
	SOSGE IMSGL
	 JRST INLP
	CAME A,IDAT(ILCB)
	 PUSHJ P,MISMAT
	JRST INLP

; Input done

INDUN:	NSKPSW(SW.SLE)
	 JRST INDUN1		; SUPPRESS LENGTH ERRORS
	SKIPLE IMSGL0
	 ERROR <MESSAGE TOO SHORT>
	SKIPGE IMSGL0
	 ERROR <MESSAGE TOO LONG>
INDUN1:	AOS IMSC(ILCB)
	CONO IMP,GOTEND
	SOS MOUTC
	SOSGE IPTC(ILCB)
	 JRST [	MOVEI A,IPTCNT
		MOVEM A,IPTC(ILCB)
		SKIPL PATI(ILCB)
		SOSL PATI(ILCB)
		 JRST .+1
		MOVEI A,NPAT-1
		MOVEM A,PATI(ILCB)
		JRST .+1]
	JSP INPC,EIN
	JRST STRTIN

; Get input data

GIDAT:	PUSHJ P,[SETCMB A,IALT(ILCB)
		MOVEM A,IDAT(ILCB)
		POPJ P,]
	PUSHJ P,[MOVE A,[614614614614]
		MOVEM A,IDAT(ILCB)
		POPJ P,]
	PUSHJ P,[PUSHJ P,IRAND
		MOVEM A,IDAT(ILCB)
		POPJ P,]
	SETOM IDAT(ILCB)
	SETZM IDAT(ILCB)
	PUSHJ P,[MOVE A,IFLO(ILCB)
		ROT A,-1
		MOVEM A,IFLO(ILCB)
		MOVEM A,IDAT(ILCB)
		POPJ P,]
	PUSHJ P,[MOVE A,IFLO(ILCB)
		ROT A,-1
		MOVEM A,IFLO(ILCB)
		SETCAM A,IDAT(ILCB)
		POPJ P,]
	PUSHJ P,[MOVE A,SPCPAT
		MOVEM A,IDAT(ILCB)
		POPJ P,]


; Get input length

GILEN:	PUSHJ P,IRAND
	LSH A,-1
	MULI A,MAXL-2
	ADDI A,2
	POPJ P,

; Input random number generator

IRAND:	MOVE A,IRND(ILCB)
	MUL A,[XWD 1,3]
	LSH B,1
	LSHC A,-1
	MOVEM B,IRND(ILCB)
	XOR A,B
	POPJ P,

; Data mismatch printer

MISMAT:	PUSH P,A
	HRRZ A,-1(P)
	PUSH P,@-2(A)
	NSKPSW(SW.SDE)
	 JRST MISMA2
	AOSE FLAG
	 JRST MISMA1		; Not first error
	PUSHJ P,PRID
	HRROI A,[ASCIZ \
WORD      WAS         SHOULD BE       DROPPED        PICKED
\]
	AOSN FSTERR
	 PUSHJ P,OUTMSG
MISMA1:	MOVE A,FLAG
	CAILE A,MAXERR
	 JRST MISMA2
	CAIN A,MAXERR
	 JRST [	MESSAGE <...>
		JRST MISMA3]
	MOVE B,IWORDN
	PUSHJ P,PR3
	MOVE B,-1(P)
	PUSHJ P,SPRW
	MOVE B,0(P)
	PUSHJ P,SPRW
	MOVE B,-1(P)
	ANDCA B,0(P)
	PUSHJ P,SPRW
	MOVE B,-1(P)
	ANDCM B,0(P)
	PUSHJ P,SPRW
MISMA3:	PUSHJ P,CRLF
MISMA2:	POP P,A
	XORB A,0(P)
	MOVN C,A
	ANDCA C,A
CBITER:	MOVE A,0(P)
	JFFO A,[MOVSI A,(1B0)
		MOVNS B
		ROT A,(B)
		ANDCAB A,0(P)
		AOS TOTERR
		JUMPN C,CBITER
		MOVNS B
		AOS HBITER(B)
		MOVE A,IWORDN
		IMULI A,^D36
		ADD B,A
		ANDI B,17
		AOS IBITER(B)
		JRST CBITER]
	SUB P,[XWD 1,1]
	POPJ P,

; Flush rest of message

FLIN:	JSP INPC,EIN
	DATAI IMP,A
FLUSH:	TRNN CONDS,ENDIN
	 JRST FLIN
	CONO IMP,GOTEND
	JSP INPC,EIN
	JRST STRTIN

; LINK OUT OF RANGE

LNKOOR:	NSKPSW(SW.SFM)
	 JRST FLUSH
	PUSHJ P,PRHDR
	MESSAGE <LINK NUMBER OUT OF RANGE>
	JRST FLUSH

; Received rfnm for one of our links

RFNM:	SKIPGE RFNMT(ILCB)	; Are we expecting a rfnm?
	 JRST [	NSKPSW(SW.SFM)
		 JRST FLUSH
		PUSHJ P,PRHDR
		MESSAGE <UNEXPECTED RFNM>
		JRST FLUSH]
	AOSN OUTSTT		; WAS OUTPUT TURNED OFF?
	 DATAO IMP,CNOP		; YES, START IT UP AGAIN
	SETOM RFNMT(ILCB)
	JRST FLUSH

; Message from another host

WEIRDO:	NSKPSW(SW.SWE)
	 JRST FLUSH
	PUSHJ P,PRHDR
	MESSAGE <MSG FROM SITE >
	MOVE B,HOST
	PUSHJ P,PR3
	JRST FLUSH

PRHDR:	PUSHJ P,PRTOD
	MOVE B,TYPE
	PUSHJ P,PR3
	MOVE B,HOST
	PUSHJ P,SPR3
	MOVE B,LINK
	PUSHJ P,SPR3
	MOVE B,ERRC
	PUSHJ P,SPR3
	PUSHJ P,SPACE
	MOVE B,REST
	MOVEI C,2
	PUSHJ P,OUTNUM
	PUSHJ P,SPACE2
	POPJ P,

; Control message from imp

CONTRL:	NSKPSW(SW.SCT)
	 JRST FLUSH
	CAIGE TYPE,NCTRLM
	SKIPGE CTRLM(TYPE)
	 JRST [	PUSHJ P,PRHDR
		JRST .+2]
	PUSHJ P,PRTOD
	MOVE B,TYPE
	ANDI B,17
	CAIL B,NCTRLM
	 JRST [	MESSAGE <TYPE >
		MOVEI C,2
		PUSHJ P,OUTNUM
		JRST FLUSH]
	HRRO A,CTRLM(B)
	PUSHJ P,OUTMSG
	JRST FLUSH

; Control message text

DEFINE	X(PR,S)<XWD PR,[ASCIZ \S\]>

CTRLM:	X(-1,<TYPE 0>)
	X(-1,<ERROR IN LEADER>)
	X(-1,<IMP GOING DOWN>)
	X(-1,<TYPE 3>)
	X(0,<NOP>)
	X(-1,<RFNM>)
	X(-1,<TYPE 6>)
	X(-1,<DESTINATION DEAD>)
	X(-1,<ERROR DURING DATA>)
	X(-1,<INCOMPLETE TRANSMISSION>)
	X(-1,<INTERFACE WAS RESET>)
NCTRLM==.-CTRLM

; Utility routines

OUTMSG:	IFE SYSTEM-BARE,<
		HRLI A,440700
		PUSH P,A
		ILDB A,0(P)
		JUMPE A,OUTMSE
		PUSHJ P,TCO
		JRST .-3
	OUTMSE:	POP P,A>
	IFE SYSTEM-DEC,<
		TTCALL 3,(A)>
	IFE SYSTEM-TENEX,<
		PSOUT>
	POPJ P,

; Answer yes-no

YNO:	PUSHJ P,TCI
	CAIN A,177
	 POPJ P,
	AOS (P)
	CAIN A,"Y"
	 SETO A,
	CAIN A,"N"
	 SETZ A,
	SKIPG A
SKPRET:	AOS (P)
	POPJ P,

; Tty character input

TCI:	IFE SYSTEM-BARE,<
		IFE PIF,<
			CONSO TTY,40
			 JRST [	PUSHJ P,RCLOCK
				JRST .-1]
			DATAI TTY,A>
		IFN PIF,<
			AOSE TTICT
			 JRST .-1
			MOVE A,TTICH>
		PUSHJ P,TCO
		ANDI A,177
		CAIN A,15
		 JRST [	MOVEI A,12
			PUSHJ P,TCO
			MOVEI A,15
			JRST .+1]>
	IFE SYSTEM-DEC,<
		TTCALL 0,A
		CAIN A,12
		JRST TCI>
	IFE SYSTEM-TENEX,<
		PBIN
		CAIN A,37
		MOVEI A,15>
	CAIG A,"Z"+40
	CAIGE A,"A"+40
	 POPJ P,
	SUBI A,40
	POPJ P,

; Tty character output

TCO:	IFE SYSTEM-BARE,<
		IFE PIF,<
			CONSZ TTY,20
			 JRST [	PUSH P,A
				PUSHJ P,RCLOCK
				POP P,A
				JRST .-1]
			DATAO TTY,A>
		IFN PIF,<
			PUSH P,A
			MOVEI A,NTTBUF*5-4
			CAMG A,TTOCT
			 JRST .-1
			MOVE A,TTOIPT
			CAMN A,TTOEPT
			 JRST [	MOVE A,TTOBPT
				MOVEM A,TTOIPT
				JRST .+1]
			POP P,A
			IDPB A,TTOIPT
			AOSN TTOCT
			 JRST [	AOS TTOCT
				CONO TTY,10+TTYCHN
				JRST .+1]>>
	IFE SYSTEM-DEC,<
		TTCALL 1,A>
	IFE SYSTEM-TENEX,<
		PBOUT>
	POPJ P,

; TTY INTERRUPT

IFN PIF,<

TTOBPT:	POINT 7,TTOBUF-1,34
TTOEPT:	POINT 7,TTOBUF+NTTBUF-1,34

TTYINT:	0
	CONSZ TTY,40
	 JRST TTIINT
	CONO TTY,200+TTYCHN
	SOSGE TTOCT
	 JEN @TTYINT
	AOSN OUTSTT		; WAS IMP OUTPUT TURNED OFF?
	 DATAO IMP,CNOP		; YES, START IT UP AGAIN
	PUSH P,A
	MOVE A,TTOOPT
	CAMN A,TTOEPT
	 JRST [	MOVE A,TTOBPT
		MOVEM A,TTOOPT
		JRST .+1]
	ILDB A,TTOOPT
	DATAO TTY,A
	POP P,A
	JEN @TTYINT

TTIINT:	DATAI TTY,TTICH
	SETOM TTICT
	JEN  @TTYINT
>

; Number input

GNUM:	IFN SYSTEM-TENEX,<
	SETZ B,
	PUSHJ P,TCI
	CAIGE A,"8"
	CAIGE A,"0"
	 POPJ P,
GNUMLP:	LSH B,3
	ADDI B,-"0"(A)
	PUSHJ P,TCI
	CAIGE A,"8"
	CAIGE A,"0"
	 AOSA 0(P)
	JRST GNUMLP
	POPJ P,>
	IFE SYSTEM-TENEX,<
	MOVEI C,10
	MOVEI A,100
	NIN
	 JRST .+2
	AOS 0(P)
	BKJFN
	 JFCL
	PUSHJ P,TCI
	POPJ P,>

; Number output

PR2D:	MOVEI C,2
OUTDEC:	SKIPA A,[^D10]
OUTNUM:	MOVEI A,8
	MOVEM A,RADIX
	IFN SYSTEM-TENEX,<
		MOVE A,B
	OUTNU1:	IDIV A,RADIX
		HRLM B,0(P)
		SOSG C
		SKIPE A
		 PUSHJ P,OUTNU1
		HLRZ A,0(P)
		ADDI A,"0"
		JRST TCO>
	IFE SYSTEM-TENEX,<
		HRLZI C,170000(C)
		HRR C,RADIX
		MOVEI A,101
		NOUT
		 JFCL
		POPJ P,>

; Carriage-return line-feed

CRLF:	MESSAGE <
>
	POPJ P,

; Delay for n msec

WAIT:	IFE SYSTEM-BARE,<
		PUSH P,A
		PUSHJ P,RCLOCK
		ADDM A,0(P)
		PUSHJ P,RCLOCK
		CAMGE A,0(P)
		 JRST .-2
		POP P,A>
	IFE SYSTEM-DEC,<
		IDIVI A,^D1000
		SLEEP>
	IFE SYSTEM-TENEX,<
		DISMS>
	POPJ P,

; Type space(s)

SPACE2:	PUSHJ P,SPACE
SPACE:	MOVEI A," "
	JRST TCO

; Print word (with or without space)

SPRW:	PUSHJ P,SPACE2
PRWORD:	PUSH P,B
	HLRZS B
	MOVEI C,6
	PUSHJ P,OUTNUM
	PUSHJ P,SPACE
	POP P,B
	HRRZS B
	MOVEI C,6
	JRST OUTNUM

; Print time of day

PRTOD:	PUSHJ P,CRLF
	IFE SYSTEM-TENEX,<
	SETO B,
	MOVSI C,(1B0+1B12)
	MOVEI A,101
	ODTIM>
	IFN SYSTEM-TENEX,<
	PUSHJ P,RCLOCK
	IDIVI A,^D1000
	IDIVI A,^D60
	PUSH P,B
	IDIVI A,^D60
	IMULI A,^D100
	ADD B,A
	MOVEI C,4
	PUSHJ P,OUTDEC
	MOVEI A,":"
	PUSHJ P,TCO
	POP P,B
	MOVEI C,2
	PUSHJ P,OUTDEC>
	PUSHJ P,SPACE2
	POPJ P,

; Print summary

PRSUM:	SETZM SFLAG
	AOSN OUTSTT		; WAS OUTPUT TURNED OFF?
	 DATAO IMP,CNOP		; YES, START IT UP AGAIN
	NSKPSW(SW.SSM)
	 POPJ P,
	PUSH P,LINK
	PUSH P,HOST
	PUSHJ P,CRLF
	PUSHJ P,RCLOCK
	MOVE B,STIME
	CAMG B,A
	 ADD B,[SUMWT]
	MOVEM B,STIME
	PUSHJ P,PRTOD
	MESSAGE <SUMMARY
>
	MOVE B,TOTMSG
	MOVEI C,0
	PUSHJ P,OUTDEC
	MESSAGE < MESSAGES RECEIVED
LINK COUNT
>
	MOVE LINK,MNLINK
PRMSC:	MOVEI B,FLINK(LINK)
	PUSHJ P,PR3
	PUSHJ P,SPACE2
	MOVE B,PLCB(LINK)
	MOVE B,IMSC(B)
	SETZ C,
	PUSHJ P,OUTDEC
	PUSHJ P,CRLF
	AOBJN LINK,PRMSC
	PUSHJ P,CRLF
	MOVE B,TOTBIT
	SETZ C,
	PUSHJ P,OUTDEC
	MESSAGE < BITS RECEIVED
>
	MOVE B,TOTERR
	SETZ C,
	PUSHJ P,OUTDEC
	MESSAGE < TOTAL BIT ERRORS
>
	SKIPN TOTERR
	 JRST PRSUMX

	MESSAGE <

ERRORS BY PDP-10 BIT POSITION
BIT ERRORS
>
	MOVSI HOST,-^D36
HBITLP:	SKIPN HBITER(HOST)
	 JRST HBITNX
	MOVEI B,(HOST)
	PUSHJ P,PR2D
	PUSHJ P,SPACE2
	MOVE B,HBITER(HOST)
	MOVEI C,0
	PUSHJ P,OUTDEC
	PUSHJ P,CRLF
HBITNX:	AOBJN HOST,HBITLP
	MESSAGE <
ERRORS BY IMP BIT POSITION
>
	MOVSI HOST,-^D16
IBITLP:	SKIPN IBITER(HOST)
	 JRST IBITNX
	MOVEI B,(HOST)
	PUSHJ P,PR2D
	PUSHJ P,SPACE2
	MOVE B,IBITER(HOST)
	MOVEI C,0
	PUSHJ P,OUTDEC
	PUSHJ P,CRLF
IBITNX:	AOBJN HOST,IBITLP
PRSUMX:	PUSHJ P,CRLF
	POP P,HOST
	POP P,LINK
	POPJ P,

; Print message identification

PRID:	PUSHJ P,CRLF
	PUSHJ P,PRTOD
	MESSAGE <ERROR IN MESSAGE >
	MOVE B,IMSC(ILCB)
	SETZ C,
	PUSHJ P,OUTDEC
	MESSAGE < ON LINK >
	MOVEI B,FLINK(ILNK)
	PUSHJ P,PR3
	PUSHJ P,CRLF
	POPJ P,

SPR3:	PUSHJ P,SPACE
PR3:	MOVEI C,3
	JRST OUTNUM

; Nop to send to imp

CNOP:	BYTE (8)4

; Define link control blocks

DEFINE	DLNK(N)<
LCB'N:
HDR'N:	BLOCK 1
IMSC'N:	BLOCK 1
OMSC'N:	BLOCK 1
PATI'N:	BLOCK 1
PATO'N:	BLOCK 1
IPTC'N:	BLOCK 1
OPTC'N:	BLOCK 1
IDAT'N:	BLOCK 1
IRND'N:	BLOCK 1
IFLO'N:	BLOCK 1
IALT'N:	BLOCK 1
ODAT'N:	BLOCK 1
ORND'N:	BLOCK 1
OFLO'N:	BLOCK 1
OALT'N:	BLOCK 1
RFNMT'N:BLOCK 1
>
Q==0
REPEAT MLINKS,<
	DLNK(\Q)
Q==Q+1>
Q==0
DEFINE	CONCAT(A,B)<A'B>

PLCB:	REPEAT MLINKS,<
	CONCAT(LCB,\Q)
Q==Q+1>

; Define offsets into lcb

FOOF:	PHASE 0
DLNK()
DEPHASE
BLOCK FOOF-.

; Random variables

IFE SYSTEM-BARE,<
CLOCK: BLOCK 1		; Tick counter
IFN PIF,<
TTOBUF:	BLOCK NTTBUF
TTOIPT:	BLOCK 1
TTOOPT:	BLOCK 1
TTOCT:	BLOCK 1
TTICT:	BLOCK 1
TTICH:	BLOCK 1>>
HTIME:	BLOCK 1		; Hang timer
STIME:	BLOCK 1		; Summary timer
SFLAG:	BLOCK 1		; Flag says summary wanted
SPAT:	BLOCK 1		; Initial pattern
HBITER:	BLOCK ^D36	; Pdp-10 bit error counters
IBITER:	BLOCK ^D16	; Imp bit error counters
TOTERR:	BLOCK 1		; Total erroneous bits
TOTBIT:	BLOCK 1		; Total bits received
TOTMSG:	BLOCK 1		; Total messages received
OMSGL:	BLOCK 1		; Length of current output message
IMSGL:	BLOCK 1		; Length of real data in input
IMSGL0:	BLOCK 1		; Length after imp padding
MOUTC:	BLOCK 1		; Message outstanding counter
ADDRES:	BLOCK 1		; Site number
MSGLEN:	BLOCK 1		; Message length to use, -1 for random
FLAG:	BLOCK 1		; Error message heading flag
FSTERR:	BLOCK 1		; First bit error heading flag
FSTHDR:	BLOCK 1		; First header printout flag
RADIX:	BLOCK 1		; Radix for number printer
SPCPAT:	BLOCK 1		; SPECIAL DATA PATTTERN
MNLINK:	BLOCK 1		; AOBJN WORD FOR LINKS TO USE
LLINK:	BLOCK 1		; LAST LINK TO USE
IWORDN:	BLOCK 1		; Word in message
NOPCNT:	BLOCK 1		; Initial nop counter
OUTSTT:	BLOCK 1		; Output stopped
SOLNK:	BLOCK 1		; SAVED OLNK
IFN SYSTEM-BARE,<
OPCNT:	BLOCK 1>	; Inner loop operation counter
REST:	BLOCK 1		; Remainder of header
SLFLUP:	BLOCK 1		; Self loop flag
XMTFLG:	BLOCK 1		; Transmit only
RCVFLG:	BLOCK 1		; Receive only
PDL:	BLOCK 100	; Stack

END	START
