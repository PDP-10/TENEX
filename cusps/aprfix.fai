TITLE APRFIX

;ARITHMETIC EXCEPTION HANDLER FOR MLAB AND FRIENDS.
;THIS ROUTINE IS CALLED BY THE SAIL INTERRUPT HANDLER (INTMAP)
; EITHER DIRECTLY OR AFTER THE TRIG ROUTINE INTERRUPT
; HANDLER HAS PEEKED AROUND A BIT.
;
;TWO ENTRIES:
;	APRFXO		FOR OVERFLOWS
;	APRFXF		FOR FLOATING OVERFLOWS


INTERNAL APRFXO,APRFXF
EXTERNAL JOBTPC,OVPCWD,PS3ACS


A__1
B__2
C__3
D__4
E__5
F__6

P__17

FU __ 100		;FLOATING UNDERFLOW
ND __  40		;NO DIVIDE (DIVISOR = 0)
FO __ 440000		;REALLY FLOATING OVERFLOW + OVERFLOW


APRFXO:	SKIPA	F,[0]		;INDICATE REGULAR INTERRUPT
APRFXF:	 MOVE	F,[XWD FO,0]	;INDICATE FLOATING
APRFIX:	MOVEI	A,400000
	RIR
	HLRZ	B,B		;LEVTAB
	MOVE	A,@2(B)		;GET PC WORD
	OR	A,F		;SAVE BITS OF INTERRUPT
	MOVEM	A,OVPCWD	;SAVE FOR TRACKS. 
	MOVE	F,2(B)		;ADDRESS WHERE PC IS KEPT
APRFX2:	MOVE	A,OVPCWD	;GET ADDRESS OF INTERRUPT.
	MOVEI	B,[ASCIZ @ARITHMETIC UNDER/OVER FLOW
@]
	PUSH	P,B		;SAVE MESSAGE
	SOS	OVPCWD		;POINT AT OFFENDING INSTRUCTION
	MOVE	C,@OVPCWD	;GET OFFENDING INSTRUCTION.
	
EFFGO:	HRRE	D,C		;EFFECTIVE ADDRESS CALCULATOR
	TLNE	C,17		;INDEX FIELD?
	 JRST	 [LDB E,[POINT 4,C,17] ;INDEX AC
		  MOVE E,PS3ACS(E) ;GET VALUE
		  ADDI D,(E)	   ;AND ADD IN ITS VALUE
		 
		  JRST .+1]
	TLNE	C,20		;INDIRECT BIT?
	 JRST	 [CAIG D,17	;IF IN AC AREA
		  ADDI D,PS3ACS
		  MOVE C,(D)	;PICK UP VALUE.
		  JRST EFFGO]	;AND LOOP!!!!
	MOVEM	D,EFFADR	;SAVE EFFECTIVE ADDRESS.

	AOS	OVPCWD		;GET IT BACK TO POINT TO NEXT INSTR.
	LDB	0,[POINT 9,@OVPCWD,8];GET OP CODE OF NEXT INSTRUCTION
        SOS     OVPCWD          ;RESTORE TO POINT TO BAD INSTR.
	CAIE	0,255		;IT IS A JFCL?
	 JRST	 CHKOP		;NO -- DO ON-CONDITION THINGS.
         JRST    JFSEE          ;YES -- GO CHECK IT AGAIN AND DEAL WITH IT.
CHKOP:   LDB	0,[POINT 9,@OVPCWD,8];OP CODE!!
	CAIG	0,253		;GREATER THAN AOBJN
	CAIGE	0,240		;OR LESS THAN  ASH
	 TRZA	 0,776		;THEN FIX UP RESULTS
	JRST	JFSEE		;JUST LOOK FOR JFCL(IT WONT BE,BUT...)
	HRLOI	B,377777	;LARGEST FP NUMBER
	TLNE	A,FU		;FLOATING UNDERFLOW?
	 MOVEI	 B,0		;YES -- SUBSTITUTE ZERO
	TLNN	A,ND		;ZERO DIVISOR?
	 JRST	 SGNTST		;GO TRY TO COMPUTE SIGN.
	HRRZ	B,EFFADR	;GET EFFECTIVE ADDRESS.
	CAIN	0,1		;IMMEDIATE MODE?
	 JRST	 [MOVE C,@OVPCWD;GET INSTRUCTION THIS TIME.
		  TLNN C,200000	;FLOATING INSTRUCTION?
		   MOVSS B	;YES -- SWAP HALVES
		  MOVE C,B
		  JRST F1]	;CONTINUE
	CAIG	B,17		;IS IT AN AC
	 ADDI	 B,PS3ACS	;YES
	MOVE	C,(B)
F1:	LDB	B,[POINT 4,@OVPCWD,12];AC FIELD.
	XOR	C,PS3ACS(B)	;DECIDE WHICH SIGN
	HRLOI	B,377777	;LARGEST FLOATING + NUMBER
	TLNE	C,400000
	 MOVSI	 B,400000	;LARGEST FLOATING - NUMBER
	JRST	RESP		;GO STORE IN DESTINATION.

SGNTST:	HRRZ	A,EFFADR	;GOT TO FIND THE RESULT SOMEHOW.
	CAIG	A,17
	 ADDI	 A,PS3ACS	;RELOCATE TO AC AREA.
	MOVE	C,(A)		;PICK UP FROM MEMORY
	CAILE	0,1		;MUST GET FROM AC?
	 JRST	 SGNQQ		;ALREADY GOT IT, NO AC FETCH NEEDED
	LDB	C,[POINT 4,@OVPCWD,12]
	MOVE	C,PS3ACS(C)	;GOT IT
SGNQQ:	LDB	A,[POINT 9,@OVPCWD,8] ;GET OP CODE AGAIN.
	CAILE	A,250		;IF INTEGER ADD OR SUB,
	 TLC	 C,400000	;- CHANGE SIGN OF THING PICKED UP
TSTSGN:	JUMPGE	C,RESP		;OUR ANSWER HAS SAME SIGN AS RESULT
	JUMPE	B,RESP		;NEGATIVE ZERO IS ZERO.
	MOVSI	B,400000	;LARGEST - NUMBER.

;COME HERE WITH WHAT YOU WANT TO STORE IN AC B.
RESP:	HRRZ	A,EFFADR	;EFFECTIVE ADDRESS
	CAIG	A,17		;AN AC?
	 ADDI	 A,PS3ACS	;YES
	TRNE	0,2		;TO MEMORY OR BOTH?
	 MOVEM	 B,(A)		;YES
	CAIN	0,2		;ONLY TO MEMORY
	 JRST	 JFSEE		;YES -- NOT TO AC...
	LDB	A,[POINT 4,@OVPCWD,12];GOT IT.
	MOVEM	B,PS3ACS(A)	;NOW RESULT EVERYWHERE.
JFSEE:	POP	P,A		;RESTORE MESSAGE
	AOS	OVPCWD		;GET IT BACK TO POINT TO NEXT INSTR.
	LDB	0,[POINT 9,@OVPCWD,8];GET OP CODE OF NEXT INSTRUCTION
	CAIE	0,255		;IT IS A JFCL?
	 JRST	 ONCHK		;NO -- DO ON-CONDITION THINGS.
	HRRZ	0,@OVPCWD	;EFFECTIVE ADDRESS OF JFCL
	HRRM	0,(F)		;THE PLACE TO RETURN TO!
RESAPR:	MOVSI	A,FU!ND!FO	;TURN OFF ALL BITS
	ANDCAM	A,(F)		;IN JOBTPC
	POPJ	P,		;RETURN TO INTMAP 

ONCHK:	HRRO	A,A		;
	PSOUT			;PRINT OUT THE MESSAGE
	JRST	RESAPR

EFFADR:	0

	END
