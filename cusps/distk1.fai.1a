00100	TITLE T4010 -- TEKTRONIX 4010 CODE
00200	
00300	
00400	
00500	PHASE 0			;START PHASING ALL CODE!!!
00600	
00700	BLOCK PCHBRK		;LEAVE ROOM FOR LANGUAGE PART
00800	
00900		4		;DISPLAY NUMBER 4
01000		SIXBIT /T4010/	;NAME OF THE DISPLAY
01100	
01200	DISPATCH		;GENERATE DISPATCH TABLE.
01300	
01400	SMID _ <780.0>		;SIZE OF SCREEN
01500	SMIDH _ <390.0>		;HALF-SCREEN
01600	
01700	YVIEW _ <1.00>		;MAX Y SCREEN VIEWPORT PARAMETER
01800	XVIEW _ <1.311>		;HORIZONTAL ARRANGEMENT
01900	
02000	
02100	DISNUM__4		;DISPLAY SEGMENT NUMBER 4.
02200	
02300	
02400	;MISCELLANEOUS DATA AREAS.
02500	
02600		XR (LEFTM)
02700		XR (.COD3)
02800	
03100		XR (MODE)		;MODE TERMINAL IS IN.
03200	
03300	ENQTAB:	1.0		;YES -- IT IS A STORAGE TUBE
03400		0.0		;NO THREE-D HARDWARE
03500		0.0		;NO TABLET (YET)
03600		0.0		;NO KEYS
03700		SMID		;NUMBER OF POINTS.
03800		5.63		;INCHES PER VIEWPORT
03850				;(14.3/2.54)
03900		XVIEW		;X VIEWPORT MAXIMUM
04000		YVIEW		;Y VIEWPORT MAXIMUM
04100	
04200	
04300	
04400	CHARTB:  BEGIN CHARACTER 
04500		N__0
04600		Y__3
04700		T__1		;TRANSLITERATE
04800	
04900		BYTE (2) N,N,N,N,N,N,N,N,N,N,Y,N,N,Y,N,N,N,N	; 0-21
05000		BYTE (2) N,N,N,N,N,N,N,N,N,N,N,N,N,N,Y,Y,Y,Y	; 22-43
05100		BYTE (2) Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y	; 44-65
05200		BYTE (2) Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y	; 66-107
05300		BYTE (2) Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y	; 110-131
05400		BYTE (2) Y,Y,Y,Y,Y,Y,N,T,T,T,T,T,T,T,T,T,T,T	; 132-153
05500		BYTE (2) T,T,T,T,T,T,T,T,T,T,T,T,T,T,T,N,N,N	; 154-175
05600		BYTE (2) N,N					; 176-177
05700		BEND
05800	
05900	
06000	
06100	QEVENT:	SUB	P,[XWD 2,2](S)	;DOES NOT HAVE THESE YET
06200	QOUT:	ERR	<NO SUCH OPERATION>,13
06300		JRST	QINT		;AND DISCARD.
06400	
06500	
06600	;THE TEKTRONIX HAS ONLY ONE CHARACTER SCALE AND ONLY ONE INTENSITY.
06700	; ....
06800	
06900	
07100	QRAST:
07300	
09600	QINT:	POP	P,A		;ADJUST STACK.
09700		JRST	@.RET(S)	;RETURN ....
09800	
09900	
10000	;QTEXT 	CALLED FROM LANGUAGE FOR EACH CHARACTER TO OUTPUT.
10100	;	A HAS CHARCTER
10200	;	A=-1 	START STRING AND UPDATE TEXT SIZES
10300	;	A=-2	END STRING
10400	; ALL ACCUMULATORS CONSIDERED VOLATILE.  MAY BE DESTROYED.
10500	
10600	QTEXT:	CAME	A,[-1](S)	;START OF STRING?
10700		 JRST	 NOTBEG(S)	;NO
10710		SKIPGE	TSCAL(R)	;CHECK FOR SIGN ONLY
10713		 TLZA	 TEXTON		;IF USER WANTS TEXT ONLY IN WINDOW.
10716		 TLO	 TEXTON
10719		MOVSI	A,(<14.0>)	;WIDTH OF CHARACTER BOX.
10722		MOVE	E,[PUSHJ P,CODE2(S)](S) ;GET INSTRUCTION.
10725		MOVE	F,[PUSHJ P,CONV2(S)](S)
10728		TLNE	LAST3D		;IF LAST POSITION WAS 3-D
10731		 JRST	 [FDVR A,.X3M(R) ;GET NORMALIZED VIEWPORT COORD
10734			  FMPR A,.ZBEAM(R) ;AND FIX FOR THIS DEPTH.
10737			  TRC E,CODE2CODE3 ;CHANGE TO TEST CODE3.
10740			  TRC F,CONV2CONV3 ;CHANGE TO POSITION WITH CONV3
10743			  JRST .+2(S)](S)
10746		FDVR	A,.XPM(R)	;CONVERT TO PAGE COORDINATES.
10749		MOVEM	A,BOXW(R)	;SAVE AS BOX WIDTH
10752		FMPR	A,[0.85714](S) ;* 12/14
10755		MOVEM	A,CHARW(R)	;AND SAVE.
10758		MOVEM	E,CHART(R)	;CHARACTER TEST ROUTINE.
10761		MOVEM	F,CHARP(R)	;AND CHARACTER POSITION ROUTINE.
10764		MOVSI	A,(<22.0>)
10767		TLNE	LAST3D		;IF LAST POINT INSTRUCTION WAS 3D.
10770		 JRST	 [FDVR A,.Y3M(R) ;GET NORMALIZED VIEWPORT
10773			  FMPR A,.ZBEAM(R) ;AND FIX FOR DEPTH.
10776			  JRST .+2(S)](S)
10779		FDVR	A,.YPM(R)	;CONVERT TO PAGE COORDINATES.
10782		MOVEM	A,BOXH(R)	;HEIGHT OF BOX.
10785		FMPR	A,[0.727272](S)	;*16/22
10788		MOVEM	A,CHARH(R)	;AND SAVE.
10800		MOVE	A,.XBEAM(R)	;GET CURRENT BEAM POSITION
10900		MOVEM	A,LEFTM(R)	;SAVE AS LEFT MARGINI.
11000		TLO	FTEMP1		;SAY NO TEXT GONE OUT YET
11100		TLZ	DISIFY		;IN CASE POINT MODE INSTRUCTION NEEDED
11200		JRST	QREN(S)		;INITIALIZE STORAGE.
11300	
11400	NOTBEG:	TLNE	A,-1		;CHARACTER?
11500		 JRST	 ENDC(S)	;END STRING.
11600		CAIN	A,15		;CARRIAGE RETRUN
11700		 JRST	 CR(S)
11800		CAIN	A,12
11900		 JRST	 LF(S)		;LINE FEED.
12000		PUSH	P,A		;SAVE CHAR.
12100		MOVE	B,.XBEAM(R)	;GET CURRENT BEAM
12200		MOVE	C,.YBEAM(R)	;
12300		MOVE	D,.ZBEAM(R)
12400		XCT	CHART(R)	;TEST THE CHARACTER IN THE WINDOW
12500		JUMPN	A,TXT0(S)	;NOT IN WINDOW
12600		FADR	B,BOXW(R)
12700		FADR	C,BOXH(R)	;SEE IF UPPER RIGHT HAND CORNER TOO.
12800		XCT	CHART(R)	;TEST UPPER RIGHT HAND CORNER
12900	TXT0:	MOVE	B,.XBEAM(R)	;GET BEAM POSITION BACK.
13000		MOVE	C,.YBEAM(R)
13100		XCT	CHARP(R)	;CONVERT TO SCREEN POSITION.
13200		JUMPN	A,TRYTXT(S)	;NOT ON WINDOW -- BUT SEE IF HE WANTS IT ANYWAY.
13300	TXT1:	CAMN	B,.IXBEAM(R)	;SEE IF WE NEED TO MOVE BEAM
13400		CAME	C,.IYBEAM(R)	;?
13500		 JRST	 [PUSHJ P,ENDC(S) ;YES -- DUMP CHARACTERS.
13600		 	  PUSHJ P,PGEN(S) ;AND PUT OUT POINT-MODE INSTR.
13700			  JRST .+1(S)](S)
13800	
13900	CC:	SKIPN	.COD1(R)	;ENOUGH ROOM?
14000		 PUSHJ	 P,QTST(S)	;NO -- MAKE SOME.
14100		SOS	.COD1(R)	;NOW ONE LESS CHAR.
14200		MOVE	A,(P)		;GET CHARACTER
14300		IDPB	A,.COD2(R)	;STORE IT AWAY.
14400	UPDT:	MOVE	A,BOXW(R)
14500		FADM	A,.XBEAM(R)	;BUMP XBEAM
14600		MOVEI	A,=14
14700		ADDM	A,.IXBEAM(R)	;AND IXBEAM
14800		JRST	POPAJ(S)	;ADJUST STACK AND RETURN.
14900	
15000	TRYTXT:	TLNE	TEXTON		;GO OUTSIDE WINDOW?
15100		 JRST	 UPDT(S)	;NO -- DO NOT DISPLAY CHAR
15200		JUMPL	B,UPDT(S)	;OFF SCREEN TO LEFT.
15300		JUMPL	C,UPDT(S)
15400		CAIG	B,=1009		;OFF AT RIGHT?
15500		CAILE	C,=1004		;OFF AT TOP?
15600		 JRST	 UPDT(S)
15700		JRST	TXT1(S)		;YES -- DISPLAY
15800	
15900	LF:	MOVN	A,BOXH(R)	;DECREMENT YBEAM
16000		FADM	A,.YBEAM(R)
16100		JRST	ENDC(S)		;AND DUMP CHARACTER BUFFER
16200	
16300	CR:	MOVE	A,LEFTM(R)
16400		MOVEM	A,.XBEAM(R)	;STORE IT.
16500	
16600	
16700	;SUBROUTINE TO DUMP CHARACTER BUFFER.
16800	;	CLOBBERS A; CAREFULLY PRESERVES B,C
16900	
17000	ENDC:	MOVE	A,.COD1(R)	;SEE HOW MANY BYTES REMAIN
17100		CAIN	A,4		;IF SOME ARE ALREADY STORED,
17200		 POPJ	 P,
17300	QTST:	PUSH	P,B		;SAVE X COORDINATE IN CASE STOBYT CLOBBERS
17400		PUSH	P,C		;AND SAME FOR Y
17500		MOVE	A,.COD3(R)	;PICK UP WORD OF BYTES.
17600		TLZ	A,740000	;INSTALL OP-CODE
17700		TLO	A,%OTXT
17800		PUSHJ	P,STOBYT(S)	;AND STORE IT.
17900		POP	P,C
18000		POP	P,B		;RESTORE AC'S
18100	QREN:	MOVEI	A,4		;THIS MANY BYTES.
18200		MOVEM	A,.COD1(R)	;
18300		MOVE	A,[POINT 8,.COD3(R),3](S) ;NEW POINTER.
18400		MOVEM	A,.COD2(R)
18500		SETOM	.COD3(R)	;NO ACCUMULATED CHARACTER.
18600		POPJ	P,		;DONE.
     
00100	
00200	
00300	;ROUTINES FOR ACTUALLY TYPING THINGS AT THE TERMINAL.
00400	
00500	
00600	; TYP  IS ROUTINE TO TYPE OUT CHARACTER IN D.
00700	
00800	TYP:	TTCALL	15,D		;PATCH TO SKIPA IF TYPE OUT ON TTY.
00900		POPJ	P,		;RETURN.
01000		ANDI	D,377		;EIGHT BITS.
01100		TTCALL	3,[ASCIZ /OUTPUT: /](S)
01200		D+012000000000		;SAIL UUO TO TYPE OCTAL NUMBER
01300		TTCALL	3,[ASCIZ /
01400	/](S)
01500		POPJ	P,
01600	
01700	
01800	
01900	GET:	SKIPE	MODE(R)		;THERE IS ONLY 1 MODE. ARE WE IN IT?
02000		 POPJ	 P,		;YES
02100	GS:	MOVEI	D,35		;NO -- SEND GS TO GET INTO GRAPHICS MODE.
02200	MODGO:	PUSHJ	P,TYP(S)	;SEND THE CORRECT ENTERING CODE.
02300		CAIN	D,37		;IF SENDING US TO GET OUT OF MODE,
02400		 MOVEI	 D,0		;MAKE MODE ZERO. (ALPHA)
02500		MOVEM	D,MODE(R)	;AND SAVE IT.
02600		POPJ	P,
02700	
02800	CURSOR:	MOVE	A,CURMOV(R)	;GET THE CURSOR POSITION.
02900		PUSHJ	P,INTERP(S)	;INTERPRET IT. (WILL SKIP IF CURMOV NOT INITIALIZED)
03000	MOD0:	SKIPN	MODE(R)		;RETURN TO SINGLE-BYTE MODE.
03100		 POPJ	 P,		;RETURN TO USER.
03200		MOVEI	D,37		;RETURN TO MODE 0 WITH A US
03300		JRST	MODGO(S)	;LIKE SO.
03400	
03500	
03600	ERASE:	SETZM	MODE(R)		;SAFETY FACTOR.
03700		MOVEI	D,33		;ESCAPE
03800		PUSHJ	P,TYP(S)
03900		MOVEI	D,14		;FORM FEED
04000		PUSHJ	P,TYP(S)
04100		MOVEI	C,1		;SLEEP FOR 1 SECOND.
04200		CALLI	C,31		;SLEEP ZZZZZZZZZZZ WHILE BLINDING GREEN FLASHES
04300		POPJ	P,
04400	
04500	
04600	INTERP:	MOVE	C,MODE(R)	;FOR REFERENCE
04700		LDB	B,[POINT 4,A,3](S) ;GET OP-CODE
04800		ADDI	B,(S)		;RELOCATE
04900		JRST	@DISP(B)	;DISPATCH
05000	
05100	DISP:	XWD S,DHLT		;HALT (END OF BLOCK)
05200		XWD S,DMOV		;MOVE
05300		XWD S,DMOV		;DOT
05400		XWD S,DDRW		;DRAW
05500		XWD S,DTXT		;TEXT
05600	
05700	DHLT:	AOS	(P)		;SKIP RETURN TO CALLER.
05800		POPJ	P,		;LIKE SO.
05900	
06000	DMOV:	PUSHJ	P,GS(S)		;FORCE A GS TO GET 'MOVE'
06100	DDRW:	PUSHJ	P,GET(S)	;GET SOME MODE (IN CASE BUNGLE ABOUT MOVE-DRAW SEQUENCE)
06200		LDB	D,[POINT 5,A,30](S) ;GET HIGH 5 BITS OF Y
06300		TRO	D,40
06400		PUSHJ	P,TYP(S)
06500		LDB	D,[POINT 5,A,35](S) ;LOW 5 BITS
06600		TRO	D,140
06700		PUSHJ	P,TYP(S)
06800		LDB	D,[POINT 5,A,12](S) ;GET HIGH 5BITS OF X
06900		TRO	D,40
07000		PUSHJ	P,TYP(S)
07100		LDB	D,[POINT 5,A,17](S) ;LOW BITS
07200		TRO	D,100
07300		PUSHJ	P,TYP(S)
07400	STOVAL:	LDB	B,[POINT 4,A,3](S) ;GET OP CODE AGAIN.
07500		TLZ	A,740000	;REMOVE OP CODE.
07800		CAIE	B,%ODOT/40000	;WAS IT A DOT?
07900		 POPJ	 P,		;NO -- FINISHED.
08000		ADDI	A,1		;YES -- DRAW A SHORT VECTOR.
08100		JRST	DDRW(S)		;AND GO DO IT.
08200	
08300	
08400	
08500	DTXT:	PUSHJ	P,MOD0(S)	;GET IT IN SINGLE-BYTE MODE.
08600		ROT	A,4		;GET RID OF STUFF.
08700		MOVEI	E,4
08800	DTXL:	MOVEI	B,0
08900		ROTC	A,8		;GET FIRST CHARACTER IN B
09000		CAIN	B,377		;ALL 1'S ?
09100		 POPJ	 P,		;YES -- FINISHED.
09200		MOVEI	D,(B)		;COPY CHARACTER.
09300		PUSHJ	P,TYP(S)	;GO TYPE CHARACTER.
09400		SOJG	E,DTXL(S)	;LOOP FOR MORE.
09500		POPJ	P,		;DONE....
09600	
09700	
09800	QCODE:	POP	P,D		;GET CHARACTER
09900		PUSHJ	P,TYP(S)	;SEND IT
10000		JRST	@.RET(S)	;AND RETURN.
10100	
