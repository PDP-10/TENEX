XALL

;IF THE SYMBOL 'EXPORT' IS DEFINED, THEN THE ROUTINES
;ARE CONFIGURED FOR EXPORTATION.  ACTUALLY, THIS AMOUNTS
;ONLY TO MAKING THE DEC340 TERMINAL 'UNGETTABLE', SO THAT
;NO NIH UUO'S (CALLI AC,-10) WILL BE EXECUTED.
;THE FOLLOWING LINE SHOULD BE INCLUDED FOR EXPORT
  ?EXPORT__1




;SYSTEM CALL TO HANDLE THE DISPLAY
DEFINE DISCAL (X) <
	CALLI	X,-10
>

;THE FOLLOWING THREE MACROS ARE USED TO SET OR CLEAR THE
;400000 BIT IF HIGH SEGMENT CORE ALLOCATION IS BEING DONE

DEFINE CLRBIT (X) <
	SKIPE	.SEG(S)		;IS THIS HIGH SEGMENT?
	TRZ	X,400000	;YES-CLEAR 400000 BIT
>

DEFINE SETBIT (X) <
	SKIPE	.SEG(S)		;IS THIS HIGH SEGMENT?
	TRO	X,400000	;YES-SET 40000 BIT
>

DEFINE ADDBIT (X) <
	SKIPE	.SEG(S)		;IS THIS HIGH SEGMENT?
	ADDI	X,400000	;YES-ADD 400000
>



;ACCUMULATOR DEFINITIONS

DEFINE X (A,B) <
	? A _ B
>

			;AC 0 USED FOR FLAGS -- NOT NAMED
X (A,1)			;ACCUMULATORS
X (B,2)			;ORDER IS SOMETIMES USED
X (C,3)
X (D,4)
X (E,5)
X (F,6)
X (G,7)
X (H,10)

X (R,14)		;BASE REGISTER ==> DATA AREA
	?RB_400010	;R IF SECOND SEGMENT USED.
X (S,15)		;BASE REGISTER ==> CODE AREA
			;DO NOT USE 16 -- SAIL'S STRING PDL

X (P,17)		;PUSH-DOWN POINTER FOR ALL CALLS.

;FLAGS IN LEFT HALF OF AC0

	X (DISRUN,400000)	;DISPLAY IS ACTUALLY RUNNING
				;(MUST BE SIGN BIT)
	X (PICOPN,200000)	;A PICTURE IS OPEN
	X (APPEND,100000)	;A PICTURE IS OPENED FOR APPENDING
	X (NOCORE,040000)	;CORE ROUTINES HAVE GIVEN UP.
	X (NOMOCO,020000)	;DO NOT PUT OUT MORE CODE NOW.
	X (FTEMP ,010000)	;TEMPORARY FLAG.
	X (FTEMP1,004000)	;AND ANOTHER TEMP FLAG.
	X (TEXTON,002000)	;ON IF TEXT CANNOT EXTEND BEYOND VIEWPORT
	X (USECOR,001000)	;USE SECOND SEGMENT CORE.
	X (APNDED,000400)	;WE HAVE APPENDED SOMETHING SINCE LAST UPDATE.
	X (BEAMUN,000200)	;BEAM POSITION IS UNDEFINED.
	X (DISIFY,000100)	;'MOVE' OR 'DRAW' INSTRUCTION
	X (UPDONE,000040)	;HAVE UPDATED SCREEN (SEE DDONE IN DISDVS)
	X (BYPASS,000020)	;THREE D BYPASS IN EFFECT
	X (LAST3D,000010)	;LAST POINT-MODE INSTR. WAS 3D
	X (USXFRM,000004)	;USE MATRIX TRANSFORMATION


;MACRO FOR INCLUDING ERROR MESSAGES;
;	FIRST ARGUMENT IS JUST A COMMENT; IT IS NOT
;	PRINTED OUT.  SECOND ARGUMENT IS DECIMAL ERROR
;	NUMBER.  THIRD IS (OPTIONAL) PLACE TO GO WHEN
;	FINISHED WITH ERROR.  IF THERE IS NO PLACE TO
;	GO, THE ERROR IS FATAL.

DEFINE ERR (MESS,NUM,GOTO) <

	IFDIF <GOTO><>, < 
		JRST [ 
	PUSHJ P,@[ XWD S+(=NUM*40),.ERRGO](S)
		JRST GOTO(S)](S) >
	IFIDN <GOTO><>, <
	PUSHJ P,@[ XWD S+400000+(=NUM*40),.ERRGO](S)
	>
>

;DEFINITIONS OF OMNIGRAPH SUBROUTINE NAMES AND
;ARGUMENTS, AS WELL AS OTHER ENTRIES IN THE
;DISPATCH TABLE.

;IN THE FOLLOWING DEFINITIONS:
;	CL   DENOTES A CALL FROM THE OUTSIDE WORLD
;	CI   DENOTES A CALL FROM LANGUAGE-DEPENDENT
;			TO DISPLAY-DEPENDENT CODE
;
;WARNING: NO NAMES LONGER THAN 6 CHARACTERS OR THE SIXBIT /NAME/
;	IN THE CALL TABLE WILL TAKE TWO WORDS.


DEFINE CALLS <

	CL (INI,<INT,INT,PTR,INT>,INIGO)
	CI (INI)
	CL (GET)
	CL (REL)

	CL (OPEN,<INT>)
	CL (APPEND,<INT>)
	CL (CLOSE)

	CL (KILL,<INT>)
	CL (POST,<INT>)
	CL (UNPOST,<INT>)
	CL (DONE)
	CL (CURSOR,<REL,REL>)
	
	CL (APPLY,<PTR,INT>)
	CL (COMPOS,<PTR,INT>)
	CL (PUSH,<INT>)
	CL (POP,<INT>)

	CL (WIND,<REL,REL,REL,REL>)
	CL (PORT,<REL,REL,REL,REL>)
	
	CL (MOVE,<REL,REL>)
	CL (DRAW,<REL,REL>)
	CL (VECT,<REL,REL,REL,REL>)
	CL (DOT,<REL,REL>)
	CL (TEST2,<REL,REL>)

	CL (MOVE3,<REL,REL,REL>)
	CL (DRAW3,<REL,REL,REL>)
	CL (VECT3,<REL,REL,REL,REL,REL,REL>)
	CL (DOT3,<REL,REL,REL>)
	CL (TEST3,<REL,REL,REL>)
	CL (BYP,<INT>)

	CL (TSCAL,<REL>)
	CL (TEXT,,STRING)
	CI (TEXT)
	CL (CHAR,<INT>)

	CL (INT,<REL>)
	CL (PLOT,<PTR,INT>)
	CL (ENQ,<PTR>)
	CL (CORGET,<INT>)
	CL (CORREL,<INT>)
	CL (CODE,<INT>)

	CL (EVENT,<INT,INT,PTR>)
	CL (OUT,<INT,INT>)

	CL (STAT,<INT>)
	CL (RCOMPOSE,<PTR,INT>)
	CL (CURRENT,<PTR>)
	CL (FLUSH)
	CL (VMULT,<PTR,PTR>)

	CL (RAST,<INT>)


>

;DEFINITIONS OF THE LOWER PART OF THE CODE SEGMENT.
;   THESE ARE POINTERS TO THINGS IN THE LANGUAGE-DEPENDENT
;   SECTION THAT ARE USED BY THE DISPLAY-DEPENDENT CODE.
; THE 'XS' MACRO ALLOCATES ENTRIES IN THE CODE AREA.
; THE 'XR' MACRO ALLOCATES ENTRIES IN THE DATA AREA.


XSI__0		;COUNTER INTO CODE AREA

DEFINE XS (A) <
	?A__XSI
	XSI__XSI+1
>

XRI__0		;COUNTER INTO DATA AREA

DEFINE XR (A,B) <
	?A__XRI
	IFIDN <B><>,<
	?XRI__XRI+1 ;> ?XRI__XRI+B
>


	XS (.0SAV)		;SAVE AREA FOR REGISTER 0
	XS (.DBASE)		;POINTER TO DATA AREA
	XS (.FIX)		;POINTER TO FIX ROUTINE
	XS (.FLOAT)		;POINTER TO FLOAT ROUTINE
	XS (.GTMAT)		;POINTER TO ROUTINE TO LOAD MATRIX
	XS (.TRET)		;RETURN TRUE
	XS (.FRET)		;RETURN FALSE
	XS (.IRET)		;RETURN INTEGER IN AC A
	XS (.RET)		;JUST RETURN
	XS (.ERRGO)		;PRINT ERROR MESSAGE
	XS (.SEG)		;0 IF LOW SEG, -1 IF HISEG

;THE NEXT VARIABLES ARE USED ONLY FOR THE LOW SEGMENT
;CORE ALLOCATION VERSION . . .
	XS (.GET)	;LOCATIONS FOR PATCHING IN ADDRESSES
	XS (.REL)	;OF SAIL RUNTIME CORE ALLOCATION ROUTINES
	XS (.PADR)	;FOR ADDRESS OF PATCH ROUTINE
	XS (.RUN)	;FLAG IF DISPLAY IS RUNNING
	XS (.LANG)	;FLAG WHICH LANGUAGE - 0 IF FORTRAN-10; -1 IF SAIL
	XS (.ACSAV)	;AC SAVEAREA - MUST ALLOW 20 LOCNS
?XSI__XSI+17
?PCHBRK__XSI			;LAST THING IN LANGUAGE-DEPENDENT AREA.
;FOLLOWING ARE FIRST FEW LOCATIONS OF DISPLAY-DEPENDENT AREA.

	XS (.DISN)		;DISPLAY NUMBER.
	XS (.DISNM)		;DISPLAY NAME IN SIXBIT.

?CLBASE __ XSI			;THIS IS WHERE DISPATCH TABLE STARTS

;MACRO TO ASSEMBLE IN A DISPATCH TABLE FOR CALLS.

DEFINE DISPATCH <

DEFINE CL & (NAM,ARGS,ROUT) <
	IFIDN <ROUT><>,< XWD S,Q&NAM >
>

DEFINE CI & (NAM) <
	XWD S,Q&NAM
>

	CALLS		;GENERATE DISPATCH TABLE.
>

;DATA AREA THINGS


	XR (MATRIX,=16)		;THIS IS CURRENT TRANSFORMATION MATRIX
	XR (WORKM,=16)		;WORK MATRIX
	XR (.PSHLIST)		;PUSH-DOWN LIST OF TRANSFORMATIONS.
	XR (.POSTN)		;NUMBER OF PICTURES POSTED

;FOLLOWING THINGS MUST BE IN ORDER (SEE DPORT, DWIND, DENQ, DINI)
	XR (.YPM)		;MULTIPLIER OF YP
	XR (.YPA)		;ADD TO YP*.YPM
	XR (.XPM)
	XR (.XPA)

	XR (.Y3M)		;MULTIPLIER FOR 3D
	XR (.Y3A)
	XR (.X3M)
	XR (.X3A)

	XR (.YWT)		;Y WINDOW TOP
	XR (.YWB)
	XR (.XWR)
	XR (.XWL)

	XR (.YVT)		;Y VIEWPORT TOP
	XR (.YVB)
	XR (.XVR)
	XR (.XVL)

	XR (.ZBEAM)		;FICTIONAL BEAM POSITIONS.
	XR (.YBEAM)
	XR (.XBEAM)

	XR (BOXW)		;WIDTH OF CHARACTER BOX
	XR (BOXH)		;HEIGHT OF CHARACTER BOX.
	XR (CHARW)		;WIDTH OF REAL HONEST CHARACTER
	XR (CHARH)		;HEIGHT OF REAL HONEST CHARACTER
;END OF ORDER-IMPORTANT VARIABLES

	XR (.COD1)		;TEMPS FOR WINDOW ROUTINE
	XR (.COD2)
	XR (CHARP)		;CHARACTER POSITIONING ROUTINE.
	XR (CHART)		;CHARACTER TESTING ROUTINE.
	XR (TSCAL)		;LAST DTSCAL PARAMETER
	XR (.IXBEAM)		;X BEAM POSITION IN SCREEN COORDS.
	XR (.IYBEAM)

	XR (.CURPIC)		;CURRENT PICTURE NUMBER

;THE FOLLOWING 3 VARIABLES ARE USED ONLY BY THE HISEG
;CORE ALLOCATION METHOD
	XR (FRELST)		;FREE STORAGE LIST
	XR (CORLO)		;LOWER END OF CORE
	XR (CORHI)		;HIGH END OF CORE

?OXSTAT__XRI		;SAVE OFFSET FOR XSTAT INTO DATA AREA
			;XSTAT MUST BE THE FIRST THING IN THE
			;340 DEPENDENT DATA AREA
			;USED ONLY WHEN LOW SEGMENT CORE ALLOCATION IS USED
; MISCELLANEOUS DEFINITIONS
EXTERNAL .JBHRL			;JOB DATA AREA CELL
				;WHICH HAS HIGH-SEGMENT SIZE

EXTERNAL .JBOPS			;JOB DATA AREA CELL WHICH
				;IS SET UP BY FOROTS TO CONTAIN
				;LOW SEGMENT STATIC DATA AREA
				;BASE ADDRESS


;NAME AND DEVICE ON WHICH TO FIND SEGMENTS
?SEGDEV_<SIXBIT /DSK   />

?SEGNAM_<SIXBIT /DIS007/>

?SEGPPN_<SIXBIT /SYSSUP/>
;LENGTH OF DISPLAY-DEPENDENT ROUTINES.
;   THIS AMOUNT IS RESERVED, SO SHOULD BE MAXIMUM SIZE
;   OF LARGEST ROUTINE.  DISWRT WILL COMPLAIN IF IT
;   TRIES TO WRITE A SEGMENT WHICH IS TOO LARGE FOR THIS
;   SIZE.
?ROUTSIZE_4100			;LENGTH OF ROUTINES.

?CBEG:				;BEGINNING OF CODE.
