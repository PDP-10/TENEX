//<SOURCES>NTLPRM.BCP;2    31-JUL-75 16:29:11    EDIT BY LIEB
// add reset send lock in STRPCH (last line of proc lost???)
// PRIMITIVE PACKAGE FOR TELNET

get "<bcpl>head"
get "<bcpl>utilhead"
get "<bcpl>nlhead"

external { ST; SNDCH; TRNSMT; SNDSYN; RCVCH; DOOPT; DNTOPT; WILOPT;
	   WNTOPT; SUBOPT; INSRCV; DOAICP; INITPK; DSCNXE; DRCNXE;
           DSCNCT; RTSJFN; RTRJFN; STRPCH; RSITM; RSOTM; RTOPTS; 
	   ZINSCT; BRKSND; RTNSST; SETSST; CLRSST; RTNOSC; RTNISC;
           Optlim; Dorcv; Dntrcv; Wilrcv; Wntrcv
	 }

manifest { IAC	_ #377		// TELNET command characters
	   SE	_ #360
	   NOP	_ #361
	   DM	_ #362
	   BRK	_ #363
	   IP	_ #364
	   AO	_ #365
	   AYT	_ #366
	   EC	_ #367
	   EL	_ #370
	   GA	_ #371
	   SB	_ #372
	   WILL	_ #373
	   WONT	_ #374
	   DO	_ #375
	   DONT	_ #376
	   OUT  _ 4
	   IN   _ 0
	   MaxCnx _ #10
	 }


static { Optlim _ nil
	 OPTSRV _ nil
         ZCFOBF _ nil
         RCVBIN _ nil
       }


structure
 { Dat				// TELNET data 
    { TD^0^MaxCnx		// one table per connection
       { Sendjfn word 1		// sending JFN
         Recvjfn word 1		// receiving JFN
         Scnxstat bit 1		// status of sending cnx (1=ok)
         Rcnxstat bit 1		// ditto receiving conx
         fill word
         Insct	word 1		// count of INS's - DM's
         Hldsnd	word 1		// ok to send if -1
         Optsem	word 1		// option negotiation interlock -1=ok
         Ip^0^255		// 256 incoming options...
          { Is bitb 1		// for each option: state (1=on)
            Ict bit 3		// ct of stacked req to change
             overlay
              { Ir   bit 2
                Icts bitb 1 	// Icts eqv Is => command legal now 
              }			// (1 = DO/WILL)
          }
         fill word
         Op^0^255 		// 256 outgoing options...
          { Os bitb 1		// same stucture for each
            Oct bit 3		//   outgoing option
             overlay
              { Or   bit 2
                Octs bitb 1
              }
          }
         fill word
       }
    }
 }


let SNDCH(Cnx,ch) be			// general send char rtn
 { let CNX _ rhz Cnx
   let Jfn _ ST>>Dat.TD^CNX.Sendjfn
   if (Jfn=0 \ ~ST>>Dat.TD^CNX.Scnxstat) then return
   while TLOCK(lv ST>>Dat.TD^CNX.Hldsnd) do Wait(100)  // intlk on c snd
   if ch eq $^a \ ch eq $^h then	// translate ^A,^H to EC
    { BOUT(Jfn,IAC) ; ch _ EC
    }
   if ch eq $^q then			// translate ^Q to EL
    { BOUT(Jfn,IAC) ; ch _ EL
    }
   if ch eq IAC then BOUT(Jfn,IAC)	// IAC's must be escaped
   BOUT(Jfn,ch)				// finally output char
   ST>>Dat.TD^CNX.Hldsnd _ -1		// reset send interlock
 }

and TRNSMT(Cnx) be			// to force out send buf
 { let CNX _ rhz Cnx
   let v _ vec 2
   v!1 _ ST>>Dat.TD^CNX.Sendjfn
   v!2 _ #21
   JSYS(#77,v)				// perform MTOPR w/21
 }

and SNDSYN(Cnx) be			// send a Sync (INS/DM)
 { let CNX _ rhz Cnx
   if Scnxng(CNX) then return
   let v _ vec 2
   v!1 _ ST>>Dat.TD^CNX.Sendjfn
   v!2 _ #22
   JSYS(#77,v)				// first do MTOPR to send INS
   v!2 _ #21
   BOUT(v!1,IAC)
   BOUT(v!1,DM)
   JSYS(#77,v)				// then force out DM to Jfn
 }

and BRKSND(Cnx) be			// send a BRK command
 { let CNX _ rhz Cnx
   and v _ vec 2
   v|1 _ ST>>Dat.TD^CNX.Sendjfn
   v|2 _ #21
   BOUT(v|1,IAC)			// send IAC BRK & transmit it
   BOUT(v|1,BRK)
   JSYS(#77,v)
 }


and STRPCH(Cnx,Char) be			// send verbatim character
  { let CNX _ rhz Cnx
    let Jfn _ ST>>Dat.TD^CNX.Sendjfn
    if (Jfn=0 \ ~ST>>Dat.TD^CNX.Scnxstat) then return
    while TLOCK(lv ST>>Dat.TD^CNX.Hldsnd) do Wait(100)  // intlk on c sn
    let v _ vec 2
    BOUT(Jfn,Char)
    if Char=IAC then BOUT(Jfn,Char)	// must double IAC's
    v|1,v|2 _ Jfn,#21
    JSYS(#77,v)				// and transmit it
    ST>>Dat.TD^CNX.Hldsnd _ -1		// reset send interlock
  }


and Scnxng(CNX) _ valof			// check if send cnx is ok,
 { 					// return false if ok (not NG)

   if ST>>Dat.TD^CNX.Sendjfn=0 \ ~ST>>Dat.TD^CNX.Scnxstat
	 then resultis true
					// perhaps other condx
   resultis false
 }

and Rcnxng(CNX) _ valof			// similar check for recvng JFN
 { if ST>>Dat.TD^CNX.Recvjfn=0 \ ~ST>>Dat.TD^CNX.Rcnxstat
	 then resultis true
   resultis false
 }


and RTOPTS(Cnx,Opt,IO) _ valof		// return state of spec. optn as
 { let CNX _ rhz Cnx			// true or false; 
   test IO				// IO true means outgoing
    ifso resultis ST>>Dat.TD^CNX.Op^Opt.Os
    ifnot resultis ST>>Dat.TD^CNX.Ip^Opt.Is
 }



and RCVCH(Cnx) _ valof			// general receive char rtn
 { let CNX _ rhz Cnx
   let Jfn _ ST>>Dat.TD^CNX.Recvjfn
   if (Jfn=0 \ ~ST>>Dat.TD^CNX.Rcnxstat) then resultis -1 // "false" jfn
   { let ch _ RCVBIN(Jfn)		// read an incoming char (specl)
     if ch ne IAC then resultis ch	// if not IAC pass as data char
     ch _ BIN(Jfn)			// if IAC get next byte
     switchon ch into			// see what to do with it
      { case IAC:  resultis ch		// escaped IAC as data
        case DM:   Dmrcv(CNX); endcase	// count Data Mark
        case SB:   Subrcv(CNX); endcase	// call subcommand parser
        case WILL: Wilrcv(CNX); endcase	// parse option request/response
        case WONT: Wntrcv(CNX); endcase
        case DO:   Dorcv(CNX); endcase
        case DONT: Dntrcv(CNX); endcase

   // The following commands are all treated as nop's for various
   // reasons. NOP IS one; SE is meaningless and souldn't occur at this
   // level; GA is not supported in TENEX, likewise BRK; IP, EL, EC,
   // AO and AYT only really have meaning going from user to server.

        case SE:   case NOP: case IP: case EC: case EL:
        case BRK:  case AO: case AYT: case GA: endcase
        default:   WriteS("*nUndefined TELNET command received ")
  	         WriteOct(ch); endcase	// flush and report undef. comds
      }
   } repeat				//keep reading until data char
 }



and Sndcmd (CNX,Cntrl,Opt) be		// sends sequence IAC DO Opt
 { switchon Cntrl into			//  (or DONT, WILL, WONT)
    { case WILL to DONT: endcase
      default: return
    }
   while TLOCK(lv ST>>Dat.TD^CNX.Hldsnd) do Wait(100)  // intlk on c snd
   let Jfn _ ST>>Dat.TD^CNX.Sendjfn
   BOUT(Jfn,IAC)
   BOUT(Jfn,Cntrl)
   BOUT(Jfn,Opt)			// send command sequence
   TRNSMT(CNX)				// push it out
   ST>>Dat.TD^CNX.Hldsnd _ -1		// reset send lock
 }

and Schcmd(CNX,Cntrl,Opt) be		// check JFN & send command
 { unless Scnxng(CNX) do Sndcmd(CNX,Cntrl,Opt)
 }


and DOOPT(Cnx,Opt) _ valof		// send an OnOption request
 { let CNX _ rhz Cnx
   if Scnxng(CNX) then resultis false	// returns false if req bad
   while TLOCK(lv ST>>Dat.TD^CNX.Optsem) do Wait(100) // hang on neg sem
   let S   _ ST>>Dat.TD^CNX.Ip^Opt.Is	// get state, neg ct & ct lo
   and Ct  _ ST>>Dat.TD^CNX.Ip^Opt.Ict	//  for this cnx/opt incoming
   and Cts _ ST>>Dat.TD^CNX.Ip^Opt.Icts
   and Jfn _ ST>>Dat.TD^CNX.Sendjfn
   if Ct eq 0 & S \ Ct ne 0 & ~(S eqv Cts) then
    { ST>>Dat.TD^CNX.Optsem _ -1
      resultis false			//request illegal: asks for
    }					// change to pres state or req.
   if Ct ge 7 then
    { ST>>Dat.TD^CNX.Optsem _ -1
      resultis false			// not allowed if 7 outs. req.
    }
   if Ct eq 0 then Sndcmd(CNX,DO,Opt)	// send DO Opt if no outst. req.
   ST>>Dat.TD^CNX.Ip^Opt.Ict _ Ct + 1	// req. ok, increment ctr
   ST>>Dat.TD^CNX.Optsem _ -1		// reset option semaphore
   resultis true
 }



and DNTOPT(Cnx,Opt) _ valof		// send an OffOption request
 { let CNX _ rhz Cnx
   if Scnxng(CNX) then resultis false
   while TLOCK(lv ST>>Dat.TD^CNX.Optsem) do Wait(100) // hang on neg sem
   let S   _ ST>>Dat.TD^CNX.Ip^Opt.Is	// get state, ctr, ctr loord
   and Ct  _ ST>>Dat.TD^CNX.Ip^Opt.Ict
   and Cts _ ST>>Dat.TD^CNX.Ip^Opt.Icts
   and Jfn _ ST>>Dat.TD^CNX.Sendjfn
   if Ct eq 0 & ~S \ Ct ne 0 & (S eqv Cts) then
    { ST>>Dat.TD^CNX.Optsem _ -1
      resultis false			// illegal: asks change to pres.
    }					// state or request
   if Ct ge 7 then
    { ST>>Dat.TD^CNX.Optsem _ -1
      resultis false			// not allowed if 7 outst req
    }
   if Ct eq 0 then Sndcmd(CNX,DONT,Opt)	// send DONT Opt if no outst req
   ST>>Dat.TD^CNX.Ip^Opt.Ict _ Ct + 1	// ok, increment negot. ctr
   ST>>Dat.TD^CNX.Optsem _ -1
   resultis true
 }


and WILOPT(Cnx,Opt) _ valof		// send OnOption offer
 { let CNX _ rhz Cnx
   if Scnxng(CNX) then resultis false
   while TLOCK(lv ST>>Dat.TD^CNX.Optsem) do Wait(100) // hang on neg sem
   let S   _ ST>>Dat.TD^CNX.Op^Opt.Os	// get state, neg ctr, ctr lo
   and Ct  _ ST>>Dat.TD^CNX.Op^Opt.Oct	// for this cnx/opt outgoing
   and Cts _ ST>>Dat.TD^CNX.Op^Opt.Octs
   and Jfn _ ST>>Dat.TD^CNX.Sendjfn
   if Ct eq 0 & S \ Ct ne 0 & ~(S eqv Cts) then
    { ST>>Dat.TD^CNX.Optsem _ -1
      resultis false			// illegal: asks for change to
    }					// pres state or request
   if Ct ge 7 then
    { ST>>Dat.TD^CNX.Optsem _ -1
      resultis false			//not allowed if 7 outst req.
    }
   if Ct eq 0 then Sndcmd(CNX,WILL,Opt)	// ok: send WILL Opt if no outst
   ST>>Dat.TD^CNX.Op^Opt.Oct _ Ct + 1	// increment negotiation ctr
   ST>>Dat.TD^CNX.Optsem _ -1
   resultis true
 }


and WNTOPT(Cnx,Opt) _ valof		// send an OffOption offer
 { let CNX _ rhz Cnx
   if Scnxng(CNX) then resultis false
   while TLOCK(lv ST>>Dat.TD^CNX.Optsem) do Wait(100) // hang on neg sem
   let S   _ ST>>Dat.TD^CNX.Op^Opt.Os	// get state, neg ctr, ctr lo
   and Ct  _ ST>>Dat.TD^CNX.Op^Opt.Oct	// for this cnx/opt outgoing
   and Cts _ ST>>Dat.TD^CNX.Op^Opt.Octs
   and Jfn _ ST>>Dat.TD^CNX.Sendjfn
   if Ct eq 0 & ~S \ Ct ne 0 & (S eqv Cts) then
    { ST>>Dat.TD^CNX.Optsem _ -1
      resultis false			// illegal: asks for change to
    }					// pres state or request
   if Ct ge 7 then
    { ST>>Dat.TD^CNX.Optsem _ -1
      resultis false			//not allowed if 7 outst req.
    }
   if Ct eq 0 then Sndcmd(CNX,WONT,Opt)	// ok: send WONT Opt if no outst
   ST>>Dat.TD^CNX.Op^Opt.Oct _ Ct + 1	// increment negotiation ctr
   ST>>Dat.TD^CNX.Optsem _ -1
   resultis true
 }



and SUBOPT(Cnx,Opt,Ctr,Ptr) _ valof	// send an option subcommand str
 { let CNX _ rhz Cnx
   if Scnxng(CNX) then resultis false
   while TLOCK(lv ST>>Dat.TD^CNX.Optsem) do Wait(100) // hang on neg sem
   let S   _ ST>>Dat.TD^CNX.Op^Opt.Os	// get state, ct & JFN
   and Ct  _ ST>>Dat.TD^CNX.Op^Opt.Oct
   and Jfn _ ST>>Dat.TD^CNX.Sendjfn
   if Ct ne 0 \ ~S then
    { ST>>Dat.TD^CNX.Optsem _ -1
      resultis false			// error if opt not on or negot.
    }					// in progress
   if Opt gt Optlim then
    { ST>>Dat.TD^CNX.Optsem _ -1
      resultis false			// error if unknown option
    }
   if (lh Ptr & #7700) rshift 6 ne #10 then
    { ST>>Dat.TD^CNX.Optsem _ -1
      resultis false			// error if ptr not for 8-bit
    }
   while TLOCK(lv ST>>Dat.TD^CNX.Hldsnd) do Wait(100)  // intlk on c snd
   BOUT(Jfn,IAC) ; BOUT(Jfn,SB) ; BOUT(Jfn,Opt)
   for j _ 1 to Ctr do			// send IAC SB Opt followed by
    { let d _ ILDB(lv Ptr)		// Ctr bytes furnished
      BOUT(Jfn,d)
    }
   BOUT(Jfn,IAC) ; BOUT(Jfn,SE)		// ending with IAC SE
   TRNSMT(CNX)				// and push it out
   ST>>Dat.TD^CNX.Hldsnd _ -1		// reset sendlock
   ST>>Dat.TD^CNX.Optsem _ -1		//and option semaphore
   resultis true			// indicate ok
 }



and Dorcv(CNX) _ valof 			// here to process rcpt of DO
 { let Opt _ Semchk(CNX)		// get next char & intlk on sem.
   let S   _ ST>>Dat.TD^CNX.Op^Opt.Os	// get state, neg ctr, ctr lo
   and Ct  _ ST>>Dat.TD^CNX.Op^Opt.Oct	// for this cnx/opt outgoing
   and Cts _ ST>>Dat.TD^CNX.Op^Opt.Octs
   and Jfn _ ST>>Dat.TD^CNX.Sendjfn
   test S				// 4 possibilites of state & ctr
    ifso
     { test Ct eq 0
	ifnot				// ct>0 & S on: bad WONT rsp
	 { Schcmd(CNX,WONT,Opt)		// repeat request & log error
	   WriteS("*nImproper WONT response ")
	 }
	ifso				// ct=0 & S on: bad request
	 { WriteS("*nImproper request DO ")  // send nothing
	 }				// (to avoid loops) & log error
       WriteOct(Opt)
     }
    ifnot
     { test Ct eq 0
	ifnot
	 { ST>>Dat.TD^CNX.Op^Opt.Os _ true	// ct>0 & S off: pos rsp
	   ST>>Dat.TD^CNX.Op^Opt.Oct _ Ct - 1	// to WILL, decr & ON
	   Onopt(CNX,Opt,OUT)
	 }
	ifso				// ct=0 & S off: request
	 { test Shlopt(CNX,Opt,OUT)	// ask if we should
	    ifso
	     { Schcmd(CNX,WILL,Opt)	// yes: respond WILL
	       ST>>Dat.TD^CNX.Op^Opt.Os _ true
	       Onopt(CNX,Opt,OUT)	 // option on
	     }
	    ifnot
	     { Schcmd(CNX,WONT,Opt)	// no: respond WONT
	     }
	 }
     }
   ST>>Dat.TD^CNX.Optsem _ -1		// finally, reset option sema.
   resultis Opt
 }


and Semchk(CNX) _ valof			// get next incoming byte and
 { let Jfn _ ST>>Dat.TD^CNX.Recvjfn	// hang on option semaphore
   and Opt _ BIN(Jfn)
   while TLOCK(lv ST>>Dat.TD^CNX.Optsem) do Wait(100) // hang on neg sem
   resultis Opt
 }



and Dntrcv(CNX) _ valof			// process receipt of DONT
 { let Opt _ Semchk(CNX)		// get next char & intlk on sem.
   let S   _ ST>>Dat.TD^CNX.Op^Opt.Os	// get state, neg ctr, ctr lo
   and Ct  _ ST>>Dat.TD^CNX.Op^Opt.Oct	// for this cnx/opt outgoing
   and Cts _ ST>>Dat.TD^CNX.Op^Opt.Octs
   and Jfn _ ST>>Dat.TD^CNX.Sendjfn
   test S				// 4 possibilites of state & ctr
    ifnot
     { test Ct eq 0
	ifnot				// ct>0 & S off:WILL refused
	 { ST>>Dat.TD^CNX.Op^Opt.Oct _ Ct - 1	// decr ct & log refusal
	 }
	ifso				// ct=0 & S off: bad request
	 { 				// agree (to resync) & log
	   WriteS("*nImproper request DONT ")
           WriteOct(Opt)
	 }
     }
    ifso
     { test Ct eq 0
	ifnot
	 { ST>>Dat.TD^CNX.Op^Opt.Os _ false	// ct>0 & S on: pos rsp
	   ST>>Dat.TD^CNX.Op^Opt.Oct _ Ct - 1	// to WONT, decr & OFF
	   Offopt(CNX,Opt,OUT)
	 }
	ifso
	 { Schcmd(CNX,WONT,Opt)		// ct=0 & S on: request to DONT
	   ST>>Dat.TD^CNX.Op^Opt.Os _ false	// must agree, OFF
	   Offopt(CNX,Opt,OUT)		// should we log this?
	 }
     }
   ST>>Dat.TD^CNX.Optsem _ -1		// finally, reset option sema.
   resultis Opt
 }



and Wilrcv(CNX) _ valof			// here to process rcpt of WILL
 { let Opt _ Semchk(CNX)		// get next char & intlk on sem.
   let S   _ ST>>Dat.TD^CNX.Ip^Opt.Is	// get state, neg ctr, ctr lo
   and Ct  _ ST>>Dat.TD^CNX.Ip^Opt.Ict	// for this cnx/opt incoming
   and Cts _ ST>>Dat.TD^CNX.Ip^Opt.Icts
   and Jfn _ ST>>Dat.TD^CNX.Sendjfn
   test S				// 4 possibilites of state & ctr
    ifso
     { test Ct eq 0
	ifnot				// ct>0 & S on: bad DONT rsp
	 { Schcmd(CNX,DONT,Opt)		// repeat request & log error
	   WriteS("*nImproper DONT response ")
	 }
	ifso				// ct=0 & S on: bad request
	 { WriteS("*nImproper request WILL ")  // send nothing
	 }				// (to avoid loops) & log error
       WriteOct(Opt)
     }
    ifnot
     { test Ct eq 0
	ifnot
	 { ST>>Dat.TD^CNX.Ip^Opt.Is _ true	// ct>0 & S off: pos rsp
	   ST>>Dat.TD^CNX.Ip^Opt.Ict _ Ct - 1	// to DO, decr & ON
	   Onopt(CNX,Opt,IN)
	 }
	ifso				// ct=0 & S off: request
	 { test Shlopt(CNX,Opt,IN)	// ask if we should
	    ifso
	     { Schcmd(CNX,DO,Opt)	// yes: respond DO
	       ST>>Dat.TD^CNX.Ip^Opt.Is _ true
	       Onopt(CNX,Opt,IN)	// option on
	     }
	    ifnot
	     { Schcmd(CNX,DONT,Opt)	// no: respond DONT
	     }
	 }
     }
   ST>>Dat.TD^CNX.Optsem _ -1		// finally, reset option sema.
   resultis Opt
 }



and Wntrcv(CNX) _ valof			// process receipt of WONT
 { let Opt _ Semchk(CNX)		// get next char & intlk on sem.
   let S   _ ST>>Dat.TD^CNX.Ip^Opt.Is	// get state, neg ctr, ctr lo
   and Ct  _ ST>>Dat.TD^CNX.Ip^Opt.Ict	// for this cnx/opt incoming
   and Cts _ ST>>Dat.TD^CNX.Ip^Opt.Icts
   and Jfn _ ST>>Dat.TD^CNX.Sendjfn
   test S				// 4 possibilites of state & ctr
    ifnot
     { test Ct eq 0
	ifnot				// ct>0 & S off:DO refused
	 { ST>>Dat.TD^CNX.Ip^Opt.Ict _ Ct - 1	// decr ct & log refusal
	 }
	ifso				// ct=0 & S off: bad request
	 { 				// agree (to resync) & log
	   WriteS("*nImproper request WONT ")
           WriteOct(Opt)
	 }
     }
    ifso
     { test Ct eq 0
	ifnot
	 { ST>>Dat.TD^CNX.Ip^Opt.Is _ false	// ct>0 & S on: pos rsp
	   ST>>Dat.TD^CNX.Ip^Opt.Ict _ Ct - 1	// to DONT, decr & OFF
	   Offopt(CNX,Opt,IN)
	 }
	ifso
	 { Schcmd(CNX,DONT,Opt)		// ct=0 & S on: request to WONT
	   ST>>Dat.TD^CNX.Ip^Opt.Is _ false	// must agree, OFF
	   Offopt(CNX,Opt,IN)		// should we log this?
	 }
     }
   ST>>Dat.TD^CNX.Optsem _ -1		// finally, reset option sema.
   resultis Opt
 }



// The linkage from the following 4 routines to manipulate the various
// option states in TELNET to the many actual specific routines that
// exist in TELNET is by means of 2 half-word quantities Optlim, which
// contains the number of the highest-numbered option actually supported
// and OPTSRV, which contains the adress of the first location in a
// table of adresses of the form JRST ADR in TELNET.  The table is
// ordered thus: ON rtn for option 0 on the incoming side; OFF rtn for
// option 0, incoming; SHALL-I rtn for 0, incoming; Subcommand
// parsing rtn for 0, incoming; then adresses for the same set of rtns
// for option 0 on the outgoing side; then for option 1, in, and 1, out,
// etc.  The index on this table is then simply 8*opt# + io + f, where
// io is 0 for incoming side, 4 for outgoing, and f is 0 for ON, 1 for 
// OFF, 2 for SHALL-I, and 3 for subcommands.  The particular routines
// take one arg (connection #) for ON and OFF, cnx# and a vector (one
// byte per member, zero terminator) for Subcommands, and cnx# for
// SHALL-I with a truth-value returned (shall or shant).

and Subrcv(CNX) be			// process subcommand string
 { let Opt _ Semchk(CNX)		// get next char & intlk
   let S   _ ST>>Dat.TD^CNX.Ip^Opt.Is	// get state, count & JFN
   and Ct  _ ST>>Dat.TD^CNX.Ip^Opt.Ict
   and Jfn _ ST>>Dat.TD^CNX.Recvjfn
   and v _ vec 50
   and j _ 0				// declare array and index
    { let d _ BIN(Jfn)			// read bytes and store them
      if d eq SE & v!j eq IAC then break  // array until IAC SE read
      j _ j + 1
      v!j _ d
    } repeat
   v!j _ 0				// replace IAC with 0 terminator
   unless Ct ne 0 \ ~S \ Opt gt Optlim do // if opt not on, do nothing
    {					// with string; likewise unknown
      let Dspt _ Opt * 8 + IN + 3	// ok: call option server #3 for
      (OPTSRV!Dspt)(CNX,v)		// this opt (subcommand parser)
    }
   ST>>Dat.TD^CNX.Optsem _ -1
 }

and Onopt(CNX,Opt,Iopr) be		// to call option-ON rtn for Opt
 { if Opt gt Optlim then return		// nogo if unknown option
   let Dspt _ Opt * 8 + Iopr		// call option server #0 for
   (OPTSRV!Dspt)(CNX)			// this opt (turn-On)
 }

and Offopt(CNX,Opt,Iopr) be		// to call option-OFF rtn
 { if Opt gt Optlim then return
   let Dspt _ Opt * 8 + Iopr + 1	// call option server #1 for
   (OPTSRV!Dspt)(CNX)			// this opt (turn-Off)
 }

and Shlopt(CNX,Opt,Iopr) _ valof	// to call shall-we-turn-on-opt
 { if Opt gt Optlim then resultis false	// returns true if Yes (we shall
   let Dspt _ Opt * 8 + Iopr + 2	// call server #2 for this opt
   resultis (OPTSRV!Dspt)(CNX)		// (shall-we), returns truthval
 }


and ZINSCT(Cnx) be			// Zero INS count to start
 { let CNX _ rhz Cnx			//  recv fork
   ST>>Dat.TD^CNX.Insct _ 0
 }

and Dmrcv(CNX) be
 { ST>>Dat.TD^CNX.Insct _ ST>>Dat.TD^CNX.Insct - 1
   ZCFOBF(CNX,ST>>Dat.TD^CNX.Insct)	// for DM decrement INS ctr
 }					// call clr buf rtn w/new ct


and INSRCV(Cnx) _ valof
 { let CNX _ rhz Cnx
   ST>>Dat.TD^CNX.Insct _ ST>>Dat.TD^CNX.Insct + 1
   resultis ST>>Dat.TD^Cnx.Insct	// INS received: increm INS ctr
 }					// and return result

and JfnRel() be
 { let v _ vec 4
   v|1 _ -1				// do RLJFN for all unopened JFN
   JSYS(#23,v)
 }

and RSITM(Cnx) be			// reset state of INcoming
 { ST>>Dat.TD^Cnx.Ip^6.Is _ false	// Timing-Mark (optn 6)--necess.
 }					// due to bad protocol

and RSOTM(Cnx) be			// likewise OUTgoing Timing-Mark
 { ST>>Dat.TD^Cnx.Op^6.Os _ false
 }


and RTNOSC(Cnx,Opt) _ valof		// return optn stat & ct, outg
 { let CNX _ rhz Cnx
   resultis ST>>Dat.TD^Cnx.Op^Opt
 }

and RTNISC(Cnx,Opt) _ valof		// return optn state & ct, incm
 { let CNX _ rhz Cnx
   resultis ST>>Dat.TD^CNX.Ip^Opt
 }


// Initial Connection Protocol routine

and DOAICP(Cnx,Fhst,Fskt,Lskt) _ valof	// perform ICP for Cnx
  { let CNX _ rhz Cnx
    let w _ vec 10
    and q,Fhost _ 0,0
    and Sjfnlv _ lv ST>>Dat.TD^CNX.Sendjfn
    and Rjfnlv _ lv ST>>Dat.TD^CNX.Recvjfn
    ST>>Dat.TD^CNX.Scnxstat _ false
    ST>>Dat.TD^CNX.Rcnxstat _ false
    test (lhz Fhst) eq 0		// if Fhst is host # use it
      ifso Fhost _ Fhst
      ifnot { ASCIZToString(Fhst,w)	// else convert name to string
              Fhost _ -1,,w		//  in w with ptr in Fhost
            }
    Lskt _ -1,,(rh Lskt)		// -1 lh means ;T (job relative)
    q _ ICP(Fhost,lv Fskt,lv Lskt,Sjfnlv,Rjfnlv) // perform actual ICP
    if ICPDiag(q)=0 then InitCnxDat(CNX)	// diagnose errs
    resultis q				// if any, if OK initlz cnx data
  }					// return 0 if OK, else err code



and InitCnxDat(CNX) be			// initialize data block for cnx
  { let j _ 0
    ST>>Dat.TD^CNX.Scnxstat _ true	// connection status OK
    ST>>Dat.TD^CNX.Rcnxstat _ true
    ST>>Dat.TD^CNX.Insct _ 0		// clean INS count
    ST>>Dat.TD^CNX.Hldsnd _ -1		// option & send semas > OK
    ST>>Dat.TD^CNX.Optsem _ -1
    for j _ 0 to 255 do
     { ST>>Dat.TD^CNX.Ip^j _ 0		// all options & ctrs cleared
       ST>>Dat.TD^CNX.Op^j _ 0
     }
  }



// The actual Initial Connection Protocol routine
//  calls Netlib routines, marks errors
//  returns value of 0 if ok, otherwise -JSYS error code that it 
//  failed on, or -1 if send conx failed to open; also returns
//  value of connected foreign socket in Fskt.

and ICP(Fhost,Fsktlv,Lsktlv,Sjfnlv,Rjfnlv) _ valof
  { let q,qq,tt,vv _ 0,0,0,vec 4
    rv Sjfnlv,rv Rjfnlv _ 0,0 
    NETWAITFLAG _ false			// immediate return always
    q _ FindNetInput(32,Fhost,rv Fsktlv,rv Lsktlv,#403001,,#200000)
    if q lt 0 then			// make 32-bit logger connection
     { JfnRel()
       resultis -4,,rh q
     }
    rv Rjfnlv _ q			// store JFN for intrpt access
     { NetStatus(q,vv)			// check status of logger cnx
       switchon vv|1 into
        { case 7: break			// status code 7: opened ok
          case 6: tt _ tt+1		// code 6: pending, keep testng
                  Wait(2000)		//  every 2 seconds,
                  if tt < 10 then endcase  // time out after 20 secs
          default: EndRead(q); JfnRel()	// other codes: fails, close,
                   rv Rjfnlv _ 0
                   resultis -4,,-#600144 //  return "host rejecting"
        }
     } repeat
    rv Fsktlv _ BIN(q); EndRead(q)	// read fsocket # & close conn.
    rv Lsktlv _ rv Lsktlv+2		// open send, 8-bit, immed rtrn
    q _ CreateNetOutput(8,Fhost,rv Fsktlv,rv Lsktlv,#103402,,#100000)
    if q lt 0 then
     { JfnRel(); rv Rjfnlv _ 0
       resultis -3,,rh q
     }
    rv Sjfnlv _ q
    qq _ FindNetInput(8,Fhost,rv Fsktlv,rv Lsktlv,#100010,,#200000)
    if qq lt 0 then			// open recv, 8-bit, defrd rtrn
     { EndRead(q); rv Rjfnlv,rv Sjfnlv _ 0,0  // no rcv, flush send cnx
       JfnRel(); resultis -2,,rh qq	// return error code
     }
    rv Rjfnlv _ qq
    tt _ 0
     { NetStatus(q,vv)			// check progress of send cnx
       switchon vv|1 into
        { case 7: break			// status code 7: opened ok
          case 6: tt _ tt+1
                  Wait(2000)		// code 6: pending, keep testing
                  if tt < 16 then endcase // time out after 32 secs
          default: EndNetDialogue(q,qq)	// other codes: fails,
                  rv Sjfnlv,rv Rjfnlv _ 0,0
                  resultis -1		// close cnx, return -1
        }
     } repeat
    resultis 0				// everything OK, return 0
  }


and ICPDiag(Ercode) _ valof		// print diags for marked ercode
  { let x,E _ lh Ercode,rhz (- Ercode)	// separate marker & JSYS code
    let y _ E-#600000
    if x = 0 then resultis 0		// 0 -> no error
    WriteS("incomplete*nbecause ")
    switchon x into			// partition marked cases
     { case -4: 			// -4 -> no logger cnx made...
        switchon y into
         { case #55 to #117: WriteS("IMP is disconnected.")
                             endcase		// error GJFXnn
           case #142: WriteS("IMP is not up.")		// OPNX19
                      endcase
           case #143: WriteS("host is disconnected.")	// OPNX20
                      endcase
           case #144: WriteS("host is rejecting.")	// OPNX21
                      endcase
           default:   WriteS("of other problem.*n")	// others
                      WriteOct(E); PBOUT($:); ERSTR(E)
         }
        endcase

       case -3:				// -3 -> send cnx not opened...
        switchon y into
         { case #55 to #117: WriteS("no send JFN.")
                             endcase			// error GJFXnn
           case #120 to #145: WriteS("send connection can't be opened.")
                              endcase			// error OPNXnn
           default: WriteS("of other problem.*n")	// others
                    WriteOct(E); PBOUT($:); ERSTR(E)
         }
        endcase

       case -2:				// -2 -> recv cnx not opened...
        switchon y into
         { case #55 to #117:  WriteS("no receive JFN.")
                              endcase			// error GJFXnn
           case #120 to #145:
                     WriteS("receive connection can't be opened.")
                              endcase			// error OPNXnn
           default: WriteS("of other problem.")		// others
                    WriteOct(E); PBOUT($:); ERSTR(E)
         }
        endcase

       case -1:				// -1 -> send cnx failed to open
        WriteS("send connection was not successfully opened.")
        endcase

       default: WriteS("This error should never happen.")
     }
    resultis -1				// return -1 for any error
  }


and INITPK(Optrtns,Olim,Cfobfadr,Rcvbadr) be	// initialize params:
  { OPTSRV _ Optrtns			// pointer to option server rtns
    Optlim _ Olim			// highest-numbered option recog
    ZCFOBF _ Cfobfadr			// pointer DM clr buf rtn
    RCVBIN _ Rcvbadr			// ptr special BIN rtn
  }


and DSCNXE(Cnx) _ valof			// returns true if sendjfn
  { let CNX _ rhz Cnx			// exists for Cnx
    resultis (ST>>Dat.TD^CNX.Sendjfn ne 0)
  }

and DRCNXE(Cnx) _ valof			// returns true if recvjfn
  { let CNX _ rhz Cnx			// exists for Cnx
    resultis (ST>>Dat.TD^CNX.Recvjfn ne 0)
  }


and DSCNCT(Cnx) be			// terminate designated connect
  { let CNX _ rhz Cnx
    let Sjfn _ ST>>Dat.TD^CNX.Sendjfn
    and Rjfn _ ST>>Dat.TD^CNX.Recvjfn
    EndNetDialogue(Sjfn,Rjfn)		// say goodbye,...
    ST>>Dat.TD^CNX.Sendjfn _ 0		// and set JFN's to 0
    ST>>Dat.TD^CNX.Recvjfn _ 0
  }


and RTSJFN(Cnx) _ valof			// temp?: return send jfn
  { let CNX _ rhz Cnx
    resultis ST>>Dat.TD^CNX.Sendjfn
  }

and RTRJFN(Cnx) _ valof			// return receive jfn
  { let CNX _ rhz Cnx
    resultis ST>>Dat.TD^CNX.Recvjfn
  }

and RTNSST(Cnx) _ valof			// return send cnx status
  { let CNX _ rhz Cnx
    resultis ST>>Dat.TD^CNX.Scnxstat
  }

and SETSST(Cnx) be			// set send cnx status ON
  { let CNX _ rhz Cnx
    ST>>Dat.TD^CNX.Scnxstat _ true
  }

and CLRSST(Cnx) be			// set send cnx status OFF
  { let CNX _ rhz Cnx
    ST>>Dat.TD^CNX.Scnxstat _ false
  }

