00100	TITLE ADAGE -- ADAGE AGT-30 CODE (K. STEVENS)
00200	
00300	
00400	
00500	BUG _ 0
00600	PHASE 0			;START PHASING ALL CODE
00700	
00800	BLOCK PCHBRK		;LEAVE ROOM FOR LANGUAGE PART
00900	
01000		2		;DISPLAY NUMBER 2
01100		SIXBIT /ADAGE/	;NAME OF DISPLAY
01200	
01300	DISPATCH		;GENERATE DISPATCH TABLE
01400	
01500	SMID _ <14000.>
01600	SMIDH _ <7000.>
01700	YVIEW _ <1.00>
01800	XVIEW _ <1.00>
01900	
02000	DISNUM __ 2		;DISPLAY SEGMENT NUMBER
02100	
02200	;     	MNEMONICS FOR ADAGE CODE
02300	
02400		X (CLEAR,100000)	;CLEAR CORE AND RESET TO TEXT MODE
02500		X (CLOS,100001)		;CLOSE PICTURE/SUBPICTURE DEFINITION
02600		X (OPEN,100002)		;OPEN SUBPICTURE
02700		X (PLIST,100003)	;START POST LIST
02800		X (CALL,100005)		;CALL SUBPICTURE (ENTRY IN POST LIST)
02900		X (VECTOR,100021)	;2D VECTOR LIST (MOVE + DRAWS)
03000		X (RESETB,21)		;USED TO RESET ALL PUSHBUTTONS
03100		X (CHARS,100025)	;BEAM-POSTITONED CHARACTER STRING
03200		X (BRITE,100046)	;SET BRIGHTNESS
03300		X (BUTTON,100204)	;LORD PLUSHBUTTON
03400		X (DELETE,100211)	;DELETE PICTURE/SUBPICTURE
03500	
03600	;	MISCELLANEOUS DATA
03700	
03800		XR (LEFTM)	;LEFT MARGIN (USED IN QTEXT)
03900		XR (.COD3)	;ALSO USED IN QTEXT
04000	
04100	;	PICTAB GIVES A CORRESPONDENCE BETWEEN OMNI PICTURE
04200	;	NUMBERS AND THE LIMITED NUMBER OF ADAGE PICTURE NUMBERS
04300	;	(INITIALIZED TO ALL NULLS BY QGET)
04400	
04500		XR (PICTAB,=99)	
04600	
04700		X (NULL,400000)	;NULL ENTRY FOR PICTAB
04800		X (CHARDX,=145)	;X DISPLACEMENT FACTOR FOR CHARS
04850	;	IF YOU CHANGE HALFDX OR CHARDY, CHANGE TRYTXT TOO
04900		X (HALFDX,=64)	;HALF OF X DISPLACEMENT
05000		X (CHARDY,=300)	;Y DISPLACEMENT TOO
05100	
05200	
05300	;	CURMOD HAS CURRENT INTENSITY IN RIGHT HALF, AND
05400	;	NON-ZERO LEFT HALF IF DASHED LINES.
05500	;	NOTE THAT THIS DIFFERS FROM THE SETUP FOR THE GT40,
05600	;	WHICH HAS MORE MODES TO WORRY ABOUT.
05700	;	IF PLOTX STARTS INTERPRETING THE MODE WORD, THEN
05800	;	THIS WILL CAUSE CONCERN, UNTIL THEN, DON'T WORRY
05900	
06000		XR (CURMOD)	;CURRENT MODE AND STATUS INFO
06100		XR (VECFLG)	;FLAG FOR STRING OF VECTORS
06200		XR (POSTX)	;RUNNING CURRENT X AT INTERP TIME
06300		XR (POSTY)	;USED IN POSITIONING CHARACTER STRINGS
06400		XR (AGTCH)	;FLAG SAYING CHANNEL OBTAINED
06500	
06600	;	OPEN BLOCK FOR ADAGE
06700	
06800	OBLOCK:	10		;MODE
06900		SIXBIT	/AGT/
07000		0		;ADDRESS OF OUTPUT BUFFER
07100	
07200	
07300	EBLOCK:	SIXBIT /AGTEST/
07400		SIXBIT /DAT/
07500		0
07600		0
07700	
07800	;	BUFFER RING HEADER FOR ADAGE OUTPUT
07900	
08000	BHEAD:	0		;BUFFER HEADER
08100	BPOINT:	0		;BUFFER POINTER
08200	BCOUNT:	0		;BUFFER BYTE COUNTER
08300	
08400	;	HERE ARE THE ACTUAL OUTPUT BUFFERS
08500	
08600	BUF1:	BLOCK	=103
08700	BUF2:	BLOCK	=103
08800	
08900	
09000	;	DATA USED BY DENQ
09100	
09200	ENQTAB:	0.0		;NO -- IT IS NOT A STORAGE TUBE
09300		0.0		;NO THREE-D HARDWARE
09400		0.0		;NO TABLET (YET)
09500		0.0		;NO KEYS
09600		SMID		;NUMBER OF POINTS.
09700		10.0		;INCHES PER VIEWPORT
09800		XVIEW		;X VIEWPORT MAXIMUM
09900		YVIEW		;Y VIEWPORT MAXIMUM
10000	
10100	;	DATA USED BY DCHAR
10200	
10300	CHARTB:  BEGIN CHARACTER 
10400		N__0
10500		Y__3
10600		T__1		;TRANSLITERATE
10700	
10800		BYTE (2) N,N,N,N,N,N,N,N,N,N,Y,N,N,Y,N,N,N,N	; 0-21
10900		BYTE (2) N,N,N,N,N,N,N,N,N,N,N,N,N,N,Y,Y,Y,Y	; 22-43
11000		BYTE (2) Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y	; 44-65
11100		BYTE (2) Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y	; 66-107
11200		BYTE (2) Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y	; 110-131
11300		BYTE (2) Y,Y,Y,Y,Y,Y,N,T,T,T,T,T,T,T,T,T,T,T	; 132-153
11400		BYTE (2) T,T,T,T,T,T,T,T,T,T,T,T,T,T,T,N,N,N	; 154-175
11500		BYTE (2) N,N					; 176-177
11600		BEND
11700	
11800	;	DATA USED BY PICTURE MANIPULATION ROUTINES
11900	;	(SEE DISDVS.FAI FOR DISCUSSION)
12000	
12100		XR (PP)		;POSTED AND PAINTED
12200		XR (UU)		;UNPOSTED AND UNPAINTED
12300		XR (NXTBYT)	;POINTER TO PUT DOWN INSTRUCTIONS
12400		XR (CURCORGET)	;BLOCK OF CORE CURRENTLY USED
12500		XR (GENTOP)	;FIRST BLOCK OF THE PICTURE
12600	
12700	;	OFFSETS INTO CURRENT BLOCK OF DISPLAY DATA
12800	
12900		%DNUM __ 0
13000		%THREAD __ 1
13100		%APPND __ 2
13200		%LIST __ 2
13300		%BEG __ 3
13400	
13500	;	OP CODES FOR PICTURES
13600	
13700		%OHLT __ 0*40000
13800		%OMOV __ 1*40000
13900		%ODOT __ 2*40000
14000		%ODRW __ 3*40000
14100		%OTXT __ 4*40000
14200		%OSCL __ 5*40000
14300		%OMOD __ 6*40000
14400		%OPEN __ 7*40000
14500	
14600	
14700	
14800	;START OF CODE FOR ADAGE
14900	;INCLUDED ARE:	QEVENT/QCURSOR/QOUT/QDONE/QRAST (NO-OPS)
15000	;		QGET/QREL
15100	;		QCODE
15200	;		QPOST/QUNPOST
15300	;		QKILL/QAPPEND
15400	;		QOPEN/QCLOSE
15500	;		QTEXT
15600	;		QINT
15700	;		QSTAT
15800	
15900	
15950	
15966	QRAST:	POP	P,A		;DELETE ONE ARGUMENT
15974		JRST	@.RET(S)	;RETURN
15990	
16000	
16100	QEVENT: POP	P,A		;DELETE ONE ARGUMENT
16200	QCURSOR:			;SAME AS QOUT
16300	QOUT:	SUB	P,[XWD 2,2](S)	;DELETE TWO ARGUMENTS
16400	QDONE:	JRST	@.RET(S)	;RETURN
16500	
16600	
16900	QGET:	TLZ	DISRUN		;JUST TO BE SAFE, TURN OFF
17000		MOVEI	D,20		;HUNT FOR A FREE CHANNEL
17100	QG1:	SOSGE	D		;POINT TO NEXT CHANNEL
17200		JRST	@.FRET(S)	;DEV NOT AVAILABLE (NO CHANNEL)
17300		CALLI	D,[SIXBIT/GETDEV/](S)
17400		SKIPA			;THAT ONE IS FREE
17500		JRST	QG1(S)		;THAT ONE IS BUSY, TRY AGAIN
17600	
17700	;	THERE, FOUND A CHANNEL NUMBER, NOW PUT IT IN
17800	;	OPEN, RELEAS, AND ALL OUT UUO'S!!!
17900	
18000		DPB	D,[POINT 4,QG2(S),12](S)  ;OPEN UUO
18250		DPB	D,[POINT 4,QR0(S),12](S)  ;RELEASE UUO
18300		DPB	D,[POINT 4,QG3(S),12](S)  ;INITIAL OUT
18500		DPB	D,[POINT 4,S0(S),12](S)  ;OUT UUO
18600		DPB	D,[POINT 4,SL2(S),12](S)  ;OUT UUO
18700		MOVEM	D,AGTCH(R)	;SET FLAG TOO
18800		MOVEI	D,BHEAD(S)	;PICK UP ADDR OF HEADER
18900		HRLZ	D,D		;SLIDE OVER TO LEFT
19000		MOVEM	D,OBLOCK+2(S)
19100	QG2:	OPEN	0,OBLOCK(S)	;OPEN THE ADAGE
19200		TLZA	DISRUN		;ERROR...SO TURN OFF FLAG
19300		JRST	QG5(S)		;OPEN WAS SUCCESSFUL
19400	; QG4:	ENTER	0,EBLOCK(S)	;ENTER FOR DEBUGGING
19500	;	HALT			;SCREECH TO A
19600	;	SKIPA
19700	QG5:	TLO	DISRUN		;HERE FROM GOOD OPEN
19800		MOVEI	D,BUF1+1(S)	;LINK BUFFERS TOGETHER
19900		HRLI	D,=101		;BUFFER LENGTH + 1
20000		MOVEM	D,BUF2+1(S)
20100		MOVEI	D,BUF2+1(S)
20200		HRLI	D,=101		;BUFFER LENGTH + 1
20300		MOVEM	D,BUF1+1(S)
20400		MOVEI	D,BUF1+1(S)	;NOW INITIALIZE RING HEADER
20500		HRLI	D,NULL		;TURN ON USE FLAG
20600		MOVEM	D,BHEAD(S)	;THAT'S FIRST WORD
20700		MOVE	D,[POINT 36,BUF1+1,35](S)
20800		MOVEM	D,BPOINT(S)	;AND THAT'S THE BYTE POINTER
20900	QG3:	OUT	0,		;INITIAL OUT
21000		MOVEI	D,CLEAR		;SET UP TO CLEAR ADAGE CORE
21100		PUSHJ	P,SEND(S)
21200	;	MOVEI	D,BUTTON	;AND RESET PUSHBUTTONS, TOO
21300	;	PUSHJ	P,SEND(S)
21400	;	MOVEI	D,RESETB
21500	;	PUSHJ	P,SEND(S)
21600		MOVE	F,PP(R)		;POINT TO BEGINNING OF PP LIST
21700		JUMPE	F,@.TRET(S)	;IF EMPTY, THEN JUST RETURN
21800	QG0:	PUSH	P,F		;ELSE SAVE THREAD POINTER
21900		MOVE	D,(F)		;GET PICTURE NUMBER
22000		MOVEM	D,.CURPIC(R)	;CALL THIS PICURE CURRENT
22100		PUSHJ	P,PAINT(S)	;AND PAINT EACH PICTURE IN PP
22200		POP	P,F		;GET F BACK AGAIN
22300		HRRZ	F,%THREAD(F)	;POINT TO NEXT PICTURE
22400		JUMPE	F,.+2(S)	;LOOP UNTIL PP EXHAUSTED
22500		JRST	QG0(S)
22600		PUSHJ	P,SENDL(S)	;THEN SEND POST LIST
22700		JRST	@.TRET(S)	;BYE
22800	
22900	
23000	QREL:	MOVEI	D,CLEAR		;CLEAR CORE (THUS ERASING ALL)
23100		PUSHJ	P,SEND(S)
23200	;	MOVEI	P,BUTTON	;AND JUST TO BE NICE,
23300	;	PUSHJ	P,SEND(S)	;LET'S RESET PUSHBUTTONS
23400	;	MOVEI	D,RESETB	;LIKE SO.
23500	;	PUSHJ	P,SEND(S)
23600		TLNN	DISRUN		;IF NOT RUNNING, DON'T
23700		JRST	QR1(S)		;LIKE SO
23800		PUSHJ	P,SL2(S)	;CLEAR OUT BUFFER
23900	QR0:	RELEAS	0,		;RELEASE DISPLAY
24200	QR1:	TLZ	DISRUN		;TURN OFF DISPLAY-RUNNING FLAG
24300		JRST	@.TRET(S)	;BYE
24400	
24500	QCODE:	POP	P,D		;GET RIGHT-JUSTIFIED HALFWORD
24600		PUSHJ	P,SEND(S)	;SEND IT
24700		TLNE	DISRUN		;IF DISPLAY IS RUNNING, THEN
24800		PUSHJ	P,SL2(S)	;OUTPUT IT IMMEDIATELY
24900		JRST	@.RET(S)	;BYE
25000	
25100	
25200	;	QPOST,QUNPOST,QKILL,QAPPEND,QOPEN AND QCLOSE ARE
25300	;	ESSENTIALLY THE SAME AS IN DISDVS, HOWEVER THERE ARE 
25400	;	SOME PHILOSOPHICAL DIFFERENCES.  FIRST, WHILE THE 
25500	;	STORAGE-TUBE INTERNAL DATA REPRESENTATION IS USED
25600	;	(FOR CONVENIENCE WITH DPLOT AND PLOTX)
25700	;	THE COMPLEX PAINT/POST ALGORITHM IS NOT NEEDED, AS EACH
25800	;	CALL GENERATES THE APPROPRIATE ACTION IN THE ADAGE.
25900	;	FOR EXAMPLE, DPOST RESULTS IN THE PICTURE BEING 
26000	;	POSTED IMMEDIATELY, NOT MERELY BEING TAGGED FOR 
26100	;	LATER POSTING IN DDONE.  SECONDLY, QKILL ALWAYS
26200	;	FREES THE CORE THAT WAS USED BY THAT PICTURE.  
26300	;	FINALLY, THE ONLY TWO THREADS ARE PP AND UU (AS MIGHT
26400	;	BE EXPECTED).
26500	
26600	
26700	;	POST ASSIGNS THE NEXT FREE ADAGE PIC NUMBER BY SCANNING
26800	;	DOWN PICTAB (IN FIND1).  IN THIS WAY THE LIMITED SUPPLY
26900	;	OF NUMBERS IS CONSERVED UNTIL ACTUALLY NEEDED.  HENCE,
27000	;	ONE CAN GENERATE MANY MANY PIC'S, HOWEVER ONLY 99 CAN 
27100	;	BE SHOWN AT ANY ONE TIME.
27200	
27300	
27400	QPOST:	MOVE	A,(P)		;GET PICTURE NUMBER
27500		TLNE	PICOPN		;IS A PICTURE CURRENTLY OPEN?
27600		CAME	A,.CURPIC(R)	;AND IS IT OURS?
27700		JRST	QPOST0(S)	;NO
27800		PUSHJ	P,CLOSE(S)	;YES -- CLOSE IT
27900		JRST	QPOST(S)	;RESTORE PICTURE NUMBER
28000	
28100	QPOST0:	MOVE	G,[XWD -1,UU](S)  ;LOOK FOR PICTURE IN UU
28200		PUSHJ	P,FIND(S)	
28300		JUMPE	B,QPOST1(S)	;NOT FOUND.
28400		PUSH	P,B		;SAVE PTR TO PICTURE
28500		AOS	.POSTN(R)	;ONE MORE PIC POSTED
28600		MOVEM	A,.CURPIC(R)	;MAKE THIS THE CURRENT PIC
28700	
28800	;	NOW START SENDING COMMANDS TO THE ADAGE.
28900	
29000		PUSHJ	P,FIND1(S)	;SEE IF ADAGE PIC NUMBER EXISTS
29100		CAME	D,[XWD NULL,0](S)  ;IF NULL RETURNED, NOT EXTANT
29200		JRST	QOP(S)		;IF THERE, JUST SEND POST LIST
29300		MOVE	F,(P)		;ELSE GET READY FOR PAINT STEP
29400		PUSHJ	P,PAINT(S)	;PAINT THEN POST THIS PIC
29500	QOP:	POP	P,B		;BRING BACK POINTER TO CODE AND
29600		PUSHJ	P,REMOV(S)	;REMOVE IT FROM LIST IT IS IN.
29700		MOVEI	F,UU+PP		;DECIDE WHICH LIST TO GO TO.
29800		SUBI	F,(G)		;THIS IS WHERE TO GO.
29900		PUSHJ	P,PUTIN(S)	;PUT IN LIST ==> BY F
30000		PUSHJ	P,SENDL(S)	;SEND NEW POST LIST
30100	QPOST1:	MOVE	A,.POSTN(R)	;RETURN NUMBER OF PICS POSTED.
30200		POP	P,(P)
30300		JRST	@.IRET(S)	;AND RETURN TO USER.
30400	
30500	
30600	QUNPOST: MOVE	A,(P)		;GET PICTURE NUMBER
30700		MOVE	G,[XWD -1,PP](S)  ;LOOK IN PP
30800		PUSHJ	P,FIND(S)
30900		JUMPE	B,QPOST1(S)	;NOT FOUND, RETURN OLD NUMBER
31000		PUSH	P,B		;SAVE COPY OF POINTER TO CODE
31100		SOS	.POSTN(R)	;DECREMENT NUMBER OF POSTED
31200		JRST	QOP(S)		;JOIN POST CODE.
31300	
31400	
31500	QKILL:	POP	P,A		;GET PICTURE NUMBER
31600		MOVE	G,[XWD -2,PP](S)  ;LOOK IN PP AND UU
31700		PUSHJ	P,FIND(S)
31800		JUMPE	B,@.RET(S)	;IF NONEXISTANT, FORGET IT
31900		PUSHJ	P,KILL(S)	;GO KILL IT (IN ADAGE TOO)
32000		JRST	@.RET(S)	;RETURN
32100	
32200	
32300	;	APPEND, OPEN AND CLOSE DO DISDVS-TYPE THINGS
32400	
32500	QAPPEND: TLNE	PICOPN		;IF A PICTURE IS OPEN
32600		PUSHJ	P,CLOSE(S)	;CLOSE IT.
32700		TLO	APPEND		;TURN ON APPENDING-NOW FLAG
32800		PUSHJ	P,MGEN(S)	;SAVE CURRENT STATUS (AND SEND)
32900		JRST	QOP0(S)		;AND JOIN OPEN CODE.
33000	
33100	
33200	QOPEN:	TLNE	PICOPN		;IS THERE A PIC OPEN?
33300		PUSHJ	P,CLOSE(S)	;YES -- CLOSE IT.
33400		TLZ	APPEND		;NOT APPENDING
33500	QOP0:	TLO	PICOPN		;SET PIC-OPENED-SOMEHOW FLAG
33600		POP	P,.CURPIC(R)	;CURRENT PIC NUMBER.
33700		SETZM	CURCORGET(R)	;NO BLOCK YET.
33800		PUSHJ	P,BLOCK(S)	;GET ONE.
33900		HRRZM	B,GENTOP(R)	;SAVE POINTER TO FIRST BLOCK.
34000		SETOM	.IXBEAM(R)	;BEAM NOT IN POSITION.
34100		TLNE	APPEND
34200		JRST	@.RET(S)	;RETURN IF APPENDING
34300		MOVEI	C,%BEG
34400		MOVEI	A,0
34500		PUSHJ	P,STOBYT(S)	;STORE IT.
34600		SOJG	C,.-1(S)	;STORE %BEG TIMES.
34700		MOVE	A,CURMOD(R)	;PICK UP MODE THAT EXISTS
34800		TLO	A,%OPEN		;AT TIME OF OPEN AND SAVE IT
34900		PUSHJ	P,STOBYT(S)	;'TILL POST TIME IN DISP
35000		JRST	@.RET(S)	;ALL DONE.
35100	
35200	
35300	QCLOSE:	PUSHJ	P,CLOSE(S)
35400		JRST	@.RET(S)
35500	
35600	CLOSE:	HRRZ	C,NXTBYT(R)	;GET THE NEXT BYTE.
35700		MOVSI	A,%OHLT		;PUT DOWN A HALT CODE.
35800		MOVEM	A,(C)		;AS THE LAST WORD.
35900		MOVE	B,CURCORGET(R)	;THIS THE PIECE OF CORE WE ARE WORKING ON
36000		PUSHJ	P,PUTCOR(S)	;RETURN ANY CORE LEFT.
36100		TLZ	PICOPN		;NO LONGER ANY PICTURE OPEN.
36200		MOVE	A,.CURPIC(R)	;GET PICTURE NUMBER
36300		MOVE	G,[XWD -2,PP](S)  ;LOOK FOR A PREVIOUS VERSION.
36400		PUSHJ	P,FIND(S)	;...
36500		TLZE	APPEND		;ARE WE APPENDING?
36600		JRST	CLO1(S)		;YES -- GO APPEND TO THIS PIC.
36700		SKIPE	B
36800		PUSHJ	P,KILL(S)	;REMOVE FROM LIST AND KILL 
36900		MOVE	B,GENTOP(R)	;THIS IS OUR BABY.
37000		MOVEM	A,%DNUM(B)	;SAVE PIC NUMBER
37100		MOVEI	F,UU
37200		JRST	PUTIN(S)	;PUT IN UNPOSTED AND UNPAINTED.
37300	
37400	CLO1:	JUMPE	B,[ERR <APPENDING TO NON-EX PIC>,6](S)
37500		PUSH	P,B		;SAVE POINTER TO PICTURE
37600		PUSHJ	P,SENDD(S)	;KILL IN ADAGE
37700		PUSHJ	P,REMOV1(S)	;REMOVE FROM PICTAB
37800		MOVE	B,0(P)		;RESTORE POINTER TO PICTURE
37900		TLO	APNDED		;WE HAVE APPENDED
38000		MOVEI	A,-1
38100		MOVE	C,GENTOP(R)
38200		TDNN	A,%APPND(B)	;DOES THIS PIC ALREADY HAVE APPENDS?
38300		HRRM	C,%APPND(B)	;NO -- THIS IS THE FIRST.
38400		TDNE	A,-1(B)		;SEARCH FOR LAST BLOCK IN LIST
38500		JRST	[HRRZ B,-1(B)	;LOOK FOR MORE.
38600			 JRST .-1(S)](S)
38700		HRRM	C,-1(B)		;NOW LINKED IN.
38800		POP	P,F		;RESTORE POINTER TO PICTURE
38900		PUSHJ	P,PAINT(S)	;AND REPAINT IT!!!
39000		PUSHJ	P,SENDL(S)	;AND SEND NEW POST LIST
39100		POPJ	P,
39200	
39300	
39400	QTEXT:	CAME	A,[-1](S)	;START OF STRING?
39500		JRST	NOTBEG(S)	;NO
39600		SKIPGE	TSCAL(R)	;CHECK FOR SIGN ONLY
39700		TLZA	TEXTON		;IF USER WANTS TEXT ONLY IN WINDOW.
39800		TLO	TEXTON
39900		MOVSI	A,(<164.>)	;WIDTH OF CHARACTER BOX.
40000		MOVE	E,[PUSHJ P,CODE2(S)](S)  ;GET INSTRUCTION.
40100		MOVE	F,[PUSHJ P,CONV2(S)](S)
40200		TLNE	LAST3D		;IF LAST POSITION WAS 3-D
40300		JRST	[FDVR A,.X3M(R)  ;GET NORMALIZED VIEWPORT COORD
40400			 FMPR A,.ZBEAM(R)  ;AND FIX FOR THIS DEPTH.
40500			 TRC E,CODE2CODE3  ;CHANGE TO TEST CODE3.
40600			 TRC F,CONV2CONV3  ;CHANGE TO POSITION WITH CONV3
40700			 JRST .+2(S)](S)
40800		FDVR	A,.XPM(R)	;CONVERT TO PAGE COORDINATES.
40900		MOVEM	A,BOXW(R)	;SAVE AS BOX WIDTH
40950	;	BETTER GET A GOOD VALUE FOR CHAR/BOX RATIO!!!!!!
41000		FMPR	A,[0.84210](S)  ;MEASURED CHAR/BOX WIDTH RATIO
41100		MOVEM	A,CHARW(R)	;AND SAVE.
41200		MOVEM	E,CHART(R)	;CHARACTER TEST ROUTINE.
41300		MOVEM	F,CHARP(R)	;AND CHARACTER POSITION ROUTINE.
41400		MOVSI	A,(<328.0>)	;BOX IS TWICE AS HIGH AS WIDE
41500		TLNE	LAST3D		;IF LAST POINT INSTRUCTION WAS 3D.
41600		JRST	[FDVR A,.Y3M(R)  ;GET NORMALIZED VIEWPORT
41700			 FMPR A,.ZBEAM(R)  ;AND FIX FOR DEPTH.
41800			 JRST .+2(S)](S)
41900		FDVR	A,.YPM(R)	;CONVERT TO PAGE COORDINATES.
42000		MOVEM	A,BOXH(R)	;HEIGHT OF BOX.
42100		FMPR	A,[0.70110](S)	;MEASURED CHAR/BOX HIGHTH RATIO
42200		MOVEM	A,CHARH(R)	;AND SAVE.
42300		MOVE	A,.XBEAM(R)	;GET CURRENT BEAM POSITION
42400		MOVEM	A,LEFTM(R)	;SAVE AS LEFT MARGINI.
42500		TLO	FTEMP1		;SAY NO TEXT GONE OUT YET
42550		TLZ	DISIFY		;IN CASE PGEN IS CALLED
42560		MOVE	B,.XBEAM(R)	;DO AN INITIAL MOVE (ALWAYS)
42570		MOVE	C,.YBEAM(R)	;CAUSE A DMOVE DOESN'T DO IT
42575		MOVE	D,.ZBEAM(R)	;AND DON'T ALWAYS FOLLOW A DDRAW
42580		XCT	CHARP(R)	;CONVERT TO SCREEN COORDINATES
42585		TLNE	PICOPN		;DON'T DO IT IF NO PICTURE OPEN
42590		PUSHJ	P,PGEN(S)	;OTHERWISE, MAKE A MOVE DATA ITEM
42600		JRST	QREN(S)		;INITIALIZE STORAGE.
42700	
42800	NOTBEG:	TLNE	A,-1		;CHARACTER?
42900		JRST	ENDC(S)	;END STRING.
43000		CAIN	A,15		;CARRIAGE RETRUN
43100		JRST	CR(S)
43200		CAIN	A,12
43300		JRST	LF(S)		;LINE FEED.
43400		PUSH	P,A		;SAVE CHAR.
43500		MOVE	B,.XBEAM(R)	;GET CURRENT BEAM
43600		MOVE	C,.YBEAM(R)	;
43700		MOVE	D,.ZBEAM(R)
43800		XCT	CHART(R)	;TEST THE CHARACTER IN THE WINDOW
43900		JUMPN	A,TXT0(S)	;NOT IN WINDOW
44000		FADR	B,BOXW(R)
44100		FADR	C,BOXH(R)	;SEE IF UPPER RIGHT HAND CORNER TOO.
44200		XCT	CHART(R)	;TEST UPPER RIGHT HAND CORNER
44300	TXT0:	MOVE	B,.XBEAM(R)	;GET BEAM POSITION BACK.
44400		MOVE	C,.YBEAM(R)
44500		XCT	CHARP(R)	;CONVERT TO SCREEN POSITION.
44600		JUMPN	A,TRYTXT(S)	;NOT ON WINDOW -- BUT SEE IF HE WANTS IT ANYWAY.
45300	CC:	SKIPN	.COD1(R)	;ENOUGH ROOM?
45400		PUSHJ	P,QTST(S)	;NO -- MAKE SOME.
45500		SOS	.COD1(R)	;NOW ONE LESS CHAR.
45600		MOVE	A,(P)		;GET CHARACTER
45700		IDPB	A,.COD2(R)	;STORE IT AWAY.
45800	UPDT:	MOVE	A,BOXW(R)
45900		FADM	A,.XBEAM(R)	;BUMP XBEAM
46000		MOVEI	A,=164
46100		ADDM	A,.IXBEAM(R)	;AND IXBEAM
46200		JRST	POPAJ(S)	;ADJUST STACK AND RETURN.
46300	
46400	TRYTXT:	TLNE	TEXTON		;GO OUTSIDE WINDOW?
46500		JRST	UPDT(S)	;NO -- DO NOT DISPLAY CHAR
46600		JUMPL	B,UPDT(S)	;OFF SCREEN TO LEFT.
46700		JUMPL	C,UPDT(S)
46800		CAIG	B,=16320	;OFF AT RIGHT (16384-HALFDX)?
46900		CAILE	C,=16080	;OFF AT TOP (16384-CHARDY)?
47000		JRST	UPDT(S)
47100		JRST	CC(S)		;YES -- DISPLAY
47200	
47300	LF:	MOVN	A,BOXH(R)	;DECREMENT YBEAM
47400		FADM	A,.YBEAM(R)
47405		PUSHJ	P,ENDC(S)	;DUMP FIRST LINE
47407		MOVE	B,.XBEAM(R)
47408		MOVE	C,.YBEAM(R)
47409		XCT	CHARP(R)	;CONVERT TO SCREEN COORDS
47410		PUSHJ	P,PGEN(S)	;MAKE A MOVE
47500		JRST	ENDC(S)		;AND DUMP CHARACTER BUFFER
47600	
47700	CR:	MOVE	A,LEFTM(R)
47800		MOVEM	A,.XBEAM(R)	;STORE IT.
47825		PUSHJ	P,ENDC(S)	;DUMP FIRST BUFFER
47837		MOVE	B,.XBEAM(R)
47843		MOVE	C,.YBEAM(R)
47846		XCT	CHARP(R)	;CONVERT TO SCREEN COORDS
47850		PUSHJ	P,PGEN(S)	;DO A MOVE
47900	
48000	
48100	;SUBROUTINE TO DUMP CHARACTER BUFFER.
48200	;	CLOBBERS A; CAREFULLY PRESERVES B,C
48300	
48400	ENDC:	MOVE	A,.COD1(R)	;SEE HOW MANY BYTES REMAIN
48500		CAIN	A,4		;IF SOME ARE ALREADY STORED,
48600		POPJ	P,
48700	QTST:	PUSH	P,B		;SAVE X COORDINATE IN CASE STOBYT CLOBBERS
48800		PUSH	P,C		;AND SAME FOR Y
48900		MOVE	A,.COD3(R)	;PICK UP WORD OF BYTES.
49000		TLZ	A,740000	;INSTALL OP-CODE
49100		TLO	A,%OTXT
49200		PUSHJ	P,STOBYT(S)	;AND STORE IT.
50100		POP	P,B		;RESTORE AC'S
50200		POP	P,C
50300	QREN:	MOVEI	A,4		;THIS MANY BYTES.
50400		MOVEM	A,.COD1(R)	;
50500		MOVE	A,[POINT 8,.COD3(R),3](S)  ;NEW POINTER.
50600		MOVEM	A,.COD2(R)
50700		SETOM	.COD3(R)	;NO ACCUMULATED CHARACTER.
50800		POPJ	P,		;DONE.
50900	
51000	
51100	QINT:	POP	P,A		;GET ARG IN RANGE 0 LEQ 1
51200		FMPR	A,[6000.](S)	;GET IN OUR UNITS.
51300		PUSHJ	P,@.FIX(S)	;FIX RESULT.
51400		MOVE	C,CURMOD(R)	;PICK UP CURRENT MODE
51500		DPB	A,[POINT 3,C,28](S)
51600		JRST	QM1(S)		;GO GENERATE MODE WORD
51700	
51800	
51900	;	QSTAT UPDATES CURMOD THEN GENERATES A MODE WORD
52000	;	ARGUMENT MAY BE <+,-,0>
52100	;	+ ARGUMENT MEANS SET INDICATED FLAGS IN CURMOD
52200	;	- ARGUMENT MEANS RESET....
52300	;	0 ARGUMENT MEANS SET TO DEFAULTS
52400	;	WHILE THIS SCHEME WAS DESIGNED FOR THE GT40, WITH
52500	;	ITALICS, BLINKING, AND FOUR VECTOR TYPES, IT IS
52600	;	APPLICABLE TO THE ADAGE WHICH CAN ONLY OFFER DASHED
52700	;	LINES (VECTOR TYPE 1 IS SOLID, VECTOR TYPE 2 IS
52800	;	DASHED).
52900	;	IN AN ATTEMPT FOR COMPATABILITY WITH THE GT40, ALL
53000	;	OTHER POSSIBILITIES THAT ARE VALID FOR THE GT40 ARE
53100	;	IGNORED.
53200	
53300	QSTAT:	MOVE	C,CURMOD(R)	;BRING IN MODE WORD
53400		POP	P,A		;PICK UP ARG
53500		MOVM	A,A		;GET ABS VALUE
53600		JUMPE	A,QM0(S)	;SET DEFAULTS IF ZERO
53700		CAILE	A,=28		;MAKE SURE IT'S IN RANGE
53800		ERR	<AGUMENT NOT WITHIN BOUNDS>,2
53900		ANDI	C,7		;SAVE ONLY VECTOR BITS
54000		CAIE	A,=1		;IF IT WAS 1, THEN SOLID LINES
54100	QM0:	TLZA	C,777777	;SO SET LEFT HALF TO ZERO, ELSE
54200		TLO	C,1		;SET LEFT HALF TO 1 FOR DASHED
54300	QM1:	CAME	C,CURMOD(S)	;IF NO CHANGE FROM BEFORE, THEN
54400		JRST	@.TRET(S)	;JUST RETURN, ELSE
54500		MOVEM	C,CURMOD(R)	;SAVE THE NEW CURRENT MODE
54600		PUSHJ	P,MGEN(S)	;GENERATE MODE WORD
54700		JRST	@.RET(S)	;AND RETURN
54800	
54900	
55000	
55100	;**************************************************************
55200	
55300	;	UTILITY ROUTINES USED BY THE ABOVE
55400	
55500	
55600	;	ROUTINES TO SEND CHARS TO THE ADAGE
55700	
55800	IFN BUG,<
55900	TYP:
56000	SENDC:
56100	SEND:	SKIPA	;PATCH TO SKIPA OR TTCALL 5,D
56200		POPJ	P,		;AND RETURN
56300		ANDI	D,377		;EIGHT BITS
56400		TTCALL	3,[ASCIZ /OUTPUT: /](S)
56500		D+012000000000		;SAIL UU0 TO TYPE OCTAL NUMBER
56600		TTCALL	3,[ASCIZ /
56700	/](S)
56800		POPJ	P,
56900	
57000	>
57100	
57200	;	SEND "OUTPUTS" THE RH OF D TO THE ADAGE
57300	;	SENDC CONVERTS THE INTERNAL 14 BIT COORDINATE INTO THE
57400	;	FULL ADAGE SCREEN COORDINATE SPACE OF + OR - 16K
57500	;	AND FALLS DIRECTLY INTO SEND!!!
57600	
57700	IFE BUG, <
57800	SENDC:	LSH	D,1		;PUT COORDINATE IN RANGE 0-32K
57900		SUBI	D,=14000	;THEN PUT IN RANGE + AND - 14K
58000	SEND:	HRLZ	D,D		;PUT HALFWORD IN LEFT SIDE
58050		TLNN	DISRUN		;IF DON'T HAVE DISPLAY, BYE
58075		POPJ	P,
58100	>
58200		SOSG	BCOUNT(S)	;DECREMENT BYTE COUNTER
58300		JRST	S0(S)		;TIME TO OUTPUT
58400	S1:	IDPB	D,BPOINT(S)	;ELSE PUT WORD IN BUFFER
58500		POPJ	P,		;AND RETURN
58700	S0:	OUT	0,		;THERE ACTUALLY OUTPUT IT
58800		JRST	S1(S)		;NO ERRORS, SO RETURN
58900		HALT			;OOOOPS!!!
59000	
59100	;	SEND POST LIST TO THE ADAGE
59200	;	THIS LIST REPLACES THE OLD POST LIST AUTOMATICALLY
59300	;	CALLED BY QPOST, QUNPOST, AND QKILL
59400	
59500	SENDL:	MOVE	C,PP(R)		;POINT TO BEGINNING OF PP
59600		JUMPE	C,POPRET(S)	;RETURN IF LIST EMPTY
59700		MOVEI	D,PLIST		;START POST LIST
59800		PUSHJ	P,SEND(S)
59900		MOVEI	D,=100		;SEND POST LIST NUMBER TOO
60000		PUSHJ	P,SEND(S)
60100	SL0:	JUMPE	C,SL1(S)	;RETURN WHEN PP EXHAUSTED
60200		MOVEI	D,CALL		;SET UP SUBPICTURE CALL
60300		PUSHJ	P,SEND(S)
60400		MOVE	A,%DNUM(C)	;PICK UP OMNI PICTURE NUMBER
60500		PUSHJ	P,FIND1(S)	;FIND EQUIVALENT ADAGE NUMBER
60600		PUSHJ	P,SEND(S)	;AND SEND NUMBER IN D
60700		HRRZ	C,%THREAD(C)	;POINT TO NEXT PICTURE
60800		JRST	SL0(S)		;AND LOOP
60900	SL1:	MOVEI	D,CLOS		;CLOSE OFF THE LIST
61000		PUSHJ	P,SEND(S)	;AND RETURN
61100		TLNE	DISRUN		;IF DISPLAY RUNNING, THEN
61200	SL2:	OUT	0,		;CLEAN OUT BUFFER
61300		POPJ	P,		;BYE
61400		HALT			;OOPS!
61500	
61600	;	SEND DELETE COMMAND FOR A SINGLE PICTURE IN THE ADAGE
61700	;	EXPECTS OMNI PICTURE NUMBER IN ACCUMULATOR A
61800	
61900	SENDD:	PUSHJ	P,FIND1(S)	;FIND ADAGE PICTURE NUMBER
62000		CAMN	D,[XWD NULL,0](S)  ;IF NULL RETURNED,
62100		POPJ	P,		;NOT IN ADAGE, SO DON'T
62200		MOVE	C,D		;SAVE ADAGE NUMBER
62300		MOVEI	D,DELETE	;SET UP KILL COMMAND
62400		PUSHJ	P,SEND(S)
62500		MOVE	D,C		;BRING BACK ADAGE NUMBER
62600		JRST	SEND(S)		;SEND IT AND BYE
62700	
62800	;	ADD1,FIND1 AND REMOV1 ARE ROUTINES FOR MANIPULATING
62900	;	PICTAB, THE CORRESPONDENCE TABLE BETWEEN OMNI PICTURE
63000	;	NUMBERS AND THE LIMITED NUMBER OF ADAGE PICTURE NUMBERS
63100	;	(SPECIFICALLY 99).
63200	;	EXPECTS OMNI PICTURE NUMBER IN ACCUMULATOR A
63300	;	CLOBBERS B AND USES D FOR RETURNING VALUES
63400	
63500	
63600	ADD1:	MOVEI	D,1		;INITIALIZE ADAGE PIC NUM
63700		MOVEI	B,PICTAB-1(R)	;PICK UP BASE OF TABLE
63800		PUSH	P,A		;SAVE OMNI PIC NUMBER
63900		MOVSI	A,NULL		;FIX NULL ENTRY FOR COMPARISON
64000	ALOOP:	CAILE	D,=99		;ONLY ALLOW 99 NUMBERS
64100		JUMPA	NOMORE(S)	;SORRY
64200		AOJ	B,		;POINT TO NEXT ENTRY
64300		CAME	A,@B		;HUNT FOR A NULL ENTRY
64400		AOJA	D,ALOOP(S)	;BUMP D AND TRY AGAIN
64500		POP	P,A		;BRING BACK OMNI PIC NUMBER
64600		MOVEM	A,@B		;AND PUT IN PICTAB HERE
64700		POPJ	P,		;AND RETURN
64800	NOMORE:	ERR	<MORE THAN 99 PICTURES DEFINED>,16
64900	
65000	FIND1:	MOVEI	D,1		;INITIALIZE ADAGE PIC NUM
65100		MOVEI	B,PICTAB-1(R)	;PICK UP BASE OF TABLE
65200	FLOOP:	CAILE	D,=99		;ONLY ALLOW 99 NUMBERS
65300		JUMPA	NFIND(S)	;SHOULD ALWAYS FIND IT
65400		AOJ	B,		;POINT TO NEXT ENTRY
65500		CAME	A,@B		;COMPARE TO PIC NUM GIVEN IN A
65600		AOJA	D,FLOOP(S)	;BUMP D AND TRY AGAIN
65700		POPJ	P,		;ELSE RETURN WITH NUM IN D
65800	NFIND:	MOVSI	D,NULL		;SET D TO NULL IF NOT FOUND
65900		POPJ	P,		;AND RETURN
66000	
66100	;	EXPECTS ACCUMULATOR B TO STILL POINT TO ENTRY IN
66200	;	PICTAB AFTER CALL TO FIND1
66300	
66400	REMOV1:	PUSHJ	P,FIND1(S)	;FIRST FIND ENTRY IN PICTAB
66500		MOVSI	D,NULL		;SET UP NULL ENTRY AND
66600		MOVEM	D,@B		;STICK IT IN PICTAB
66700		POPJ	P,		;AND RETURN
66800	
66900	;	FIND,REMOV,PUTIN,KILL,STOBYT, AND BLOCK ARE
67000	;	ROUTINES FOR LIST HANDLING.
67100	;	CODE TAKEN FROM DISDVS.FAI WITH MODIFICATIONS TO KILL ONLY
67200	
67300	
67400	;FIND	LOOKS FOR PIC NUMBERED IN A. ENTER WITH G ==>
67500	;	AN AOBJN POINTER WHICH POINTS TO THE LISTS TO LOOK IN.
67600	;	EXITS WITH POINTER TO PIC IN B; ZERO IF NONE FOUND
67700	
67800	FIND:	MOVEI	B,(G)		;COPY LIST POINTER.
67900		ADDI	B,-%THREAD(R)	;RELOCATE.
68000		JRST	.+3(S)		;AND JUMP INTO LOOP
68100		CAMN	A,%DNUM(B)	;IS THIS IT?
68200		POPJ	P,		;YES
68300		HRRZ	B,%THREAD(B)	;LOOK AT NEXT PICTURE.
68400		JUMPN	B,.-3(S)	;IF IT EXISTS.
68500		AOBJN	G,FIND(S)	;END OF LIST, TRY FOR ANOTHER LIST
68600		POPJ	P,		;NO MORE LISTS TO LOOK IN.
68700	
68800	
68900	;REMOV	REMOVES PICTURE POINTED TO BY B FROM THE LIST
69000	;	IT IS IN.  CLOBBERS C,D
69100	
69200	REMOV:	MOVE	C,%THREAD(B)	;GET TWO-WAY LINKS.
69300		MOVS	D,C
69400		TLNN	C,-1		;LEFT LINK?
69500		JRST	[HLRZ D,%LIST(B)  ;NO -- FIND WHICH LIST IT IS IN.
69600			 HRRZM C,(D)	;AND PUT POINTER THERE.
69700			 JRST .+2(S)](S)
69800		HRRM	C,%THREAD(D)	;FIX LEFT NEIGHBOR.
69900		TRNE	C,-1		;IF RIGHT NEIGHBOR
70000		HLLM	C,%THREAD(C)	;FIX HIM.
70100		POPJ	P,		;AND RETURN.
70200	
70300	
70400	;PUTIN	PUT B IN THE LIST POINTED TO BY F (UNRELOCATED)
70500	
70600	PUTIN:	ADDI	F,(R)
70700	PUTI0:	HRRZ	C,(F)		;GET CURRENT LIST CONTENTS.
70800		MOVEM	C,%THREAD(B)	;STORE IN THREAD.
70900		TRNE	C,-1
71000		HRLM	B,%THREAD(C)	;MAKE IT LEFT NEIGHBOR
71100		HRRZM	B,(F)		;NEW LIST.
71200		HRLM	F,%LIST(B)	;SAVE AS LIST IT IS ON.
71300		POPJ	P,
71400	
71500	
71600	;KILL RETURNS CORE USED BY PICTURE POINTED TO BY B TO
71700	;	FREE STORAGE.  (CLOBBERS ALL AC'S)
71800	
71900	KILL:	PUSHJ	P,REMOV(S)	;REMOVE IT.
72000	KI1:	HRRZ	E,-1(B)		;POINTER TO NEXT BLOCK.
72100		PUSH	P,E
72200		PUSHJ	P,RELCOR(S)	;RELEASE CORE.
72300		POP	P,B
72400		JUMPN	B,KI1(S)	;LOOP FOR ALL BLOCKS.
72500		PUSHJ	P,SENDD(S)	;DELETE PICTURE IN ADAGE
72600		PUSH	P,A		;SAVE PICTURE NUMBER
72700		PUSHJ	P,SENDL(S)	;SEND NEW POST LIST
72800		POP	P,A		;RESTORE PICTURE NUMBER
72900		JRST	REMOV1(S)	;AND REMOVE ENTRY FROM PICTAB
73000	
73100	
73200	;	STOBYT	STORES A WORD IN THE CURRENT PICTURE
73300	;	AC 'A'  IS THE WORD
73400	;	OTHER AC'S CLOBBERED AT WILL
73500	
73600	STOBYT:	TLNE	NOMOCOD		;ARE WE ALLOWED?
73700		POPJ	P,		;NO
73800		TLNN	PICOPN		;IS A PICTURE OPEN?
73900		ERR 	<CODE IN UNOPENED PIC>,3
74000	STO1:	MOVE	B,NXTBYT(R)	;PICK UP POINTER.
74100		MOVEM	A,(B)		;STORE WORD.
74200		AOBJN	B,STO0(S)	;BUMP POINTER.
74300		JRST	BLOCK(S)	;RAN OUT -- GET MORE FOR NEXT TIME.
74400	STO0:	MOVEM	B,NXTBYT(R)	;SAVE IT.
74500		POPJ	P,
74600	
74700	;BLOCK	GETS A NEW BLOCK OF CORE TO WORK WITH FOR STORING
74800	;	CODES INTO.  CLOBBERS LOTS OF AC'S BY CALLING GETCOR.
74900	;	STORES NEW BLOCK ADDRESS IN CURCORGET(R).  SETS UP
75000	;	NXTBYT(R) WITH AN AOBJN POINTER TO CORE BLOCK.
75100	
75200	BLOCK:	MOVEI	C,400
75300		PUSHJ	P,GETCOR(S)	;TRY TO GET CORE.
75400		JUMPE	B,BLO0(S)	;NONE
75500		HLL	C,-1(B)		;GET LENGTH
75600		ADD	C,[XWD 2,0](S)	;INC TO ACCOUNT GETCOR OVERHEAD
75700		HRRI	C,(B)		;PUT IN THE POINTER.
75800		MOVEM	C,NXTBYT(R)	;THIS IS THE NEW AOBJN POINTER.
75900		SKIPE	C,CURCORGET(R)	;ANY PREVIOUS PIECE?
76000		HRRM	B,-1(C)	; YES -- LINK IN.
76100		MOVEM	B,CURCORGET(R)
76200		POPJ	P,
76300	
76400	BLO0:	SKIPN	CURCORGET(R)	;IS THIS THE FIRST TIME?
76500		POPJ	P,		;YES
76600		MOVE	B,GENTOP(R)	;NO -- RELEASE ALL PREVIOUS
76700		JRST	KI1(S)	;PARTS OF THE LIST.
76800	
76900	
77000	;	PLOT ROUTINE FOR STORAGE TUBES (APPLICABLE TO ADAGE)
77100	;	FORMAT IS XWD -1,ADDRESS
77200	;	FOLLOWED BY DUMP OF ALL CODE BLOCKS.
77300	;	CODE COPIED FROM DISDVS.FAI
77400	
77500	PLTIT:	MOVEI	E,PP-%THREAD(R)	;LOOK IN PP.
77600	PLT0:	HRRZ	E,%THREAD(E)	;NEXT IN LIST.
77700		JUMPE	E,CPOPJ(S)	;NONE LEFT.
77800		HRROI	A,-1(E)		;XWD -1,ADDRESS
77900		PUSHJ	P,PL(S)		;WRITE
78000		MOVEI	B,(E)		;SAVE ADDRESS
78100	PLT1:	MOVEI	C,(B)		;ADDRESS AGAIN.
78200		HLL	B,-1(B)
78300		MOVE	A,-1(B)		;GET WORD.
78400		PUSHJ	P,PL(S)		;WRITE
78500		AOBJN	B,.-2(S)	;LOOP FOR THIS BLOCK.
78600		HRRZ	B,-1(C)		;POINTER TO NEXT BLOCK.
78700		JUMPE	B,PLT0(S)	;NONE.
78800		JRST	PLT1(S)		;YES -- WRITE IT TOO.
78900	
79000	
79100	;	ROUTINES FOR GENERATING CODE-WORDS
79200	
79300	PGEN:	TLNE	DISIFY		;IF WE ARE NOT INTENSIFYING
79400		JRST	PGEN0(S)	;AND
79500		CAMN	B,.IXBEAM(R)	;IF BEAM IS ALREADY THERE,
79600		CAME	C,.IYBEAM(R)	;THEN DO NOTHING.
79700		JRST	PGEN0(S)	;MUST POSITION BEAM
79800		POPJ	P,		;NOTHING TO DO.
79900	PGEN0:	MOVEM	B,.IXBEAM(R)	;SAVE POSITION.
80000		MOVEM	C,.IYBEAM(R)
80100		MOVS	A,B
80200		HRR	A,C		;X,,Y
80300		TLZ	A,740000	;SAFETY FACTOR -- REMOVE OP-CODE BITS.
80400		TLNE	DISIFY		;DOT ?
80500		TLOA	A,%ODOT		;YES
80600		TLO	A,%OMOV		;MOVE INSTRUCTION
80700		JRST	STOBYT(S)	;AND STORE IT.
80800	
80900	VGEN:	POP	P,C		;CALLED WITH DELTA X, DELTA Y ON STACK.
81000		POP	P,A		;DELTA Y
81100		ADDB	A,.IYBEAM(R)	;BUMP IYBEAM
81200		POP	P,B		;DELTA X
81300		ADDB	B,.IXBEAM(R)	;AND IXBEAM
81400		HRL	A,B
81500		TLO	A,%ODRW		;DRAW COMMAND
81600		PUSH	P,C		;RESTORE RETURN ADDRESS.
81700		JRST	STOBYT(S)	;AND STORE COMMAND
81800	
81900	
82000	MGEN:	MOVE	A,CURMOD(R)	;PICK UP CURRENT STATUS/MODE
82100		TLO	A,%OMOD		;MODE COMMAND OP-CODE
82200		TLNE	NOMOCOD		;THIS CODE DUPLICATED FROM
82300		POPJ	P,		;STOBYT, 'CAUSE ONE CAN
82400		TLNN	PICOPN		;HAVE A DINT CALL WITHOUT PIC
82500		POPJ	P,		;OPEN (JUST RETURN...NO ERROR)
82600		JRST	STO1(S)		;ELSE, IF PIC OPEN, ADD TO FILE
82700	
82800	;	ROUTINES FOR DECODING CODE-WORDS
82900	
83000	INTERP:	LDB	B,[POINT 4,A,3](S)  ;GET OP-CODE
83100		ADDI	B,(S)		;RELOCATE
83200		JRST	@DISP(B)	;AND DISPATCH
83300	
83400	DISP:	XWD	S,HALT		;HALT (ONLY ON END-OF-BLOCK)
83500		XWD	S,MOVE		;MOVE
83600		XWD	S,MOVE		;DOT
83700		XWD	S,DRAW		;DRAW
83800		XWD	S,TEXT		;TEXT
83900		XWD	S,0		;OP-CODE OF 5 FOR %OSCL
84000		XWD	S,STAT		;MODE/STATUS (EXCLUSIVE TO ADAGE)
84100		XWD	S,PICINI	;OPEN (INITIAL MODE FOR PIC)
84200	
84300	HALT:	SETZM	VECFLG(R)	;CLEAR VECTOR CONTINUE FLAG
84400		AOS	(P)		;BUMP RETURN ADDR SO AS TO
84500		POPJ	P,		;RETURN PAST LOOP
84600	
84700	MOVE:	SETOM	VECFLG(R)	;SET VECTOR FLAG
84800		MOVEI	D,VECTOR	;SEND VECTOR COMMAND
84900		PUSHJ	P,SEND(S)
85000		LDB	D,[POINT 14,A,17](S)  ;SEND X COORDINATE
85100		MOVEM	D,POSTX(R)	;SAVE IT FOR TEXT POSITIONING
85200		PUSHJ	P,SENDC(S)
85300		LDB	D,[POINT 14,A,35](S)  ;SEND Y COORDINATE
85400		MOVEM	D,POSTY(R)	;SAVE IT FOR TEXT POSITIONING
85500		PUSHJ	P,SENDC(S)
85600		TLNN	A,100000	;SEE IF DOT COMMAND
85700		POPJ	P,		;ELSE RETURN
85800		LDB	D,[POINT 14,A,17](S)  ;SEND X AGAIN
85900		PUSHJ	P,SENDC(S)
86000		LDB	D,[POINT 14,A,35](S)  ;SEND Y AGAIN
86100		JRST	SENDC(S)
86200	
86300	DRAW:	SKIPN	VECFLG(R)	;IF THERE WAS A PREVIOUS MOVE
86400		JRST	DR2(S)		;THEN DON'T HAVE TO SEND ANOTHER
86500		SKIPG	VECFLG(R)	;VECTOR COMMAND, HOWEVER, IF A TEXT
86600		JRST	DR1(S)		;STRING PRECEEDED, THEN MUST TWEAK X,Y
86700		MOVE	D,POSTX(R)	;PICK UP LAST X COORD BEFORE TEXT
86800		ADD	D,VECFLG(R)	;ADD TO IT THE TOTAL OF DELTA X'S
86900		MOVEM	D,POSTX(R)	;AND PUT IT BACK
87000	DR2:	MOVEI	D,VECTOR
87100		PUSHJ	P,SEND(S)	;THERE, SEND VECTOR COMMAND
87200		MOVE	D,POSTX(R)	;SORRY, BUT PICK UP X AGAIN
87300		PUSHJ	P,SENDC(S)	;AND SEND IT
87400		MOVE	D,POSTY(R)	;AND SAME FOR Y
87500		PUSHJ	P,SENDC(S)
87600		SETOM	VECFLG(R)	;THERE STATE THAT COMMAND HAS GONE
87700	DR1:	LDB	D,[POINT 14,A,17](S)  ;SEND X COORDINATE
87800		MOVEM	D,POSTX(R)	;SAVE FOR TEXT POSITIONING
87900		PUSHJ	P,SENDC(S)
88000		LDB	D,[POINT 14,A,35](S)  ;SEND Y COORDINATE
88100		MOVEM	D,POSTY(R)	;SAVE FOR TEXT POSITIONING
88200		JRST	SENDC(S)
88300	
88400	TEXT:	MOVE	C,VECFLG(R)	;PICK UP VECFLG (IF >1 THEN CONT)
88500		JUMPG	C,TE3(S)	;SO JUST KEEP CHUGGING
88600		MOVEI	C,HALFDX	;ELSE GET READY TO INITIALIZE VECFLG
88700		MOVEI	D,VECTOR	;SEND MOVE TO POSITION CHAR STRING
88800		PUSHJ	P,SEND(S)	;THIS IS DONE ONCE
88900		MOVE	D,POSTX(R)	;PICK UP CURRENT X (INTEGER)
89000		ADDI	D,HALFDX	;MOVE IT OVER A BIT
89100		PUSHJ	P,SENDC(S)	;AND SEND IT
89200		MOVE	D,POSTY(R)	;NOW GET Y (AT THIS POINT IN TIME)
89300		ADDI	D,CHARDY	;AND SLIDE IT UP A BIT
89400		PUSHJ	P,SENDC(S)	;AND SEND IT TOO
89500		MOVEI	D,CHARS		;SEND CHARS COMMAND
89600		PUSHJ	P,SEND(S)
89700	TE3:	ROT	A,4		;GET RID OF OP CODE
89800		MOVEI	E,2		;INITIALIZE DOWN COUNTER
89900	TE1:	MOVEI	B,0		;CLEAR OUT B THEN
90000		ADDI	C,CHARDX	;INDICATE ONE MORE DELTA X
90100		ROTC	A,8		;GET FIRST CHARACTER IN B
90200		CAIN	B,377		;ALL 1'S ?
90300		JRST	TE0(S)		;DONE, NO FILLER NEEDED
90400		MOVE	D,B		;ELSE, PUT CHAR IN D
90500		MOVEI	B,0		;AND CLEAR B
90600		ROTC	A,8		;BRING NEXT CHAR TO B
90700		CAIN	B,377		;ALL 1'S ?
90800		JRST	TE2(S)		;DONE, BUT CONVERT 377 TO NULL
90900		LSH	D,8		;SLIDE OVER FIRST CHAR
91000		ADDI	C,CHARDX	;AND INDICATE ANOTHER DELTA X
91100		IOR	D,B		;FINALLY, PUT IN SECOND CHAR
91200		PUSHJ	P,SEND(S)	;SEND TO ADAGE
91300		SOJG	E,TE1(S)	;LOOP FOR MORE.
91400		JRST	TE4(S)		;ALL DONE EXCEPT FOR VECFLG
91500	TE2:	MOVEI	B,0		;GET NULL CHARACTER
91600		LSH	D,8		;SLIDE OVER FIRST CHAR
91700		IOR	D,B		;FINALLY, PUT IN SECOND CHAR
91800	TE0:	PUSHJ	P,SEND(S)	;SEND LAST ONE
91900	TE4:	MOVEM	C,VECFLG(R)	;UPDATE MEASURE OF DELTA X'S
92000		POPJ	P,		;BYE
92100	
92200	STAT:	SETZM	VECFLG(R)	;RESET VECTOR FLAG
92300		MOVEI	D,BRITE		;SEND MODE COMMAND
92400		PUSHJ	P,SEND(S)
92500		HRRZ	D,A		;PICK UP INTENSITY
92600		PUSHJ	P,SEND(S)	;AND SEND IT
92700		POPJ	P,		;BYE
92800	
92900	PICINI:	SETZM	VECFLG(R)	;RESET VECTOR FLAG
93000		PUSH	P,A		;SAVE A FOR A MINUTE
93100		MOVEI	D,OPEN		;SEND OPEN COMMAND
93200		PUSHJ	P,SEND(S)
93300		MOVE	A,.CURPIC(R)	;GET OMNI PICTURE NUMBER
93400		PUSHJ	P,FIND1(S)	;FIND ADAGE PICTURE NUMBER
93500		CAMN	D,[XWD NULL,0](S)  ;IF NULL, NOT IN TABLE YET
93600		PUSHJ	P,ADD1(S)	;SO ADD ONE
93700		PUSHJ	P,SEND(S)	;SEND ADAGE NUMBER
93800		POP	P,A		;RESTORE ACCUMULATOR A
93900		TLZ	A,%OPEN		;DELETE OP-CODE (MODE IS LEFT)
94000		MOVEI	D,BRITE		;NOW SEND INITIAL BRIGHTNESS
94100		PUSHJ	P,SEND(S)
94200		HRRZ	D,A		;KEPT IN RIGHT HALF OF OPEN WORD
94300		PUSHJ	P,SEND(S)
94400		POPJ	P,
94500	
94600	;	ROUTINE TO PAINT AND POST THE PIC POINTED TO BY F
94700	
94800	PAINT:	HLLZS	%APPND(S)	;NO MORE APPENDS
94900		PUSHJ	P,IBLO0(S)	;PAINT FROM FIRST BLOCK
95000	POPRET:	POPJ	P,		;AND RETURN
95100	
95200	IBLO0:	PUSH	P,-1(F)		;POINTER TO NEXT BLOCK.
95300		HLL	F,-1(F)		;GET COUNT IN LEFT HALF.
95400		ADD	F,[XWD %BEG+2,%BEG](S); BUMP.
95500		JRST	IBLO1(S)	;AND ENTER BLOCK LOOP.
95600	IBLO:	PUSH	P,-1(F)
95700		HLL	F,-1(F)
95800		ADD	F,[XWD 2,0](S)	;SUBTRACT 2 BECAUSE OF GETCOR OVERHEAD
95900	IBLO1:	MOVE	A,(F)		;PICK UP INSTRUCTION
96000		PUSHJ	P,INTERP(S)	;DEVICE-DEPENDENT INTERPRETATION.
96100		AOBJN	F,IBLO1(S)	;LOOP.  INTERP SKIPS IF NEEDS NEW BLOCK.
96200		POP	P,F
96300		TRNE	F,-1
96400		JRST	IBLO(S)	;LOOP FOR NEXT BLOCK.
96500	UPREC:	TLO	UPDONE		;PICTURE HAS BEEN PAINTED
96600		MOVEI	D,CLOS		;CLOSE ADAGE SUBPICTURE
96700		PUSHJ	P,SEND(S)
96800		POPJ	P,		;AND RETURN
96900	
97000	;	CURSET NEEDED BY DISIND HOWEVER NO CURSOR WITH ADAGE
97100	
97200	CURSET:	POPJ	P,		;THEREFORE JUST RETURN
97300	
97400	;	IPICTA IS CALLED BY DINI TO INITIALIZE PICTAB!!!
97500	
97600	IPICTA:	MOVSI	A,NULL		;NOW INITIALIZE PICTAB
97700		MOVEI	B,PICTAB(R)	;GET BASE OF TABLE, AND
97800		MOVEI	D,=99		;INITIALIZE DOWN COUNTER
97900		MOVEM	A,@B		;PUT NULL CHAR HERE AND 
98000		AOJ	B,		;BUMP POINTER
98100		SOJG	D,.-2(S)	;LOOP
98200		POPJ	P,		;AND RETURN
