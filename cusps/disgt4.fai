00010	TITLE GT40 -- DEC GT40 CODE (K. STEVENS) (C. BACON REWRITE)
00020	
00030	
00040	
00050	PHASE 0			;START PHASING ALL CODE
00060	
00070	BLOCK PCHBRK		;LEAVE ROOM FOR LANGUAGE PART
00080	
00090		5		;DISPLAY NUMBER 5
00100		SIXBIT /GT40/	;NAME OF DISPLAY
00110	
00120	DISPATCH		;GENERATE DISPATCH TABLE
00130	
00140	SMID _ <767.0>
00150	SMIDH _ <383.5>
00160	YVIEW _ <1.00>
00170	XVIEW _ <1.333333>
00180	
00190	DISNUM __ 5		;DISPLAY SEGMENT NUMBER
00200	
00210	;     	MNEMONICS FOR GT40 CODE
00220	
00230		X (CVT06,1)		; REINITIALIZE DATAPOINT
00240		X (OPEN,2)		; ACTUALLY, EXTEND A PICTURE
00250		X (KILLPIX,3)		; REMOVE A PICTURE FROM GT40
00260		X (RESTART,4)		; CLEAR OUT ALL PICTURES
00270		X (POST,5)		; MAKE PIC. IN GT40 VISIBLE
00280		X (UNPOST,6)		; MAKE PIC. INVISIBLE
00290		X (SETMODE,16)		; SET INTENS, BLINK, LINETYPE
00300		X (BLANK,17)		; MAKE NEXT VEC. A MOVE
00310		X (CLOSEUP,20)		; OBVIOUS
00320		X (POINT,21)		; SET ABSOLUTE COORDS.
00330		X (LVECT,22)		; LONG RELATIVE VECTORS
00340		X (SVECT,23)		; SHORT RELATIVE VECTORS
00350		X (SRPNT,24)		; SHORT RELATIVE POINTS
00360		X (ITALIC,25)		; SWITCH TO ITALIC MODE
00370		X (NOITAL,26)		; TURN OFF ITALIC MODE
00380		X (TEXTMO,27)		; TEXT IN PICTURES
00390		X (TURNON,33)		; RENAMED FROM "GET"
00400		X (TURNOFF,34)		; RENAMED FROM "REL"
00410		X (HOMEUP,35)		; DATAPOINT
00420		X (ERASEF,37)		; DATAPOINT
00430	
00440	;	MISCELLANEOUS DATA
00450	
00460		XR (LEFTM)	;LEFT MARGIN (USED IN QTEXT)
00470		XR (.COD3)	;ALSO USED IN QTEXT
00480	
00490	;	PICTAB GIVES A CORRESPONDENCE BETWEEN OMNI PICTURE
00500	;	NUMBERS AND THE LIMITED NUMBER OF GT40 PICTURE NUMBERS
00510	;	(INITIALIZED TO ALL NULLS BY QGET)
00520	
00530		XR (PICTAB,=200)	
00540	
00550		X (NULL,400000)	;NULL ENTRY FOR PICTAB
00560	
00570	
00580	;	CURMOD HAS STATUS/MODE STUFF--
00590	;	STATUS IN LEFT HALF, MODE IN RIGHT HALF, I.E.,
00600	;	------------1T----,,-------1III--1B1VV
00610	;	WHERE - = 0; 1 = ENABLE BIT (MUST BE ON); T = ITALICS
00620	;	III = INTENSITY (0-7), AND VV IS VECTOR TYPE (0-3)
00630	
00640		XR (CURMOD)	;CURRENT MODE AND STATUS INFO
00650		XR (CURX)	;CURRENT X POSITION (10 BITS)
00660		XR (CURY)	;CURRENT Y POSITION (10 BITS)
00670		XR (OLDCOM)		; PREVIOUS GT40 OP
00680	
00690	;	DATA USED BY DENQ
00700	
00710	ENQTAB:	0.0		;NO -- IT IS NOT A STORAGE TUBE
00720		0.0		;NO THREE-D HARDWARE
00730		0.0		;NO TABLET (YET)
00740		0.0		;NO KEYS
00750		SMID		;NUMBER OF POINTS.
00760		6.75		;INCHES PER VIEWPORT
00770		XVIEW		;X VIEWPORT MAXIMUM
00780		YVIEW		;Y VIEWPORT MAXIMUM
00790	
00800	;	DATA USED BY DCHAR
00810	
00820	CHARTB:  BEGIN CHARACTER 
00830		N__0
00840		Y__3
00850		T__1		;TRANSLITERATE
00860	
00870		BYTE (2) N,N,N,N,N,N,N,N,N,N,Y,N,N,Y,N,N,N,N	; 0-21
00880		BYTE (2) N,N,N,N,N,N,N,N,N,N,N,N,N,N,Y,Y,Y,Y	; 22-43
00890		BYTE (2) Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y	; 44-65
00900		BYTE (2) Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y	; 66-107
00910		BYTE (2) Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y,Y	; 110-131
00920		BYTE (2) Y,Y,Y,Y,Y,Y,N,T,T,T,T,T,T,T,T,T,T,T	; 132-153
00930		BYTE (2) T,T,T,T,T,T,T,T,T,T,T,T,T,T,T,N,N,N	; 154-175
00940		BYTE (2) N,N					; 176-177
00950		BEND
00960	
00970	;	DATA USED BY PICTURE MANIPULATION ROUTINES
00980	;	(SEE DISDVS.FAI FOR DISCUSSION)
00990	
01000		XR (PP)		;POSTED AND PAINTED
01010		XR (UU)		;UNPOSTED AND UNPAINTED
01020		XR (NXTBYT)	;POINTER TO PUT DOWN INSTRUCTIONS
01030		XR (CURCORGET)	;BLOCK OF CORE CURRENTLY USED
01040		XR (GENTOP)	;FIRST BLOCK OF THE PICTURE
01050	
01060	;	OFFSETS INTO CURRENT BLOCK OF DISPLAY DATA
01070	
01080		%DNUM __ 0
01090		%THREAD __ 1
01100		%APPND __ 2
01110		%LIST __ 2
01120		%BEG __ 3
01130	
01140	;	OP CODES FOR PICTURES
01150	
01160		%OHLT __ 0*40000
01170		%OMOV __ 1*40000
01180		%ODOT __ 2*40000
01190		%ODRW __ 3*40000
01200		%OTXT __ 4*40000
01210		%OSCL __ 5*40000
01220		%OMOD __ 6*40000		;PLOTX MIGHT GET UPSET
01230		%OPEN __ 7*40000
01240	
01250	
01260	
01270	;START OF CODE FOR GT40
01285	;INCLUDED ARE:	QEVENT/QCURSOR/QOUT/QDONE/QRAST (NO-OPS)
01290	;		QGET/QREL
01300	;		QCODE
01310	;		QPOST/QUNPOST
01320	;		QKILL/QAPPEND
01330	;		QOPEN/QCLOSE
01340	;		QTEXT
01350	;		QINT
01360	;		QSTAT (EXCLUSIVE TO GT40)
01370	
01380	
01385	
01386	QRAST:	POP	P,A		;DELETE ONE ARGUMENT
01387		JRST	@.RET(S)	;RETURN
01388	
01390	
01400	QEVENT: POP	P,A		;DELETE ONE ARGUMENT
01410	QCURSOR:			;SAME AS QOUT
01420	QOUT:	SUB	P,[XWD 2,2](S)	;DELETE TWO ARGUMENTS
01430	QDONE:	JRST	@.RET(S)	;RETURN
01440	
01450	
01460	QGET:	TLO	DISRUN		;SET DISPLAY-RUNNING FLAG
01470		MOVEI	D,HOMEUP
01480		PUSHJ	P,SEND2(S)	; SEND HOMEUP + ERASEF
01490		MOVEI	D,ERASEF	; TO ERASE TEXT FROM SCREEN
01500		PUSHJ	P,SEND2(S)
01510		MOVEI	D,TURNON	; SET PICTURES-ON FLAG
01520		PUSHJ	P,SEND2(S)	; (SHOW WHAT'S BEEN POSTED)
01530		JRST	@.TRET(S)	; AND RETURN "TRUE"
01540	
01550	
01560	QREL:	TLZ	DISRUN		;TURN OFF DISPLAY-RUNNING FLAG
01570		MOVEI	D,TURNOFF	; MAKE POSTED PIX INVISIBLE
01580		PUSHJ	P,SEND2(S)
01590		JRST	@.TRET(S)	; AND RETURN "TRUE"
01600	
01610	
01620	QCODE:	POP	P,D		;GET CHAR
01630		PUSHJ	P,SEND1(S)	;SEND IT
01640		JRST	@.RET(S)	;AND  RETURN
01650	
01660	
01670	;	QPOST,QUNPOST,QKILL,QAPPEND,QOPEN AND QCLOSE ARE
01680	;	ESSENTIALLY THE SAME AS IN DISDVS, HOWEVER THERE ARE 
01690	;	SOME PHILOSOPHICAL DIFFERENCES.  FIRST, WHILE THE 
01700	;	STORAGE-TUBE INTERNAL DATA REPRESENTATION IS USED
01710	;	(FOR CONVENIENCE WITH DPLOT,PLOTX AS WELL AS PROVIDING
01720	;	SECURITY OF INHOUSE COPY IN CASE OF GT40 GARBLE),
01730	;	THE COMPLEX PAINT/POST ALGORITHM IS NOT NEEDED, AS EACH
01740	;	CALL GENERATES THE APPROPRIATE ACTION IN THE GT40.
01750	;	FOR EXAMPLE, DPOST RESULTS IN THE PICTURE BEING 
01760	;	POSTED IMMEDIATELY, NOT MERELY BEING TAGGED FOR 
01770	;	LATER POSTING IN DDONE.  SECONDLY, QKILL ALWAYS
01780	;	FREES THE CORE THAT WAS USED BY THAT PICTURE.  
01790	;	FINALLY, THE ONLY TWO THREADS ARE PP AND UU (AS MIGHT
01800	;	BE EXPECTED).
01810	
01820	
01830	;	POST ASSIGNS THE NEXT FREE GT40 PIC NUMBER BY SCANNING
01840	;	DOWN PICTAB (IN FIND1).  IN THIS WAY THE LIMITED SUPPLY
01850	;	OF NUMBERS IS CONSERVED UNTIL ACTUALLY NEEDED.  HENCE,
01860	;	ONE CAN GENERATE MANY MANY PIC'S, HOWEVER ONLY 200 CAN 
01870	;	BE SHOWN AT ANY ONE TIME.
01880	
01890	
01900	QPOST:	MOVE	A,(P)		;GET PICTURE NUMBER
01910		TLNE	PICOPN		;IS A PICTURE CURRENTLY OPEN?
01920		CAME	A,.CURPIC(R)	;AND IS IT OURS?
01930		JRST	QPOST0(S)	;NO
01940		PUSHJ	P,CLOSE(S)	;YES -- CLOSE IT
01950		JRST	QPOST(S)	;RESTORE PICTURE NUMBER
01960	
01970	QPOST0:	MOVE	G,[XWD -1,UU](S)  ;LOOK FOR PICTURE IN UU
01980		PUSHJ	P,FIND(S)	
01990		JUMPE	B,QPOST1(S)	;NOT FOUND.
02000		AOS	.POSTN(R)	;ONE MORE PIC POSTED
02010		MOVEM	A,.CURPIC(R)	;MAKE THIS THE CURRENT PIC
02020	
02030	;	NOW START SENDING COMMANDS TO THE GT40.
02040	;	FIRST SEE IF A GT40 PIC NUMBER HAS BEEN ASSIGNED
02050	;	IF SO, THEN PIC ALREADY IN GT40 SO JUST SEND A POST 
02060	;	COMMAND, ELSE MUST SEND ALL THE PIC CODE AS WELL.
02070	;	IF THE ADD1 STEP FAILS (I.E., NO MORE PIC NUMBERS
02080	;	AVAILABLE) THEN AN ATTEMPT IS MADE AT FINDING A MEMBER
02090	;	OF PICTAB THAT IS UNPOSTED, AND IF FOUND, IT IS KILLED
02100	;	IN THE GT40 SENSE ONLY, AND THAT NUMBER IS FREED UP.
02110	;	IF ALL 200 PIC'S ARE POSTED, THEN S.O.L.!!!!!
02120	
02130		PUSHJ	P,FIND1(S)	;SEE IF GT40 PIC NUMBER EXISTS
02140		CAME	D,[XWD NULL,0](S)  ;IF NULL RETURNED, NOT EXTANT
02150		JRST	PDONE(S)	;IF THERE, JUST SEND POST AGAIN
02160		MOVEI	D,OPEN		;ELSE SEND OPEN COMMAND TO GT40
02170		PUSHJ	P,SEND1(S)
02180		SETOM	CURX(R)		; UNDEFINE CURRENT COORDS.
02190		PUSHJ	P,ADD1(S)	;GET A NEW GT40 PIC NUMBER
02200		PUSHJ	P,SENDL(S)	;SEND NUMBER (CAN'T USE SENDA)
02210		PUSHJ	P,FIND(S)	;NOW FIND FIRST BLOCK OF CODE
02220		PUSH	P,B		;SAVE A COPY FOR REMOV STEP
02230		MOVE	F,B		;AND GET READY FOR PAINT STEP
02240		PUSHJ	P,PAINT(S)	;NOW PAINT THEN POST THIS PIC
02250		POP	P,B		;BRING BACK POINTER TO CODE AND
02260	QOP:	PUSHJ	P,REMOV(S)	;REMOVE IT FROM LIST IT IS IN.
02270		MOVEI	F,UU+PP		;DECIDE WHICH LIST TO GO TO.
02280		SUBI	F,(G)		;THIS IS WHERE TO GO.
02290		PUSHJ	P,PUTIN(S)	;PUT IN LIST ==> BY F
02300	QPOST1:	MOVE	A,.POSTN(R)	;RETURN NUMBER OF PICS POSTED.
02310		POP	P,(P)
02320		JRST	@.IRET(S)	;AND RETURN TO USER.
02330	
02340	
02350	QUNPOST: MOVE	A,(P)		;GET PICTURE NUMBER
02360		MOVE	G,[XWD -1,PP](S)  ;LOOK IN PP
02370		PUSHJ	P,FIND(S)
02380		JUMPE	B,QPOST1(S)	;NOT FOUND, RETURN OLD NUMBER
02390		PUSH	P,B		;SAVE COPY OF POINTER TO CODE
02400		MOVEI	D,UNPOST	;SET UP UNPOST COMMAND
02410		PUSHJ	P,SENDA(S)	;AND SEND IT, MAYBE
02420		SOS	.POSTN(R)	;DECREMENT NUMBER OF POSTED
02430		POP	P,B		;BRING BACK POINTER TO CODE
02440		JRST	QOP(S)		;JOIN POST CODE.
02450	
02460	
02470	QKILL:	POP	P,A		;GET PICTURE NUMBER
02480		MOVE	G,[XWD -2,PP](S)  ;LOOK IN PP AND UU
02490		PUSHJ	P,FIND(S)
02500		JUMPE	B,[ERR <KILLING NON-EX PIC>,4,<@.RET>](S)
02510		PUSHJ	P,KILL(S)	;GO KILL IT (IN GT40 TOO)
02520		JRST	@.RET(S)	;RETURN
02530	
02540	
02550	;	APPEND DOES DISDVS-TYPE THINGS, HOWEVER ALSO PUTS GT40
02560	;	IN APPEND MODE SO THAT APPENDS CAN BE MADE ON THE FLY.
02570	
02580	QAPPEND: TLNE	PICOPN		;IF A PICTURE IS OPEN
02590		PUSHJ	P,CLOSE(S)	;CLOSE IT.
02600		TLO	APPEND		;TURN ON APPENDING-NOW FLAG
02610		MOVE	A,(P)		;GET PICTURE NUMBER
02620		MOVEI	D,OPEN		;SET UP APPEND COMMAND
02630		PUSHJ	P,SENDA(S)	;AND SEND IT, MAYBE
02640		SETOM	CURX(R)		; UNDEFINE CURRENT COORDS.
02650		PUSHJ	P,MGEN(S)	;SAVE CURRENT STATUS (AND SEND)
02660		JRST	QOP0(S)		;AND JOIN OPEN CODE.
02670	
02680	
02690	QOPEN:	TLNE	PICOPN		;IS THERE A PIC OPEN?
02700		PUSHJ	P,CLOSE(S)	;YES -- CLOSE IT.
02710		TLZ	APPEND		;NOT APPENDING
02720	QOP0:	TLO	PICOPN		;SET PIC-OPENED-SOMEHOW FLAG
02730		POP	P,.CURPIC(R)	;CURRENT PIC NUMBER.
02740		SETZM	CURCORGET(R)	;NO BLOCK YET.
02750		PUSHJ	P,BLOCK(S)	;GET ONE.
02760		HRRZM	B,GENTOP(R)	;SAVE POINTER TO FIRS BLOCK.
02770		SETOM	.IXBEAM(R)	;BEAM NOT IN POSITION.
02780		TLNE	APPEND
02790		JRST	@.RET(S)	;RETURN IF APPENDING
02800		MOVEI	C,%BEG
02810		MOVEI	A,0
02820		PUSHJ	P,STOBYT(S)	;STORE IT.
02830		SOJG	C,.-1(S)	;STORE %BEG TIMES.
02840		MOVE	A,CURMOD(R)	;PICK UP MODE THAT EXISTS
02850		TLO	A,%OPEN		;AT TIME OF OPEN AND SAVE IT
02860		PUSHJ	P,STOBYT(S)	;'TILL POST TIME IN DISP
02870		JRST	@.RET(S)	;ALL DONE.
02880	
02890	
02900	QCLOSE:	PUSHJ	P,CLOSE(S)
02910		JRST	@.RET(S)
02920	
02930	CLOSE:	HRRZ	C,NXTBYT(R)	;GET THE NEXT BYTE.
02940		MOVSI	A,%OHLT		;PUT DOWN A HALT CODE.
02950		MOVEM	A,(C)		;AS THE LAST WORD.
02960		MOVE	B,CURCORGET(R)	;THIS THE PIECE OF CORE WE ARE WORKING ON
02970		PUSHJ	P,PUTCOR(S)	;RETURN ANY CORE LEFT.
02980		TLZ	PICOPN		;NO LONGER ANY PICTURE OPEN.
02990		MOVE	A,.CURPIC(R)	;GET PICTURE NUMBER
03000		MOVE	G,[XWD -2,PP](S)  ;LOOK FOR A PREVIOUS VERSION.
03010		PUSHJ	P,FIND(S)	;...
03020		TLZE	APPEND		;ARE WE APPENDING?
03030		JRST	CLO1(S)	;YES -- GO APPEND TO THIS PIC.
03040		SKIPE	B
03050		PUSHJ	P,KILL(S)	;REMOVE FROM LIST AND KILL 
03060		MOVE	B,GENTOP(R)	;THIS IS OUR BABY.
03070		MOVEM	A,%DNUM(B)	;SAVE PIC NUMBER
03080		MOVEI	F,UU
03090		JRST	PUTIN(S)	;PUT IN UNPOSTED AND UNPAINTED.
03100	
03110	CLO1:	JUMPE	B,[ERR <APPENDING TO NON-EX PIC>,6](S)
03120		TLO	APNDED		;WE HAVE APPENDED
03130		MOVEI	A,-1
03140		MOVE	C,GENTOP(R)
03150		TDNN	A,%APPND(B)	;DOES THIS PIC ALREADY HAVE APPENDS?
03160		HRRM	C,%APPND(B)	;NO -- THIS IS THE FIRST.
03170		TDNE	A,-1(B)		;SEARCH FOR LAST BLOCK IN LIST
03180		JRST	[HRRZ B,-1(B)	;LOOK FOR MORE.
03190			 JRST .-1(S)](S)
03200		HRRM	C,-1(B)		;NOW LINKED IN.
03210		POPJ	P,
03220	
03230	
03240	QTEXT:	CAME	A,[-1](S)	;START OF STRING?
03250		JRST	NOTBEG(S)	;NO
03260		SKIPGE	TSCAL(R)	;CHECK FOR SIGN ONLY
03270		TLZA	TEXTON		;IF USER WANTS TEXT ONLY IN WINDOW.
03280		TLO	TEXTON
03290		MOVSI	A,(<14.0>)	;WIDTH OF CHARACTER BOX.
03300		MOVE	E,[PUSHJ P,CODE2(S)](S)  ;GET INSTRUCTION.
03310		MOVE	F,[PUSHJ P,CONV2(S)](S)
03320		TLNE	LAST3D		;IF LAST POSITION WAS 3-D
03330		JRST	[FDVR A,.X3M(R)  ;GET NORMALIZED VIEWPORT COORD
03340			 FMPR A,.ZBEAM(R)  ;AND FIX FOR THIS DEPTH.
03350			 TRC E,CODE2CODE3  ;CHANGE TO TEST CODE3.
03360			 TRC F,CONV2CONV3  ;CHANGE TO POSITION WITH CONV3
03370			 JRST .+2(S)](S)
03380		FDVR	A,.XPM(R)	;CONVERT TO PAGE COORDINATES.
03390		MOVEM	A,BOXW(R)	;SAVE AS BOX WIDTH
03400		FMPR	A,[0.84210](S)  ;MEASURED CHAR/BOX WIDTH RATIO
03410		MOVEM	A,CHARW(R)	;AND SAVE.
03420		MOVEM	E,CHART(R)	;CHARACTER TEST ROUTINE.
03430		MOVEM	F,CHARP(R)	;AND CHARACTER POSITION ROUTINE.
03440		MOVSI	A,(<22.0>)
03450		TLNE	LAST3D		;IF LAST POINT INSTRUCTION WAS 3D.
03460		JRST	[FDVR A,.Y3M(R)  ;GET NORMALIZED VIEWPORT
03470			 FMPR A,.ZBEAM(R)  ;AND FIX FOR DEPTH.
03480			 JRST .+2(S)](S)
03490		FDVR	A,.YPM(R)	;CONVERT TO PAGE COORDINATES.
03500		MOVEM	A,BOXH(R)	;HEIGHT OF BOX.
03510		FMPR	A,[0.70110](S)	;MEASURED CHAR/BOX HIGHTH RATIO
03520		MOVEM	A,CHARH(R)	;AND SAVE.
03530		MOVE	A,.XBEAM(R)	;GET CURRENT BEAM POSITION
03540		MOVEM	A,LEFTM(R)	;SAVE AS LEFT MARGINI.
03550		TLO	FTEMP1		;SAY NO TEXT GONE OUT YET
03560		TLZ	DISIFY		;IN CASE POINT MODE INSTRUCTION NEEDED
03570		JRST	QREN(S)		;INITIALIZE STORAGE.
03580	
03590	NOTBEG:	TLNE	A,-1		;CHARACTER?
03600		JRST	ENDC(S)	;END STRING.
03610		CAIN	A,15		;CARRIAGE RETRUN
03620		JRST	CR(S)
03630		CAIN	A,12
03640		JRST	LF(S)		;LINE FEED.
03650		PUSH	P,A		;SAVE CHAR.
03660		MOVE	B,.XBEAM(R)	;GET CURRENT BEAM
03670		MOVE	C,.YBEAM(R)	;
03680		MOVE	D,.ZBEAM(R)
03690		XCT	CHART(R)	;TEST THE CHARACTER IN THE WINDOW
03700		JUMPN	A,TXT0(S)	;NOT IN WINDOW
03710		FADR	B,BOXW(R)
03720		FADR	C,BOXH(R)	;SEE IF UPPER RIGHT HAND CORNER TOO.
03730		XCT	CHART(R)	;TEST UPPER RIGHT HAND CORNER
03740	TXT0:	MOVE	B,.XBEAM(R)	;GET BEAM POSITION BACK.
03750		MOVE	C,.YBEAM(R)
03760		XCT	CHARP(R)	;CONVERT TO SCREEN POSITION.
03770		JUMPN	A,TRYTXT(S)	;NOT ON WINDOW -- BUT SEE IF HE WANTS IT ANYWAY.
03780	TXT1:	SUBI	C,=4		;CENTER ON CHAR IN Y DIRECTION
03790		CAMN	B,.IXBEAM(R)	;SEE IF WE NEED TO MOVE BEAM
03800		CAME	C,.IYBEAM(R)	;?
03810		JRST	[PUSHJ P,ENDC(S)  ;YES -- DUMP CHARACTERS.
03820			 PUSHJ P,PGEN(S)  ;AND PUT OUT POINT-MODE INSTR.
03830			 JRST .+1(S)](S)
03840	
03850	CC:	SKIPN	.COD1(R)	;ENOUGH ROOM?
03860		PUSHJ	P,QTST(S)	;NO -- MAKE SOME.
03870		SOS	.COD1(R)	;NOW ONE LESS CHAR.
03880		MOVE	A,(P)		;GET CHARACTER
03890		IDPB	A,.COD2(R)	;STORE IT AWAY.
03900	UPDT:	MOVE	A,BOXW(R)
03910		FADM	A,.XBEAM(R)	;BUMP XBEAM
03920		MOVEI	A,=14
03930		ADDM	A,.IXBEAM(R)	;AND IXBEAM
03940		JRST	POPAJ(S)	;ADJUST STACK AND RETURN.
03950	
03960	TRYTXT:	TLNE	TEXTON		;GO OUTSIDE WINDOW?
03970		JRST	UPDT(S)	;NO -- DO NOT DISPLAY CHAR
03980		JUMPL	B,UPDT(S)	;OFF SCREEN TO LEFT.
03990		JUMPL	C,UPDT(S)
04000		CAIG	B,=1009		;OFF AT RIGHT?
04010		CAILE	C,=1004		;OFF AT TOP?
04020		JRST	UPDT(S)
04030		JRST	TXT1(S)		;YES -- DISPLAY
04040	
04050	LF:	MOVN	A,BOXH(R)	;DECREMENT YBEAM
04060		FADM	A,.YBEAM(R)
04070		JRST	ENDC(S)		;AND DUMP CHARACTER BUFFER
04080	
04090	CR:	MOVE	A,LEFTM(R)
04100		MOVEM	A,.XBEAM(R)	;STORE IT.
04110	
04120	
04130	;SUBROUTINE TO DUMP CHARACTER BUFFER.
04140	;	CLOBBERS A; CAREFULLY PRESERVES B,C
04150	
04160	ENDC:	MOVE	A,.COD1(R)	;SEE HOW MANY BYTES REMAIN
04170		CAIN	A,4		;IF SOME ARE ALREADY STORED,
04180		POPJ	P,
04190	QTST:	PUSH	P,B		;SAVE X COORDINATE IN CASE STOBYT CLOBBERS
04200		PUSH	P,C		;AND SAME FOR Y
04210		MOVE	A,.COD3(R)	;PICK UP WORD OF BYTES.
04220		TLZ	A,740000	;INSTALL OP-CODE
04230		TLO	A,%OTXT
04240		PUSHJ	P,STOBYT(S)	;AND STORE IT.
04250		POP	P,C
04260		POP	P,B		;RESTORE AC'S
04270	QREN:	MOVEI	A,4		;THIS MANY BYTES.
04280		MOVEM	A,.COD1(R)	;
04290		MOVE	A,[POINT 8,.COD3(R),3](S)  ;NEW POINTER.
04300		MOVEM	A,.COD2(R)
04310		SETOM	.COD3(R)	;NO ACCUMULATED CHARACTER.
04320		POPJ	P,		;DONE.
04330	
04340	
04350	QINT:	POP	P,A		;GET ARG IN RANGE 0 LEQ 1
04360		FMPR	A,[7.999](S)	;GET IN OUR UNITS.
04370		PUSHJ	P,@.FIX(S)	;FIX RESULT.
04380		MOVE	C,CURMOD(R)	;PICK UP CURRENT STATUS/MODE
04390		DPB	A,[POINT 3,C,28](S)
04400		JRST	QM2(S)		;GO GENERATE MODE WORD
04410	
04420	
04430	;	QSTAT UPDATES CURMOD THEN GENERATES A MODE WORD
04440	;	ARGUMENT MAY BE <+,-,0>
04450	;	+ ARGUMENT MEANS SET INDICATED FLAGS IN CURMOD
04460	;	- ARGUMENT MEANS RESET....
04470	;	0 ARGUMENT MEANS SET TO DEFAULTS
04480	;	ARGUMENT IS BIT-ENCODED: VALUE OF 1-4 SPECIFIES THE
04490	;	VECTOR TYPE, PLUS A VALUE OF EIGHT INDICATES BLINK,
04500	;	AND FINALLY A VALUE OF 16 INDICATES ITALICS.
04510	;	NOTE THAT ONE CAN ONLY RESET THE VECTOR TYPE TO 0
04520	;	EXAMPLE:  11 (8+3) IMPLIES BLINK+VECTOR TYPE 3, WHILE
04530	;	-11 IMPLIES NOBLINK+VECTOR TYPE 0.
04540	
04550	QSTAT:	MOVE	C,CURMOD(R)	;BRING IN MODE/STATUS WORD
04560		TRNN	C,2000		;SEE IF INTENSITY INITIALIZED
04570		TRO	C,1200		;IF NOT, DEFAULT TO 5
04580		POP	P,A		;PICK UP ARG
04590		JUMPL	A,QM0(S)	;UNSET THINGS IF NEGATIVE
04600		JUMPE	A,QM1(S)	;SET DEFAULTS IF ZERO
04610		CAILE	A,=28		;MAKE SURE IT'S IN RANGE
04620	QM3:	ERR	<AGUMENT NOT WITHIN BOUNDS>,2
04630		TRZE	A,10		;ELSE TEST FOR BLINK
04640		TRO	C,10		;IF SO THEN SET BIT 32
04650		TRZE	A,20		;HOW ABOUT ITALICS?
04660		TLO	C,20		;THEN SET BIT 13
04670		SOJL	A,QM2(S)	;GET VECTOR TO 0-3 RANGE
04680		TRZ	C,3		;IF + THEN GET READY TO 
04690		IOR	C,A		;SET NEW VECTOR MODE 
04700	QM2:	TRO	C,2024		;SET ENABLE FLAGS FOR MODE
04710		TLO	C,40		;SET ENABLE FLAG FOR STATUS
04720		MOVEM	C,CURMOD(R)	;AND PUT STUFF BACK
04730		PUSHJ	P,MGEN(S)	;GENERATE MODE WORD
04740		JRST	@.RET(S)	;AND RETURN
04750	
04760	QM1:	SETZ	C,		;CLEAR OUT JUNK AND
04770		TRO	C,1200		;INITIALIZE INTENSITY TO 5
04780		JRST	QM2(S)		;THEREFORE SETTING DEFAULTS
04790	
04800	QM0:	MOVN	A,A		;ARG WAS NEGATIVE SO COMPLEMENT
04810		CAILE	A,=28		;MAKE SURE IT'S IN RANGE
04820		JRST	QM3(S)		;SORRY
04830		TRNE	A,10		;ELSE TEST FOR BLINK
04840		TRZ	C,10		;THEN TURN OFF BIT 32
04850		TRNE	A,20		;HOW ABOUT ITALICS?
04860		TLZ	C,20		;THEN TURN OFF BIT 13
04870		TRNE	A,7		;SEE IF VECTOR PART SPECIFIED
04880		TRZ	C,3		;THEN ZERO OUT BITS 34 AND 35
04890		JRST	QM2(S)		;AND DO OTHER THINGS
04900	
04910	
04920	;**************************************************************
04930	
04940	;	UTILITY ROUTINES USED BY THE ABOVE
04950	
04960	
04970	;	SENDC SENDS A COMMAND BYTE IF DIFFERENT FROM OLD.
04980	;	SEND1 SENDS A COMMAND BYTE REGARDLESS.
04990	;	SEND2 SENDS LIKE SEND1, BUT FORGETS WHAT IT SENT.
05000	
05010	SENDC:	CAMN	D,OLDCOM(R)	; NEW COMMAND SAME AS OLD ?
05020		POPJ	P,		; EXIT IF SO, ELSE SEND
05030	
05040	TYP:
05050	SEND1:	MOVEM	D,OLDCOM(R)	; SAVE THAT WHICH WILL BE SENT
05060	SEND2:	PUSHJ	P,PARITY(S)	; GET EVEN PARITY BIT ATTACHED TO D
05070	SENDTT:	TTCALL	15,D		; TRANSMIT OVER WIRE
05080		POPJ	P,		; AND EXIT
05090	
05100		
05110	
05120	;	SEND SIGNED INTEGER DATA WORD-- MUST BE LESS THAN
05130	;	ABSOLUTE 2^10, BUT IN 2'S COMPLEMENT FORM.  THIS
05140	;	ROUTINE TURNS IT INTO THE 2-BYTE SIGN-MAGNITUDE FORM.
05150	
05160	SENDD:	AND	D,[XWD 400000,1777](S)	; CLEAN IT UP
05170		JUMPGE	D,.+3(S)	; USE AS IS, IF POSITIVE
05180		MOVN	D,D		; INVERT IF NEGATIVE
05190		ANDI	D,21777		; (CLEANING EXCESS BITS)
05200		TLZE	DISIFY		; (SKIP IF "MOVE" OP.)
05210		TRO	D,10000		; (ELSE LIGHT UP THIS DATUM)
05220	
05230	;	SEND 14-BIT DATA IN DATA FORMAT-- LOW-ORDER 7 BITS
05240	;	FIRST, FOLLOWED BY HIGH-ORDER-- BOTH ODD PARITY.
05250	
05260	SENDL:	PUSH	P,D		; SAVE FOR SECOND BYTE
05270		PUSHJ	P,SENDO(S)	; SEND A DATA BYTE
05280		POP	P,D		; GO FOR SECOND BYTE
05290		LSH	D,-7		; (FALL THROUGH INTO SENDD)
05300	
05310	;	SEND CHAR IN DATA (ODD PARITY) FORMAT
05320	
05330	SENDO:	PUSHJ	P,PARITY(S)	; ATTACH PARITY BIT TO D
05340		XORI	D,200		; INVERT TO MAKE ODD PARITY
05350		JRST	SENDTT(S)	; AND SEND IT
05360	
05370	;	PARITY SUBROUTINE CALLED ABOVE MAKES D BE EVEN PARITY
05380	
05390	PARITY:	ANDI	D,177		; CUT DOWN TO SEVEN BITS
05400		PUSH	P,D		; AND SAVE
05410		PUSH	P,D		; AGAIN
05420		LSH	D,4
05430		XORB	D,(P)
05440		LSH	D,2
05450		XORB	D,(P)
05460		LSH	D,1
05470		XORB	D,(P)
05480		POP	P,D		; GET PARITY BIT
05490		ANDI	D,200
05500		XORM	D,(P)		; MIX WITH SAVED BYTE
05510		POP	P,D		; RESTORE PARITIED BYTE
05520		POPJ	P,		; LOOKS LIKE POPCORN
05530	
05540	;	SEND COMMAND FOLLOWED BY PIC NUMBER
05550	;	EXPECTS GT40 COMMAND IN ACCUMULATOR D AND AN
05560	;	OMNI PICTURE NUMBER IN ACCUMULATOR A
05570	;	JUST RETURNS IF NO GT40 PIC NUMBER DEFINED
05580	
05590	SENDA:	MOVE	C,D		;SAVE THE COMMAND CODE
05600		PUSHJ	P,FIND1(S)	;SEE IF GT40 PIC NUMBER EXISTS
05610		CAMN	D,[XWD NULL,0](S)  ;IF NULL RETURNED, NOT EXTANT
05620		POPJ	P,		;SO JUST RETURN
05630		MOVE	B,D		;ELSE SAVE NUMBER FOR LATER
05640		MOVE	D,C		;NOW GET COMMAND CODE BACK
05650		PUSHJ	P,SENDC(S)	;AND SEND
05660		MOVE	D,B		;NOW BRING BACK GT40 NUMBER
05670		PUSHJ	P,SENDL(S)	; SEND IT IN LONG FORMAT
05680		POPJ	P,		;AND RETURN
05690	
05700	;	ADD1,FIND1 AND REMOV1 ARE ROUTINES FOR MANIPULATING
05710	;	PICTAB, THE CORRESPONDENCE TABLE BETWEEN OMNI PICTURE
05720	;	NUMBERS AND THE LIMITED NUMBER OF GT40 PICTURE NUMBERS
05730	;	(SPECIFICALLY 200).
05740	;	EXPECTS OMNI PICTURE NUMBER IN ACCUMULATOR A
05750	;	CLOBBERS B AND USES D FOR RETURNING VALUES
05760	
05770	
05780	ADD1:	MOVEI	D,1		;INITIALIZE GT40 PIC NUM
05790		MOVEI	B,PICTAB-1(R)	;PICK UP BASE OF TABLE
05800		PUSH	P,A		;SAVE OMNI PIC NUMBER
05810		MOVSI	A,NULL		;FIX NULL ENTRY FOR COMPARISON
05820	ALOOP:	CAILE	D,=200		;ONLY ALLOW 200 NUMBERS
05830		JUMPA	NOMORE(S)	;SORRY
05840		AOJ	B,		;POINT TO NEXT ENTRY
05850		CAME	A,@B		;HUNT FOR A NULL ENTRY
05860		AOJA	D,ALOOP(S)	;BUMP D AND TRY AGAIN
05870		POP	P,A		;BRING BACK OMNI PIC NUMBER
05880		MOVEM	A,@B		;AND PUT IN PICTAB HERE
05890		POPJ	P,		;AND RETURN
05900	NOMORE:	ERR	<MORE THAN 200 PICTURES DEFINED>,16
05910	
05920	FIND1:	MOVEI	D,1		;INITIALIZE GT40 PIC NUM
05930		MOVEI	B,PICTAB-1(R)	;PICK UP BASE OF TABLE
05940	FLOOP:	CAILE	D,=200		;ONLY ALLOW 200 NUMBERS
05950		JUMPA	NFIND(S)	;SHOULD ALWAYS FIND IT
05960		AOJ	B,		;POINT TO NEXT ENTRY
05970		CAME	A,@B		;COMPARE TO PIC NUM GIVEN IN A
05980		AOJA	D,FLOOP(S)	;BUMP D AND TRY AGAIN
05990		POPJ	P,		;ELSE RETURN WITH NUM IN D
06000	NFIND:	MOVSI	D,NULL		;SET D TO NULL IF NOT FOUND
06010		POPJ	P,		;AND RETURN
06020	
06030	;	EXPECTS ACCUMULATOR B TO STILL POINT TO ENTRY IN
06040	;	PICTAB AFTER CALL TO FIND1
06050	
06060	REMOV1:	PUSHJ	P,FIND1(S)	;FIRST FIND ENTRY IN PICTAB
06070		MOVSI	D,NULL		;SET UP NULL ENTRY AND
06080		MOVEM	D,@B		;STICK IT IN PICTAB
06090		POPJ	P,		;AND RETURN
06100	
06110	;	FIND,REMOV,PUTIN,KILL,STOBYT, AND BLOCK ARE
06120	;	ROUTINES FOR LIST HANDLING.
06130	;	CODE TAKEN FROM DISDVS.FAI WITH MODIFICATIONS TO KILL ONLY
06140	
06150	
06160	;FIND	LOOKS FOR PIC NUMBERED IN A. ENTER WITH G ==>
06170	;	AN AOBJN POINTER WHICH POINTS TO THE LISTS TO LOOK IN.
06180	;	EXITS WITH POINTER TO PIC IN B; ZERO IF NONE FOUND
06190	
06200	FIND:	MOVEI	B,(G)		;COPY LIST POINTER.
06210		ADDI	B,-%THREAD(R)	;RELOCATE.
06220		JRST	.+3(S)		;AND JUMP INTO LOOP
06230		CAMN	A,%DNUM(B)	;IS THIS IT?
06240		POPJ	P,		;YES
06250		HRRZ	B,%THREAD(B)	;LOOK AT NEXT PICTURE.
06260		JUMPN	B,.-3(S)	;IF IT EXISTS.
06270		AOBJN	G,FIND(S)	;END OF LIST, TRY FOR ANOTHER LIST
06280		POPJ	P,		;NO MORE LISTS TO LOOK IN.
06290	
06300	
06310	;REMOV	REMOVES PICTURE POINTED TO BY B FROM THE LIST
06320	;	IT IS IN.  CLOBBERS C,D
06330	
06340	REMOV:	MOVE	C,%THREAD(B)	;GET TWO-WAY LINKS.
06350		MOVS	D,C
06360		TLNN	C,-1		;LEFT LINK?
06370		JRST	[HLRZ D,%LIST(B)  ;NO -- FIND WHICH LIST IT IS IN.
06380			 HRRZM C,(D)	;AND PUT POINTER THERE.
06390			 JRST .+2(S)](S)
06400		HRRM	C,%THREAD(D)	;FIX LEFT NEIGHBOR.
06410		TRNE	C,-1		;IF RIGHT NEIGHBOR
06420		HLLM	C,%THREAD(C)	;FIX HIM.
06430		POPJ	P,		;AND RETURN.
06440	
06450	
06460	;PUTIN	PUT B IN THE LIST POINTED TO BY F (UNRELOCATED)
06470	
06480	PUTIN:	ADDI	F,(R)
06490	PUTI0:	HRRZ	C,(F)		;GET CURRENT LIST CONTENTS.
06500		MOVEM	C,%THREAD(B)	;STORE IN THREAD.
06510		TRNE	C,-1
06520		HRLM	B,%THREAD(C)	;MAKE IT LEFT NEIGHBOR
06530		HRRZM	B,(F)		;NEW LIST.
06540		HRLM	F,%LIST(B)	;SAVE AS LIST IT IS ON.
06550		POPJ	P,
06560	
06570	
06580	;KILL RETURNS CORE USED BY PICTURE POINTED TO BY B TO
06590	;	FREE STORAGE.  (CLOBBERS ALL AC'S)
06600	
06610	KILL:	PUSHJ	P,REMOV(S)	;REMOVE IT.
06620	KILL0:	HRRZ	E,-1(B)		;POINTER TO NEXT BLOCK.
06630		PUSH	P,E
06640		PUSHJ	P,RELCOR(S)	;RELEASE CORE.
06650		POP	P,B
06660		JUMPN	B,KILL0(S)	;LOOP FOR ALL BLOCKS.
06670		MOVEI	D,KILLPIC	;SET UP KILL COMMAND
06680		PUSHJ	P,SENDA(S)	;AND SEND IT, MAYBE
06690		JRST	REMOV1(S)	;REMOVE ENTRY FROM PICTAB!!!
06700	
06710	
06720	;	STOBYT	STORES A WORD IN THE CURRENT PICTURE
06730	;	AC 'A'  IS THE WORD
06740	;	OTHER AC'S CLOBBERED AT WILL
06750	;	IF APPENDING, THE GT40 IS UPDATED ON THE FLY AS WELL
06760	
06770	STOBYT:	TLNE	NOMOCOD		;ARE WE ALLOWED?
06780		POPJ	P,		;NO
06790		TLNN	PICOPN		;IS A PICTURE OPEN?
06800		ERR 	<CODE IN UNOPENED PIC>,3
06810	STO1:	MOVE	B,NXTBYT(R)	;PICK UP POINTER.
06820		MOVEM	A,(B)		;STORE WORD.
06830		AOBJN	B,STO0(S)	;BUMP POINTER.
06840		JRST	BLOCK(S)	;RAN OUT -- GET MORE FOR NEXT TIME.
06850	STO0:	MOVEM	B,NXTBYT(R)	;SAVE IT.
06860		TLNN	APPEND		;IF NOT APPENDING, RETURN
06870		POPJ	P,
06880		LDB	B,[POINT 4,A,3](S)  ;ELSE APPEND ON THE FLY
06890		ADDI	B,(S)		;JUST LIKE INTERP
06900		JRST	@DISP(B)
06910	
06920	
06930	;BLOCK	GETS A NEW BLOCK OF CORE TO WORK WITH FOR STORING
06940	;	CODES INTO.  CLOBBERS LOTS OF AC'S BY CALLING GETCOR.
06950	;	STORES NEW BLOCK ADDRESS IN CURCORGET(R).  SETS UP
06960	;	NXTBYT(R) WITH AN AOBJN POINTER TO CORE BLOCK.
06970	
06980	BLOCK:	MOVEI	C,400
06990		PUSHJ	P,GETCOR(S)	;TRY TO GET CORE.
07000		JUMPE	B,BLO0(S)	;NONE
07010		HLL	C,-1(B)		;GET LENGTH
07020		ADD	C,[XWD 2,0](S)	;INC TO ACCOUNT GETCOR OVERHEAD
07030		HRRI	C,(B)		;PUT IN THE POINTER.
07040		MOVEM	C,NXTBYT(R)	;THIS IS THE NEW AOBJN POINTER.
07050		SKIPE	C,CURCORGET(R)	;ANY PREVIOUS PIECE?
07060		HRRM	B,-1(C)		; YES -- LINK IN.
07070		MOVEM	B,CURCORGET(R)
07080		POPJ	P,
07090	
07100	BLO0:	SKIPN	CURCORGET(R)	;IS THIS THE FIRST TIME?
07110		POPJ	P,		;YES
07120		MOVE	B,GENTOP(R)	;NO -- RELEASE ALL PREVIOUS
07130		JRST	KILL0(S)	;PARTS OF THE LIST.
07140	
07150	
07160	;	PLOT ROUTINE FOR STORAGE TUBES (APPLICABLE TO GT40)
07170	;	FORMAT IS XWD -1,ADDRESS
07180	;	FOLLOWED BY DUMP OF ALL CODE BLOCKS.
07190	;	CODE COPIED FROM DISDVS.FAI
07200	
07210	PLTIT:	MOVEI	E,PP-%THREAD(R)	;LOOK IN PP.
07220	PLT0:	HRRZ	E,%THREAD(E)	;NEXT IN LIST.
07230		JUMPE	E,CPOPJ(S)	;NONE LEFT.
07240		HRROI	A,-1(E)		;XWD -1,ADDRESS
07250		PUSHJ	P,PL(S)		;WRITE
07260		MOVEI	B,(E)		;SAVE ADDRESS
07270	PLT1:	MOVEI	C,(B)		;ADDRESS AGAIN.
07280		HLL	B,-1(B)
07290		MOVE	A,-1(B)		;GET WORD.
07300		PUSHJ	P,PL(S)		;WRITE
07310		AOBJN	B,.-2(S)	;LOOP FOR THIS BLOCK.
07320		HRRZ	B,-1(C)		;POINTER TO NEXT BLOCK.
07330		JUMPE	B,PLT0(S)	;NONE.
07340		JRST	PLT1(S)		;YES -- WRITE IT TOO.
07350	
07360	
07370	;	ROUTINES FOR GENERATING CODE-WORDS
07380	
07390	PGEN:	TLNE	DISIFY		;IF WE ARE NOT INTENSIFYING
07400		JRST	PGEN0(S)	;AND
07410		CAMN	B,.IXBEAM(R)	;IF BEAM IS ALRADY THERE,
07420		CAME	C,.IYBEAM(R)	;THEN DO NOTHING.
07430		JRST	PGEN0(S)	;MUST POSITION BEAM
07440		POPJ	P,		;NOTHING TO DO.
07450	PGEN0:	MOVEM	B,.IXBEAM(R)	;SAVE POSITION.
07460		MOVEM	C,.IYBEAM(R)
07470		MOVS	A,B
07480		HRR	A,C		;X,,Y
07490		TLZ	A,740000	;SAFETY FACTOR -- REMOVE OP-CODE BITS.
07500		TLNE	DISIFY		;DOT ?
07510		TLOA	A,%ODOT		;YES
07520		TLO	A,%OMOV		;MOVE INSTRUCTION
07530		JRST	STOBYT(S)	;AND STORE IT.
07540	
07550	VGEN:	POP	P,C		;CALLED WITH DELTA X, DELTA Y ON STACK.
07560		POP	P,A		;DELTA Y
07570		ADDB	A,.IYBEAM(R)	;BUMP IYBEAM
07580		POP	P,B		;DELTA X
07590		ADDB	B,.IXBEAM(R)	;AND IXBEAM
07600		HRL	A,B
07610		TLO	A,%ODRW		;DRAW COMMAND
07620		PUSH	P,C		;RESTORE RETURN ADDRESS.
07630		JRST	STOBYT(S)	;AND STORE COMMAND
07640	
07650	
07660	MGEN:	MOVE	A,CURMOD(R)	;PICK UP CURRENT STATUS/MODE
07670		TLO	A,%OMOD		;MODE COMMAND OP-CODE
07680		TLNE	NOMOCOD		;THIS CODE DUPLICATED FROM
07690		POPJ	P,		;STOBYT, 'CAUSE ONE CAN
07700		TLNN	PICOPN		;HAVE A DINT CALL WITHOUT PIC
07710		POPJ	P,		;OPEN (JUST RETURN...NO ERROR)
07720		JRST	STO1(S)		;ELSE, IF PIC OPEN, ADD TO FILE
07730	
07740	;	ROUTINES FOR DECODING CODE-WORDS
07750	
07760	INTERP:	LDB	B,[POINT 4,A,3](S)  ;GET OP-CODE
07770		ADDI	B,(S)		;RELOCATE
07780		JRST	@DISP(B)	;AND DISPATCH
07790	
07800	DISP:	XWD	S,HALT		;HALT (ONLY ON END-OF-BLOCK)
07810		XWD	S,MOVE		;MOVE
07820		XWD	S,MOVDOT	;DOT
07830		XWD	S,DRAW		;DRAW
07840		XWD	S,TEXT		;TEXT
07850		XWD	S,0		;OP-CODE OF 5 FOR %OSCL
07860		XWD	S,STAT		;MODE/STATUS (EXCLUSIVE TO GT40)
07870		XWD	S,PICINI	;OPEN (INITIAL MODE FOR PIC)
07880	
07890	HALT:	MOVEI	D,CLOSEUP	;DONE
07900		PUSHJ	P,SEND1(S)
07910		AOS	(P)		;BUMP RETURN ADDR SO AS TO
07920		POPJ	P,		;RETURN PAST LOOP
07930	
07940	MOVE:	TLZ	DISIFY		; KILL INTENSIFY-BIT
07950		PUSHJ	P,DISTT(S)	; CALL SETUP AND DISTANCE TESTER
07960		POPJ	P,		; DISTANCE = ZERO--NO-OP.
07970		JRST	MOVD1(S)	; SHORT DISTANCE
07980		JRST	MOVD2(S)	; MIDDLE DISTANCE
07990		JRST	MOVD3(S)	; LONG DISTANCE
08000	LAPT:	MOVEI	D,POINT		; ENTER POINT MODE (ABSOLUTE)
08010		HRRZ	C,B		; COPY TO SEND X
08020		HLRZ	E,B		; COPY TO SEND Y
08030		HRRZM	B,CURX(R)	; STORE NEW X AND Y
08040		HLRZM	B,CURY(R)
08050		PUSHJ	P,SENDC(S)	; SEND MODE COMMAND
08060		MOVE	D,C		; GET X-DATA TO BE SENT
08070		PUSHJ	P,SENDD(S)	; SEND IN DATA FORMAT
08080		MOVE	D,E		; DITTO Y-DATA
08090		JRST	SENDD(S)	; --AND RETURN
08100	
08110	MOVD1:	CAIN	A,SRPNT		; WERE WE IN SHORT POINT MODE ?
08120		JRST	SRP(S)		; IF SO, CONTINUE THAT WAY
08130		JRST	SRV(S)		; ELSE GO TO SHORT VECTOR FORM
08140	
08150	MOVD2:	CAIN	A,POINT		; WERE WE IN LONG POINT MODE ?
08160		JRST	LAPT(S)		; IF SO, STAY THAT WAY
08170		CAIN	A,SVECT		; WERE WE IN SHORT VECTOR MODE ?
08180		JRST	SRVP(S)		; IF SO, STAY THAT WAY
08190		CAIN	A,SRPNT		; WERE WE IN SHORT POINT MODE ?
08200		JRST	SRPP(S)		; IF SO, STAY THAT WAY
08210		JRST	LRV(S)		; IF NONE OF THE ABOVE, GO LONG VECTOR.
08220	
08230	MOVD3:	CAIN	A,POINT		; WERE WE IN ABSOLUTE POINT MODE ?
08240		JRST	LAPT(S)		; IF SO, STAY THAT WAY
08250	
08260	LRV:	MOVEI	D,LVECT		; ENTER LONG VECTOR MODE
08270		JRST	LAPT+3(S)	; AND CONTINUE FROM ABOVE
08280	
08290	DRAW:	TLO	DISIFY		; INTENSIFY !!
08300		PUSHJ	P,DISTT(S)	; CALL SETUP AND TESTER
08310		JRST	SRV(S)		; ZERO DISTANCE - GO SHORT VECTOR
08320		JRST	SRV(S)		; SHORT DISTANCE- SAME
08330		JRST	.+3(S)		; MIDDLE DISTANCE- SEE BELOW
08340		JRST	LRV(S)		; LONG DISTANCE - GO LONG FORMAT
08350		JRST	LAPT(S)		; UNDEFINED ? IMPOSSIBLE
08360		CAIN	A,LVECT		; WERE WE IN LONG VECTOR MODE ?
08370		JRST	LRV(S)		; STAY WITH IT, IF SO.
08380	SRVP:	MOVEI	D,SVECT		; GET US INTO SHORT VECTOR MODE
08390		ASH	C,-1		; HALVE DX AND DY
08400		ASH	E,-1
08410		ADDM	C,CURX(R)	; UPDATE X AND Y
08420		ADDM	E,CURY(R)
08430		PUSHJ	P,SRP+3(S)	; SEND CODES TO GT40
08440		MOVE	A,(F)
08450		JRST	INTERP(S)	; GO REINTERPRET
08460	
08470	
08480	SRP:	MOVEI	D,SRPNT		; SHORT POINT MODE
08490		HRRZM	B,CURX(R)	; PRESERVE NEW ENDPOINT
08500		HLRZM	B,CURY(R)
08510		PUSHJ	P,SENDC(S)	; SEND COMMAND IF NEEDED
08520		MOVEI	D,BLANK		; PREPARE TO SEND DE-INTENSIFY OP.
08530		TLZN	DISIFY		; (SKIP IF INTENSIFYING)
08540		PUSHJ	P,SEND2(S)
08550		PUSHJ	P,.+2(S)	; SEND SHORT FORM DX
08560		MOVE	E,C		; SEND SHORT FORM DY
08570		MOVM	D,E		; GET ABSOLUTE VALUE OF ARG.
08580		ANDI	D,77		; WHICH MUST BE 63 OR LESS
08590		SKIPGE	E		; OMIT IF POSITIVE
08600		IORI	D,100		; SET SIGN BIT IN BYTE
08610		JRST	SENDO(S)	; SEND AND RETURN WHEN DONE
08620	
08630	SRV:	MOVEI	D,SVECT		; SHORT VECTOR MODE
08640		JRST	SRP+1(S)
08650	
08660	MOVDOT:	TLO	DISIFY		; INTENSITY IS ON FOR DOT MODE
08670		PUSHJ	P,DISTT(S)	; CALL SETUP AND DISTANCE TESTER
08680		JRST	SRP(S)		; ZERO DISTANCE- ENTER SHORT POINT MOOE
08690		JRST	SRP(S)		; SHORT DISTANCE- SAME
08700		JRST	.+3(S)		; MIDDLE DISTANCE- SEE BELOW
08710		JRST	LAPT(S)		; LONG DISTANCE - LONG POINT MODE
08720		JRST	LAPT(S)		; UNDEFINED- LONG POINT MODE
08730		CAIN	A,POINT		; WERE WE IN POINT MODE ?
08740		JRST	LAPT(S)		; IF SO, STAY THAT WAY
08750	SRPP:	MOVEI	D,SRPNT		; GET US INTO SHORT-POINT MODE
08760		TLZ	DISIFY		; TURN LIGHTS OUT
08770		JRST	SRVP+1(S)	; AND TREAT SAME AS SRVP
08780	
08790	
08800	; "DISTT" CALLED BY MOVE, DRAW, AND DOT, PERFORMS SETUP SERVICE, AND
08810	; RETURNS AS FOLLOWS:
08820	;	PUSHJ	P,DISTT(S)	; CALL THE SUBROUTINE
08830	;	JRST	DIST0(S)	; (DX,DY) = (0,0)
08840	;	JRST	DIST1(S)	; ABS. DX, DY ARE LESS THAN 64.
08850	;	JRST	DIST2(S)	; ABS. DX, DY ARE LESS THAN 127.
08860	;	JRST	DIST3(S)	; ABS. DX OR DY IS GRTR THAN 127.
08870	;	.....			; OLD X AND Y WERE UNDEFINED.
08880	; THE SETUP IS AS FOLLOWS:
08890	; UPON EXIT, AC B CONTAINS THE NEW COORDS. Y AND X (Y IN LEFT
08900	; HALF, X IN RIGHT).  AC C CONTAINS DELTA-X, AND AC E DELTA-Y.
08910	; AC A CONTAINS A COPY OF OLDCOM(R), WHICH WAS THE LAST COMMAND
08920	; BYTE SENT TO THE GT40, AND WHICH DETERMINES WHAT STATE IT IS
08930	; IN.  THIS AFFECTS THE STRATEGY FOR SENDING THE VECTORS, SINCE
08940	; IT IS DESIRABLE TO STAY IN A GIVEN STATE WHEN POSSIBLE, UNLESS
08950	; OPPORTUNITY EXISTS TO GO FROM A LONG- TO A SHORT-FORMAT STATE.
08960	
08970	DISTT:	LDB	B,[POINT 10,A,17](S)  ; GET NEW X POSITION
08980		LDB	C,[POINT 10,A,35](S)  ; GET NEW Y POSITION
08990		MOVN	D,CURX(R)	; GET NEGATIVES OF OLD X AND Y
09000		MOVN	E,CURY(R)
09010		JUMPG	D,DIST2(S)	; UNDEFINED IF OLD X WAS NEG.
09020		ADD	D,B		; NOW FORM DX AND DY
09030		ADD	E,C
09040		HRL	B,C		; NOW PACK (Y,X) INTO AC B
09050		JUMPN	D,.+2(S)	; SKIP IF NONZERO DX
09060		JUMPE	E,DIST3(S)	; JUMP OUT IF BOTH DX AND DY ARE ZERO
09070		MOVM	A,D		; GET ABSOLUTES OF DX, DY
09080		MOVM	C,E
09090		CAMLE	C,A
09100		MOVE	A,C		; PUT THE LARGER INTO A.
09110	DIST1:	CAIL	A,177
09120		AOS	(P)		; BUMP EXIT IF > 126
09130		CAIL	A,100
09140		AOS	(P)		; AGAIN, IF > 63
09150		AOS	(P)		; THEN ONCE FOR GOOD MEASURE
09160	DIST3:	MOVE	A,OLDCOM(R)	; PROVIDE OLD OP.CODE FOR CONVENIENCE
09170		MOVE	C,D		; SAVE DX HERE FOR CONVEVIENCE
09180		POPJ	P,		; RETURN SOMEWHERE PAST "PUSHJ"
09190	DIST2:	AOS	(P)		; EXIT 4 NEEDS PRIMING OF A.
09200		HRL	B,C		; NOW PACK (Y,X) INTO AC B
09210		MOVEI	A,7777		; MAKE A LARGE
09220		JRST	DIST1(S)	; AND GO BUMP EXIT TO 4
09230	
09240	
09250	TEXT:	MOVEI	D,TEXTMO	;SEND START-OF-TEXT COMMAND
09260		PUSHJ	P,SENDC(S)
09270		SETOM	CURX(R) ;TEXT FIX
09280		ROT	A,4		;GET RID OF OP-CODE
09290		MOVEI	E,4		;INITIALIZE DOWN COUNTER
09300	TLOOP:	MOVEI	B,0		;CLEAR OUT B THEN
09310		ROTC	A,8		;GET FIRST CHARACTER IN B
09320		CAIN	B,377		;ALL 1'S ?
09330		POPJ	P,	;YES, THEN DONE
09340		MOVE	D,B		;GET THE CHAR READY AND
09350		PUSHJ	P,SENDO(S)	;SEND TO GT40
09360		SOJG	E,TLOOP(S)	;LOOP FOR MORE.
09370		POPJ	P,		; DONE WITH LOOP-- EXIT.
09380	
09390	
09400	STAT:
09410	STAT0:	MOVEI	D,SETMODE	;SEND MODE COMMAND
09420		PUSHJ	P,SEND1(S)
09430	
09440		LDB	D,[POINT 2,A,35](S)	; GET LINE TYPE
09450		TRNE	A,10
09460		TRO	D,4			; GET BLINK
09470		LDB	E,[POINT 3,A,28](S)
09480		LSH	E,3
09490		IOR	D,E			; GET INTENSITY
09500		TLNE	A,20
09510		TRO	D,100			; GET ITALIC
09520		JRST	SENDO(S)	; SEND MODE BYTE AND EXIT
09530	
09540	PICINI:	TLZ	A,%OPEN		;DELETE OP-CODE (MODE IS LEFT)
09550		TRNN	A,2000		;SEE IF INTENSITY INITIALIZED
09560		TRO	A,600		;IF NOT, INITIALIZE TO 3
09570		TRO	A,2024		;SET ENABLE FLAGS FOR MODE
09580		TLO	A,40		;SET ENABLE FLAG FOR STATUS
09590		JRST	STAT0(S)	;SEND MODE
09600	
09610	;	ROUTINE TO PAINT AND POST THE PIC POINTED TO BY F
09620	
09630	PAINT:	HLLZS	%APPND(B)	;NO MORE APPENDS
09640		PUSHJ	P,IBLO0(S)	;PAINT FROM FIRST BLOCK
09650	POPRET:	POPJ	P,		;AND RETURN
09660	
09670	IBLO0:	PUSH	P,-1(F)		;POINTER TO NEXT BLOCK.
09680		HLL	F,-1(F)		;GET COUNT IN LEFT HALF.
09690		ADD	F,[XWD %BEG+2,%BEG](S); BUMP.
09700		JRST	IBLO1(S)	;AND ENTER BLOCK LOOP.
09710	IBLO:	PUSH	P,-1(F)
09720		HLL	F,-1(F)
09730		ADD	F,[XWD 2,0](S)	;SUBTRACT 2 BECAUSE OF GETCOR OVERHEAD
09740	IBLO1:	MOVE	A,(F)		;PICK UP INSTRUCTION
09750		PUSHJ	P,INTERP(S)	;DEVICE-DEPENDENT INTERPRETATION.
09760		AOBJN	F,IBLO1(S)	;LOOP.  INTERP SKIPS IF NEEDS NEW BLOCK.
09770		POP	P,F
09780		TRNE	F,-1
09790		JRST	IBLO(S)	;LOOP FOR NEXT BLOCK.
09800	UPREC:	TLO	UPDONE		;PICTURE HAS BEEN PAINTED
09810		POPJ	P,		;AND RETURN
09820	
09830	;	ROUTINE TO JUST POST PIC IF ALREADY IN GT40
09840	
09850	PDONE:	MOVE	A,.CURPIC(R)	;GET OMNI PIC NUMBER
09860	PD1:	
09870		MOVEI	D,POST		;SET UP POST COMMAND AND
09880		PUSHJ	P,SENDA(S)	;POST THIS PIC
09890		PUSHJ	P,FIND(S)	;FIND POINTER TO CODE FOR QOP
09900		JRST	QOP(S)		;AND DO OTHER THINGS
09910	
09920	;	CURSET NEEDED BY DISIND HOWEVER NO CURSOR WITH GT40
09930	
09940	CURSET:	POPJ	P,		;THEREFORE JUST RETURN
09950	
09960	;	IPICTA IS CALLED BY DINI TO INITIALIZE PICTAB!!!
09970	
09980	IPICTA:	MOVSI	A,NULL		;NOW INITIALIZE PICTAB
09990		MOVEI	B,PICTAB(R)	;GET BASE OF TABLE, AND
10000		MOVEI	D,=200		;INITIALIZE DOWN COUNTER
10010		MOVEM	A,@B		;PUT NULL CHAR HERE AND 
10020		AOJ	B,		;BUMP POINTER
10030		SOJG	D,.-2(S)	;LOOP
10040		MOVEI	D,RESTART	; CLEAR PICTURES IN GT40
10050		JRST	SEND1(S)	; AND RETURN
