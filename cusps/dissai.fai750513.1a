
IFNDEF SALONE,<
	TITLE DISSAI -- SAIL DRIVER FOR DISPLAY ROUTINES
>



COMMENT $

THIS IS A DRIVER FOR THE DISPLAY ROUTINES FOR USE WITH SAIL
PROGRAMS.  IT INCLUDES CODE FOR READING IN THE APPROPRIATE
DEVICE-DEPENDENT SEGMENT OF CODE, AND SUBSEQUENTLY DISPATCHING
ALL CALLS TO THAT SEGMENT.

IT DEPENDS ON A FEW DEFINITIONS EXTRACTED FROM THE FILE 'HEAD' WHICH
PREFACES ANY ASSEMBLY OF SAIL PROGRAMS.  THESE DEFINITIONS
ARE GIVEN IMMEDIATELY BELOW.

THIS PROGRAM IS TO BE ASSEMBLED WITH DISDEF.FAI, THE GLOBAL
DEFINITIONS OF CALLS, ETC. FOR THE DISPLAY ROUTINES.

$

BEGIN SAIL

;TAKEN FROM 'HEAD'

FLOAT_2B8	OPDEF	FLOAT	[2B8]
FIX_3B8		OPDEF	FIX	[3B8]
DECPNT_11B8	OPDEF	DECPNT	[11B8]
OCTPNT_12B8	OPDEF	OCTPNT	[12B8]

;END OF STUFF FROM 'HEAD'

IFNDEF SALONE,<
	INTERNAL PPNRJF,DEVRJF;
>

EXTERNAL CORGET,CORREL		;USE SAIL CORE ALLOCATION ROUTINES
EXTERNAL .EXPINT




;THE TYPICAL ENTRY POINT LOOKS LIKE (SAY, DDOT3):
;
;	SIXBIT /DOT3/
;DDOT3:	PUSHJ P,DISP
;	JRST @23(S)		(INDEX INTO DISPATCH TABLE)

DISP:	POP	P,LASTDIS		;SAVE LAST DISPLAY CALL
	POP	P,RETLOC		;SAVE RETURN ADDRESS
	MOVEI	S,T			;POINTER TO DISPATCH

	MOVE	R,.DBASE(S)		;GET POINTER TO DATA AREA
	MOVE	0,.0SAV(S)		;AND RESTORE AC0
	XCT	@LASTDIS		;CALL ROUTINE WITH JRST

FRET:	TDZA	A,A			;RETURN 0
TRET:	MOVNI	A,1			;RETURN TRUE
RET:	MOVEM	0,.0SAV(S)		;SAVE THE AC
	JRST	@RETLOC			;AND RETURN TO USER

LASTDIS:	0
RETLOC:		0

;NOW USE THE 'CALLS' MACRO TO ASSEMBLE ALL THE ENTRY POINTS

III__CLBASE

DEFINE CL & (NAM,ARGS,ROUT) <
	INTERNAL D&NAM
	SIXBIT /NAM/			;DISPLAY SUBROUTINE NAME
D&NAM:	PUSHJ	P,DISP			;CALL DISPATCHER.
	IFDIF <ROUT><>,<JRST ROUT>
	IFIDN <ROUT><>,<JRST @III(S)
		III__III+1
	>
>

DEFINE CI & (NAM) <
	.&NAM __ III
	III__III+1
>

;MACRO CALL ON 'CALLS' IS XLISTED
XLIST
CALLS					;PUT IN ALL THE SUBROUTINES
LIST
; FIX AND FLOAT ROUTINES ARE HANDLED BY SAIL
; UUO INTERPRETER (IT SEEMED AWFULLY SIMPLE!)



WFIXW:	FIX	A,A			;USE SAIL FIXER
	POPJ	P,

WFLOAT:	FLOAT	A,A
	POPJ	P,			;USE SAIL FLOATER



;ERROR MESSAGE PRINTER
INTERNAL DERRHL

WERROR:	PUSH	P,A		;SAVE AN AC
	PUSH	P,B
IFNDEF TENEX,<
	TTCALL	3,[ASCIZ /?DISPLAY ERROR #/]
>
IFDEF TENEX,<
	HRROI	A,[ASCIZ /?DISPLAY ERROR #/]
	PSOUT
>
	MOVE	A,-2(P)		;ADDRESS
	MOVE	A,-1(A)		;LITERAL LOCN.
	TLZ	A,777760	;ONLY SAVE INDEX FIELD.
	MOVEM	A,ERRLOC#	;SAVE IT. (IT WILL HAVE INDEX AC, MAYBE)
	LDB	A,[POINT 12,@ERRLOC,12] ;GET ERROR NUMBER
	DECPNT	A
IFNDEF TENEX,<
	TTCALL	3,[ASCIZ /; ROUTINE D/]
>
IFDEF TENEX,<
	HRROI	A,[ASCIZ /; ROUTINE D/]
	PSOUT
>
	MOVE	B,LASTDIS
	MOVE	B,-2(B)		;SIXBIT NAME.
W0:	SETZM	A
	LSHC	A,6
	JUMPE	A,W1
	ADDI	A,40
IFNDEF TENEX,<
	TTCALL	1,A		;TYPE CHAR
>
IFDEF TENEX,<
	PBOUT
>
	JRST	W0
W1:	SKIPG	@ERRLOC		;ONLY PRINT IF FATAL
IFNDEF TENEX,<
	TTCALL	3,[ASCIZ /
 CALLED FROM /]
>
IFDEF TENEX,<
	HRROI	A,[ASCIZ /
 CALLED FROM /]
	PSOUT
>
	HRRZ	A,RETLOC
	SUBI	A,1
	SKIPG	@ERRLOC		;ONLY PRINT IF FATAL
	OCTPNT	A
IFNDEF TENEX,<
	TTCALL	3,[ASCIZ /
/]
>
IFDEF TENEX,<
	HRROI	A,[ASCIZ /
/]
	PSOUT
>
	POP	P,B
	POP	P,A
DERRHL:	SKIPL	@ERRLOC		;FATAL?
	 POPJ	 P,		;NO -- IT WILL HANDLE IT.
IFNDEF TENEX,<
	CALLI	12		;EXIT.
>
IFDEF TENEX,<
	HALTF
>

; LANGUAGE-DEPENDENT PARTS OF ROUTINES



PUTMAT:	HRRI	C,WORKM(R)	;BLT MATRIX POINTED TO BY
	HRL	C,B		;ACCUMULATOR B INTO THE
	BLT	C,WORKM+=15(R)	;WORKING MATRIX
	POPJ	P,


STRING:	HRRZS	-1(16)		;RESET COUNT.
	MOVNI	A,1		;GET -1
	PUSHJ	P,@.TEXT(S)	;START STRING
SLOP:	SOSGE	-1(16)		;MORE CHARS LEFT?
	 JRST	 STRD		;NO
	ILDB	A,(16)		;GET CHAR
	PUSHJ	P,@.TEXT(S)	;CALL ROUTINE.
	JRST	SLOP
STRD:	MOVNI	A,2		;END OF STRING.
	PUSHJ	P,@.TEXT(S)	;CALL ROUTINE.
	SUB	16,[XWD 2,2]
	JRST	RET		;AND RETURN.



INIGO:
	MOVE	A,(P)		;IF USER WANTS HISEG DISPLAY
	CAIN	A,1		;FILE, SKIP INITIALIZATION
	JRST	INIG1		;YES - HISEG
	SETOM	.LANG(S)		;SAY THIS IS SAIL
;PATCH IN ADDRESSES OF SAIL RUNTIME CORE ALLOCATION ROUTINES

	MOVEI	A,CORGET
	MOVEM	A,.GET(S)
	MOVEI	A,CORREL
	MOVEM	A,.REL(S)

	MOVEI	A,PATADR	;FIXUP ADDRESS FOR PATCHING
	MOVEM	A,.PADR(S)


IFDEF SALONE,<
	MOVEI	A,DISNUM
	SKIPN	A		;IF STAND-ALONE FOR 340
	PUSHJ	P,PATADR	;THEN PATCH
	JRST	INIG1
>

	MOVE	A,-3(P)		;GET DISPLAY # OR NAME
	CAMN	A,[SIXBIT /DEC340/]	;IS IT THE 340?
	MOVEI	A,0		;YES
	SKIPN	A		;IS THIS THE 340?
	PUSHJ	P,PATADR	;YES - PATCH
INIG1:
IFNDEF SALONE,<    ; CODE TO READ-IN THE APPROPRIATE SEGMENT

IFNDEF TENEX,<
	MOVE	B,-3(P)		;GET DISPLAY NUMBER
	OPEN	OBLK	;TRY TO GET THE CHANNEL OPEN
	 JRST	 NODIS		;NO DISK == NO DISPLAY
	MOVE	A,PPNRJF
	MOVEM	A,INAM+3	;PPN
	LOOKUP	INAM		;LOOKUP .SEG FILE
	 JRST	 NODIS		;NO SEGMENT FILE == NO DISPLAY
AG:	INPUT	[IOWD ROUTSIZ,<TT+PCHBRK>
				0]
	STATZ	20000		;LOOK FOR END OF FILE
	 JRST	 NODIS
>
IFDEF TENEX,<
	HRLZI	A,100001	;OLD FILE SHORT FORM
	HRROI	B,[ASCIZ /<SYSSUP>DIS007.SEG/]
	GTJFN
	 JRST	 NODIS
	MOVE	B,[XWD 440000,202000] ;36 BITS READ THAWED
	OPENF
	 JRST	 NODIS
AG:	MOVE	B,[POINT 36,TT+PCHBRK]
	PUSH	P,C
	MOVNI	C,ROUTSIZ
	SIN
	POP	P,C
	GTSTS
	TLNE	B,1000		;END OF FILE
	JRST	NODIS		;NO DISPLAY
	RFPTR
	JFCL
	ADDI	B,((ROUTSIZ/200)+1)*200-ROUTSIZ

	SFPTR
	JFCL
	MOVE	B,-3(P)
>
	CAME	B,.DISN(S)	;CORRECT DISPLAY NUMBER
	CAMN	B,.DISNM(S)	;OR CORRECT SIXBIT NAME?
	 JRST	 GOTIT		;YES
	JRST	AG		;NO -- LOOK FARTHER

INAM:	SEGNAM			;SIXBIT NAME OF SEGMENT.
	SIXBIT	/SEG/
	BLOCK	2

PPNRJF:	SEGPPN

OBLK:	17
DEVRJF:	SEGDEV
	0


NODIS:	PUSHJ	P,@[XWD S+(=14*40),.ERRGO]
	SUB	P,[XWD 4,4]	;GET RID OF ALL ARGS.
	JRST	FRET		;RETURN FALSE, FALSE, FALSE

GOTIT:
IFNDEF TENEX,<
	RELEASE		;GET RID OF CHANNEL
>
IFDEF TENEX,<
	CLOSF
	 JFCL
>

>
IFDEF SALONE,<     ; CODE TO MOVE LOW PART OF DISPATCH TABLE
		   ; BACK WHERE IT BELONGS.
^T_CBEG			;BEGINNING OF CODE AREA

	MOVE	A,[XWD TT+.FIX,CBEG+.FIX]
	BLT	A,CBEG+PCHBRK-1
>
	JRST @.INI(S)		;NOW GO DO PHASE 2 IN DISPLAY-DEPENDENT




;ROUTINE CALLED BY SAIL WHEN IT MUST EXPAND CORE AND THE
;340 IS INIT'D. THIS ALLOWS OMNIGRAPH TO TAKE CARE OF
;STOPPING THE 340 AND UNLOCKING BEFORE CORE IS EXPANDED.

SAILB:	PUSH	P,S
	MOVEI	S,T		;SETUP S
	MOVE	0,.0SAV(S)	;RESTORE 0
	MOVE	R,.DBASE(S)
	SKIPN	.RUN(S)		;IS THE DISPLAY GOING?
	JRST	OMN1		;NO
	MOVE	A,OXSTAT(R)	;SAVE STATUS
	MOVEM	A,SAVSTAT
	MOVE	A,[XWD 4,400007]	;STOP 340 AND UNLOCK
	DISCAL	A
OMN1:	MOVEI	A,SAILA
	MOVEM	A,.EXPINT
RST1:	POP	P,S
	POP	P,A
	SUB	P,[XWD 4,4]
	PUSH	P,A
	POPJ	P,


;ROUTINE CALLED BY SAIL AFTER IT HAS EXPANDED CORE TO 
;START 340 UP AGAIN

SAILA:	PUSH	P,S
	MOVEI	S,T		;RESTORE S
	MOVE	0,.0SAV(S)	;RESTORE 0
	MOVE	R,.DBASE(S)
	SKIPN	.RUN(S)		;SHOULD WE TRY TO GET STARTED AGAIN
	JRST	OMN2		;NO
	MOVEI	A,OXSTAT(R)	
	HRLI	A,1		;TRY TO RE-SEIZE DISPLAY
	DISCAL	A
	JRST	OMN3		;CANNOT
	MOVE	A,SAVSTAT	;RESTORE DEVICE RUN BITS
	HRLI	A,3
	DISCAL	A		;RESTART DEVICES
OMN2:	PUSHJ	P,PATADR
	JRST	RST1
OMN3:
IFNDEF TENEX,<
	TTCALL	3,[ASCIZ /CANNOT RE-SEIZE DISPLAY
/]
>
IFDEF TENEX,<
	HRROI	A,[ASCIZ /CANNOT RE-SEIZE DISPLAY
/]
	PSOUT
>
	TLZ	DISRUN		;SAY NO LONGER RUNNING
	MOVEM	.0SAV(S)
	MOVEM	.ACSAV(S)
	SETZM	.RUN(S)
	JRST	OMN2


PATADR:	MOVEI 	A,SAILB  ;YES - PATCH IN ADDR
	MOVEM	A,.EXPINT     ;FOR CORE EXPANSION
	POPJ	P,



SAVSTAT:	0	;FOR SAVING DEVICE RUN BITS



IFNDEF SALONE,<
^T:
>
TT:			;HERE BEGINS THE DISPATCH TABLE.
	0		;SAVE CELL FOR REGISTER 0
	0		;POINTER TO DATA AREA
	WFIXW		;FIX ROUTINE
	WFLOAT		;FLOAT ROUTINE
	PUTMAT		;TRANSFER MATRIX TO WORK MATRIX
	TRET		;RETURN TRUE
	FRET		;RETURN FALSE
	RET		;RETURN INTEGER
	RET		;RETURN
	JRST 	WERROR	;.ERRGO
	0		;DEFINES WHICH CORE ALLOCATION METHOD
			;0 IF LOW SEG, -1 IF HISEG
;THE FOLLOWING ENTRIES ARE USED ONLY BY THE LOW SEGMENT
;CORE ALLOCATION METHOD

	CORGET		;FOR ADDRESS OF CORGET
	CORREL		;FOR ADDRESS OF CORREL
	PATADR		;FOR ADDRESS OF PATCH ROUTINE
	0		;FLAG IF DISPLAY IS RUNNING
	-1		;FLAG WHICH LANGUAGE
	BLOCK 20	;FOR AC SAVE AREA


IFNDEF SALONE, <

;IF THESE ARE NOT STAND-ALONE ROUTINES, HERE IS WHERE WE LEAVE
;A BLOCK OF STORAGE FOR THE ROUTINES TO BE READ INTO.

BLOCK	ROUTSIZE

>
BEND
END

