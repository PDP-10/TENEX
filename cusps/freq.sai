begin "freq"

define dicsize = "16000";
define alphasize = "10000";

define !!! = "comment";
define commatbl="6";


require "<sail>MACROS.rls" source!file;
require "<sail>FILINF" source!file;
	
string corpus;
string prostg,nxtstg;
string dump;
string array dic[1:dicsize];
string curlin;
string data,outer,words;

preload!with 0;
integer array rflag[1:1];

integer flower,fupper,fexact,FLIST;
comment runtime switches;

string xletters,xdigits;
integer where;
integer sub;
integer spoint,fpoint;
integer sum,count;
integer abrchar,bbrchar,cbrchar,dbrchar;
integer sbrchar;
integer eof,beof,ceof;
integer fschar,sechar,page,lin;
integer array freq[1:dicsize];
integer aflag,bflag,cflag,dflag,eflag;
label loop1,loop2,loop3,loop4;
label loops;
label loopnext;
label loopexit;
label loopexit2;

preload!with
1, 3, 15, 25, 37, 41, 57, 71, 75, 95, 97, 99, 135, 209, 211, 233, 235,
 269, 297, 317, 331, 335, 339, 347, 349, 351, 465, 467, 469, 471, 591,
 593, 595, 597, 629, 631, 633, 679, 681, 683, 775, 777, 779, 877, 879,
 883, 997, 999, 1001, 1003, 1007, 1009, 1153, 1155, 1157, 1159, 1173, 
1175, 1177, 1287, 1303, 1305, 1307, 1379, 1381, 1383, 1559, 1561, 
 1563, 1641, 1643, 1645, 1669, 1671, 1673, 1675, 1677, 1679, 1729, 
 1731, 1733, 1735, 1795, 1797, 1799, 1801, 1877, 1879, 1881, 1883, 
 1885, 1887, 1949, 1951, 1953, 2033, 2035, 2037, 2069, 2071, 2073, 
 2075, 2085, 2087, 2133, 2137, 2143, 2151, 2153, 2155, 2167, 2169, 
 2173, 2175, 2177, 2195, 2209, 2247, 2249, 2251, 2255, 2259, 2271, 
 2273, 2277, 2299, 2301, 2335, 2343, 2345, 2429, 2431, 2433, 2435, 
 2475, 2477, 2479, 2481, 2567, 2569, 2571, 2657, 2659, 2661, 2747, 
 2749, 2751, 2813, 2815, 2817, 2843, 2845, 2847, 2849, 2851, 2853, 
 2887, 2889, 2891, 2893, 2919, 2921, 2923, 2925, 2955, 2957, 2959, 
 2987, 2989, 2993, 3031, 3033, 3035, 3129, 3131, 3133, 3165, 3167, 
 3169, 3171, 3173, 3175, 3275, 3277, 3279, 3281, 3351, 3353, 3355, 
 3359, 3401, 3403, 3405, 3407, 3409, 3411, 3503, 3505, 3507, 3509, 
 3511, 3513, 3553, 3555, 3557, 3559, 3563, 3565, 3567, 3569, 3579, 
 3585, 3587, 3591, 3595, 3597, 3599, 3601, 3603, 3609, 3619, 3675, 
 3677, 3679, 3681, 3687, 3701, 3717, 3719, 3725, 3727, 3729, 3731, 
 3733, 3741, 3743, 3745, 3747, 3767, 3769, 3771, 3773, 3777, 3779, 
 3781, 3783, 3785, 3787, 3809, 3811, 3813, 3815, 3817, 3819, 3853, 
 3855, 3857, 3859, 3861, 3863, 3875, 3877, 3879, 3881, 3905, 3907, 
 3909, 3911, 3947, 3949, 3951, 3953, 3955, 3981, 3983, 3985, 3987, 
 3991, 3993, 3995, 3997, 3999, 4001, 4003, 4005, 4007, 4079, 4081, 
 4083, 4085, 4149, 4151, 4153, 4155, 4215, 4217, 4219, 4223, 4225, 
 4227, 4301, 4303, 4305, 4307, 4309, 4311, 4329, 4331, 4333, 4335, 
 4339, 4341, 4445, 4447, 4449, 4451, 4535, 4537, 4539, 4541, 4613, 
 4615, 4617, 4619, 4621, 4623, 4709, 4711, 4713, 4719, 4721, 4723, 
 4763, 4765, 4767, 4769, 4779, 4781, 4803, 4805, 4807, 4809, 4871, 
 4873, 4877, 4879, 4897, 4899, 4901, 4903, 4905, 4907, 4939, 4941, 
 4943, 4945, 4947, 4949, 4961, 4963, 4965, 4967, 4969, 4971, 4975, 
 4979, 4991, 4997, 4999, 5015, 5019, 5021, 5029, 5031, 5033, 5049, 
 5051, 5065, 5069, 5083, 5085, 5113, 5115, 5129, 5151, 5159, 5173, 
 5177, 5183, 5185, 5295, 5297, 5299, 5301, 5371, 5373, 5375, 5379, 
 5449, 5451, 5453, 5525, 5527, 5529, 5593, 5595, 5597, 5661, 5663, 
 5667, 5717, 5719, 5721, 5723, 5729, 5731, 5733, 5735, 5737, 5739, 
 5741, 5743, 5745, 5747, 5749, 5751, 5753, 5755, 5757, 5759, 5761, 
 5763, 5765, 5767, 5769, 5771, 5797, 5799, 5801, 5803, 5805, 5807, 
 5861, 5863, 5865, 5867, 5945, 5947, 5949, 5957, 6015, 6017, 6019, 
 6021, 6023, 6025, 6127, 6129, 6131, 6133, 6137, 6139, 6181, 6183, 
 6185, 6187, 6189, 6191, 6279, 6281, 6333, 6335, 6413, 6415, 6417, 
 6547, 6603, 6605, 6627, 6669, 6699, 6731, 6811, 6929, 6947, 6949, 
 6951, 7167, 7231, 7233, 7289, 7291, 7301, 7303, 7371, 7373, 7375, 
 7377, 7435, 7437, 7439, 7569, 7621, 7623, 7625, 7627, 7629, 7631, 
 7705, 7707, 7709, 7805, 7807, 7809, 7859, 7863, 7885, 7887, 7891, 
 7893, 7895, 7897, 7899, 7901, 7903, 7905, 7907, 7909, 7911, 7913, 
 7915, 7917, 7919, 7949, 7951, 7961, 7963, 7967, 7985, 7989, 7991, 
 7993, 7995, 7997, 7999, 8001, 8017, 8019, 8021, 8023, 8037, 8039, 
 8041, 8043, 8061, 8063, 8065, 8067, 8069, 8071, 8093, 8095, 8097, 
 8099, 8101, 8103, 8105, 8107, 8109, 8111, 8113, 8115, 8231, 8235, 
 8237, 8241, 8295, 8297, 8299, 8381, 8451, 8453, 8455, 8457, 8459, 
 8463, 8539, 8541, 8543, 8563, 8565, 8567, 8569, 8571, 8573, 8575, 
 8579, 8581, 8583, 8585, 8587, 8589, 8591, 8593, 8595, 8597, 8599, 
 8601, 8603, 8605, 8607, 8609, 8611, 8613, 8615, 8617, 8619, 8621, 
 8623, 8625, 8627, 8629, 8631, 8633, 8643, 8645, 8647, 8649, 8671, 
 8673, 8675, 8677, 8681, 8683, 8685, 8687, 8689, 8691, 8713, 8715, 
 8717, 8719, 8721, 8723, 8729, 8731, 8733, 8735, 8737, 8739, 8741, 
 8743, 8745, 8747, 8753, 8755, 8757, 8759, 8765, 8767, 8769, 8771, 
 8773, 8775, 8781, 8783, 8785, 8787, 8789, 8791, 8793, 8795, 8797, 
 8799, 8801, 8803; 
integer array loc[1:26,1:26];
integer simple procedure lower(integer i);
begin
return(if i geq '101 and i leq '132 then i+'40 else i);
end;



string simple procedure conver(string s);
begin
string t;integer char;

if fexact then return(s);
t_null;
while char_lop(s) do
	t _ t & (if fupper then (if char geq '141 and char leq '172 then char-'40 else char)
		else
		(if char geq '101 and char leq '132 then char_char+'40 else char));
return(t);
end;



simple procedure shuffle;
begin
integer i;
integer moveup;

moveup_0;

for i_1 step 1 until alphasize do
    begin
	if length(dic[i])=0 then moveup_moveup+1
	else
	    begin
		dic[i-moveup]_dic[i];
		freq[i-moveup]_freq[i];
		if moveup>0 then
		    begin
			dic[i]_null;
			freq[i]_0;
		    end;
	    end;
    end;
end;


procedure alpha;
begin
integer i,j,k;

string simple procedure slower(string s);
begin
string t;
integer char;
t_null;
while char_lop(s) do t_t & (if char geq '101 and char leq '132 then char+'40 else char);

return(t);
end;

integer simple procedure before(integer i,j);
begin
integer w1,w2;
integer k,limit;
limit_length(dic[i]);
for k_6 step 1 until limit do
    begin
	w1_lower(dic[i][k for 1]);
	w2_lower(dic[j][k for 1]);
	if w1 < w2 then return(1) 
	   else if w1 > w2 then return(0);
    end;
return(1);
end;


integer array tra[1:dicsize];

label loopg;

for k_1 step 1 until alphasize do
    begin
	if length(dic[k])=0 then done;
	tra[k]_if fexact then cvasc(slower(dic[k])) else cvasc(dic[k]);
    end;

k_k-1;



for j_2 step 1 until k do
     begin
	i_j;
      loopg:
	if tra[i]<tra[i-1] or ( tra[i]=tra[i-1] and before(i,i-1) ) then
		begin
		    dic[i] swap dic[i-1];
		    freq[i] swap freq[i-1];
		    tra[i] swap tra[i-1];
		    if i>2 then 
			begin
			    i_i-1;
			    go to loopg;
			end;
		end;
     end;

for k_alphasize+1 step 1 until dicsize do
    begin
	if length(dic[k])=0 then done;
	tra[k]_if fexact then cvasc(slower(dic[k])) else cvasc(dic[k]);
    end;
k_k-1;

for j_alphasize+2 upto k do
    begin
	label loop;
	i_j;
     loop:
	if tra[i]<tra[i-1] or ( tra[i]=tra[i-1] and before(i,i-1) ) then
	    begin
		dic[i] swap dic[i-1];
		freq[i] swap freq[i-1];
		tra[i] swap tra[i-1];
		if i>alphasize+2 then
		    begin
			i_i-1;
			go to loop;
		    end;
	    end;
    end;


end;

simple procedure filget;
begin
inget("data",data,1,0,2,abrchar,eof);
outget("outer",outer,2,0,2);
if FLIST then outget("words",words,3,0,2);
end;

simple procedure modeget;
begin
label loop;
string s,t;
define e(x,y)="if equ(t,""x"") then y_1 else";
loop:
flower_fupper_fexact_FLIST_0;
outstr("modes  (? for help)  *");
s_inchwl;
if equ(s,"?") then 
    begin
	outstr("
type a list of modes, separated by commas
modes are:
	l	force lower case
	u	force upper case
	e	for exact character match
	c	to change word characters
	w	to print list of words as well as list with frequencies
");
	go to loop;
    end;
while nnil(s) do
    begin
	t_scan(s,commatbl,dbrchar);
	e(L,flower)
	e(U,fupper)
	e(E,fexact)
	e(W,FLIST)
	if equ(t,"C") then
	    begin
		outstr("old characters:
" & xdigits & "
new characters (added to the letters)  *");
		xdigits_inchwl;
	    end
	else
	begin
	    outstr("illegal switch " & t & crlf);
	    go to loop;
	end;
    end;

if not (flower or fupper or fexact) then
    begin
	outstr("
lower case chosen by default!
");
	flower_1;
    end;

if flower+fupper+fexact > 1 then
    begin
	outstr("
more than one case mode chosen!
");
	go to loop;
    end;


end;



simple procedure reset;
begin

integer simple procedure entier(real x);
begin
integer i;
i_x;
return(if i<x then i+1 else i);
end;

real factor,result;
integer i,j;
outstr("reset ");
factor_alphasize/10000;
fore(i,26) fore(j,26)
    begin
	!!! intshow2(loc,i,j);
	result_loc[i,j]*factor;
	!!! realshow(result);
	loc[i,j]_entier(result);
	!!! intshow2(loc,i,j);
    end;

rflag[1]_1;
end;

simple procedure clear;
begin
integer i;

sum_count_0;

fore(i,dicsize)
    begin
	dic[i]_null;
	freq[i]_0;
    end;

end;


clear;

xletters_"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

xdigits_"0123456789<>'-#$";
setbreak(commatbl,",",null,"in");
setbreak(1,'15,null,"in");
setbreak(5,'12&'14,null,"in");

modeget;filget;

setbreak(2,xletters&xdigits,null,"rxn");
setbreak(3,xletters&xdigits,null,"inr");



outstr("title *");
corpus_inchwl;
if nil(corpus) then corpus_data;

if alphasize neq 10000 and not rflag[1] then reset;
	
outstr("sort ");

while not eof do 
    begin
	label cont;
	dump_input(1,3);
	prostg_conver(input(1,2));
	if nil(prostg) then go to cont;
	fschar_lower(prostg[1 for 1]);
	if length(prostg)=1 then sechar_'141
	    else sechar_lower(prostg[2 for 1]);
	if fschar < '141 or fschar > '172 then page_27
	    else page_fschar-96;
	if sechar < '141 or sechar > '172 then sub_1
	    else sub_sechar-96;
	if page=27 then 
	    begin
		label ok;
		for spoint_alphasize+1 upto dicsize do
		    begin
			if nil(dic[spoint]) then 
			    begin					
				dic[spoint]_prostg;
				freq[spoint]_1;
				go to ok;
			    end
			else
			if equ(prostg,dic[spoint]) then
			    begin
				freq[spoint]_freq[spoint]+1;
				go to ok;
			    end;
		    end;
		outstr("
non-alphabetic store exceeded.  lost word :" & prostg & crlf);
		ok:
	    end
	else
	    begin
		label ok;
		for spoint_loc[page,sub] upto alphasize do
		    begin		   
			if nil(dic[spoint]) then
			    begin
				dic[spoint]_prostg;
				freq[spoint]_1;
				go to ok;
			    end
			else
			if equ(prostg,dic[spoint]) then
			    begin
				freq[spoint]_freq[spoint]+1;
				go to ok;
			    end;
		    end;
		outstr(" wraparound at " & prostg & crlf);
		fore(spoint,alphasize)
		    begin
			if nil(dic[spoint]) then
			    begin
				dic[spoint]_prostg;
				freq[spoint]_1;
				go to ok;
			    end
			else
			if equ(prostg,dic[spoint]) then
			    begin
				freq[spoint]_freq[spoint]+1;
				go to ok;
			    end;
		    end;
		outstr("
wraparound failed.  lost word:  " & prostg & crlf);
		ok:
	    end;
      cont:
    end; comment of while not eof;


outstr("shuffle ");
shuffle;
outstr("alpha ");
alpha;
outstr("print ");

sum_count_0;

out(2,"[frequency search on " & corpus & "
");
for lin_1 step 1 until alphasize do
    begin
	if length(dic[lin])=0 then done;
	out(2,cvs(freq[lin]) & "	" & dic[lin] & "
");
	if FLIST then out(3,dic[lin] & "
");
	count_count+1;
	sum_sum+freq[lin];
    end;
loopexit:

for lin_alphasize+1 step 1 until dicsize do
    begin
	if length(dic[lin])=0 then done;
	out(2,cvs(freq[lin]) & "	" & dic[lin] & "
");
	if FLIST then out(3,dic[lin] & "
");
	count_count+1;
	sum_sum+freq[lin];
    end;

dump_"

[there are " & cvs(sum) & " words on the file " & data & ",
[" & cvs(count) & " distinct words.
[";
out(2,dump);
outstr(dump);

release(2); if FLIST then release(3);
end;












