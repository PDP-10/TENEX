;<132>PDP15.MAC;4    26-SEP-74 14:59:49	EDIT BY KREMERS
;FIX BUG IN CASE 5 PROCESING AT FIFDM2-2
;<TENEX-MON>PDP15.MAC;59    16-AUG-74 11:59:38	EDIT BY UNTULIS
;<TENEX-MON>PDP15.MAC;58     1-AUG-74 17:48:07	EDIT BY KREMERS
;ADDED LOCK IN FIFIO TO PREVENT CONFLICTS
;<TENEX-MON>PDP15.MAC;57    10-JUN-74 19:38:17	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;56     6-JUN-74 16:56:23	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;55     6-JUN-74 15:19:36	EDIT BY KREMERS
;ADDED DEVICE VIP
;<TENEX-MON>PDP15.MAC;54     6-JUN-74 00:27:23	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;52     7-MAY-74 05:09:02	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;51     6-MAY-74 22:37:43	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;50    30-APR-74 18:50:31	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;49    30-APR-74 17:52:20	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;48    25-APR-74 02:35:14	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;47    24-APR-74 22:53:41	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;46    23-APR-74 23:54:56	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;45    23-APR-74 17:50:06	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;44    18-APR-74 04:16:15	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;43    18-APR-74 00:27:52	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;42    17-APR-74 06:02:33	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;41    17-APR-74 02:13:48	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;40    16-APR-74 23:42:01	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;39    16-APR-74 22:42:51	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;38    16-APR-74 22:38:45	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;37    11-APR-74 16:36:09	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;36    11-APR-74 01:48:00	EDIT BY KREMERS
;RECODE SPECIAL STUFF FOR TV START (UGH)
;<KREMERS>PDP15.MAC;19    10-APR-74 23:40:15	EDIT BY KREMERS
;<KREMERS>PDP15.MAC;18    10-APR-74 23:37:29	EDIT BY KREMERS
;<KREMERS>PDP15.MAC;17    10-APR-74 02:09:35	EDIT BY KREMERS
;<KREMERS>PDP15.MAC;15     5-APR-74 06:59:09	EDIT BY KREMERS
;<KREMERS>PDP15.MAC;14     4-APR-74 08:11:26	EDIT BY KREMERS
;<KREMERS>PDP15.MAC;11     4-APR-74 02:46:30	EDIT BY KREMERS
;<KREMERS>PDP15.MAC;8    22-MAR-74 16:36:12	EDIT BY KREMERS
;<KREMERS>PDP15.MAC;7    21-MAR-74 17:36:06	EDIT BY KREMERS
;<KREMERS>PDP15.MAC;6     8-FEB-74 15:14:31	EDIT BY KREMERS
;<KREMERS>PDP15.MAC;5     7-FEB-74 21:44:47	EDIT BY KREMERS
;<KREMERS>PDP15.MAC;4    16-JAN-74 02:01:21	EDIT BY KREMERS
;<KREMERS>PDP15.MAC;3     8-JAN-74 02:35:22	EDIT BY KREMERS
;GENERAL REWRITE OF DUMPIO STUFF,  REMOVED PAGE LOCKING AND CHECKIN
;TO IO.MAC
;<TENEX-MON>PDP15.MAC;30    18-DEC-73 04:12:44	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;29    13-DEC-73 06:03:32	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;28    13-DEC-73 05:13:17	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;27     6-DEC-73 16:33:04	EDIT BY KREMERS
;GET RID OF IMP, ADD POINTER, SHUFFEL DEVICE NAMES.
;NOTE;  MUST BE USED WITH PDP15 MONITOR VERSION 166 OR LATER
;<TENEX-MON>PDP15.MAC;26    28-NOV-73 04:40:17	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;25    13-NOV-73 02:49:56	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;24     1-NOV-73 00:57:38	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;23    31-OCT-73 14:49:28	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;22    23-OCT-73 23:01:00	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;21    18-OCT-73 17:06:47	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;20    17-OCT-73 22:59:52	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;19    10-OCT-73 16:47:10	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;18     9-OCT-73 22:28:22	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;17     9-OCT-73 01:08:58	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;16     9-OCT-73 00:35:48	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;15     8-OCT-73 20:44:04	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;14     8-OCT-73 20:24:12	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;13     8-OCT-73 20:04:50	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;12     8-OCT-73 20:01:00	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;11     8-OCT-73 19:47:33	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;10     8-OCT-73 19:39:42	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;9     8-OCT-73 18:55:49	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;8     8-OCT-73 18:15:20	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;7     8-OCT-73 15:02:33	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;6     7-OCT-73 16:31:48	EDIT BY KREMERS
;<KREMERS>PDP15.MAC;10     6-OCT-73 23:36:15	EDIT BY KREMERS
;<KREMERS>PDP15.MAC;9     6-OCT-73 22:48:44	EDIT BY KREMERS
;<KREMERS>PDP15.MAC;8     6-OCT-73 22:00:36	EDIT BY KREMERS
;<KREMERS>PDP15.MAC;7     3-OCT-73 10:58:44	EDIT BY KREMERS
;<KREMERS>PDP15.MAC;6     1-OCT-73 08:28:14	EDIT BY KREMERS
;<KREMERS>PDP15.MAC;5    28-SEP-73 20:01:17	EDIT BY KREMERS
;<KREMERS>PDP15.MAC;2    28-SEP-73 02:22:55	EDIT BY KREMERS
;<TENEX-MON>PDP15.MAC;3     6-SEP-73 04:56:12	EDIT BY KREMERS
;<SRIMON131>PDP15.MAC;11     4-SEP-73 20:17:49	EDIT BY KREMERS
;<SRIMON131>PDP15.MAC;10    14-AUG-73 08:17:11	EDIT BY KREMERS
;<SRIMON131>PDP15.MAC;9     8-AUG-73  4:18:39	EDIT BY KREMERS
;<SRIMON131>PDP15.MAC;8    30-JUL-73 14:34:31	EDIT BY KREMERS
;<SRIMON131>PDP15.MAC;7    27-JUL-73 16:59:49	EDIT BY KREMERS
;<SRIMON131>PDP15.MAC;6    26-JUL-73  0:00:28	EDIT BY KREMERS
;<SRIMON131>PDP15.MAC;5    25-JUL-73 23:40:23	EDIT BY KREMERS
;<SRIMON131>PDP15.MAC;4    25-JUL-73 23:28:45	EDIT BY KREMERS
;<SRIMON131>PDP15.MAC;3    25-JUL-73 18:00:30	EDIT BY KREMERS
;<SRIMON131>PDP15.MAC;2    25-JUL-73  2:59:01	EDIT BY KREMERS
;<SRIMON131>PDP15.MAC;2    18-JUL-73  1:41:57	EDIT BY KREMERS

	SEARCH FILEDEF,STENEX,PROLOG
	TITLE PDP15
;EXTERNALLY DEFINED SYMBOLS USED IN THIS PACKAGE
	EXTERN FIFCHR
	EXTERN TVUSE
	EXTERN EDISMS,DISG,DISGE,DISL,DISE,DISN,FORKX,PSIRQF,BHC
	EXTERN FIFTIM,TODCLK
	EXTERN FPTA,MLKPG,MULKPG
	EXTERN NSKED,RSKED
	EXTERN DEVMPE
	EXTERN CPOPJ,LCKTST,ERRD,JOBDIR,JOBRT,FPC,MENTR,JB0FLG

;LINKAGE TO IO.MAC

	EXTERN DMPLKP,DMPULP,GTIOWD,RLIOWD,DMPCKA

;LINKAGE TO MAGTAP.AIC

	INTERN MTADVN,OKOTST,OKITST,FDVCHR
	EXTERN MTDSTS,MTAJOB,MTACHR


;INTERNAL SYMBOLS REFERENCED OUTSIDE THIS PACKAGE
	INTERN FIFSV,FIFCHK,FIFINI,FIFRST,FIFBEG
	INTERN FIFP,FIFPDP,.FIFOP,G1FCMD,RLFCMD,TVDVN

;LINKAGE TO OUTSIDE WORLD

	INTERN FIFIO,FOPEN,FCLOSE,MFIFOU

;PARAMETER AND BIT DEFINITIONS

;DEVICE CODES
DVA==500	;DEVICE A IS THE WORD AT A TIME PATH ON THE DA28
DVB==510	;DEVICE B IS THE DATA CHANNEL ON THE DA28
DFMA==514	;DEVICE FOR REFERENCING THE 15 MEM ADR (FMA)
PI==4		;DEVICE CODE FOR PRIORITY INTERRUPT SYSTEM

;DEVICE A STATUS BITS
FIFENA==1B24	;15 ENABLE, MUST BE SET BY 15, OTHERWISE ITS DOWN
FMFLOF==1B25	;FROM TEN FULL OFF
FMFLON==1B26	;FROM TEN FULL ON
FMEMOF==1B27	;FROM TEN EMPTY OFF
FMEMON==1B28	;FROM TEN EMPTY ON
TOFLOF==1B29	;TO TEN FULL OFF
TOFLON==1B30	;TO TEN FULL ON
TOEMOF==1B31	;TO TEN EMPTY OFF
TOEMON==1B32	;TO TEN EMPTY ON

;DEVICE B STATUS BITS
FINTRQ==1B19	;REQUEST INTERRUPT ON PDP15
DVBRES==1B20	;RESET DEVICE B
DVBERB==7B23	;DEVICE B ERROR CONDITIONS
DVBPAR==1B23	;DEVICE B PARITY ERROR (FROM 10)
FINTEN==1B27	;ENABLE 15 INTERRUPT ON DONE
DVBSPD==1B26	;XFER SPEED ON DEVICE B
DVBPAK==1B28	;DEVICE B XFER IS PACKED MODE
DVBOUT==1B29	;XFER IS IN DIRECTION 1O TO 15 IF ON
BUSY10==1B30	;10 BUSY (ENABLES MEM REQUEST)
BUSY15==1B31	;15 BUSY, DROPS WHEN DONE IS SET
DVBDON==1B32	;XFER COMPLETE ON DEVICE B, CAUSES 10 INTERRUPT


;OTHER PARAMETERS
DVAREQ==FMEMON+TOFLON	;CONDITIONS THAT CAUSE DEVICE A INT ON 10
DVBREQ==DVBERB+DVBDON	;CONDITIONS THAT CAUSE DEVICE B INTERRUPT ON 10
DVARES==FMFLOF+FMEMOF+TOFLOF+TOEMOF	;DEVICE A RESET
FFRST==1B22		;STOP, RESET 15 (DEVICE A CONO)
FIFSTR==1B23		;START 15 AT ADDRESS SWITCHES (DEVICE A CONO)
SPDMSK==3*DVBSPD	;MASK FOR DVB SPEED BITS
DVBHSP==3*DVBSPD	;HIGH SPEED (BURST MODE) FOR DA28
FSHTSZ==2		;NO. OF PDP10 WORDS IN SHORT MESSAGES
FHDRSZ==4		;NO. PDP-10 WORDS IN HEADER
MAXMSG==77777		;MAX NO. OF PDP15 WORDS IN MESSAGE
FCMWD0==0		;FIRST WORD OF COMMAND ENTRY
FCMWD1==1		;SECOND WORD OF COMMAND ENTRY
FCMWD2==2		;THIRD WORD OF COMMAND ENTRY
FCMWD3==3		;FOURTH WORD OF COMMAND ENTRY
FCMWD4==4		;FOUTH WORD OF HEADER
FCMDSZ==5		;NO. OF WORDS IN COMMAND ENTRY
MAXECT==5		;MAX NO. OF ERRORS ALLOWED ON ONE MESSAGE
MAXFSH==20		;MAX. NO. OF MESSAGES TO BE FLUSHED

FIFPSI==^D13		;DEFAULT FIF PSI CHAN.
MAXCHN==^D35		;MAX. ALLOWED PSI CHAN.
FMTOP==24		;ONLY LEGAL MTOP

;BITS IN RIGHT HALF OF FCMWD3

FCMRRQ==400000	;TELL 15 THAT THIS WRITE IS A READ REQUEST
FCMSPD==200000	;LOW SPEED TRANSFER REQUEST
FCMWRT==100000	;WRITE 15 IF ON, READ IF OFF
FCMPAK==40000	;PACKED MODE XFER IF ON
FCMJAM==20000	;JAM MODE XFER
FCMERR==10000	;ERR BIT

;FLAGS IN DEVICE STATUS TABLES
FDVACT==400000	;XFER IN PROGRESS IF ON
FDVOPN==200000	;DEVICE IS OPEN IF ON
FDVOUT==FCMWRT	;CURRENT TRANSFER DIRECTION IS 10 TO 15 IF ON
FDVPAK==FCMPAK	;CURRENT XFER IS PACKED MODE IF SET
FDVJAM==FCMJAM	;XFERS ARE IN JAM MODE
FDVOKO==10000	;OK TO OUTPUT TO 15 FOR THIS DEVICE
FDVOKI==4000	;INPUT READY FROM 15 FOR THIS DEVICE
FDVLNG==2000	;CURRENT XFER IS LONG XFER
FDVDWN==1000	;15 WENT DOWN WHILE XFER WAS IN PROGRESS
FDVDTL==400	;DATA LATE CONDITION
FDVERR==200	;DATA ERROR
FDVDED==100	;DEVICE DEAD
FCHOKO==10	;SET IF ALWAYS OK TO OUTPUT
FCHOKI==4	;SET IF ALWAYS OK TO INPUT
FCHSLO==2	;ALL DA28 XFERS MUST BE SLOW SPEED IF THIS DEVICE IS OPEN
FCHLNG==1	;DEVICE ACCEPTS LONG XFERS IF SET (FROM FDVCHR)
;FLAGS IN RIGHT HALF
FDVABE==1B18	;ALL BUFFERS EMPTY
FDVPSI==1B19	;PSI PENDING FOR THIS DEVICE
FDVPSA==1B20	;PSI ACTIVE ON THIS DEVICE

;FLAGS IN LEFT HALF OF FIFXTS (USED IN INTERRUT ROUTINE)
FLG(FFBSY,L,0,400000)	;15 ACTIVE IF SET
FLG(FFWAC,L,0,200000)	;WRITE ACTIVE IF SET
FLG(FFRAC,L,0,100000)	;READ ACTIVE IF SET
FLG(FFPAK,L,0,40000)	;CURRENT XFER IS PACKED MODE IF SET
FLG(FFRPG,L,0,20000)	;READ IS PENDING, SET WHEN STARTING WRITE FOR READ REQUEST
FLG(FFHDR,L,0,10000)	;HAVEN'T TRANSFERRED HDR YET IF SET
FLG(FF1ST,L,0,4000)	;HAVEN'T TRANSFERRED FIRST IOWD YET IF SET
FLG(FFAWT,L,0,2000)	;SET WHEN WAITING FOR DVAINT TO START A READ
FLG(FFTRY,L,0,1000)	;SET IF RETRYING AN ABORTED XFER
FLG(FFJAM,L,0,400)	;THE XFER IN PROGRESS IS JAM MODE (10 SETS FMA)

;FLAGS IN RH OF DVA MESSAGE (18 BIT MSG)
DAMDWN==100		;15 SAYS IT'S DOWN (MONITOR ONLY)
DAMOKI==100	;15 HAS INPUT WAITING FOR THIS DEVICE
DAMOKO==200	;15 IS READY FOR (MORE) OUTPUT ON THIS DEVICE
DAMRAK==400	;READ AKNOWLEDGE, 15 IS READY FOR READ PORTION OF WRITE/READ SEQUENCE (MSG TO MONDVN ONLY)
DAMDTL==400	;DATA LATE CONDITION (DEVICES OTHER THAN MONITOR)
DAMBWC==1000	;BAD 15 WCNT, ABORT MESSAGE (MONITOR ONLY)
DAMDER==1000	;DEVICE ERROR
DAMDED==2000	;DEVICE DEAD
DAMBUD==2000	;BAD USER DATA, ABORT MESSAGE
DAMBHD==4000	;BAD HEADER (ILLEGAL DEVICE CODE), ABORT MESSAGE
DAMABE==4000	;ALL BUFFERS EMPTY
DAMNRM==10000	;NO ROOM FOR HEADER MSG, ABORT AND SEND LATER
DAMINA==20000	;INPUT NOT AVAILABLE, TRIED TO READ AND NO INPUT READY, ABORT MSG
DAMPSI==40000	;PSI REQUEST FOR THIS DEVICE


;SUBDEVICE MACRO AND TABLES

DEFINE FIFDV(DV,NDV,IN,OUT,FSTAT)
<	FIFDV1(DV,NDV,\NFIFDV,IN,OUT,FSTAT)
	NTFDV==NTFDV+NDV
	NFIFDV==NFIFDV+1>

DEFINE FIFDV1(DV,NDV,N,IN,OUT,FSTAT)
<	DV'DVN==N
	FSTA'N==FSTAT
	NSDV'N==-NDV
LS(DV'STS,NDV)
LS(DV'JOB,NDV)

	FSTS'N==DV'STS
	FJOB'N==DV'JOB

INTERN DV'DTB
DV'OPN:	GENCOD(NDV,DV'DVN,FOPEN)	;START OF OPENF CODE
DV'CLZ:	GENCOD(NDV,DV'DVN,FCLOSE)	;DITTO CLOSE
DV'SST:	GENCOD(NDV,DV'DVN,FIFSDS)	;DITTO SET STATUS


DV'GST:					;GET DEVICE STATUS
IFN <NDV-1>,<
	HLRZS DEV
	MOVE 1,DV'STS(DEV)
>
IFE <NDV-1>,<
	MOVE 1,DV'STS
>
	POPJ P,

IFN <IN>,<
DV'DMI:	GENCOD(NDV,DV'DVN,FIFIN)
>
IFN <OUT>,<
DV'DMO:	GENCOD(NDV,DV'DVN,FIFOUT)
>

DV'MTP:	GENCOD (NDV,DV'DVN,FMTOPR)	;MTOPR

DV'DTB:	CPOPJ		;DIRECTORY SETUP
	CPOPJ		;NAME LOOKUP
	CPOPJ		;EXTENSION LOOKUP
	CPOPJ		;VERSION LOOKUP
	CPOPJ		;PROTECTION INSERTION
	CPOPJ		;ACCOUNT INSERTION
	CPOPJ		;STATUS MODIFICATION
	DV'OPN		;OPEN FILE
	CPOPJ		;SEQUENTIAL INPUT
	CPOPJ		;SEQUENTIAL OUTPUT
	DV'CLZ		;CLOSE FILE
	CPOPJ		;RENAME FILE
	CPOPJ		;DELETE FILE
	IFN <IN>,<XWD	400000,DV'DMI>	;DUMP INPUT
	IFE <IN>,<CPOPJ>
	IFN <OUT>,<XWD	400000,DV'DMO>	;DUPM OUTPUT
	IFE <OUT>,<CPOPJ>
	CPOPJ		;NO DUMP OUTPUT
	CPOPJ		;DISMOUNT
	CPOPJ		;INITIALIZE DIRECTORY
	DV'MTP		;MTAPE
	DV'GST		;GET STATUS
	DV'SST		;SET STATUS
	>

;MACRO TO COMPILE REGISTER SETUP CODE FOR DISPATCH ENTRIES

DEFINE GENCOD(N1,N2,N3)
<	MOVEI UNIT,N2
IFN <N1-1>,<
	HLR DEV,DEV
	MOVE IOS,FDVIDX(UNIT)
	ADD IOS,DEV>
IFE <N1-1>,<
	SETZ DEV,
	MOVE IOS,FDVIDX(UNIT)>
	HLRZ 4,IOS
	JRST N3
>


;RESIDENT TABLE BUILDING MACRO


DEFINE FIFTAB(P1,P2,N)
<	XWD P1'N,P2'N	>

DEFINE GENTAB(NAME,PP1,PP2)
<	XXX=0
NAME:	REPEAT NFIFDV,<
FIFTAB(PP1,PP2,\XXX)
	XXX=XXX+1
>
>




	SWAPCD

NTFDV=0
NFIFDV=0

;DEFINE PDP-15 SUB DEVICES AND ASSOCIATED TABLES

;CREATE DUMMY TABLE ENTRY FOR MAGTAPES.  (THE'IR ACTUALLY DEFINED ELSEWHERE)
MTADVN==0
FSTA0==MTACHR
FSTS0==MTDSTS
FJOB0==MTAJOB
NSDV0==-MTAN
NTFDV==NTFDV+MTAN
NFIFDV==1
;END DUMMY ENTRY FOR MAGTAPES
FIFDV(TV,1,0,1,FCHOKO!FDVPAK!FDVOUT)	;SPECIAL DEVICE FOR STARTING TV
IFDEF POIN,<FIFDV(POI,POIN,1,1,FCHOKO)>	;POINTER
IFDEF FIFN,<FIFDV(FIF,FIFN,1,1,FCHLNG!FCHOKO!FCHOKI)>	;SPECIAL DEVICE FOR TALKING TO 15 DIRECTLY, NO SUBDEVICE INVOLVED
IFDEF DACN,<FIFDV(DAC,DACN,0,1,FCHLNG!FCHSLO!FCHOKI)>	;D TO A CONVERTER
IFDEF ADCN,<FIFDV(ADC,ADCN,1,1,FCHLNG!FCHSLO!FCHOKO)>	;A TO D CONVERTER
IFDEF DSPN,<FIFDV(DIS,DSPN,1,1,FCHLNG!FCHOKO!FCHOKI)>	;DISPLAY
IFDEF UNIN,<FIFDV(UNI,UNIN,1,1,FCHLNG!FCHOKO!FCHOKI)>
IFDEF VIPN,<FIFDV(VIP,VIPN,1,0,FCHLNG)>	;VIP-100
IFDEF NVAN,<FIFDV(NVA,NVAN,1,1,FCHLNG!FCHOKI!FCHOKO)>	;NOVA
IFDEF RAMN,<FIFDV(RAM,RAMN,1,1,FCHLNG!FCHOKI!FCHSLO)>	;RAMTEK DISPLAY
IFDEF VTXN,<FIFDV(VTX,VTXN,0,1,FCHLNG!FCHOKO)>     ;VOTRAX
MONDVN==77	;MONITOR DEVICE CODE

;SUB-DEVICE CHARACTERISTICS TABLE
	USE RESPC

	GENTAB(FDVCHR,FSTA,NSDV)



;SETUP JOB AND STATUS INDEX TABLES



	GENTAB (FDVIDX,FJOB,FSTS)


NFIFCM==<NTFDV*2>/2	;NO. OF CMD BUFFERS, ASSUME ONLY 1/2 DEVICES ACTIVE
NFIFPD==^D13	;SIZE OF INTERRUPT ROUTINES PUSH DOWN LIST
FNRTRY==5	;NO. OF RETRIES BEFORE GIVING UP ON A XFER

;STORAGE USED BY FIF

LS(CMDLCK)	;COMMAND BUFFER ALLOCATION LOCK

LS(FIFCL,FCMDSZ*NFIFCM)	;CMD LIST
LS(FIFCLI)	;CMD QUEUE IN
LS(FIFCLO)	;CMD QUEUE OUT
LS(FIFFCL)	;FREE CMD LIST PTR
LS(FIFCCT)	;COUNT OF FREE CMD ENTRIES
LS(FIFCDP)	;POINTS AT CURRENT CMD BEING PROCESSED BY INT ROUT

LS(FIFPDL,NFIFPD)	;PUSH DOWN LIST FOR INT ROUT
LS(FIFSPD)	;DA28 SPEED BITS
LS(SRTXFR)	;TRANSFER START/ABORT FLAG
LS(BUGFIF,2)	;LOCS FOR PDP-15 BUGFIF ROUTINE
LS(FIFRT)	;RETURN FROM INT LOC
LS(FMAREG)	;USED IN INT ROUT TO HOLD FIFTEEN MEM ADR
LS(FIFUPM,FCMDSZ+2)	;CMD BUFFER FOR "ARE YOU UP" MSG TO 15
LS(FIFXTS)	;STATUS OF CURRENTLY ACTIVE XFER (INT ROUT)


LS(FIFLCK)	;INTERLOCK FOR 15 CODE, ONE PERSON AT A TIME RUNS CRITICAL CODE
LS(FIFLSC)	;NO OF REASONS FOR RUNNING IN LOW SPEED, -1 => HIGH SPEED
LS(FIFONL)	;>0 MEANS 15 IS UP, 0=MAYBE DOWN, <0 = DOWN.
LS(FIFUSR)	;-1 IF PDP15 IS UNASSIGNED, ELSE JOBNO. NO OTHER JOB MAY ACCESS 15 IF ASSIGNED.
LS(FXFRST)	;TIME LAST DA28 XFER WAS STARTED (FOR TIMEOUT LOGIC)
LS(FWTCDP)	;SAVED WRITE CMD POINTER
LS(FRETRY)	;RETRY COUNTER FOR SOFT ERRORS
LS(FIFRCE)	;COUNT OF RECOVERABLE ERRORS
LS(FIFNRE)	;COUNT OF NON-RECOVERABLE ERRORS
LS(FJAMAD)	;15 MEM ADDRESS TO BE USED IN JAM MODE XFER
LS(FIFERW)	;ADDRESS OF A BUGHLT IN PDP15
LS(MSGSEQ)	;SEQUENCE NO FOR DEVICE B MESSAGES
LS(FDBGSW)	;-1 => NORMAL, =JOBNO ==> DON'T SEND OPENS OR CLOSES, IGNORE ERRORS
LS(DVADSP)	;DISPATCH WORD FOR DEVICE A PI ROUTINE
LS(DVAMSG)	;CURRENT DEVICE A MESSAGE, LH=HEADER, RH=MESSAGE
LS(DVAPMS)	;LAST DEVICE A MESSAGE, SAME FORMAT AS ABOVE
LS(DVAFHK)	;HEADER OF AWATED MESSAGE IN FLUSH ROUTINE
LS(FCKPSI)	;NON-0 ==> PSI REQUEST RECIEVED.  USED TO WAKE UP LEVEL 8 ROUTINE
LS(DVAECT)	;NO. OF ERRORS THIS MESSAGE
LS(FSHCNT)	;NO. OF MESSAGES FLUSHED BY FLUSH ROUTINE

;	LOCAL STORAGE, POINTER WORDS, ETC.

FIFP:	<1>		; NON 0 IF PDP-15 AVAILABLE

UNTPTR:	POINT 8,1,35		;POINTER TO DEVICE FIELD IN MESSAGE HEEADER
DEVPTR:	POINT 4,1,27		;POINTER TO SUB-DEVICE FIELD
FIFPDP:	IOWD NFIFPD-1,FIFPDL+1		;STACK POINTER FOR PI INTERRUPT STACK


REPEAT 0,<

STATUS BITS FOR PDP15 DEVICES,  DEVICE STATUS TABLES

	 0	- ACTIVE
	 1	- OPEN
	 2	- OUTPUT/INPUT
	 3	- PACKED/UNPACKED
	 4	- JAM MODE, ALL XFERS PERFORMED WITHOUT PDP15 COLLABORATION
	 5	- OK FOR OUTPUT, 15 SAID IT HAD BUFFER SPACE
	 6	- OK FOR INPUT, 15 SAID IT HAD A MESSAGE
	 7	- LONG/SHORT MESSAGE
	 8	- 15 WENT DOWN WHILE XFER WAS IN PROGRESS
	 9	- DATA LATE CONDITION
	10	-DEVICE ERROR
	11	-DEVICE DOWN
	14	- ALWAYS OK TO OUTPUT, DON'T SYNCHRONIZE WITH PDP15
	15	- ALWAYS OK TO INPUT, DON'T WAIT FOR 15 TO SAY IT HAS A MESSAGE
	16	- SLOW DEVICE, WHEN OPEN, DA28 DVB XFERS ARE DONE AT LOW SPEED
	17	- LONG XFERS ALLOWED FOR THIS DEVICE
	18	-ALL BUFFERS FOR THIS DEVICE EMPTY
	19	-PSI REQUEST PENDING FOR THIS DEVICE
	20	-PSI FOR THIS DEVICE ACTIVE
	21-29	-DEVICE DEPENDENT STATUS BITS
	30-35	-PSI CHANNEL FOR THIS DEVICE

STATUS OF THE CURRENT (LAST) PDP15 XFER - FIFXTS
	 0	- BUSY, XFER IN PROGRESS
	 1	- WRITE ACTIVE
	 2	- READ ACTIVE
	 3	- PACKED XFER
	 4	- READ PENDING, SET WHEN WRITE PORTION OF READ IS STARTED
	 5	- HDR PORTION OF MSG NOT SENT YET
	 6	- 1ST IOWD OF MSG NOT SENT YET
	 7	- WAITING FOR DVA INT TO START READ
	 8	- RETRYING AN ABORTED TRANSFER
	 9	- JAM MODE TRANSFER

PDP15 CMD ENTRY FORMAT:

   WORD NO.	MNEMONIC	BITS			CONTENTS

	0	FCMWD0		0		ON WHEN XFER COMPLETE
				1-17		UNUSED
				18-35		POINTER TO NEXT ENTRY ON QUEUE

	1	FCMWD1		0-35		AOBJN PPOINTER FOR IOWD LIST

	2	FCMWD2		0-35		AOBJN WORD FOR HEADER IOWD LIST

	3	FCMWD3		0-24		UNUSED
				24-27		SUB DEVICE CODE
				28-35		UNIT CODE

	4	FCMWD4		0-17		PDP-15 WORD COUNT
				18		READ REQUEST WRITE
				19		LOW SPEED REQUEST
				20		READ/WRITE (USER), =1 ON WRITE
				21		PACKED MODE XFER
				22 		JAM MODE XFER
				23		ON IF ERROR

	FOR A NON-JAM-MODE READ THERE WILL BE TWO COMMAND LIST ENTRIES. 
THE FIRST IS USED FOR TO TRANSMIT THE HEADER TO THE PDP-15, THE SECOND
TO READ THE DATA.  IN THIS CASE BOTH COMMAND ENTRIES WILL BE IDENTICAL
WITH THE EXCEPTION OF THE FIRST WORD AND BIT 18 OF FCMWD3 IN THE SECOND
ENTRY.  BIT 0 OF THE FIRST WORD OF THE SECOND ENTRY WILL BE USED TO 
INDICATE THAT THE ENTIRE TRANSFER IS COMPLETE, AND BIT 18 OF FCMWD1 IN
THE FIRST ENTRY WILL BE SET TO INDICATE THAT THIS IIS A WRITE FOR READ REQUEST.

>	;END REPEAT 0



;PDP-15 INITIALIZATION, RESET AND CHECK ROUTINES.  

;INITIALIZATION ROUTINE.  CALLED AT SYSTEM STARTUP TIME

FIFINI:	SETOM FIFLCK
	SETZM SRTXFR
	SETZM MSGSEQ
	SETOM CMDLCK		;INIT COMMAND LOCK
	MOVEI 1,FIFCLO
	MOVEM 1,FIFCLI	;INIT CMD QUEUE PTR
	MOVEI 1,NFIFCM-1	;-1 MEANS NONE LEFT, NOT 0
	MOVEM 1,FIFCCT	;COUNT OF FREE CMD ENTRIES
	
	MOVEI 1,FIFCL+FCMDSZ*<NFIFCM-1>
	SETZM 0(1)
	MOVEM 1,-FCMDSZ(1)
	SUBI 1,FCMDSZ
	CAILE 1,FIFCL
	JRST .-3
	MOVEM 1,FIFFCL

	MOVEI 1,MONDVN
	MOVEM 1,FIFUPM+FCMWD3
	MOVE 1,[XWD 1,FCMWRT!FCMPAK]
	MOVEM 1,FIFUPM+FCMWD4
	HRROS FIFUPM+FCMDSZ+1
	SETZM FIFUPM+FCMWD1
	MOVE 1,[XWD -1,FIFUPM+FCMDSZ]
	MOVEM 1,FIFUPM+FCMWD2
	MOVE 1,[XWD -1,FIFUPM+FCMDSZ+1]
	MOVEM 1,FIFUPM+FCMDSZ
	SETOM FIFLSC	;INIT SPEED REASON COUNTER
	SETOM FIFONL	;RECORD 15 AS DOWN, SINCE WE DON'T KNOW
	SETOM FIFUSR	;15 IS UNASSIGNED
	SETOM FDBGSW	;AND NOT BEING DEBUGGED
	SETZM FIFSPD	;SET SPEED BITS
	SETZM SRTXFR	;AND XFER FLAG
	MOVE 1,[JRST FIFBG1]	;SET JUMP FOR FIF BUG ROUTINE
	MOVEM 1,BUGFIF+1
	SETZM BUGFIF	;CLEAR FLAG

;INIT DEVICE A CODE
	PUSHJ P,DVAINI


;RESET DEVICES AND RETURN
	CONO DVA,FFRST		;STOP AND RESET 15
FFINI1:	CONO DVA,DVARES+FIFCHN
	CONO DVB,DVBRES+FIFCHN
	POPJ P,

;IF 15 ACTIVE, GIVE ERR FOR XFER ACTIVE AND GET NEXT CMD
;0-4 WILL BE CLOBBERED


;PDP-15 SYSTEM RESET ROUTINE. CALLED FROM SYSRST.
;IF PDP15 WAS NOT ACTIVE MEARLY RESETS THE DA28 AND RETURNS.  OTHERWISE
;INITS AN ABORT REQUEST TO THE PI CODE TO KILL THE TRANSFER IN PROGRESS

FIFRST:	SKIPL FIFXTS	;WAS 15 ACTIVE?
	JRST FFINI1	;GO RESET DEVICES AND RETURN
; PDP-15 WAS ACTIVE, REQUEST ABORT

	MOVEI 0,1	;SET ABORT FLAG
	MOVEM 0,SRTXFR	;IN TRANSFER START FLAG
	ISB FIFCHN	;CALL THE PI ROUTINE

	POPJ P,		;EXIT
 


;PERIODIC CHECK ROUTINE TO KEEP -15 FROM GETTING HUNG FOREVER IF SOMETHING
;GOES WRONG.  CALLED EVERY 1/2 SEC OR SO FROM 2ND LEVEL CLOCK ROUTINE IN
;JOB 0.  DOES NOTHING IF -15 NOT BUSY.

FIFCHK:	SKIPL FIFXTS
	JRST FIFCK3	;15 INACTIVE, NOTHING GOING ON TO UNHANG
	MOVE 1,FXFRST
	ADDI 1,^D3000	;WAIT MAX OF 3 SECONDS
	CAML 1,TODCLK	;HAVE WE BEEN WAITING TOO LONG?
	JRST FIFCK1	;NO, CONTINUE WAITING
	MOVEI 1,1	;SET FLAG TO CAUSE ABORT
	MOVEM 1,SRTXFR
	ISB FIFCHN	;START UP PI ROUTINE.
	JRST FIFCHK

FIFCK1:	MOVEI 1,^D500
FIFCK2:	MOVEM 1,FIFTIM
	POPJ P,
FIFCK3:	MOVSI 1,(1B1)
	JRST FIFCK2

;	ROUTINE FOR ANSWERING BUGFIF CALLS

FIFBG1:	AOS JB0FLG	;REQUEST THAT JOB 0 LOOK AT IT
	JRST @BUGFIF	;RETURN



;PDP-15 PI ROUTINE, ENTERED VIA JSYS FROM PISRV.MAC

;		FIRST SEE IF THIS IS OUT INTERRUPT

FIFSV:	XWD FIFRT,.+1		;WHERE TO SAVE RETURN, ENTRY

	CONSZ DVB,DVBREQ	;DEVICE B REQUEST ?
	JRST DVBSV		;YES, GO SERVICE IT
	CONSZ DVA,DVAREQ		;NO, DEVICE A ?
	JRST DVASV		;YES
	SKIPN 1,SRTXFR		;NEITHER, IS IT AN ABORT OR START REQUEST ?
	JRST @FIFRT		;NONE OF THE ABOVE, NOT OUR INTERRUPT

FIFSV1:	MOVEM P,FIFPDL		;THIS IS A MONITOR (TENEX) INITIATED TRANSFER
	MOVE P,FIFPDP		;START REQUEST, SETUP PUSHDOWN LIST,
	MOVE 0,FIFXTS		;GET STATUS BITS
	JUMPL 1,FNXCMD		;JUMP IF START REQUEST
	SETZM SRTXFR		;ABORT REQUEST, CLEAR FLAG
	JRST FIFABT		;ABORT COMMAND

DVBSV:	CONI DVB,1		;DEVICE B REQUEST, GET STATUS BITS
	MOVE 0,FIFXTS		;ALSO GET CURRENT SOFTWARE STATUS
	JUMPLE 0,DVBSV1		;JUMP IF SOMETHING CURRENTLY GOING ON

	BUG(CHK,<FIFSV - UNEXPECTED DEVICE B INTERRUPT, IGNORED>)
	CONO DVB,DVBRES!FIFCHN	;EXTRANIOUS INTERRUPT, RESET AND IGNORE
	JRST FIFCHR		;EXIT

DVBSV1:	MOVEM P,FIFPDL		;REAL INTERRUPT, SETUP PUSH DOWN LIST
	MOVE P,FIFPDP

	TRNN 1,DVBERB		;IS THIS A DEVICE B ERROR ?
	JRST FIFDON		;NO, IT'S A DONE INTERRUPT, GO SERVICE

	TRNN 1,DVBPAR		;ERROR, IS IT PARITY ?
	JRST DVBER2		;NO, SOMETHING ELSE

	MOVE 2,[SIXBIT /PDP-15/]	;PARITY ERROR, REQUEST CORE SCAN
	MOVEM 2,DEVMPE		;BUT FIRST INFORM THE SYSTEM WHO FOUND IT
	ISB APRCHN		;RATTLE THE SCHEDULARS CAGE
	CAIA			;GO RETRY

DVBER2:	BUG(CHK,<PDP-15 - DEVICE B ERROR, -1 OR -15 NXM>)

DVBSV2:	BUG(FIF,<PDP15 - ERROR, RETRYING>)	; GIVE MESSAGE

	SOSGE FRETRY		;TOO MANY TRYS ALREADY ?
	JRST DVBSV3		;YES, MAKE IT AHARD ERROR

	AOS FIFRCE		;RETRY, COUNT SOFT ERRORS
	TEST (O,FFTRY)		;INDICATE RETRY IN PROGRESS
	MOVE 1,FIFCDP		;GET CURRENT COMMAND POINTER
	TEST (NE,FFWAC)		;WERE WE WRITING ?
	JRST FNXCM2		;YES, JUST REDO THE ENTRIRE WRITE
	MOVE 4,1		;SETUP AC FOR REQUEUE ROUTINE
	PUSHJ P,QHFCMD		;AND PLACE COMMAND AT BEGINNING OF QUEUE
	MOVE 1,FWTCDP		;GET SAVE WRITE POINTER
	JRST FNXCM2		;AND GO RETRY


DVBSV3:	MOVNI 2,FNRTRY		;HARD ERROR, DECREMENT SOFT ERROR COUNT
	ADDM 2,FIFRCE
	AOS FIFNRE		;AND COUNT HARD ERROR

	SKIPG FIFONL		;DETERMINE MESSAGE TO PRINYT
	JRST DVBSV4	;FIF NOT UP, SAY IT'S DOWN
	BUG(FIF,<PDP15 UNRECOVERABLE ERROR, TRANSFER ABORTED>)
	SETZM FIFONL		;NOT DOWN, INDICATE CAUSE FOR ALARM
	CAIA

DVBSV4:	BUG(FIF,<PDP15 IS DOWN, MUST BE RESTARTED OR RELOADED>)

;	ABORT ROUTINE.  ENTERED WHEN NECESSARY TO ABORT COMAND IN PROGRESS
;	DUE TO I/O ERROR, OR OTHER SUCH TROUBLE

FIFABT:	MOVE 2,FIFCDP		;GET CURRENT COMMAND POINTER
	MOVEI 3,FCMERR		;GET COMMAND ERROR BIT
	IORB 3,FCMWD2(2)	;PLANT IN COMMAND BUFFER AND BRING COMMAND
	TRNN 3,FCMRRQ		;TO AC3.  IS THIS A READ ?
	JRST FIFDN2		;NO, TREAT AS FINISHED COMMAND
	MOVSI 3,(1B0)		;READ, SET ERROR BIT IN REQUEST COMMAND
	IORM 3,0(2)
	PUSHJ P,UQFCMD		;AND UN QUEUE IT
	JRST FIFDN2		;EXIT IF NOTHING THERE  (?)
	MOVEM 1,FIFCDP		;SET NEW COMMAND POINTER
	JRST FIFABT		;AND RE-EXECUTE THIS CODE TO ABORT REST OF READ



;PROCESSING FOR DEVICE B DONE INTERRUPT.  THIS CODE DOES THREE MAIN THINGS;
; 1)	CODE STARTING HERE,, AT FIFDON DETERMINES TYPE OF
;	DONE INTERRUPT AND DISPATCHES PROCESSING ACCORINGLY.  SEE THE COMMENTS
;	FOR DETAILS.
; 2)	FOR A NORMAL TRANSFER, CODE STARTING AT "NXTIO" PICKS UP THE NEXT
;	IOWD FORM THE PRESENT COMAND AND STARTS DATA MOVING ON THE DA28.  NOTE
;	THAT THIS CODE IS ALSO ENTERED FROM THE NEXT COMMAND SEQUENCE TO START DATA
;	MOVEMENT.
; 3)	"FNXCMD" STARTS PROCESSING THE NEXT COMMAND IN THE COMMAND QUEUE.
;	IT MAY BE ENTERED DUE TO COMMAND TERMINATION (COMPLETION) FROM  NXTIO
;	OR DUE TO A TENEX MONITOR INITIATED INTERRUPT TO BEGIN PROCESSING
;	COMMANDS WHEN A NEW ONE IS PLACED IN THE PREVIOUSLY EMPTY QUEUE.
;	FNXCMD THEN ENTERS NXTIO TO BEGIN PROCESSING DATA.


FIFDON:	SKIPE FIFONL		;WAS THIS INTERRUPT IN RESPONSE TO AN "ARE YOU UP" MSG?
	JRST FIFDN1		;NO, PROCESS NORMAL DONE INTERRUPT

	MOVE 1,FIFCDP		;GET COMMAND POINTER FOR POSSIBLE RETRY
	CONSZ DVA,DVAREQ	;YES, PDP-15 MUST HAVE DVA RESPONSE UP, OR ...
	JRST DVASV 		; (IT DOES)
	BUG (FIF,<PDP15 - ERROR, RETRYING>)	;WE GOT PROBLEMS.
	JRST DVBSV2		;GO RETRY

FIFDN1:	MOVE 2,FIFCDP		;GET CURRENT COMMAND POINTER
	SKIPL FCMWD2(2)		;IS THERE STILL SOME HEADER TO GO ?
	SKIPGE FCMWD1(2)	;ARE THERE ANY MORE IOWD TO GO HERE ?
	JRST NXTIO		;YES, GO DO THE NEXT ONE.

FIFDN2:	TEST (Z,FFTRY)		;CLEAR RETRY BIT
	MOVSI 1,(1B0)	;AND SET COMMAND COMPLETE BIT IN COMMAND
	IORM 1,FCMWD0(2)



;	ROUTINE TO PICKUP AND BEGIN COMMAND EXECUTION.

FNXCMD:	SETZM SRTXFR		;CLEAR MONITOR FLAG

	MOVEI 1,FIFUPM
	SKIPN FIFONL		;IS THE PDP-15 STILL UP ?
	JRST FNXCM2		;NO, SEND "ARE YOU UP MESSAGE"

FNXCM1:	PUSHJ P,UQFCMD		;OK, UNQUEUE NEXT COMMAND
	JRST FIFDN3		;NONE LEFT, EXIT

FNXCM2:				;ENTER HERE WITH COMAND POINTER IN 1 TO
				;BEGIN COMMAND SETUP.
	PUSH P,1		;SAVE COMMAND POINTER
	PUSH P,FIFCDP		;AND OLD POINTER
	MOVEM 1,FIFCDP		;MAKE NEW ONE CURRENT

	MOVE 1,FCMWD3(1)	;GET COMMAND WORD CONTAINING UNIT
	LDB 3,UNTPTR		;GET UNIT
	CAIN 3,MONDVN		;IS THIS FOR THE PDP-15 MONITOR ?
	JRST FNXCM3		;YES, SKIP VALIDITY CHECK

	SKIPGE 2,FIFUSR		;IS THE -15 ASSIGNED TO SOMEONT ?
	SKIPLE 2,FDBGSW		;OR IS SOMEONE DEBUGGING ?
	CAIA			;ONE OF THE ABOVE
	JRST FNXCM4		;NONE OF THE ABOVE, GO AHEAD

	LDB 4,DEVPTR		;YES, SEE IF THS GUY CAN DO THIS
	HLRZ 3,FDVIDX(3)	;BY EXAMNING JOB NO. TO WHOM DEVICE IS ASSIGNED
	ADD 3,4
	HRRZ 3,0(3)		;JOB NO. NOW IN 3

	CAME 3,2		;COMPARE THEM
	SKIPGE FIFUSR		;NOT THESAME, BUT THATS BAD ONLY IF THE -15 IS ASSIGNED
	JRST FNXCM3		;IT'S NOT, JUST SKIP UP CHECK
	JRST FIFABT		;IT IS, ABORT MESSAGE

FNXCM4:	SKIPGE FIFONL		;IS THE PDP-15 UP ?
	JRST DVBSV3		;NO, THAT'S AN ERROR

FNXCM3:	POP P,2			;OK, RETRIEVE COMMAND POINTER
	MOVE 1,FIFCDP		;GET NEW COMMAND POINTER
	MOVE 1,FCMWD4(1)	;GET FLAG WORD
	SETZ 4,			;PREPARE TO SET SPEED
	SKIPGE FIFLSC		;DO WE RUN IN LOW SPEED ?
	MOVEI 4,DVBHSP		;NO, USE HIGH SPEED
	MOVEM 4,FIFSPD		;SET SPEED BITS

	TRNE 1,FCMWRT		;IS THIS A WRITE ?
	JRST FNXCM7		;YES, GO PROCESS

	TRNE 1,FCMJAM		;READING, IS THIS JAM MODE ?
	JRST FNXCM5		;YES, SKIP NEXT CHECK, SINCE THERE WASN' A HEADER

	MOVE 3,FCMWD4(2)		;GET HEADER FROM LAST COMMAND
	TRNE 3,FCMRRQ	;WAS IT A READ REQUEST ?
	JRST FNXCM5		;YES, ALL OK
	BUG(CHK,<PDP15 - NO HEADER WRITE BEFORE READ>)	;BUG
	JRST DVBSV3

;	COMMAND IS A READ, SET NECESARY BITS IN TRANSFER STATUS WORD

FNXCM5:	TLZ 0,FFWAC!FFPAK!FFHDR!FFAWT!FFJAM	;CLEAR THESE
	TLO 0,FFRAC!FFBSY!FF1ST	;AND SAY READ PENDING, BUSY, FIRST IOWD
	JRST FNXCM6		;GO PROCESS REST OF COMMAND

;	COMMAND IS A WRITE.  AMYBE EITHER WRITE-FOR-READ, OR NORMAL WRITE
FNXCM7:	TLZ 0,FFRAC!FFPAK!FFAWT!FFRPG!FFJAM
	TLO 0,FFWAC!FFHDR!FFBSY!FF1ST	;SAY WRITE, HEADER NOT OUT, BUSY, FIRST IOWD

	POP P,FWTCDP		;SAVE WRITE COMAND POINTER FOR ERRORS
	PUSH P,FWTCDP		;PUT BACK ON STACK

	MOVEI 3,FNRTRY		;SETUP RETRY COUNT
	TEST (NN,FFTRY)		;UNLESS CURRENTLY RETRYING
	MOVEM 3,FRETRY

	TRNE 1,FCMRRQ		;IS THIS WTIE-FOR-READ ?
	TEST (O,FFRPG)		;YES, MARK IN STATUS WORD

FNXCM6:	TRNE 1,FCMPAK		;IS THIS PACKED ?
	TEST (O,FFPAK)		;YES, MARK IT

	TRNE 1,FCMJAM		;JAM MODE ?
	JRST [	TEST (O,FFJAM)	;YES, SAY JAM MODE ...
		TEST (Z,FFHDR,FFRPG)	;AND NOT HEADER, OR READ REQ.
		JRST .+1]

	POP P,2			;RETRIEVE POINTER
	MOVE 1,TODCLK		;SETUP TIME FOR FIFCHK
	MOVEM 1,FXFRST
	MOVEI 1,^D500		;TIME BETWEEN CHECKS
	MOVEM 1,FIFTIM

	TEST (NE,FFRAC)		;READ ?
	TEST (NN,FFRPG)		;YES, MUST WAIT UNLESS READ PENDING RESET
	JRST NXTIO		;WRITE, OR NO-WAIT READ, START IT UP

	TEST (O,FFAWT)		;INDICATE THAT WE ARE WAITING
	JRST FIFEX		;EXIT




;	LOGIC TO PICK UP AND PROCESS EACH IOWD.

;	4 WILL CONTAIN THE CONO BITS UPON EXIT FROM THIS SECTION

NXTIO:	MOVE 4,FIFSPD		;GET SPEED BIT
	MOVE 2,FIFCDP		;AND COMAND POINTER
	TEST (NE,FFWAC)		;WRITING ?
	TRO 4,DVBOUT		;YES, SET DIRECTION BIT IN CONO WORD

	SETO 1,			;DETERMINE IF WE HAVE TO SET FMA, ASSUME NOT
	TEST (NE,FFJAM)		;IF JAM MODE, WE MAY NEED THIS
	MOVE 1,FJAMAD		;IF NOT FIRST IOWD ...
	TEST (NN,FF1ST)		;IS THIS FIRST IOWD
	DATAI DFMA,1		;NO, GET FMA FROM DA28 SO WE CAN SET IT
	MOVEM 1,FMAREG		;GET FOR SETTING LATER

	TEST (NN,FFJAM)		;IS THIS JAM MODE ? ...
	TEST (NN,FFHDR)		;OR DONE WITH HEADER ?
	JRST NXTIO2		;YES, ON OF THE ABOVE

;				;HEADER NOT FINISHED, DO IT
	TEST (ZN,FF1ST)		;YES, HAS 1ST IOWD GONE YET ?
	JRST NXTIO4		;YES
	TRO 4,DVBPAK		;NO, PREPARE FOR IT
	MOVSI 3,-2		;SETUP FIRST IOWD ...
	HRRI 3,FCMWD3(2)	;TO POINT TO COMMAND BLOCK
	TRO 4,FINTRQ		;REQUEST INTERRUPT -15 ON START
	JRST FIFGO		;SEND IT

NXTIO4:	MOVE 1,FCMWD2(2)	;GET AOBJN POINTER FOR HEADER
	MOVE 3,0(1)		;GET IOWD
	AOBJN 1,.+3		;BUMP POINTER
	TEST (C,FFHDR,FF1ST)	;RESET HEADER AND 1ST IOWD BITS ON DOEN
	TRO 4,FINTEN		;ALSO REQUEST INTERRUPT ON DONE
	MOVEM 1,FCMWD2(2)	;RESTORE POINTER
	JRST NXTIO5		;SEND WORD


NXTIO2:	TEST (NN,FFJAM)	;IF NOT JAM MODE ...
	TEST (NN,FF1ST)	;AND FIRST IOWD ...
	CAIA			;JAM MODE OR NOT FIRST IOWD
	TRO 4,FINTRQ		;REQUEST INTERRUPT ON START
	MOVE 1,FCMWD1(2)	;GET AOBJN WORD FOR IOWD'S
	MOVE 3,0(1)		;GET NEXT IOWD FROM LIST
	AOBJN 1,.+3		;BUMP COUNT AND TEST DONE
	TEST (NN,FFJAM)		;DONE , IF NOT JAM MODE ...
	TRO 4,FINTEN		;REQUEST INTERRUPT ON DONE
	MOVEM 1,FCMWD1(2)	;RESTORE AOBJN WORD
	TEST (Z,FF1ST)		;INDICATE 1ST WORD GONE

NXTIO5:	TEST (NE,FFPAK)		;IS TRANSFER IN PACKED MODE ?
	TRO 4,DVBPAK		;YES, SET BIT IN CONO WORD



;	INITIATE TRANSFER AND EXIT.  AT THIS POINT, 4 HAS THE CONO BITS,
;	AND 3 HAS THE IOWD TO TRANSFER DATA

FIFGO:	PUSHJ P,FIFRDY		;BE SURE THE PDP-15 IS READY
	DATAO DVB,3		;SETUP IOWD
	CONO DVB,DVBRES!BUSY10!BUSY15!FIFCHN(4)	;SET CONDITIONS

	SKIPL FMAREG		;DO WE SET FMA ?
	DATAO DFMA,FMAREG	;YES, DO IT
	JRST FIFEX2		;EXIT



;	COME HERE WHEN NO MORE COMMANDS TO EXECUTE

FIFDN3:	TEST (Z,FFBSY)		;SAY IDLE
	MOVSI 1,(1B1)		;SET INFINITE TIME BETWEEN FIFCHKS
	MOVEM 1,FIFTIM


;PI EXIT ROUTINE

FIFEX:	PUSHJ P,FIFRDY		;NOT BUSY EXIT, MUST CLEAR INTERRUPT REQUEST.
				;BUT BE CAREFUL NOT TO CLOBBER THE DA28 WHILE
				;IT'S STILL IN OPERATION.
	CONO DVB,DVBRES+FIFCHN	;OK, CLEAR IT

FIFEX2:	MOVE P,FIFPDL		;BUSY EXIT, JUST RESTORE PDL POINTER
	MOVEM 0,FIFXTS		;AND STATUS WORD
	JRST FIFCHR		;EXIT PI CODE



;	ROUTINE TO WAIT FOR DA28 TO COMPLETE CURRENT OPERATION AND
;	BECOME READY.

FIFRDY:	MOVSI 2,-70	;NO. OF LOOPS ( APPROX 8 MSEC EACH)
	CONI DVB,1	;GET STATUS
	TRNN 1,BUSY15!FINTRQ	;BUSY ?
	POPJ P,		;NO, EXIT
	AOBJN 2,.-3	;KEEP TRYING
	CONO DVB,DVBRES!FIFCHN	;DA28 HUNG, RESET IT
	POPJ P,		;AND EXIT



;DEVICE A INTERRUPT ROUTINE.

;USED FOR ONE WORD COMMUNICATION FROM PDP15 TO PDP10.  PDP10 TO PDP15
;DIRECTION USED ONLY IN THE EVENT OF ERRORS ON THIS DEVICE.

;DEVICE A MESSAGES FROM THE -15 TO THE -10 CONSIST OF TWO 18 BIT -15 WORDS HAVING
;THE FOLLOWING FORMAT:
;
;	WORD	BITS	CONTENTS
;	1	0	ALWAYS 0
;	1	1-4	MESSAGE SEQUENCE NO. CURRENTLY USED ONLY BY THE -15
;	1	5-8	SUB-DEVICE NO.
;	1	9-17	PRINCIPAL DEVICE NO.
;	2	0	ALWAYS 1
;	2	1-16	MESSAGE BITS (SEE DEFINITIONS "DAM..." ABOVE)
;	2	1-16	ADDRESS OF -15 BUGHLT IF BIT 17=1
;	2	17	0 FOR NORMAL MESSAGES, 1 FOR PDP-15 BUGHLT

;NOTE:  ALL BIT NOS. ABOVE REFER TO PDP-15 BITS.

;MESSAGES RECIEVED BY THE -10 ARE STORED IN LOCATION "DVAMSG" WITH THE HEADER IN
;THE LEFT HALF AND THE MESSAGE BITS IN THE RIGHT.  THE LAST "GOOD" MESSAGE RECIEVED
;IS KEPT IN WORD "DVAPMS".  
;IF AN ERROR IS DETECTED, THE HEADER PORTION OF DVAPMS IS SENT BACK TO THE
;PDP-15 AND THE FOLLOWING INCOMING MESSAGES "FLUSHED" UNTIL THIS HEADER IS
;AGAIN RECIEVED.  MESSAGE INTERPERTATION RESUMES AT THE POINT WHERE THE
;ERROR OCCURRED.  AFTER "MAXECT" SUCCESSIVE ERRORS ON THE SMAE MESSAGE, THE PDP-15
;IS MARKED AS BEING DOWN, AND A RELOAD REQUEST IS INITIATED.


DVASV:	CONSO DVA,FMEMON	;IS THIS "FROM 10 EMPTY" ?
	JRST .+3		;NO
	CONO DVA,FMEMOF+FIFCHN		;YES, TURN IT OFF AND IGNORE
	JRST FIFCHR

	DATAI DVA,1		;NO, GET THE DATA
	JRST @DVADSP		;JUMP TO PROPER PROCESSOR

;COME HERE WHEN HEADER EXPECTED
DVASVH:	TRNE 1,400000		;IS THIS A HEADER?
	JRST DVAER2		;NO, ERROR

	HRLZM 1,DVAMSG		;YES, STORE IT

	LDB 1,[POINT 4,DVAMSG,4]	;GET SEQUENCE NO. FROM THIS MESSAGE
	LDB 2,[POINT 4,DVAPMS,4]	;DITTO LAST MESSAGE
	CAIN 2,17		;CHECK WRAPAROUND
	MOVEI 1,20(1)
	SUB 1,2
	CAIE 1,1		;DIFFERENCE MUST BE 1 OR OUT OF SEQUENCE
	JRST DVAER3		;ERROR, OUT OF SEQUENCE

	MOVEI 1,DVASVM		;OK, SAY EXPECTING MESSAGE
	JRST DVACH2		;EXIT


;COME HERE WHEN MESSAGE EXPECTED

DVASVM:	TRNN 1,400000		;IS THIS A MESSAGE?
	JRST DVAER2		;NO, ERROR

	HRRM 1,DVAMSG		;STORE IT
	MOVS 1,DVAMSG		;GET REST OF MESSAGE, SWAPPED

	LDB 4,UNTPTR		;GET PRIMARY DEVICE
	LDB 3,DEVPTR		;AND SUB DEVICE
	MOVSS 1			;SWAP HALVES AGAIN

	CAIE 4,MONDVN	;IS THIS MESSAGE FOR THE MONITOR?
	JRST DVASV1		;NO, GO PROCESS

	MOVE 0,FIFXTS		;MONITOR MESSAGE, GET XFR STATUS
	TRNN 1,1		;IS THIS A -15 BUGHLT?
	JRST DVASV9		;NO.

FIFBUG:	LSH 1,-1		;BUGHLT, GET ADDRESS
	ANDI 1,17777
	MOVEM 1,FIFERW		;STORE

DVADWN:	JSP 4,FIFDWN		;FREE ANY HUNG JOBS
	JRST FIFCHR		;EXIT


DVASV9:	TRNN 1,DAMRAK		;MONITOR MESSAGE, READ ACKNOWLEDGE?
	JRST DVASV2		;NO

	TEST (NE,FFBSY)		;YES, -15 MUST BE ACTIVE,
	TEST (ZN,FFRPG)		;AND READ MUST BE PENDING
	JRST DVAER4		;ERROR, WASN'T EXPECTING THIS MESSAGE

	TEST (ZN,FFAWT)		;WERE WE WAITING ON DEVICE A?
	JRST [	MOVEM 0,FIFXTS	;NO, BECAUSE DVA INT CAME IN AT ABOUT THE SAME TIME
		JRST DVACHR]	;AS DVB, AND WAS DONE FIRST, DVB WILL START THE READ
				;(THAT'S WHAT IT SAYS HERE, ANYWAY. JHK)

	MOVEM P,FIFPDL		;SETUP DVB CONTEXT
	MOVE P,FIFPDP

	MOVEM 1,DVAPMS		;SAVE AS GOOD
	SETZM DVAECT		;CLEAR ERROR COUNTS
	SETZM FSHCNT

	MOVEI 1,DVASVH		;SAY HEADER EXPECTED
	MOVEM 1,DVADSP	
	JRST NXTIO		;START THE READ,  WILL DEBREAK WHEN THROUGH



;MESSAGE FOR MONITOR

DVASV2:
	TRNN 1,DAMBWC!DAMBUD!DAMBHD!DAMNRM!DAMINA
	JRST DVASV5		;NOT AN ERROR REQUIRING ABORT

;		ABORT REQUEST, ABORT TRANSFER IN PROGRESS
	JUMPGE 0,DVAER5		;IS THE -15 ACTIVE ?
	CONO DVB,DVBRES+FIFCHN	;YES, RESET DEVICE B

	MOVEM 1,DVAPMS		;STORE GOOD MESSAGE
	SETZM DVAECT
	SETZM FSHCNT
	MOVEI 1,DVASVH		;EXPECT HEADER
	MOVEM 1,DVADSP

	MOVEM P,FIFPDL		;SETUP DVB CONTEXT
	MOVE P,FIFPDP
	JRST FIFABT		;LET DVB DEBRAKE

DVASV5:	TRNN 1,DAMOKO		;IS THIS THE "HELLO" MESSAGE?
	JRST DVAER6		;NO, BAD MESSAGE

DVASVA:	MOVEI 1,1		;YES
	SKIPLE FIFP		;IS THE -15 ALLOWED UP?
	MOVEM 1,FIFONL		;THEN SAY SO.
	JRST DVACHR


;DEVICE A MESSAGE FOR NON-MONITOR DEVICE

DVASV1:	CAIL 4,NFIFDV	;LEGAL DEVICE?
	JRST DVAER7		;NO, ERROR

	HRRE 2,FDVCHR(4)	;YES, CHECK SUBDIVICE
	MOVNS 2
	CAILE 3,-1(2)
	JRST DVAER7		;NO

	HRRZ 4,FDVIDX(4)	;GET ADDRESS OF STATUS WORD FOR THIS DEVICE
	ADD 4,3

	MOVSI 3,FDVOKO		;OK TO OUTPUT TO -15?
	TRNE 1,DAMOKO
	IORM 3,0(4)

	MOVSI 3,FDVOKI		;OK TO INPUT FROM -15
	TRNE 1,DAMOKI
	IORM 3,0(4)

	MOVSI 3,FDVDTL		;DATA LATE?
	TRNE 1,DAMDTL
	IORM 3,0(4)

	MOVSI 3,FDVERR		;DATA ERROR?
	TRNE 1,DAMDER
	IORM 3,0(4)

	MOVEI 3,FDVABE		;ALL BUFFERS EMPTY?
	TRNE 1,DAMABE
	IORM 3,0(4)

	MOVSI 3,FDVDED		;DEVICE DEAD
	TRNE 1,DAMDED
	IORM 3,0(4)

	MOVEI 3,FDVPSI		;PSI REQUEST?
	TRNN 1,DAMPSI
	JRST .+3
	IORM 3,0(4)
	SETOM FCKPSI		;WAKE UP LEVEL 8 ROUTINE

DVACHR:	MOVE 1,DVAMSG		;EXIT INTERRUPT, SAVE MEESSAGE AS GOOD
	MOVEM 1,DVAPMS
	SETZM DVAECT
	SETZM FSHCNT
DVACH1:	MOVEI 1,DVASVH		;SAY HEADER EXPECTED
DVACH2:	MOVEM 1,DVADSP
	JRST FIFCHR		;EXIT




;DEVICE A I/O ERROR ROUTINES

DVAER2:	BUG(FIF,<DVASV: FAILED TO GET EXPECTED MESSAGE>)
	JRST DVARST

DVAER3:	BUG(FIF,<DVASV: MESSAGES OUT OF SEQUENCE>)

DVARST:	SKIPL FDBGSW	;ARE WE DEGUGGING
	JRST DVARS1	;YES, DON'T COUNT ERRORS
	AOS 1,DVAECT	;NO, BUMP ERROR COUNT THIS MESSAGE
	CAIL 1,MAXECT	;HAVE THERE BEEN TOO MANY?
	JRST DVADWN	;YES, SAY -15 DOWN.
DVARS1:	MOVS 1,DVAPMS	;GET LAST GOOD MESSAGE HEADER

	DATAO DVA,1		;REQUEST THAT THE -15 RE-SEND IT

	MOVSM 1,DVAFHK	;FLUSH ALL UNTIL THIS ONE
	MOVEI 1,DVAFSH	;SAY FLUSH FOR A WHILE
	MOVEM 1,DVADSP
	JRST FIFCHR	;EXIT

DVAER4:	BUG(FIF,<DVASV: READ READY RECIEVED WITH NO READ PENDING>)
	JRST DVACHR

DVAER5:	BUG(FIF,<DVASV: ABORT REQUEST RECIEVED WHILE -15 INACTIVE)>
	JRST DVACHR

DVAER6:	BUG(FIF,<DVASV: UNDEFINED OR ILLEGAL DEVICE A MESSAGE>)
	JRST DVACHR

DVAER7:	BUG(FIF,<DVASV: ILLEGAL DEVICE CODE>)
	JRST DVACHR


;ROUTINE TO FLUSH MESSAGES UNITL GOOD ONE RECIEVED

DVAFSH:	TRNE 1,400000		;IS THIS A HEADER?
	JRST DVAFH2		;NO,SKIP IT
	HRLZM 1,DVAMSG
	MOVEI 1,DVAFH1		;SAVE MESSAGE HEADER, AND SETUP FOR MESSAGE
	JRST DVACH2

DVAFH1:	HRRM 1,DVAMSG		;SAVE REST OF MESSAGE
	MOVE 2,DVAMSG		;ENTIRE MESSAGE TO 2
	CAMN 2,[XWD MONDVN,1B18+DAMOKO]	;IS THIS A HELLO MESSAGE?
	JRST DVASVA		;YES, START OVER AGAIN

DVAFH2:	AOS 1,FSHCNT		;BUMP COUNT AND SEE IF WE HAVE FLUSHED TOO MANY
	CAIL 1,MAXFSH+1
	JRST FIFBUG		;TOO MANY, MUST BE A PDP15 BUGHLT

	MOVEI 1,DVAFSH		;GET DISPATCH ADDRESS FRO NEXT HEADER
	CAME 2,DVAFHK		;SEE IF THIS IS THE MESSAGE WE WANT
	JRST DVACH2		;NO, KEEP ON PUMPING

	MOVEM 2,DVAPMS		;OK, GOT MESSAGE WE WANT, SAVE IT
	SETZM FSHCNT		;CLEAR FLUSH COUNT
	JRST DVACH1		;EXIT

;DEVICE A INITIALIZATION CODE,  CALLED AT USER LEVEL TO RESET DEVICE A
;POINTERS, ETC.

DVAINI:	MOVEI 1,DVASVH	;RESET DISPATCH ADDRESS
	MOVEM 1,DVADSP

	SETZM DVAMSG	;RESET COUNTERS, ETC
	SETZM FCKPSI
	SETZM DVAECT
	SETZM FSHCNT

	MOVSI 1,(17B4)	;INIT MESSAGE SEQUENCE TO LAST
	MOVEM 1,DVAPMS

	POPJ P,




;SOME DISMISSAL AND READY TEST CODE

;WAIT FOR THERE TO BE ENOUGH COMMANDS FREE

FCMWAT:
FCMWT1:	UNLOCK CMDLCK
	MOVEI 1,FIFCCT
	PUSHJ P,DISGE
	LOCK CMDLCK,<PUSHJ P,LCKTST>
	POPJ P,

;WAIT FOR OK TO OUTPUT BIT TO BE SET BY 15, OR 15 DOWN SIGNAL
OKOTST:	MOVE 1,0(1)	;APPROPRIATE DEVICE STATUS
	TLNN 1,FDVOKO!FDVDWN
	JRST 0(4)
	JRST 1(4)

;WAIT FOR OK TO INPUT BIT TO BE SET BY 1

OKITST:	MOVE 1,0(1)	;GET WORD TO BE TESTED
	TLNN 1,FDVOKI!FDVDWN
	JRST 0(4)
	JRST 1(4)

;MISC. OTHER RESIDENT CODE


;SUBROUTINE TO QUEUE CMD BUFFER
;	4=BUF PTR
;	PUSHJ P,QFCMD
;	DESTROYS NO ACS
QFCMD:	HRRM 4,@FIFCLI
	HRRZM 4,FIFCLI
	POPJ P,

;UNQUEUE CMD FOR FIFTEEN CMD QUEUE
;	    NO SKIP - NO CMDS ON QUEUE, 1 DESTROYED, 2 OK
;	SKIP RETURN - CMD PTR IN 1, 2 DESTROYED
UQFCMD:	SKIPN 1,FIFCLO
	POPJ P,		;NO CMDS ON QUEUE
	HRRZ 1,0(1)
	JUMPN 1,.+3
	MOVEI 2,FIFCLO	;FIXUP ON END OF QUEUE
	MOVEM 2,FIFCLI
	EXCH 1,FIFCLO
	AOS 0(P)
	POPJ P,



;INSERT CMD IN 4 AT FRONT OF QUEUE
QHFCMD:	SKIPN FIFCLO
	JRST QFCMD	;QUEUE EMPTY, JUST QUEUE IT NORMALLY
	EXCH 4,FIFCLO
	HRRM 4,@FIFCLO
	POPJ P,


;TAKE 15 DOWN AND FREE JOBS WAITING ON DEVICES.
;CALLED BY JSP 4,
FIFDWN:	SETOM FIFONL
	MOVEI 1,DVASVH	;RESET THE DEVICE A ROUTINE
	MOVEM 1,DVADSP
	MOVSI 1,(17B4)
	MOVEM 1,DVAPMS
	SETZM FSHCNT		;CLEAR FLUSH COUNT
	SETZM DVAECT		;AND ERROR COUNT

	MOVSI 1,FDVDWN	;MARK DEVICES DOWN, AND FREE ANY WAITING JOBS
	MOVSI 2,-NFIFDV
FIFDW1:	HRR 3,FDVIDX(2)
	HRL 3,FDVCHR(2)
	IORM 1,0(3)
	AOBJN 3,.-1
	AOBJN 2,FIFDW1

	JRST 0(4)


	USE SWAPPC

;	DUMPIO TO PDP-15 DEVICES.

;		GENERAL THEORY OF OERATION OF THIS SECTION

;	THIS SECTION IS ENTERED WITH THE USERS IOWD IN 1, THE POINTER TO
;THE SUB-DEVICE STATUS BITS IN IOS, THE DEVICE NO. IN UNIT AND THE

;SUBDEVICE NO. IN DEV.
;NOTE THAT THE USERS IOWD POINTS (FOR HISTORICAL REASONS) TO THE
;WORD 4 WORDS AHEAD OF HIS DATA.
;	THERE ARE 2 GENERAL CLASSES OF TRANSFERS WHIH MAY BE DONE TO THE
;PDP-15. THESE ARE JAM-MODE AND NON-JAM MODE.
;IN ALL CASES THE GENERAL OPERATION IS THE SAME, NAMELY THAT THE 
;ACTUAL IO OPERAION TAKES PLACE DIRECTLY FROM THE USERS PAGES, NOT FROM A
;MONITOR BUFFER AS WITH OTHER DEVICES ON THE SYSTEM.  TO ACOMPLISH THIS THE
;FOLLOWING STEPS ARE PERFORMED; THE ACCESS PERMISSION ON EACH PAGE IS 
;CHECKED (SUBROUITNE DMPCKA) AND EACH PAGE REFRENCED TO BRING IT INTO CORE
;THE TOTAL NO. OF PAGES INVOLVED IN THE OPERATION IS THEN COMPUTED AND 
;AN IOWD IS ASSIGNED FRO EACH (SUBROUTINE GTIOWD).  THE REQUIRED PAGES 
;ARE THEN LOCKED INTO CORE (ROUTINE DMPLKP) AND THE LIST OF IOWD'S IS
;THEN PASSED TO THE DA28 DRIVER, FIFIO.  UPON RETURN THE PAGES ARE UNLOCKED
;(ROUTINE DMPULK) AND THE IOWD RELEASED AND CONTROL IS RETURNED TO THE
;USERS PROGRAM.

;	NOW CONSIDER THE CASE OF NON-JAM MODE TRANSFERS:  THE FIRST
;4 (OR LESS) PDP15 WORDS IN THE USERS BUFFER ARE CALLED THE "USER HEADER"
;FOR THE TRANSFER AND ARE SENT TO THE PDP-15 SEPERTLY FROM THE DATA.
;NOTE THAT IN THE CASE OF A READ FROM THE PDP-15 ONLY ONE PDP-15 WORD IS
;USED IN THE HEADER AND THAT THIS WORD IS OVERWRITTEN BY THE INCOMING DATA.
;TRANSFERS MAY BE OF ANYLENGTH UP TO THE MAX NO. OF WORDS IN PDP-15 
;MEMORY.  NOTE, HOWEVER THAT TRANSFERS OF LESS THAN 4 WORDS (PDP-15) ARE CALLED
;"SHORT" WHILE THOSE OVER THIS AMOUNT ARE CALLED "LONG".
;	IN THE CASE OF JAM-MODE TRANSFERS (I.E. THOSE IN WHICH THE PDP-10
;SETS THE PDP-15 MEMORY ADDRESS) NO USER HEADER IS INVOLVED AND THERE IS 
;NO DISTINCTION BETWEEN SHORT OR LONG TRANSFERS.  NOTE ALSO THAT JAM-MODE
;TRANSFERS MAY BE MADE ONLY TO THE PDP-15 ITSELF, NOT TO A SUBDEVICE.


FIFIN:	MOVSI 7,FDVACT		;INPUT, SAY ACTIVE
	CAIA
FIFOUT:	MOVSI 7,FDVACT!FDVOUT	;OUTUT, SET OUTPUT BIT TOO

	HRRI 1,5(1)	;BUMP IOWD TO POINT AT USER HEADER, 1 FOR IOWD, 4 FOR HISTORY
	PUSH P,1	;SAVE IT

	SKIPGE 3,0(IOS)	;IS IO ALREADY ACTIVE ON THIS DEVICE ?
	BUG(HLT,<PDP-15: DUMPIO REQUESTED FOR ACTIVE DEVICE>)

	TLZ 3,FDVOUT!FDVLNG!FDVDWN	;RESET THESE
	IOR 7,3		;INSERT NEW VALUES

	HRRZ 1,0(4)	;GET JOB NO. OF USING JOB
	SKIPL FDBGSW	;DEBUGGING ?
	CAME 1,FDBGSW	;YES, THIS JOB ?
	JRST FIFDM1	;YES
	SKIPGE 2,FIFUSR	;IS THE PDP-15 ASSIGNED TO SOMEONE ?
	SKIPG FIFONL	;IS THE PDP-15 UP ?
	CAMN 2,JOBNO	;NO, BUT THAT ONLY MATTERS IF HE'S NOT DEBUGGING
	CAIA		;OK
	JRST FDMER1	;BAD

FIFDM1:	HLRE 2,0(P)	;GET NO OF -10 WORDS TO AC 2
	MOVNS 2
	TLNE 7,FDVPAK	;IS THIS PACKED MODE ?
	LSH 2,1		;YES, DOUBLE TO GET -15 WORDS
	CAIG 2,2*FSHTSZ	;SHORT MESSAGE ?
	JRST FIFDM6	;YES
	CAIG 2,MAXMSG	;NO, LONG. TOO LONG ?
	TLNN 7,FCHLNG	;OR LONG MESSAGES NOT ALLOWED ?
	JRST FDMER2	;YES
	TLO 7,FDVLNG	;OK, SAY LONG TRANSFER
FIFDM6:	PUSH P,2	;SAVE WORD COUNT

;				NOW BE SURE EVERYTHING IS IN SYNCH, I.E. BE SURE DEVICE IS
;				INACTIVE AND READY.

	TLNE 7,FDVOUT		;OUTPUT ?
	JRST WRTSYN		;YES, SYNCH FOR WRITING

	TLNN 7,FCHOKI		;READING, ALWAYS OK TO READ ?
	TLNE 7,FDVOKI!FDVDWN	;NO, HAS -15 SAID IT'S OK ?
	JRST SYNCH1		;ALL OF THE ABOVE, GO DO IT.

	HRL 1,IOS		;NONE OF THE ABOVE, WAIT 'TIL -15 SAYS IT'S OK
	HRRI 1,OKITST		;ADR OF TEST ROUTINE
	JSYS EDISMS		;WAIT
SYNCH1:	MOVSI 3,FDVOKI		;OK, GET BIT TO SET
	JRST SYNCH2		;SET IT AND DO THE OPERATION

WRTSYN:	TLNN 7,FCHOKO		;WRITING, ALWAYS OK TO WRITE ?
	TLNE 7,FDVOKO!FDVDWN	;NO, HAS -15 SAID IT'S OK ?
	JRST SYNCH3		;ALL OF THE ABOVE, GO DO 'ER

	HRL 1,IOS		;NEITHER, GET ARD OF WORD TO TEST
	HRRI 1,OKOTST		;TEST ROUTINE ADDRESS
	JSYS EDISMS		;WAIT

SYNCH3:	MOVSI 3,FDVOKO		;GET OK-TO-OUTPUT BIT
SYNCH2:	ANDCAM 3,7		;CLEAR IN NEW BITS
	ANDCAB 3,0(IOS)		;AND IN OLD
	TLNN 3,FDVDWN		;PDP-15 DOWN ?
	JRST FIFDM7		;NO
	HRRZ 1,0(4)		;YESS, BUT LET DEBUGGING JOB GO
	CAME 1,FDBGSW		;IS HE THE ONE ?
	JRST FDMER4		;NO


FIFDM7:	MOVE 1,-1(P)	;RETRIEVE USERS IOWD
	MOVSI 2,(1B3)	;CHECK ACCESS ON ALL PAGES
	TLNE 7,FDVOUT
	MOVSI 2,(1B2)	;READ -15 = WRITE MEM
	PUSHJ P,DMPCKA	;CHECK IT
	JRST FDMER3	;BAD ACCESS

;	NOW COMPUTE THE NO. OF IOWD REQUIERD.
;IN ORDER TO DO THIS WE MUST KNOW THE NO. OF PAGES INVOLVED AND 
;THE LENGTH OF THE HEADER, IF ANY.  AN ADJUSTMENT WILL ALSO BE MADE ACCORDING
;TO THE LOCATION AND LENGTH OF THE HEADER RELATIVE TO A PAGE BOUNDRY.
;THE FOLLOWING CODE CONSIDERS 5 SPECIAL CASES:
;CASE 1	JAMMODE TRANSFER.  IN THIS CASE THERE IS NO HEADER.  NO IOWDS REQUIRED
;IS EQUAL TO THE NO. OF PAGES.
;CASE 2	HEADER ONLY, IN THIS CASE NO IOWD REQUIRED EQUALS THE NO
;OF PAGES SPANNED BY THE HEADER, I.E. 1 OR TWO
;CASE 3	LONG TRANSFER, HEADER NO ADJACENT TO A PAGE BOUNDRY.  IN THIS CASE THE
;NO. OF IOWDS REQUIRED EQUALS NO. PAGES+1
;CASE 4	LONG TRANSFER, HEADER ADJACENT TO PAGE BOUNDRY, BUT NOT SPLIT
;OVER PAGE.  NO IOWDS EQUALS NO. PAGES INVOLVED.
;CASE 5	LONG TRANSFER, HEADER SPLIT OVER TWO PAGES.  NO. OF IOWD EQUALS 2 +
;NO. PAGES INVLOVED.

	PUSH P,1	;SAVE TOTAL NO. OF PAGES
	SETO 4,		;FLAG 4 FOR CASES 1 OR 2
	TLNE 7,FDVLNG	;SHORT MESSAGE
	TLNE 7,FDVJAM	;OR JAM MODE IS CASE 1 AND/OR 2
	JRST FIFDM2	;SO SKIP ALL THIS SHIT

	SETZ 4,		;NOW HAVE ONE OF THE OTHERES, SET 4 FOR CASE 4
	SETZ 3,		;3 WILL HAVE NO. OF WORD IN 2ND IOWD, IF ANY
	TLNN 7,FDVOUT	;OUTPUT ?
	JRST FIFDM8	;NO, HAVE CASE 3 OR 4

	MOVEI 3,2*FSHTSZ-1	;CASE 3 OR 5, GET LENGTH OF HEADER-1
	TLNE 7,FDVPAK
	MOVEI 3,FSHTSZ-1

FIFDM8:	HRRZ 1,-2(P)	;GET ADDRESS OF USER DATA
	ANDI 1,777	;SAVE ONLY PAGE BITS
	MOVE 2,3	;HEADER COUNT-1 TO 2
	ADD 2,1		;SEE IF IT OVERLAPS
	CAIN 2,777	;TEST FOR CASE 4
	JRST FIFDM2	;YES, THATS ALL HERE

	MOVEI 3,1(3)	;HAVE CASE 3 OR 5
	MOVEI 4,2	;ASSUME CASE 5
	TRZN 2,1000	;TEST CASE 5
	SOJA 4,FIFDM2	;NO, IT'S CASE 3

	MOVEI 3,1(2)	;CASE 5, GET WDCNT FOR 2ND IOWD TO 3
	POP P,1		;RETRIEVE NO. OF PAGES
	ADDI 1,-1(4)	;ADJUST TO GET PROPER NO. OF IOWD'S
	PUSHJ P,GTIOWD	;GET IOWD'S
	PUSH P,1	;SAVE FOR RESTORE
	PUSH P,1
	ADD 1,BHC-1(4)
	JRST FIFDM0

FIFDM2:	POP P,1
	SKIPL 4		;CASES 1 OR 2 ?
	ADD 1,4		;YES, ADJUST LIST
	PUSHJ P,GTIOWD	;GET IOWD'S
	PUSH P,1	;SAVE FOR RELEASING
	PUSH P,1	;WILL BECOME AOBJN WORD FOR HEADER
	SETZ 2,		;SETUP 2 FOR CASES 1 OR 2
	JUMPL 4,FIFDM9	;CASE 1 OR 2 ?
	SETO 2,		;SETUP FOR CASE 4
	JUMPE 4,FIFDM9	;SACE 4 ?
	ADD 1,BHC+1	;NO
FIFDM0:	MOVN 2,4	;CASE 1,2, OR 5
FIFDM9:	HRLM 2,0(P)	;SETUP AOBJN LIST FOR HEADER

	MOVE 2,-3(P)	;GET USERS IOWD
	PUSHJ P,DMPLKP	;LOCK IN PAGES

;	4 NOW IS FLAG, 3 HAS NO WORD IN 2ND IOWD FOR CASE 5, TOP OF STACK
;	HAS AOBJN WORD FOR HEADER, 1 HAS AOBJN WORD FOR DATA

	SKIPN 4		;NO SKIP IF CASE 4
	ADD 1,BHC+1	;CASE 4
	JUMPLE 4,FIFDM3	;JUMP IF CASES 1, 2, OR 4
	TLNN 7,FDVOUT	;AND IF OUTPUT ..
	MOVEI 3,1	;READING, BE SURE 3 IS SET RIGHT

	MOVE 2,0(P)	;GET AOBJAN WORD FOR HEADER
	SOJLE 4,FIFDM4	;JUMP IF THATS ALL
	MOVE 4,0(1)	;ELSE DIDDLE IOWD LIST
	MOVEM 4,0(2)
	ADD 2,BHC+1
	ADD 1,BHC+1	;AND AOBJN WORD FOR DATA

FIFDM4:	MOVE 4,0(1)	;NOW TAKE CARE OF THE 2ND ONE IF THERE ARE 2,
	MOVEM 4,0(2)
	MOVE 4,BHC(3)	;DIDDLE WDCNT AND ADDRESS
	TLNE 7,FDVOUT	;READING ?
	ADDM 4,0(1)	;NO, DIDDLE IOWD LIST
	MOVNS 3		;SETUP IOWD
	HRLM 3,0(2)

FIFDM3:	POP P,2		;AOBJN WORD FOR HEADERLIST TO 2
	TLNE 7,FDVJAM	;JAM-MODE ?
	JRST FIFDM5	;YES

	SKIPL 2		;IS THERE REALLY A HEADER  ?
	EXCH 1,2	;NO

FIFDM5:	MOVE 3,-1(P)	;GET PDP-15 WORD COUNT

	PUSHJ P,FIFIO	;DO THE OPERATION
	TEST (O,ERRF)	;ERROR, SET FLAG

	POP P,1		;GET ORIGINAL AOBJN POINTER
	PUSHJ P,RLIOWD	;RELEASE IOWDS

	POP P,1		;GET PDP-15 WORD COUNT OFF STACK
	POP P,1		;RETRIEVE USERS IOWD
	PUSHJ P,DMPULP	;UNLOCK USERS PAGES

	POPJ P,		;RETURN


;	ERROR EXITS

FDMER4:	JFCL	;DOWN

FDMER3:	POP P,1		;ASSIGNED

FDMER2:	JFCL		;ILLEGAL LONG MESSAGE

FDMER1:	POP P,1		;ILLEGAL ACCESS

	TEST (O,ERRF)	;SET ERROR BIT
	POPJ P,		;EXIT


;	PDP-15 DA28 I/O DRIVER.

;	THE FOLLOWING SETS UP THE NECESSARY COMMAND BUFFERS AND CAUSES THE
;ACTUAL TRANSFER TO TAKE PLACE.  CALLING SEQUENCE IS AS FOLLOWS:
;ON ENTRY:
;	AC1 =	AOBJN WORD FOR IOWD LIST
;	AC2 =	AOBJN WORD FOR HEADER IOWD LIST
;	AC3 =	PDP-15 WORD COUNT
;	AC7 =	STATUS BITS (TO BE SET)
;	UNIT =	UNIT NO.
;	DEV =	SUB. DEVICE NO.
;	IOS =	POINTER TO DEVICE STATUS WORD
;
;RETURNS:
;	+1	FAIL, ERR CODE IN 1
;	+2	SUCCESS, TRANSFER COMPLETED, NO AC'S DISTROYED.
;
;NOTE:
;	FIRST 1 OR TWO IOWDS POINT TO USER HEADER.




FIFIO:
	PUSH P,4
	PUSH P,IOS
	PUSH P,3		;STACK THESE IN THE ORDER THEY WILL BE USED
	PUSH P,2
	PUSH P,1

	MOVSI 1,FDVACT!FDVOUT!FDVLNG!FDVDWN	;SET THESE TO NEW (CURRENT) VALUES
	ANDCAM 1,0(IOS)
	HLLZ IOS,7		;GET NEW VALUES
	TLO IOS,FDVACT		;BE SURE THIS IS SET
	MOVE 1,-3(P)		;DO IT THIS WAY SO WE DON'T GET ZPPPED BY ...
	IORB IOS,0(1)		;THE INDR. BIT IN STROAGE



;NOW OBTAIN AND SETUP THE COMMAND BUFFER(S) FOR THE OPERATION

FIFIO1:	LOCK CMDLCK,<PUSHJ P,LCKTST>	;LOCK OTHERS OUT, SO WE CAN HAVE THEM AS THEY COME

	PUSHJ P,G1FCMD		;ALWAYS NEED AT LEAST ONE

	TLNE IOS,FDVOUT!FDVJAM	;AND THAT'S ALL IF WRITING OR JAM MODE
	JRST FIFIO2		;OK

	PUSH P,4		;READING, NEED ANOTHER, SAVE ADR OF FIRST
	PUSHJ P,G1FCMD		;OK, GET ANOTHER
	MOVE 3,4		;ADR OF SECOND TO AC3
	POP P,4			;RETRIEVE ADR OF FIRST

FIFIO2:	UNLOCK CMDLCK		;LET OTHER IN

;SETUP FIRST WORD OF COMMAND ...

	POP P,FCMWD1(4)		;IT'S THE AOBJN WORD ...

;	NOW DO THE SECOND WORD

	POP P,FCMWD2(4)		;AOBJN WORD FOR HEADER

;;SETUP 3RD WORD

	LOCK FIFLCK,<PUSHJ P,LCKTST>	;ONLY ONE AT A TIME FROM HERE ON

	TLNE 7,FDVJAM		;FORGET SEQUENCE NO. IF JAM MODE
	JRST FIFIO4
	AOS 1,MSGSEQ		;BUMP AND GET MESSAGE SEQUENCE
	TRNN 1,777777		;RH MUST ALWAYS BE NON. 0
	AOS 1,MSGSEQ		;IT OVERFLOWED, BUMP AGAIN
	HRLZS 1			;MOVE TO LH
FIFIO4:	DPB UNIT,UNTPTR		;IT CONTAINS THE UNIT ...
	DPB DEV,DEVPTR		;AND THE DEVICE.
	MOVEM 1,FCMWD3(4)	;MOVE TO COMMAND BLOCK

;DO THIRD WORD.  CONTAINS CONTROL BITS, AND WORD COUNT ...

	POP P,1			;RETRIEVE WORD COUNT
	HRLZS 1			;SHIFT AROUND
	HLR 1,IOS		;GET BITS
	AND 1,[XWD -1,FDVOUT!FDVPAK!FDVJAM]	;KEEP ONLY WHAT WE NEED
	MOVEM 1,FCMWD4(4)	;MOVE TO COMMAND BLOCK


	TLNN IOS,FDVJAM		;JAM MODE DOESNT NEED SECOND COMMAND BLOCK
	TLNE IOS,FDVOUT		;READING ?
	JRST FIFIO3		;NO, GO DO IT

	MOVEI 2,0(3)		;READING, PREPARE TO COPY COMMAND ...
	HRL 3,4			;SOURCE ADR
	BLT 3,FCMDSZ-1(2)	;COPY
	MOVEI 1,FCMRRQ!FCMWRT	;SET THESE
	IORM 1,FCMWD4(4)	;IN WRITE-FOR-READ COMMAND
	SETZ 1,			;CLEAR HEADER IN READ COMMAND ...
	EXCH 1,FCMWD2(2)
	SKIPL FCMWD1(2)		;AND IF NO DATA ...
	MOVEM 1,FCMWD1(2)	;MAKE HEADER POINTER FOR DATA
	SETZM FCMWD1(4)		;SAY NO DATA IN WRITE FOR READ

	HRL 4,2			;GET ADR OF 2ND BUFFER TO LH 4
	MOVSS 4			;MAKE XWD WRTBUF,REDBUF IN 4

FIFIO3:	PUSH P,4		;STACK THE BUFFER POINTER
	NOSKED			;DON'T INTERRUPT QUEUING
	PUSHJ P,QFIFOP		;QUEUE THE OPERATION
	OKSKED			;OK, LET OTHERS ON
	UNLOCK FIFLCK		;LET SOMEBODY ELSE USE IT



;NOW WAIT FOR OPERATION TO COMPLETE, THEN CLEAN UP

	HRRZ 1,0(P)		;GET POINTER TO WORD CONTAINING READY BIT
	PUSHJ P,DISL		;DISMS UNTIL OP COMPLETE

	LOCK CMDLCK,<PUSHJ P,LCKTST>	;KEEP OTHERS OUT
	HLRZ 4,0(P)		;OPERATION COMPLETE, GET POSSIBLE COMMAND POINTER ...
	SKIPE 4			;IF THERE WAS ONE ...
	PUSHJ P,RLFCMD		;RELEASE IT ...

	POP P,4			;RETRIEVE WHOLE COMMAND POINTER
	MOVE 1,FCMWD4(4)	;GET FLAG BITS
	TRNN 1,FCMERR		;IS THE ERROR BIT SET ?
	AOS -2(P)		;YES, GIVE SKIP RETURN ...
	HRRZS 4			;CLEAN 4
	PUSHJ P,RLFCMD		;RELEASE FIRST BUFFER
	UNLOCK CMDLCK
	JRST FIFIO5		;GET AROUND ERROR EXIT

IOERXT:	POP P,1			;RESTORE AC'S
	POP P,2
	POP P,3
	TEST (O,ERRF)		;SET ERROR BIT

FIFIO5:	MOVSI 4,FDVACT		;SAY DEVICE NOT ACTIVE ...
	POP P,IOS		;RESTORE STATUS POINTER
	ANDCAM 4,(IOS)		;AND RESET BIT
	POP P,4

	POPJ P,			;EXIT



;SUBROUTINE TO GET FREE CMD BUF
;	RETURNS BUF PTR IN 4, ZEROS CMD BUFFER.
;	NO PARAMETERS, DESTROYS AC1.
;	NOTE:  CMDLCK MUST BE SET ON ENTRY TO THIS ROUTINE.  THIS CODE MAY
;SET CMDLCK IF IT HAS TO WAIT FOR A FREE BUFFER.

G1FCMD:	SKIPGE FIFCCT		;ARE THERE ENOUGH ?
	JRST [	PUSHJ P,FCMWAT	;NO, MUST WAIT ...
		JRST G1FCMD]	;TRY AGAIN.
	SOS FIFCCT
	SKIPN 4,FIFFCL
	BUG(HLT,<PDP15 - FREE CMD LIST AND FREE CMD COUNT INCONSISTENT>)
	HRRZ 4,0(4)
	EXCH 4,FIFFCL
	SETZM 0(4)	;RH OF 1ST WORD MUST BE 0 TO INDICATE END OF
			;CMD QUEUE WHEN THIS ENTRY IS QUEUED
	HRLI 1,0(4)
	HRRI 1,1(4)
	BLT 1,FCMDSZ-1(4)
	POPJ P,

;SUBROUTINE TO RELEASE CMD BUF
;	4=BUF PTR
;	PUSHJ P,RLFCMD
;	DESTROYS NO ACS
RLFCMD:	AOS FIFCCT
	EXCH 4,FIFFCL
	MOVEM 4,@FIFFCL
	POPJ P,

;	ROUTINE TO QUEUE OPERATION AND START TRANSFER IF PDP-15 NOT ALREADY
;	ACTIVE.
;ENTRY:
;	AC4 =	WRTBUF, OR XWD WRTBUF,REDBUF IF READING
;		WHERE WRTBUF AND REDBUF ARE COMMAND BUFFER POINTERS.
;	PUSHJ P,QFIFOP
;		NOTE:  THIS ROUTINE MUST BE CALLED WHILE NOSKED ...
;RETURN:
;	+1 ALWAYS

QFIFOP:	NOSKED
	CHNOFF FIFCHN	;DON'T ALLOW DIDDILING WHILE QUEUING ...

	TLNN 4,777777	;IS THIS A READ ?
	JRST QFOU1	;NO, DO ONLY THE WRITE

	MOVSS 4		;YES, DO THE WRITE FIRST ...
	PUSHJ P,QFCMD	;QUEUE IT
	MOVSS 4		;RESTORE 4
QFOU1:	PUSHJ P,QFCMD	;DO THE OTHER

	CHNON FIFCHN	;LET THINGS RUN ...
	OKSKED
	SKIPGE FIFXTS	;IS THE DA28 ACTIVE ?
	POPJ P,		;YES, THAT'S ALL HERE
	SETOM SRTXFR	;NO, START IT UP
	ISB FIFCHN	;GIVE THE PI ROUTINE A POKE
	POPJ P,		;EXIT







;OPEN ROUTINE
;ON ENTRY:
;IOS=POINTER TO STATUS WORD FOR DEVICE
;UNIT=DEVICE NO.
;DEV=SUB DEVICE NO IN BOTH RIGHT AND LEFT HALVES
;4=POINTER TO DEVICE JOB TABLE ENTRY

FOPEN:
	SKIPL 3,FDBGSW		;IS SOMEONE DEBUGGING?
	CAME 3,JOBNO		;YES, THIS JOB?
	CAIA			;NO
	JRST FOPEN1		;YES, SKIP CHECKS ON ALLOWED JOBS

	SKIPGE 2,FIFUSR		;FIF ASSIGNED TO SOMEONE ELSE?
	SKIPG FIFONL		;NO, IS IT UP?
	CAMN 2,JOBNO		;NOT UP, OR ASSIGNED, SEE IF THIS GUY CAN HAVE IT
	CAIA			;OK, GO AHEAD
	JRST FIFOFL		;NO, RETURN OFF LINE INDICATION

FOPEN1:	LDB 3,[POINT 4,STS,35]	;SEE IF LEGAL MODE
	MOVEI 1,OPNX14		;ASSUME WRONG
	CAIGE 3,16
	POPJ P,			;ILLEGAL MODE

	MOVSI 1,FDVOPN		;GET OPEN BIT
	NOSKED
	TDNE 1,0(IOS)		;SEE IF IT'S ALREADY OPEN
	JRST [	OKSKED		;IT IS
		MOVEI 1,OPNX9	;TELL HIM
		POPJ P,]
	MOVEM 1,0(IOS)		;NO, SET OPEN BIT
	OKSKED			;WE GO NOSKED TO PREVENT CONFLICTS

	HLLZ 1,FDVCHR(UNIT)	;GET CHARACTERISTICS BITS FOR THIS CLASS OF DEVICE
	CAIN 3,16		;PACKED OR UNPACKED?
	TLO 1,FDVPAK		;PACKED
	TLO 1,FDVACT!FDVOUT	;SAY ACTIVE AND OUTPUT AVAILABLE
	HRRI 1,FIFPSI		;SET DEFAULT PSI CHANNEL
	IORM 1,0(IOS)		;PLACE IN STATUS WORD

	TLNE 1,FCHSLO		;DOES THIS THING WANT LOW SPEED ?
	AOS FIFLSC		;YES, BUMP REASON COUNTER

	MOVE 1,JOBNO		;GET JOB NO. OF OPENER
	HRL 1,FORKX		;AND INDEX FOR THIS FORK
	MOVEM 1,0(4)		;PLANT IN DEVICE JOB TABLE

	MOVE 1,JOBNO		;GET JOB NO. THIS JOB
	CAME 1,FDBGSW		;ARE WE DEBUGGING?
	CAIN UNIT,FIFDVN	;OR IS THIS FOR DEVICE FIF: ?
	JRST FOPEN2		;YES, DON'T SEND OPEN MESSAGE

	MOVSI 2,-1		;OPEN OP CODE IS -1
	SETZ 3,
	PUSHJ P,MFIFOU		;SEND OPEN MESSAGE TO -15
	JRST FIFOF1		;ERROR, CAN'T SEND MESSAGE

FOPEN2:	MOVSI 1,FDVACT		;KILL ACTIVE BIT
	ANDCAM 1,0(IOS)

	AOS 0(P)
	POPJ P,


;CLOSE ROUTINE
;AC'S SET AS FOR FOPEN

FCLOSE:
	MOVSI 1,FDVLNG!FDVDWN	;RESET THESE
	ANDCAM 1,0(IOS)		
	MOVSI 1,FDVACT!FDVOUT	;SET THESE FOR MESSAGE
	IORB 1,0(IOS)

	MOVSI 2,-2		;CLOSE MESSAGE IS -2
	SETZ 3,

	TLNE 1,FDVJAM		;BUT DON'T SEND FOR JAM MODE XFR....
	JRST FCLOS1
	SKIPL 1,FDBGSW	;OR IF DEBUGGING....
	CAME 1,JOBNO
	SKIPG FIFONL		;OR IF NOT ONLINE...
	JRST FCLOS1
	SKIPL 1,FIFUSR		;OR IF ASSIGNED TO ANOTHER JOB.
	CAMN 1,JOBNO

	PUSHJ P,MFIFOU
	JFCL

FCLOS1:	SETZM 0(4)		;SAY NO JOB HAS IT
	
	MOVSI 1,FDVOPN!FDVACT	;CLEAR THESE
	ANDCAB 1,0(IOS)

	TLNE 1,FCHSLO		;WAS THIS IN LOW SPEED ?
	SOS FIFLSC		;YES, DECREASE REASON COUNTER

	AOS 0(P)
	POPJ P,

FIFOF1:	MOVSI 1,FDVOPN!FDVACT	;TURN OFF OPEN BIT
	ANDCAM 1,0(IOS)
FIFOFL:	MOVEI 1,OPNX8	;RETURN DEVICE OFF LINE INDICATION
	POPJ P,


;	MTOPR CALL FOR PDP-15 DEVICES.
;ONLY CURRENTLY IMPLEMENTED FEATURE IS THAT ALLOWING PSI CHANNEL TO BE SET.
;MTOPER DIRECTED TO DEVICE FIF: RESULTS IN A CALL TO FIFOP.

FMTOPR:	MOVE 4,0(IOS)	;GET STATUS BITS
	MOVEI 1,DESX5	;ERROR IF NOT OPEN
	TLNN 4,FDVOPN	;OPEN ?
	JRST FMTOER	;NO. ERROR

	CAIE UNIT,FIFDVN	;IS THIS FOR THE PDP-15 ITSELF ?
	JRST FMTOP1		;NO

	MOVE 1,2	;YES, PUT OP WHERE FIFOP EXPECTS IT
	MOVE 2,3
	FIFOP		;CALL FIFOP
	JFCL		;IGNORE ERROR
	POPJ P,		;EXIT

FMTOP1:	MOVEI 1,DESX1	;FOR DEVICE, GIVE ERROR IF BAD OP
	CAIE 2,FMTOP	;GOOD OP ?
	JRST FMTOER	;NO

	CAILE 3,MAXCHN	;LEGAL CHANNEL ?
	JRST FMTOER	;NO

	NOSKED		;KEEP LEVEL 8 FROM RUNNING WHILE WE CHANGE CHANNEL
	DPB 3,[POINT 6,0(IOS),35]	;CHANGE IT
	OKSKED		;OK, LET TIME SHARRING RUN

FMTOER:	POPJ P,		;EXIT

;MONITOR MODE SHORT MSG OUTPUT TO 15 - USER CONTEXT DISMISSES CALLER
;2= FIRST 2 PDP15 DATA WORDS
;3 = XWD DATA WORD, DELAYED READ BIT OR ZERO,  UNIT = DEVICE NO.
;CLOBBERS 1-3, SKIP RETURN IF OK, NO SKIP IF ERROR

MFIFOU:	PUSH P,7		;SAVE THIS
	PUSH P,0(IOS)		;AND INITIAL STATUS
	MOVSI 7,FDVACT!FDVPAK!FDVOUT	;SET THESE

	MOVEI 1,1+2		;GET THI MANY WORDS
	PUSHJ P,GTIOWD
	PUSH P,1

	MOVEM 2,1(1)		;PUT FIRST PAR OF MESSAGE AWAY
	MOVEM 3,2(1)		;DITTO SECOND

	MOVEI 3,3		;OUTPUT 3 WORDS
	MOVEI 1,1(1)		;MAKE IOWD
	HRLI 1,-2
	MOVE 2,0(P)	;GET PLACE TO PUT THEM
	MOVEM 1,0(2)		;PUT THEM THERE
	HRLI 2,-1		;NOW HAVE AOBJN WORD IN 2
	SETZ 1,			;SAY NO DATA

	PUSHJ P,FIFIO		;PUTIT OUT
	CAIA
	AOS -3(P)

	POP P,1			;RELEASE WORDS
	PUSHJ P,RLIOWD

	POP P,7			;GET INITIAL STATUS
	MOVSI 1,FDVPAK
	TDNN 7,1
	ANDCAM 1,0(IOS)

	POP P,7
	POPJ P,




;LEVEL 8 PROCESS FOR PDP15.  CURRENTLY USED ONLY FOR PSI'S FROM -15 DEVICES
;INIT PROCESS, CALLED FROM DDUMP

FIFBEG:	MOVSI 1,(1B1)	;START FORK OF JOB 0
	CFORK
	BUG(HLT,<PDP15 - CAN'T CREATE ASYNCH FORK>)

	MOVEI 2,FIF8B	;START IT UP
	MSFRK
	RET

;LEVEL 8 PROCESS, START HERE

FIF8B:	MOVSI 1,UMODF		;ESTABLISH JSYS CONTEXT
	MOVEM 1,FPC
	JSYS MENTR

FIF80:	MOVEI 1,FCKPSI	;WAIT FOR THIS TO BE NON-0
	CALL DISN
	
	SETZM FCKPSI	;CLEAR THE FLAG
	MOVSI 5,-NFIFDV	;FIND DEVICE WHICH CAUSED IT
FIF81:	MOVE 4,FDVIDX(5)	;INDEX TO THIS DIEICES TABLES
	HRR 3,4		;JOB TABLE INDEX TO 3
	HRL 3,FDVCHR(5)	;-NO. OF SUB DEVICES


FIF84:	MOVE 6,0(3)	;GET STATUS BITS FOR THIS DEVICE
	TLNN 6,FDVOPN	;IS THIS ONEE OPEN
	JRST FIF82	;NO, IT AIN'T THE ONE

	TRNE 6,FDVPSI	;YES, IS THIS THE ONE?
	JRST FIF83	;YES

FIF82:	ADD 4,BHC+1	;NO, BUMP JOB TABLE INDEX
	AOBJN 3,FIF84	;GET NEXT SUBDEVICE
	AOBJN 5,FIF81	;GET NEXT DEVICE
	JRST FIF80	;NO MORE, KEEP WAITING


FIF83:	MOVEI 6,FDVPSI	;TURN OFF PENDING BIT
	ANDCAM 6,0(3)
	MOVEI 6,FDVPSA	;AND SET ACTIVE BIT
	IORM 6,0(3)	;IN STATUS WORD

	HLR 2,4		;GET INDEX TO JOB TABLE
	HLRZ 2,0(2)	;GET  FORK INDEX OF OPENER
	LDB 1,[POINT 6,0(3),35]	;GET CHANNEL
	CALL PSIRQF	;REQUEST PSI THIS FORK

	JRST FIF82	;SEE IF THERE ARE OTHERS


	;SET DEVICE STATUS, DESIRED STATUS IN 1
FIFSDS:	MOVE 2,[XWD FDVPAK!FDVJAM!FDVDTL!FCHOKO!FCHOKI!FDVERR!FDVDED,777B26]	;ONLY THESE BITS MAY BE SET
	AND 1,2
	TLZE 1,FDVJAM	;TRYING TO SET JAM MODE?
	JRST [	CAIE UNIT,FIFDVN	;YES, MUST BE DEVICE FIF
		JRST FIFSD1
		MOVE 3,FIFUSR
		MOVE 4,CAPMSK
		TRNN 4,WHEEL!OPR	;IF WHEEL
		CAMN 3,JOBNO		;OR IF HE OWNS THE 15
		TLO 1,FDVJAM		;ALLOW JAM MODE
		JRST .+1  ]
FIFSD1:	NOSKED
	CHNOFF FIFCHN
	ANDCAM 2,0(IOS)		;RESET ALL SETTABLE BITS
	IORM 1,0(IOS)		;SET USERS VALUES
	CHNON FIFCHN
	OKSKED
	POPJ P,



;FIFOP - JSYS TO PERFORM CONTROL OPERATIONS ON PDP15
;	TYPE OF OPERATION IS DETERMINED BY CONTENTS OF AC1, WHICH
;	INDEXES INTO FIFOPT BELOW
;	SKIP RETURNS IF ALL IS OK, NO SKIP WITH ERR CODE IN 1

FIFOPT:	FIFASS	;SET 15 (AND IMP) DOWN, AND ASSIGN 15 TO THIS JOB(FOR RELOADING AND DEBUGGING)
	SJAMAD	;SET 15 MEMORY ADDRESS FOR NEXT JAM MODE OPERATION FROM AC2
	RESFIF	;STOP, RESET 15
	STRFIF	;START 15 FROM ADDRESS IN SWITCHES
	DASFIF	;DEASSIGN 15
	WTFDED	;WAIT FOR FIFONL TO BE -1
	DBGFIF	;SET -15 DEBUG SWITCH
	RDBGSW	;RESET DEBUG SWITCH (I.E. TAKE OUT OF DEBUG MODE)
;ADD FIFOPS' HERE
NFIFOP==.-FIFOPT
	FOPERR	;ERROR, ILLEGAL FIFOP CODE

.FIFOP::JSYS MENTR
	CAIL 1,0
	CAIL 1,NFIFOP
	MOVEI 1,NFIFOP
	JRST @FIFOPT(1)

FIFASS:	SKIPG FIFP	;IF NOT AVAILABLE, WON'T WORK
	JRST [	MOVEI 1,ASNDX1
		JRST ERRD  ]
	PUSHJ P,FCKCAP		;SEE IF THIS GUY CAN DO THIS
	SKIPGE 1,FIFUSR
	JRST FIFAS2	;15 FREE
	CAMN 1,JOBNO
	JRST FIFOPX	;ALREADY ASSIGNED TO THIS GUY 
FIFAS1:	MOVEI 1,DEVX2
	JRST ERRD	;SOMEBODY BEAT HIM TO IT

FIFAS2:	MOVEI 1,FIFXTS	;WAIT FOR 15 TO BE IDLE
	SKIPGE 0(1)
	PUSHJ P,DISGE
	MOVEI 1,FIFCLO	;MAKE SURE 15 QUEUE IS EMPTY
	SKIPE 0(1)
	PUSHJ P,DISE
	MOVE 1,JOBNO	;ONLY THIS JOB MAY RUN THE 15
	MOVEM 1,FIFUSR
FIFOPX:	AOS 0(P)
	JRST MRETN

;SET JAM MODE ADDRESS, 2 = 15 MEM ADR
SJAMAD:	MOVEM 2,FJAMAD
	JRST FIFOPX

;BAD FIFOP CODE
FOPERR:	MOVEI 1,FOPX1
	JRST ERRD

;RESET 15
RESFIF:	PUSHJ P,FCKCAP
	MOVEI 1,FOPX4
	MOVE 2,JOBNO
	CAME 2,FIFUSR
	JRST ERRD	;MUST HAVE 15 ASSIGNED
	CONO DVA,FFRST!FIFCHN
	JRST FIFOPX

;START 15
STRFIF:	PUSHJ P,FCKCAP
	MOVEI 1,FOPX4
	MOVE 2,JOBNO
	CAME 2,FIFUSR
	JRST ERRD

	PUSHJ P,DVAINI	;INIT DEVICE A FIRST
	CONO DVA,FIFSTR!FIFCHN
	MOVEI 1,^D200		;WAIT 200 MILLISECONDS FOR 15 TO GET GOING
	DISMS
	MOVSI 5,-NFIFDV		;FIND OPEN SUB DEVICES...
TELFD1:	HRLZ 4,FDVCHR(5)
	MOVE 3,FDVIDX(5)
TELFD4:	MOVE 2,0(3)		;AND NOTIFY THEM ...
	TLNE 2,FDVOPN		;THAT THE -5 HAS BEEN RELOADED
	JRST TELFD3
TELFD2:	AOBJN 3,.+1
	AOBJN 4,TELFD4
	AOBJN 5,TELFD1
	JRST FIFOPX

TELFD3:	MOVSI 2,FDVDWN!FDVOPN	;RESET THESE
	XORM 2,0(3)	;IN STATUS WORD
	HLRZ 2,3
	HRRZ 2,0(2)		;GET JOB NO. OF JOB USING -15
	HLRZ 1,JOBPT(2)
	CAIN 1,-1
	JRST TELFD2
	HRROI 2,[ASCIZ/
PDP-15 RESTARTED.
/]				;AND TELL IT 15 HAS BEEN RESTARTED
	SKIPG FIFONL
	HRROI 2,[ASCIZ /
PDP-15 CRASH. NOT LOADED.
/]
	JSYS 775		;SPECIAL TTMSG JSYS
	JRST TELFD2

;DEASSIGN 15
DASFIF:	MOVEI 1,DEVX2
	MOVE 2,FIFUSR
	CAME 2,JOBNO
	JRST ERRD
	SETOM FIFUSR
	JRST FIFOPX

;WAIT FOR 15 TO DIE
WTFDED:	MOVEI 1,FIFONL
	PUSHJ P,DISL
	JRST FIFOPX		;BYE-BYE

DBGFIF:	PUSHJ P,FCKCAP		;SEE IF HE CAN DO THIS
	SKIPL 1,FDBGSW		;YES, IS IT ALREADY SET?
	CAMN 1,JOBNO		;YES, BY THIS JOB?
	CAIA		
	JRST FIFAS1		;SOMEBODY GOT HERE FIRST

	MOVE 1,JOBNO		;OK, SET IT
	MOVEM 1,FDBGSW

	JRST FIFOPX		;EXIT


RDBGSW:	PUSHJ P,FCKCAP
	SKIPGE 1,FDBGSW		;YES, IS IT SET?
	JRST FIFOPX		;NO, IGNORE
	CAMN 1,JOBNO		;YES, BY THIS JOB?
	JRST [	MOVEI 1,FOPX5	;NO, BAD ATTEMPT
		JRST ERRD]

	SETOM FDBGSW		;OK, RESET IT
	JRST FIFOPX		;EXIT


FCKCAP:	PUSH P,2		;ROUTINE TO CHECK CAPS FOR FIFOP
	PUSH P,1
	MOVEI 1,400000		;THIS FORK
	RPCAP
	TRNN 2,WHEEL+OPER	;GET CAPS POSSIBLE THIS JOB
	JRST FCAPER		;ILLEGAL

	POP P,1			;OK, RETURN
	POP P,2
	POPJ P,

FCAPER:	POP P,2			;BAD ATTEMPT, RESTORE 2
	MOVEI 1,WHELX1
	JRST ERRD




END
