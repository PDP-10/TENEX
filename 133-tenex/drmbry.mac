;<133-TENEX>DRMBRY.MAC;4    10-MAR-75 20:24:00    EDIT BY UNTULIS
;<133-TENEX>DRMBRY.MAC;3    10-MAR-75 20:13:02    EDIT BY UNTULIS
;<133-TENEX>DRMBRY.MAC;2     6-MAR-75 12:33:36    EDIT BY UNTULIS
;CHANGED DRUM BAD COMMAND PNTR... FROM CHK TO NTE BUG
;<TENEX-MON>DRMBRY.MAC;20     8-JUL-74 10:08:40	EDIT BY LYNCH
; MODIFIED BAD BAND NUMBERS TO REFLECT FIXING OF ALL BUT ONE BAND
;<TENEX-MON>DRMBRY.MAC;19     7-MAY-74 01:44:00	EDIT BY KREMERS
;BAD EDIT
;<TENEX-MON>DRMBRY.MAC;18     6-MAY-74 23:02:56	EDIT BY KREMERS
;<TENEX-MON>DRMBRY.MAC;17     6-MAY-74 22:57:42	EDIT BY KREMERS
;MADE BAND 31 BAD
;<TENEX-MON>DRMBRY.MAC;16     6-FEB-74 03:15:21	EDIT BY KREMERS
;<TENEX-MON>DRMBRY.MAC;15    30-JAN-74 23:04:23	EDIT BY KREMERS
;CORRECT CODING ERROR
;<TENEX-MON>DRMBRY.MAC;14     4-JAN-74 01:17:11	EDIT BY KREMERS
;<TENEX-MON>DRMBRY.MAC;13     3-JAN-74 15:39:29	EDIT BY KREMERS
;<TENEX-MON>DRMBRY.MAC;12    18-DEC-73 07:16:47	EDIT BY KREMERS
;<TENEX-MON>DRMBRY.MAC;11    18-DEC-73 04:06:04	EDIT BY KREMERS
;<TENEX-MON>DRMBRY.MAC;10    18-DEC-73 00:47:04	EDIT BY KREMERS
;<TENEX-MON>DRMBRY.MAC;9    13-DEC-73 05:27:50	EDIT BY KREMERS
;<TENEX-MON>DRMBRY.MAC;8    13-DEC-73 05:11:31	EDIT BY KREMERS
;<TENEX-MON>DRMBRY.MAC;7    13-DEC-73 04:33:56	EDIT BY KREMERS
;MODIFIED COMMAND UNQUEING AND TIMING CHECK STUFF
;<KREMERS>DRMBRY.MAC;2    29-NOV-73 05:52:30	EDIT BY KREMERS
;ADDED DISK SWAPPING STUFF
;<TENEX-MON>DRMBRY.MAC;5    16-NOV-73 09:27:28	EDIT BY BERGER
;<TENEX-MON>DRMBRY.MAC;4     9-OCT-73 10:11:27	EDIT BY LYNCH
; CHANGED IDLE BAND LOGIC TO OCCUR ON EVERY SECTOR INTERRUPT TO KEEP STATIC CHARGE OFF AMP CIRCUITS
;<TENEX-MON>DRMBRY.MAC;3    30-SEP-73 18:01:35	EDIT BY LYNCH
; CORRECTED IDLING RECYCLE LOGIC
; ADDED BAND 102 AS A BAD BAND.
;<SRIMON131>DRMBRY.MAC;5    25-JUL-73 17:11:28	EDIT BY KREMERS
;<SRIMON131>DRMBRY.MAC;4	10 JULY 73	EDIT BY KREMERS
;<SRIMON131>DRMBRY.MAC;1	1-MAY-73 0100	EDIT BY KREMERS
;<TENEX-130>DRMBRY.MAC;17    30-NOV-72  0:48:26	EDIT BY CLEMENTS
;<TENEX-130>DRMBRY.MAC;16    29-NOV-72 13:20:27	EDIT BY TOMLINSON
;<TENEX-130>DRMBRY.MAC;15    20-NOV-72 15:10:26	EDIT BY TOMLINSON
;<TENEX-130>DRMBRY.MAC;14     9-NOV-72 19:41:26	EDIT BY TOMLINSON
; ISOLATING FOR SEPARATE ASSEMBLY -- ADDED TITLE, BGHERE, AND END
;<TENEXDLM>DRMBRY.MAC;13    22-SEP-72 15:22:41	EDIT BY MURPHY

	SEARCH	PROLOG
	TITLE	DRM

;23 MAR 72, 1259:
;BRYANT DRUM DRIVER - D. MURPHY

	INTERN DRMIO,DRMSV,DRMIOI,DRMRST,DRMES,DRMEP,NDRMEW,DRMSEC
EXTERN	DSKIO
	EXTERN TODCLK,SWPDON,PWRDWN,DRUMP,PRELRQ
EXTERN	BUGHLT,BUGCHK,BITS,DEVMPE,BUGNTE
	EXTERN DRMTIM						;***SRI-AIC***
	INTERN DRMCHK						;***SRI-AIC***

DRM==170			;DEVICE NO. OF DRUM 		***SRI-AIC***
DRMSEC==22		;NO. OF DRUM SECTORS
DRMBND==^D170		;NO. OF DRUM BANDS
DRMPGS==DRMSEC*DRMBND	;NO. OF PAGES ON BRYANT DRUM		***SRI-AIC***
NRETRY==7		;NUMBER OF REPEAT TRIES ON ERROR
DRUMCP==64		;LOCATION OF DRUM COMMAND POINTER
DRMEST==65		;LOCATION OF ERROR STATUS DUMP LOCATION



LS DRMCL,DRMSEC*2+1	;DRUM COMMAND LIST

LS DRMCTM,DRMSEC	;TIMES COMMANDS PLACED ON LIST			***SRI-AIC***
LS DRMRI,DRMSEC		;DRUM READ  QUEUE INPUT POINTER
LS DRMRO,DRMSEC		;DRUM READ  QUEUE OUTPUT POINTER
LS DRMWI,DRMSEC		;DRUM WRITE QUEUE INPUT POINTER
LS DRMWO,DRMSEC		;DRUM WRITE QUEUE OUTPUT POINTER

LS LASTCP,1		;COMMAND LIST POINTER ON ENTRY TO INTERRUPT SERV
LS DRMCMC,1		;COMMANDS PENDING COUNT
LS NDRMCK,1	;LH=CORRECT-INCORRECT CMD CTR OF LAST SUCH ERROR. RH=COUNT OF DRMCHKS  ***SRI-AIC**
LS IDLBND,1	;CMND WORD (LESS SEC. SDR) FOR IDLING CMD (0 WRD READ)	***SRI-AIC***
		;CHANGED AS EACH DRM REQUEST IS QUEUED,  BECAUSE WE ARE	***SRI-AIC***
		;HAVING TOO MANY ERRORS ON SAME IDLING ADDRESS		***SRI-AIC***

NDRMEW==4		;NUMBER OF DRUM ERROR WORDS FOR GETAB

LS DRMCFE,1		;COUNT OF CFM ERRORS
LS DRMLER,3		;LAST ERRONEOUS DRUM COMMAND AND ERROR BITS

LS DRMMLE,1		;COUNT OF MISSED LATENCY ERRORS
LS DRMSVR,1		;INTERRUPT SERVICE RETURN

;										BEGIN ***SRI-AIC***
;DEFINE SWAPPING SPACE PARAMETERS.

;NOTE:  SWAPPING DEVICE IS VIRTUAL "DRUM" CONSISTING PHYSICALLY
;OF THE BRYANT DRUM ITSELF AND LOGICAL DISK PACK 5. 
;INITIAL SWAPPING WILL TAKE PLACE ON THE DRUM, WITH OVERFLOW GOING TO THE DISK.
;TOTAL NUMBER OF SWAPPING PAGES ON THE SYSTEM IS DETERMINED BY THE SIZE OF THE DST (SEE "PARAMS.AI").
;THIS SPACE IS FURTHER DEVIDED INTO "BANDS" AND SECTORS AS ON A REAL DRUM.
;THROUGHOUT WHAT FOLLOWS THE VARIABLE "DRMBND" REFERS TO THE ACTUAL BRYANT BAND NO.
;WHILE THE SYMBOL "SWPBND" REFERS TO THE VIRTUAL SWAPPING BAND NO. OF WHICH THE
;PHYSICAL DRUM IS A SUBSPACE.

SWPBND==NDST/DRMSEC		;DEFINE TOTAL NUMBER OF VIRTUAL BANDS
INTERN DRMBND,DRMPGS		;DSKPAK NEEDS THIS

;										END ***SRI-AIC***

;DRUM ERROR FLAGS SAVED IN DRMEST (65) WHEN ERROR OCCURS

CFM==2			;CHECK FIELD (=LONGITUDINAL PARITY) MISMATCH
PCI==4			;PARITY FROM COMPUTER INCORRECT
CRJ==10			;COMMAND REJECT
ISA==20			;ILLEGAL STARTING ADDRESS
RAM==100		;RECORD ADDRESS MISMATCH
DNA==200		;DEVICE NOT AVAILABLE (POWER OFF OR HW FAILURE)
DTL==1000		;DATA LATE FROM MEMORY
IWC==2000		;ILLEGAL WORD COUNT
IPO==4000		;ILLEGAL PAGE OVERFLOW
PAV==10000		;PROTECTED AREA VIOLATION

EC1==4			;ERROR TYPE 1 (CFE, PCI, DTL)
EC2==10			;ERROR TYPE 2 (EVERYTHING ELSE)

IRDRM==200		;"INT REQ" BIT IN DRUM CONI
DRMBSY==100		;"BUSY" BIT IN DRUM CONI
DSTOP==103+DRMCHN*10	;DISCONNECT & INTERRUPT CONO
DGO==102+DRMCHN*10	;GO-CHAIN CONO
DGONO==101+DRMCHN*10	;GO-NO-CHAIN (ONE COMMAND ONLY) CONO
DRESET==100		;RESET CONO
DRMCKT==^D5000	;AMOUNT OF TIME BETWEEN DRMCHK'S IF ANY TRANSFERS IN PROGRESS	***SRI-AIC***
BADTIM==^D10000	;AMOUNT OF TIME A COMMAND MAY STAY IN THE LIST		***SRI-AIC***
BADBND==224	;LOWEST BAD BAND					***SRI-AIC***
BDBND1==102							;***SRI-AIC***
BDBND2==105							;***SRI-AIC***

;BITS IN COMMAND WORDS

INT==100000		;INTERRUPT APR ON COMPLETION (IN D.A.W.)
WC512==40		;BIT FOR WORD COUNT=512 (IN D.A.W.)
IO==40000		;I/O BIT (IN DRUM ADDRESS WORD)
DT==400000		;DATA TRANSFER BIT
DIS==200000		;DISCONNECT BIT

;DRUM IO DRIVER

; AC1/ 18-35 CORE PAGE NUMBER (CST INDEX) OF PAGE
;      DWRBIT WRITE OPERATION IF 1, READ IF 0

DRMIO:	SKIPG DRUMP		;DRUM ON SYSTEM?
	JRST DSKIO		;NO, USE DISK

	HRRZ 2,CST1(1)		;GET SWAPPING ADDRESS

	CAIL 2,<DRMBND>B29	;IS THIS A BRYANT BAND?				***SRI-AIC***
	JRST DSKIO		;NO, GO TO DISK INSTEAD				***SRI-AIC***
	PUSH P,1		;SAVE THIS
	MOVEI 2,DRMCKT		;IF FIRST COMMAND				***SRI-AIC***
	SKIPGE DRMCMC		;RESET DRMTIM					***SRI-AIC***
	MOVEM 2,DRMTIM		;TO START TIMING ROUTINE		***SRI-AIC***
	AOSG DRMCMC		;INCREMENT COMMANDS IN PROGRESS COUNT
	JFCL			;CONO DRM,DGO FOR SPECIAL OPERATION
	MOVE 2,CST1(1)		;GET SWAPPING ADDRESS				***SRI-AIC***
	ANDI 2,37		;GET SECTOR NUMBER
	ADDI 1,CST3		;MAKE POINTER OUT OF PAGE NUMBER
	HLLZM 1,0(1)		;STORE WRITE BIT, 0 MARKS LAST WORD
	PIOFF			;MUST NOT INTERRUPT QUEUEING
	TLNE 1,DWRBIT		;IF WRITE REQUEST				***SRI-AIC***
	JRST	[HRRM 1,@DRMWI(2)	;ADD EMTRY TO END OF WRITE QUEUE	***SRI-AIC***
		HRRZM 1,DRMWI(2)						;***SRI-AIC***
		JRST DRMOP2]							;***SRI-AIC***

	HRRM 1,@DRMRI(2)	;PUT THIS ENTRY ON APPROPRIATE QUEUE
	HRRZM 1,DRMRI(2)	;UPDATE INPUT (LAST WORD) POINTER
DRMOP2:	PION
	SUBI 2,2		;LOOK AT SECTOR -2
	JUMPGE 2,.+2
	ADDI 2,DRMSEC		;WRAPAROUND
	SKIPN DRMWO(2)
	SKIPE DRMRO(2)		;THAT SECTOR NON-EMPTY?
	JRST DRMOP1		;YES, SO COMMAND MUST BE WAITING
	LSH 2,1			;COMPUTE INDEX INTO COMMAND LIST
	MOVSI 3,INT		;CAUSE INTERRUPT AT THAT SECTOR WHICH
	IORM 3,DRMCL(2)		;WILL SETUP COMMAND FOR THIS SECTOR
DRMOP1:	POP P,1
	RET

;INTERRUPT SERVICE

DRMSV:	XWD DRMSVR,.+1		;CALLED BY JSYS IN PISRV
	CONSZ DRM,IRDRM
	JRST DRMINT
	JRST @DRMSVR

;DRUM INTERRUPT ROUTINE
;WILL CLEAN UP AFTER PAGE JUST TRANSFERRED, AND SETUP COMMAND
;FOR NEXT SECTOR (I.E. LAST SECTOR + 2)

DRMINT:	SKIPE PWRDWN
	JRST [	CONO DRM,DRESET	;FLUSH PI ASSMT
		JRST DRMINX]

	HRRZ 1,DRUMCP		;DRUM COMMAND POINTER
	CAIN 1,DRMCL+2*DRMSEC	;END OF COMMAND LIST?
	JRST [	MOVEI 1,DRMCL	;SHOULDN'T HAPPEN EXCEPT IN SPEC'L OPN
		MOVEM 1,DRUMCP	;MAKE IT RIGHT
		JRST .+1]

	MOVEM 1,LASTCP		;SAVE IT FOR LATER CHECK
	SUBI 1,DRMCL+2		;CONVERT TO INDEX INTO DRMCL
	TRNE 1,1		;COMMAND LIST PARITY STILL CORRECT?
	BUG(HLT,<DRUM COMMAND POINTER FOULED, POINTS TO ODD WORD>)
	SKIPE 2,DRMEST		;ERRORS ?					***SRI-AIC***
	JRST DRMERR		;YES						***SRI-AIC***
	JUMPGE 1,.+2
	MOVEI 1,DRMSEC*2(1)	;WRAPAROUND					***SRI-AIC***
	HRRZS DRMCL+1(1)	;CLEAR ANY OLD ERROR BITS
	MOVEI 2,0(1)		;GET CL INDEX
	LSH 2,-1		;MAKE INTO SECTOR NUMBER
	SETZM DRMCTM(2)		;KILL THE TIMER ON THIS COMMAND		***SRI-AIC***

	HRRZ 4,IDLBND		; SRI-AI ; CHANGE IDLE BAND EVERY SECTOR INTERRUPT
	ADDI 4,100		; SRI-AI ; ADD ONE (SHIFTED)
	CAIL 4,31*100	; SRI-AI ; COMPARE WITH LOWEST BAD BAND
	SETZ 4,			; SRI-AI ; REVERT BACK TO ZERO IF UP TO IT
	HRRM 4,IDLBND		; SRI-AI ; 
	IOR 2,IDLBND		;WC0 AND "RANDOM" BAND ADR FOR THIS SEC	***SRI-AIC***
	EXCH 2,DRMCL(1)		;EXCHANGE WITH COMMAND JUST COMPLETED
	TLNN 2,WC512		;WAS IT A DATA TRANSFER COMMAND?
	JRST DRMI1		;NO

	AND 2,[XWD IO,37]	;YES, KEEP ONLY SECTOR AND IO BITS		***SRI-AIC***
	MOVEI 3,DRMRO(2)	;UN QUEUE COMMAND, WAS THIS A READ ?		***SRI-AIC***
	TLNE 2,IO		;CHECK						***SRI-AIC***
	MOVEI 3,DRMWO(2)	;NO, WRITE				BEGIN ***SRI-AIC***
	MOVE 4,0(3)		;GET QUEUE POINTER
	HRRZ 4,0(4)		;REMOVE FROM QUEUE
	JUMPN 4,DRMI5		;JUMP IF NOT LAST ONE
	TLNE 2,IO		;LAST ONE, MUST UPDATE OUTPUT POINTER
	JRST [	MOVEM 3,DRMWI(2)	;WRITE
		JRST DRMI5]
	MOVEM 3,DRMRI(2)	;READ
DRMI5:	EXCH 4,0(3)

	HRRZ 1,DRMCL+1(1)	;YES, GET CORE ADDRESS
	LSH 1,-^D9		;CONVERT TO PAGE NUMBER
	JSP 4,SWPDON		;NOTIFY SWAPPER THAT XFER COMPLETED
	SOSGE DRMCMC		;DECREMENT COMMANDS IN PROGRESS CNT
	JFCL			;CONO DRM,DGONO  FOR SPECIAL OPER'N


;DRMINT...

DRMI1:	MOVE 1,LASTCP
	SUBI 1,DRMCL-2		;CONVERT TO INDEX, LAST SECTOR +2
	CAIL 1,2*DRMSEC
	SETZ 1,			;WRAPAROUND
	LSH 1,-1		;CONVERT TO INDEX TO QUEUES

	SKIPN 2,DRMRO(1)	;CHECK READ QUEUE FIRST			***SRI-AIC***
	SKIPE 2,DRMWO(1)	;THEN WRITE					***SRI-AIC***
	CAIA			;FOUND ONE					***SRI-AIC***
	JRST DRMI2		;NOTHING FOUND, EXIT				***SRI-AIC***

DRMI4:	SUBI 2,CST3		;CONVERT BACK TO CORE PAGE NUMBER

	MOVE 3,TODCLK		;MARK TIME THIS COMMAND WAS PLACED  ON LIST	***SRI-AIC***
	MOVEM 3,DRMCTM(1)							;***SRI-AIC***

	LSH 1,1
	MOVSI 3,DWRBIT		;GET WRITE BIT
	AND 3,CST3(2)
	TLZE 3,DWRBIT		;USE IT TO SET IO BIT IN DRUM COMMAND
	TLOA 3,WC512+DT+INT+IO
	TLO 3,WC512+DT+INT	;USUAL COMMAND BITS
	HRR 3,CST1(2)		;DRUM ADDRESS
	LSH 2,^D9		;CONVERT TO CORE ADDRESS
	MOVEM 2,DRMCL+1(1)	;PUT CORE ADDRESS IN COMMAND LIST
	MOVEM 3,DRMCL(1)	;DRUM ADR AND COMMAND 
	SUBI 1,4
	JUMPGE 1,.+2		;GET ADR OF SEC -2
	ADDI 1,DRMSEC*2
	MOVSI 2,INT
	IORM 2,DRMCL(1)		;MAKE SURE WE GET INTERRUPT
DRMI2:	MOVE 4,LASTCP		;COMMAND POINTER ON ENTRY
	CAME 4,DRUMCP		;SAME AS COMMAND POINTER NOW?
	JRST DRMI3		;NO, MISSED LATENCY
DRMINX:	UNBRK DRM		;DISMISS BREAK


;ERROR CONDITIONS

;ERROR FLAGS DETECTED IN 65


DRMERR:	MOVEI 1,2(1)		;RESET COMMAND POINTER TO CORRECT COMMAND	***SRI-AIC***
	MOVEI 3,0(1)	;GET POINTER TO TIME LIST			***SRI-AIC***
	LSH 3,-1	;POINTER IS SECTOR NUMBER			***SRI-AIC***
	SETZM DRMCTM(3)		;CLEAR TIME ON TO PREVENT TIME OUTS		***SRI-AIC***

	MOVEM 2,DRMLER+2	;SAVE ERROR BITS
	MOVSI 3,DRMCL(1)	;SAVE COMMAND WORDS
	HRRI 3,DRMLER
	BLT 3,DRMLER+1

	AOS DRMCFE	;BUMP COUNT OF ERRORS		***SRI-AIC***
	SETZM DRMEST	;CLEAR STATUS LOC.			***SRI-AIC***
	MOVE 3,DRMCL(1)	;GET LAST COMMAND			***SRI-AIC***
	TLNN 3,WC512	;IS IT A TRANSFER COMMAND?		***SRI-AIC***
	JRST DRMEGO	;NO, IGNORE ERRORS ON 0 WORD XFERS	***SRI-AIC***

	HLRZ 3,DRMCL+1(1)
	JUMPN 3,DRMER1		;PREVIOUS ERRORS THIS TRANSFER
	MOVEI 3,<NRETRY>B21	;SETUP COUNT FOR RETRYS
;							DELETED INST ***SRI-AIC***
DRME1:	TRNN 2,CFM+PCI+DTL	;DATA ERROR?			***SRI-AIC***
	JRST DRMES		;NO
	MOVEI 2,EC1		;REMEMBER AS ERROR TYPE 1
;				DELETED INSTRUCTION		***SRI-AIC***
DRMES1:	IORI 2,0(3)		;PUT RETRY COUNT WITH ERROR BITS	***SRI-AIC***
	MOVSI 4,INT
	IORM 4,DRMCL(1)		;BE SURE IT INTERRUPTS ON RETRY
	TRNN 2,-1B21		;RETRY COUNT NOW 0?
	JRST DRMEP		;YES, CONSIDER ERROR PERMANENT
	HRLM 2,DRMCL+1(1)	;NO, STORE ERROR BITS AND RETRY COUNT

	LSH 1,-1		;SET TIME FOR CHECK ROUTINE			***SRI-AIC***
	MOVE 2,TODCLK									;***SRI-AIC**:
	MOVEM 2,DRMCTM(1)							;***SRI-AIC***

DRMEGO:	CONO DRM,DGO		;RESTART DRUM
	JRST DRMINX		;DEBREAK

DRMER1:	ANDI 3,-1B21		;GET THE PREVIOUS RETRY COUNT
	SUBI 3,1B21		;REDUCE IT
	JRST DRME1

;STRANGE DRUM ERROR

DRMES:	MOVEI 2,EC2		;REMEMBER AS ERROR TYPE 2
	JRST DRMES1		;GO TRY AGAIN IF CONTINUED

;UNRECOVERABLE ERROR

DRMEP:	IORI 2,<NRETRY>B21	;IN CASE ON MANUAL GO TO DRMEGO-1
	MOVE 3,DRMLER+2		;ERROR BITS
	TRNE 3,1B33		;PCI?
	JRST [	MOVE 3,[SIXBIT /B.DRUM/]
		MOVEM 3,DEVMPE	;YES, REQUEST CORE SCAN
		ISB APRCHN
		HRLM 2,DRMCL+1(1)
		JRST DRMEGO]	;TRY AGAIN, ERROR MAY BE REMOVED
	BUG(CHK,<UNRECOVERABLE DRUM ERROR, DRMEGO-1$G TO RETRY>)
	HRRZ 2,DRMCL+1(1)	;GET CORE ADDRESS
	LSH 2,-^D9		;PAGE NUMBER
	MOVSI 3,SWPERR		;SET ERROR BIT IN
	IORM 3,CST3(2)		;CST3 ENTRY FOR DETECTION BY SWAPPER
	ADDI 1,DRMCL+2		;GO TO NEXT SECTOR
	CAIL 1,DRMCL+DRMSEC*2
	MOVEI 1,DRMCL
	MOVEM 1,DRUMCP
	CONO DRM,DGO		;RESTART DRUM
	JRST DRMINT		;PROCESS THIS SECTOR AS IF NO ERROR

;HERE IF COMMAND POINTER ADVANCED WHILE SETTING UP COMMAND
;MEANS COMMAND PROBABLY NOT EXECUTED
;THIS SHOULD ***NEVER*** HAPPEN. IF IT DOES, IT MEANS THIS INTERRUPT
;ROUTINE FAILED TO GET SERVICE AND COMPLETE IN ABOUT 1.9 MSEC

DRMI3:	CONO DRM,DRESET		;STOP DRUM
	BUG(NTE,<DRUM BAD COMMAND POINTER, CONTROLLER SCREWUP OR MISSED LATENCY>)
	MOVEM 4,DRUMCP
	JRST DRMEGO		;START DRUM AND DEBREAK

;											***SRI-AIC********* TO END OF PAGE

;WE GET HERE IF CLOCK2 LOGIC HAS DETECTED A DRUM TIMEOUT.
;MAY MEAN THAT THE DRUM IS HUNG-UP

DRMCHK:	SKIPE DRUMP	;IS THERE A DRUM?
	SKIPGE DRMCMC	;AND ARE THERE COMMANDS TO PROCESS?
	JRST DRMCK1	;NEITHER, EXIT NOTHING OT DO HERE

	AOS NDRMCK	;COUNT DRUM CHECKS

	MOVSI 4,-DRMSEC		;GET NUMBER TO CHECK
	
DRMCK2:	SKIPN DRMCTM(4)	;ANYTHING HERE ?
	JRST DRMCK3		;NO
	MOVE 1,TODCLK	;YES, GET TIME NOW
	SUB 1,DRMCTM(4)	;- TIME PLACED ON LIST
	CAILE 1,BADTIM	;BEEN THERE TOO LONG ?
	BUG(HLT,<DRM: COMMAND ON LIST FOR TOO LONG>)
DRMCK3:	AOBJN 4,DRMCK2	;NO, KEEP LOOKING

DRMCK1:	MOVSI 1,(1B1)	;RESET TIME TO INFINITY ..
	SKIPE DRMCMC	;IF NO COMMAND ON LIST
	MOVEI 1,DRMCKT	;ELSE COME BACK IN A WHILE
	MOVEM 1,DRMTIM

	RET		;EXIT




;				******* END ***SRI-AIC***

;INITIALIZE DRUM IO

;SPECIAL OPERATION MEANS TURNING THE DRUM OFF WHENEVER THERE ARE
;NO COMMANDS WAITING TO BE DONE. IT RESULTS IN SOMEWHAT SLOWER
;OPERATION, BUT IS USEFUL FOR DEBUGGING H'WARE AND/OR S'WARE.
;IT IS EFFECTED BY REPLACING THE JFCL'S WITH THE INDICATED CONO'S AT
;DRMIO+2 AND DRMI1-1

DRMIOI:	SETOM DST		;MAKE ALL DST ENTRIES EMPTY
	MOVE 1,[XWD DST,DST+1]
	BLT 1,DST+NDST-1
DRMRST:	SKIPG DRUMP		;DRUM EXISTS?
	RET			;NO
	MOVSI 1,-DRMSEC
DRMII2:	SETZM DRMRO(1)		;0 ALL OUTPUT QUEUE POINTERS
	SETZM DRMWO(1)
	SETZM DRMCTM(1)		;AND TIMER FOR THIS SECTOR				***SRI-AIC***
	MOVEI 2,DRMRO(1)
	MOVEM 2,DRMRI(1)	;INPUT POINTERS SET TO OUTPUT
	MOVEI 2,DRMWO(1)
	MOVEM 2,DRMWI(1)	;DRMQO(N) => ALL DRMQI(N)
	AOBJN 1,DRMII2
	MOVSI 1,DT		;WORD COUNT 0 COMMANDS =>
	MOVEM 1,IDLBND	;SETUP IDLE BAND ADR			***SRI-AIC***
	MOVSI 2,-2*DRMSEC
DRMII1:	MOVEM 1,DRMCL(2)	;WC0 COMMAND WITH CORRESPONDING SECTOR
	SETZM DRMCL+1(2)	;0 => ERROR BITS AND CORE ADDRESS
	ADDI 1,1		;INCREMENT SECTOR NUMBER
	AOBJN 2,.+1
	AOBJN 2,DRMII1
	MOVE 1,[XWD 600000,DRMCL]
	MOVEM 1,DRMCL+2*DRMSEC	;BRANCH COMMAND TO BEGINNING OF LIST
	SETZM DRMEST
	SETOM DRMCMC		;COMMAND COUNT WORD
	MOVEI 1,DRMCL
	MOVEM 1,DRUMCP		;START DRUM AT BEGINNING OF COMMAND LIST

	MOVSI 1,(1B1)	;SET CHECK INTERVAL TO INFINITY		***SRI-AIC***
	MOVEM 1,DRMTIM						;***SRI-AIC***
	CONO DRM,DRESET	;RESET THE DRUM				***SRI-AIC***
	CONO DRM,DGO
	RET

;THE FOLLOWING ROUTINES ARE IN THIS PACKAGE & CALLED FROM OUTSIDE.

INTERN ASDRMS		;ASSIGN SPECIFIC DRUM ADDRESSES
INTERN DRMASF		;ASSIGN A DRUM PAGE, EMPTIEST SECTOR.
INTERN ASDRM		;ASSIGN DRUM PAGE NEAR A SPECIFIC SECTOR
INTERN DEDRM		;DEASSIGN A DRUM PAGE
INTERN BNDLK,BNDULK	;ROUTINES TO PREVENT/ENABLE ASSIGNMENT OF
			;DRUM ADDRESSES AT PARTICULAR BANDS.
INTERN DRMINI		;INITIALIZATION ROUTINE FOR THE DRUM
DRMBSZ==<SWPBND+^D35>/^D36	;SIZE OF BIT TABLE CHUNK FOR ONE SECTOR		***SRI-AIC***
DRMNOS==SWPBND-<SWPBND/44>*44	;NUMBER OF BITS (SECTORS IN PTL WD	***SRI-AIC***
LS DRMBLK		;LOCKOUT WORD FOR DRUM BIT TABLE
LS DRMSC,DRMSEC		;FREE PAGE COUNT TABLE (ONE WORD/SECTOR)
LS DRMFRE		;TOTAL FREE PAGE COUNT FOR DRUM
LS BNDLO,DRMBSZ		;BAND MASK OUT TABLE
GS DRMBIT,DRMSEC*DRMBSZ	;DRUM BIT TABLE

LS DRMLSA,1		;LAST SECTOR ASSIGNED

Z==0
A==1
B==2
C==3
D==4
G==7
AA==10
BB==11
CC==12
DD==13
EE==14
FF==15
GG==16

;ASSIGN PAGE, EMPTIEST SECTOR

;"DRMASF" RETURNS CALLER+1 IF THE DRUM IS FULL OR UNAVAILABLE, ELSE
;CALLER+2 WITH THE DRUM ADDRESS ASSIGNED IN A.  THE SECTOR CHOSEN FOR
;THE ASSIGNMENT HAS THE MOST FREE PAGES.  "ASDRM" TRIES TO ASSIGN
;A PAGE AT SECTOR (A)+1 OR AS SOON AFTER AS POSSIBLE.  IT RETURNS CALLER+1
;IF NO FREE PAGES ARE LEFT OR CALLER+2 WITH THE DRUM ADDRESS IN A.

	INTERN DRMASN

DRMASF:	SKIPG DRMFRE		;ROOM AVAILABLE?
	JRST DRMSA3		;NO, RETURN BAD
	HRLZI C,-DRMSEC		;CHOOSE EMPTIEST SECTOR FOR PAGE ASSIGNMENT
	MOVE B,DRMSC(C)		;GET FREE PAGE COUNT FOR THIS SECTOR
	HRRZ A,C		;BEST SECTOR SO FAR IN 1.
	CAMG B,DRMSC+1(C)
	AOBJN C,.-3
	AOBJN C,.-2
	JUMPG B,DRMASL
	JRST DRMSA3		;RETURN CALLER+1 IF DRUM FULL

;ASSIGN PAGE NEAR GIVEN SECTOR

DRMASN:	JUMPL A,[AOS A,DRMLSA	;FREE CHOICE MEANS NEXT SECTOR
		CAIL A,DRMSEC
		SETZB A,DRMLSA	;WRAPAROUND
		JRST DRMASS]
ASDRM:	ANDI A,37
	CAIL A,DRMSEC		;CHECK FOR LEGAL ARGUMENT
	JRST DRMASF
DRMASS:	SKIPG DRMFRE
	JRST DRMSA3		;GO MAKE NO FREE PAGES RETURN
DRMAS1:	CAIGE A,DRMSEC-1
	AOJA A,.+2
	SETZ A,
	SKIPG DRMSC(A)
	JRST DRMAS1		;LOOP IF NO FREE PAGES HERE
DRMASL:	SOS DRMSC(A)		;DECREMENT NO. FREE PAGES ON THIS SECTOR
	MOVE B,A
	IMULI B,DRMBSZ
	HRLI B,-DRMBSZ
	SKIPE C,DRMBIT(B)
	JFFO C,SECFND
	AOBJN B,.-2
DBTFU:	BUG(HLT,<DRUM BIT TABLE FOULED, COUNT AND BITS DISAGREE>)

;CONVERT DRUM ADDRESS INTO INDEX INTO DST

	INTERN GDSTX

GDSTX:	TLNN 2,14		;INSIST ON REGULAR DRUM ADDRESS
	TLNN 2,2
	BUG(HLT,<GDSTX - BAD ADDRESS>)
	HRRZS 3,2		;SPLIT BAND AND SECTOR
	ANDI 3,37		;SECTOR
	LSH 2,-6		;BAND
	IMULI 2,DRMSEC
	ADDI 2,0(3)
	CAIL 2,NDST
	BUG(HLT,<GDSTX - BAD ADDRESS>)
	RET

	INTERN DASDRM

DASDRM:	CALL DEDRM
	JFCL
	BUG(HLT,<ATTEMPT TO DEASSIGN BAD OR UNASSIGNED DRUM ADDRESS>)
	RET

SECFND:	HLRO C,B
	MOVEI C,@BANDT(C)		;GET THE BAND NUMBER & 1 IN BIT 23
	LSH C,6			;POSITIONS THE BAND FIELD & 1 IN BIT 17
	IOR A,C			;DRUM ADDRESS NOW IN A
	MOVE C,BITS(D)		;GET BIT FOR BAND WORD
	ANDCAM C,DRMBIT(B)	;CLEAR THE BIT FROM THE BIT TABLE.
DRMSA1:	SOS DRMFRE		;DECREMENT TOTAL FREE PAGES ON DRUM
DRMSA2:	AOS (P)			;MAKE SKIP RETURN
DRMSA3:
DRMAS2:
RETN:	RET

	FOO==0
	REPEAT DRMBSZ,<XWD D,FOO+1B22
	FOO==FOO+44>
BANDT:
;ROUTINES TO ATTEMPT ASSIGNMENT OF A SPECIFIC DRUM ADDRESS

ASDRMS:	JSP 5,DRMBS
	TDNN D,DRMBIT(B)	;SKIP IF PAGE IS AVAILABLE
	JRST DRMSA3
	ANDCAM D,DRMBIT(B)
	SOS DRMSC(C)		;REDUCE FREE PAGE COUNT FOR THIS SECTOR
	JRST DRMSA1

;ROUTINE TO RELEASE A DRUM PAGE

DEDRM:	JSP 5,DRMBS
	TDNN D,BNDLO(A)		;CHECK IF BAND LOCKED OUT
	JRST DEDM1		;IS, GIVE OK RETURN
	TDNE D,DRMBIT(B)	;CHECK IF NOT YET ASSIGNED
	RET			;SKIP RETURN 
	IORM D,DRMBIT(B)
	AOS DRMSC(C)		;INCREMENT FREE PAGE COUNT FOR THIS SECTOR
	AOS DRMFRE
DEDM1:	AOS (P)
	RET			;MAKE DOUBLE SKIP RETURN

;CHECKS FOR LEGAL DRUM ADDRESS & GETS WORD & BIT INDICES TO BIT TABLE
;RETURNS BIT CHUNK WORD INDEX IN A, BIT TABLE WORD INDEX IN B,
;SECTOR NO. IN C, AND BIT POSITION MASK IN D

DRMBS:	ANDI A,-1
	MOVE C,A
	ANDI C,37
	CAIGE A,SWPBND*100	;LEGAL BAND ?				***SRI-AIC***
	CAIL C,DRMSEC		;LEGAL SECTOR?
	RET 
	AOS (P)
DRMSA0:	LSH A,-6		;GET BAND NO.
	IDIVI A,44		;WORD IN CHUNK & BIT IN WORD
	MOVEI D,1
	MOVN B,B
	LSH D,43(B)		;BIT MASK
	MOVE B,C
	IMULI B,DRMBSZ		;1ST WORD OF BIT CHUNK
	ADD B,A
	JRST (5)

;LOCK BAND
;ACCEPTS IN A BAND TO LOCK.
; RETURN 1 => ILLEGAL ADDRESS
; RETURN 2 => BAND LOCKED, NOT ALL PAGES WERE FREE
; RETURN 3 => BAND LOCKED, ALL PAGES WERE FREE

BNDLK:	JSP 5,BNDLUE
	SETZ D,
	TDNN C,BNDLO(A)
	JRST DRMSA3
	ANDCAM C,BNDLO(A)	;CLEAR BIT IN LOCKOUT TABLE
BNDLP:	TDNN C,DRMBIT(A)
	JRST BNDCON
	SUBI D,1
	ANDCAM C,DRMBIT(A)	;CLEAR BIT IN EACH OF SECTOR BIT TABLES
	SOS DRMSC(B)		;& ADJUST FREE PAGE COUNT
BNDCON:	ADDI A,DRMBSZ
	AOBJN B,BNDLP
	ADDM D,DRMFRE
	CAIG D,-DRMSEC
	JRST DRMSA3
	JRST DRMSA2

;UNLOCK BAND
;ACCEPTS IN A BAND TO LOCK.
; RETURN 1 => ILLEGAL ADDRESS
; RETURN 2 => BAND NOT PREVIOUSLY LOCKED
; RETURN 3 => UNLOCKED SUCCESSFULLY

BNDULK:	JSP 5,BNDLUE
	TDNE C,BNDLO(A)
	JRST DRMAS2		;NOT PREVIOUSLY LOCKED--MAKE ERROR RETURN
	IORM C,BNDLO(A)
BNDU1:	TDNE C,DRMBIT(A)
	JRST DBTFU
	IORM C,DRMBIT(A)
	AOS DRMSC(B)
	AOS DRMFRE
	ADDI A,DRMBSZ
	AOBJN B,BNDU1
	JRST DRMSA2

BNDLUE:	JUMPL A,RETN
	CAIL A,SWPBND								;***SRI-AIC***
	RET	 		;ILLEGAL ARGUMENT RETURN
	AOS (P)
	IDIVI A,44
	MOVN B,B
	MOVEI C,1
	LSH C,43(B)
	HRLZI B,-DRMSEC
	JRST (5)

;INITIALIZE DRUM BIT TABLES

DRMINI:	SETOM DRMBIT		;EACH "ONE" REPRESENTS A FREE PAGE
	MOVE A,[XWD DRMBIT,DRMBIT+1]
	BLT A,DRMBIT+SWPBND/44-1						;***SRI-AIC***
	MOVE A,[-1B<DRMNOS-1>]
	MOVEM A,DRMBIT+SWPBND/44						;***SRI-AIC***
	MOVE A,[XWD DRMBIT,DRMBIT+DRMBSZ]
	BLT A,DRMBIT+DRMSEC*DRMBSZ-1
	MOVE A,[XWD DRMBIT,BNDLO]
	BLT A,BNDLO+DRMBSZ-1	;INIT. BAND LOCKOUT TABLE TO ALL ONES
	MOVEI A,NDST		;TOTAL NO. OF SWAPPING PAGES		***SRI-AIC***
	MOVEM A,DRMFRE
	MOVEI A,SWPBND		;NO. DANDS=NO. PAGES/SECTOR		***SRI-AIC***
	HRLZI B,-DRMSEC
	MOVEM A,DRMSC(B)		;INITIALIZE FREE PAGE COUNT FOR EACH SECTOR
	AOBJN B,.-1

;INITIALIZE BAND LOCK OUT TABLE

	MOVEI 6,0
DRMIN1:	MOVE A,DRMBBT(6)
	JUMPL A,DRMIN2		;DONE ON -1
	CALL BNDLK
	JFCL 0
	JFCL 0
	AOJA 6, DRMIN1

DRMIN2:	MOVEI 6,0
DRMIN4:	MOVE A,DRMBST(6)
	JUMPL A,DRMIOI		;DONE ON -1
	CALL ASDRMS		;ASSIGN ALL THE BAD AREAS
	JFCL 0
	JFCL 0
	AOJA 6, DRMIN4

DRMBBT:	BADBND							;***SRI-AIC***
	BDBND1							;***SRRI-AIC***
	BDBND2							;***SRI-AIC***
	-1
	BLOCK 4			;FOR OTHER BAD BANDS		***SRI-AIC***

DRMBST:	-1
	BLOCK 10
	END
