.left margin 0
.right margin 70
.center ;TENEX#BOOTS
.center ;===========
.blank 2
1.0##Introduction
.blank 1
.indent 3
BOOTS is a bootstrap program that runs stand-alone on either a KA (with a BBN
pager) or a KI DECsystem-10.
It is designed to load a program such as a monitor or diagnostic
from a 3330 type disk through the SA-10.
BOOTS runs in kernel mode with paging disabled.  It is loaded via the
monitor, GETBTS, or READ-IN mode into the top 5 pages of directly addressable
memory (i.e. not above 256K) from the last 5 sectors of the disk system.
.blank 1
.indent 3
Basically, there are two distinct versions of BOOTS: a disk version that`s
loaded by GETBTS or the monitor and a readin version that`s loaded via READ-IN
mode from paper tape or DECtape.
The disk version is written out to the disk during normal timesharing
via WRTBTS and it is preferred to the
readin versions since WRTBTS sets up several runtime parameters in BOOTS before
writing it out to the disk.
The readin versions set up these parameters from assembly values such that
if a parameter should change then the readin version would have to be edited
and reassembled to reflect this change.
.blank 1
.indent 3
Since there`s no READ-IN mode for the disks, BOOTS is usually loaded from the
disk via GETBTS. GETBTS is a small program whose sole purpose is to load
BOOTS from the disk and then start it. GETBTS itself is loaded via paper
tape or DECtape READ-IN mode.
.blank 2
2.0##Operation
.blank 1
.indent 3
The standard procedure to load and start the disk version of BOOTS
is as follows:
.blank 1
.left margin 10
.indent -4
1)##Load the paper tape version of GETBTS into the paper tape reader.
.blank 1
.indent -4
2)##Set the READ#IN DEVICE switches to 104 and press the STOP, RESET and
READ#IN keys in this order.
.blank 1
.indent -4
3)##When the entire paper tape has been read, BOOTS will be started and it
will type [BOOTS] followed by an asterisk on the CTY.
.blank 1
.indent -4
4)##In response to the asterisk, type the command string and terminate it
with a carriage return. BOOTS will ask you to confirm the command which is
done by hitting the RETURN key again.
.blank 1
.indent -4
5)##After executing the command, BOOTS will either request another command
(by typing another asterisk) or start the file just loaded into core, depending
on the command switch.
.left margin 0
.page
.indent 3
Unless you are using the DECtape readin version (described in
section 8), there is no need to zero core before loading BOOTS.
However, it`s always a good idea to clear core before loading BOOTS since
clearing core will fix up any parity errors that might exist.
See step 1 in section 8 for instructions on how to clear core.
BOOTS itself will always zero core (from location 20 to 3 pages before
the start of the BOOTS code) before loading any file.
On a system with at least 256K of memory, BOOTS will clear core from
location 20 to 767777.
.blank 2
3.0)##Command#String#Format
.blank 1
.indent 3
The format of the BOOTS command string is:
.blank 1
.indent 6
Device:<Directory>Filename.Extension;Version,Switch
.blank 1
This command string is identical to the standard TENEX file specification
format with the exception of the ",Switch" at the end of the string.
.blank 1
.left margin 6
.indent -6
3.1)##Device
.blank 1
This field specifies the physical device on which the file resides.
Currently, the only valid device specification is DSK. The default device
is also DSK.
.blank 1
.indent -6
3.2)##Directory
.blank 1
This field specifies the owner of the file. The default directory is MON.
.blank 1
.indent -6
3.3)##File#Name
.blank 1
This field specifies the name of the file to be loaded. The default file
name is AMON.
.blank 1
.indent -6
3.4)##Extension
.blank 1
This field further identifies the file by specifying the extension of
the particular file to load.
The default extension is SAV.
.blank 1
.indent -6
3.5)##Version
.blank 1
This field specifies which version of the Filename.Extension to load.
The default version is 0 which implies the highest existing version number.
.blank 1
.indent -6
3.6)##Switch
.blank 1
This field specifies the action to be taken with the specified file.
The current switches are:
.page
.left margin 14
.indent -8
1)##,G##Load and start the specified file. This is the default switch.
.blank 1
.indent -8
2)##,n##Load the specified file and start it at location "n".
.blank 1
.indent -8
3)##,L##Just load the specified file into core but don`t start it.
This switch is useful if you wish to examine the file via the console
switches before starting it (see item 9.3).
If you wish to start the file after loading it, then simply type the ,G or ,n
switch without a file specification. This will cause BOOTS to start the file
already in core.
The ,L switch cannot be used to merge files since BOOTS always zeroes
core before loading a file.
.left margin 6
.blank 1
.indent -6
3.7)##Defaults
.blank 1
The default command string is:
.blank 1
.indent 4
DSK:<MON>AMON.SAV;0,G
.blank 1
These are the default values used by the SUMEX project and they would
probably be different at some other installation.
The default values are defined at DFLTAB in BOOTS.MAC.
.left margin 0
.blank 2
4.0)##Special#Characters
.blank 1
.indent 3
Occasionally there will be a slight delay between typing a character
and seeing it echoed on the terminal. This will happen whenever BOOTS
is not waiting for user input. The longest delay occurs between ending
the directory specification and starting the file name specification.
The reason for this delay is that BOOTS is busy verifying the directory
and this takes a considerable amount of time. However, BOOTS has a 50
character type ahead buffer and any character typed while BOOTS is not
waiting for input will be stuffed into this buffer. Later, when BOOTS
is ready to accept user input, it will first process every character
in the type ahead buffer and then wait (if necessary) for further input
from the terminal. Although it is extremely unlikely, any character
typed after the type ahead buffer is full will be ignored and the terminal
bell will ring (which indicates that the type ahead buffer is full).
Every effort has been made in BOOTS to mimic the standard TENEX command
scanner (i.e. GTJFN).
The following is a list of the special characters accepted by the BOOTS
command scanner accompanied by a brief description of the action that each
character invokes.
.blank 1
.left margin 6
.indent -6
4.1)##_^A#or#Delete
.blank 1
Rubout the previous character. The rubbed out character is
preceded by a back slash (i.e. "_\").
If nothing has been typed yet, then BOOTS will ring the bell.
.page
.indent -6
4.2)##_^C#or#_^X
.blank 1
Cancel the current command and restart BOOTS. These two characters may
be typed at any time prior to starting the program specified in the
command string. If any other character is typed while BOOTS is not
waiting for user input, then BOOTS will stuff this character into the
command buffer and process it when it is ready to accept user input.
.blank 1
.indent -6
4.3)##_^F
.blank 1
Recognize the current command field.
If the current field is null, then BOOTS will recognize the
corresponding default field.
Note that if _^F is the first character typed, then BOOTS will
recognize the default directory and file name.
The reason for this is that the current (null) field is actually the file
name field.
If the current field is either unrecognizable or ambiguous,
BOOTS will ring the bell.
Note that recognition only applies to the directory, file name, extension
and version. It does not apply to the device or switch.
.blank 1
.indent -6
4.4)##_^R
.blank 1
Retype the current command line. If this character is typed after
BOOTS asks for confirmation, then the entire command, including all defaulted
fields, will be typed.
.blank 1
.indent -6
4.5)##_^V
.blank 1
Take the next character literally.
.blank 1
.indent -6
4.6)##_^W
.blank 1
Delete the current command field up to and including the previous
delimiter.
BOOTS echoes this character as a back arrow (i.e. "__").
If nothing has been typed yet, then BOOTS will ring the bell.
.blank 1
.indent -6
4.7)##$#(altmode)
.blank 1
Recognize the current command field and the rest of the
file specification. If this is the first character that`s typed, then BOOTS
will recognize the entire default file specification.
In addition to character code 33, BOOTS will accept character codes
175 and 176 as alternate flavors of altmode.
The same rules that apply to _^F recognition also apply to altmode
recognition.
.blank 1
.indent -6
4.8)##?
.blank 1
If this is the first character that`s typed, then BOOTS will type
a brief help message. Otherwise, BOOTS will type everything that matches
the current command field.
Note that ? matching does not apply to the device or switch.
.page
.indent -6
4.9)##CR#or#LF
.blank 1
The first CR or LF terminates the current command line.
At this point, BOOTS will type "[Confirm]" and wait for the user to
confirm the command just typed.
To confirm the command, simply hit the CR or LF key again.
If any other character is typed, except for _^R (see item 4.4),
BOOTS will ignore the current command and prompt the user for
another command (by typing an asterisk).
.left margin 0
.blank 2
5.0)##Error#Messages
.blank 1
.indent 3
The following is a list of error messages that can be issued by BOOTS
accompanied by a brief description of the probable cause of each error.
Unless otherwise stated, BOOTS will prompt the user for another command
(by typing an asterisk) after issuing an error.
.blank 1
.left margin 6
.indent -6
5.1)##<bell>#?<bell>
.blank 1
This is a catch-all error message that`s issued for any of the following
reasons:
.blank 1
.left margin 10
.indent -4
1)##An illegal character was typed.
.blank 1
.indent -4
2)##More than 39 characters were specified in a command field.
.blank 1
.indent -4
3)##A character was typed which produced a syntax error in the command
string.
.blank 1
.indent -4
4)##A completely specified command field could not be recognized.
.left margin 6
.blank 1
.indent -6
.nofill
5.2)##?This file is neither a SAVE, SSAVE nor EXE file
.fill
.blank 1
This error is issued whenever the specified file is not a save type file.
.blank 1
.indent -6
.nofill
5.3)##?This file is too big#(it will overlay BOOTS at location n)
.fill
.blank 1
This error is issued whenever the specified file would overlay BOOTS if it
were completely loaded into core.
Note that this error is often caused by specifying a file which is not a
save type file.
Since SAVE files start with a -word count, any file that has bit 0 of its
first word set will appear to be a SAVE file.
.blank 1
.indent -6
.nofill
5.4)##?This is an unusable file (FDBCTL = n)
.fill
.blank 1
This error is issued whenever the user tries to load any of the following
types of files:
.page
.nofill
1)  A temporary file (bit 0 set)
.blank 1
2)  A file that doesn`t have an extension yet (bit 2 set)
.blank 1
3)  A deleted file (bit 3 set)
.blank 1
4)  A file that hasn`t been written yet (bit 4 set)
.blank 1
5)  A long file (bit 5 set)
.blank 1
6)  A compressed page table (bit 6 set)
.blank 1
7)  An environment dump file (bit 7 set)
.blank 1
8)  A subroutine file (bit 8 set)
.blank 1
9)  An ephemeral file (bit 17 set)
.fill
.blank 1
.indent -6
.nofill
5.5)##?Invalid linear disk address encountered (addr = n)
.fill
.blank 1
This error is issued whenever BOOTS notices that a file pointer is
messed up. This error should be reported to the systems staff as soon
as possible.
.blank 1
.indent -6
.nofill
5.6)##?DSKOP error nnnnnn (error-message)
#Hit the CONTinue key to restart BOOTS
.fill
.blank 1
This error is issued by BOOTS whenever SAIO detects an error.
Any additional information pertaining to the error will have already
been typed by SAIO.
After issuing this error, BOOTS will halt since there`s probably something
wrong with the disk system or the SA-10.
If you want to restart BOOTS, just hit the console CONTinue key.
This error should be reported to the systems staff as soon as possible.
The following is a list of the possible error codes and error
messages returned by SAIO:
.blank 1
.left margin 10
.indent -4
1)##600001##word count not 1000
.blank 1
This error is issued whenever BOOTS tries to read more or less than
1 page of data from the disk. This error should never happen since
BOOTS always reads 1 page at a time.
.blank 1
.indent -4
2)##600002##invalid disk address
.blank 1
This error is issued whenever BOOTS tries to read a page whose linear
disk address is outside of the disk system.
This could happen if a file`s index block gets smashed.
This error should never appear since,
before reading a page from the disk, BOOTS checks the disk address
to insure that it`s within the file system area. If it isn`t, then
BOOTS will issue the error described in section 5.5.
.page
.indent -4
3)##604000##I/O error
.blank 1
This error is issued whenever SAIO encounters an input error
while reading from disk.
.blank 1
.indent -4
4)##604001##SA-10 error
.blank 1
This error is issued whenever SAIO encounters an SA-10 error
while reading from disk.
.blank 1
.indent -4
5)##604002##operation timed out
.blank 1
This error is issued whenever the requested read operation fails
to complete within 2 seconds.
.blank 1
.indent -4
6)##nnnnnn##unknown error code
.blank 1
This error is issued whenever SAIO returns an unknown error code.
.left margin 0
.blank 2
6.0)##Core#Allocation
.blank 1
.indent 3
The BOOTS code takes up 5 pages and is usually loaded into the top 5 pages
of directly addressable memory (i.e. not above 256K).
However, when loading a file into core, BOOTS uses an additional 18 pages
for buffers.
These 18 pages are allocated directly below the first word of the BOOTS code.
Note that 15 of these 18 buffer pages are used to read in the directory
blocks and they can be overlayed when BOOTS finally starts loading the
file.
Therefore, the largest file that BOOTS can load is 504 pages (i.e. 512
pages of memory - 5 pages of BOOTS code - 3 pages of BOOTS buffers).
.blank 2
7.0)##Assembly#Instructions#for#BOOTS#and#Its#Friends
.blank 1
.indent 3
BOOTS is composed of 3 files: BOOTS.PAR, SAIO.MAC, and BOOTS.MAC.
Assembly instructions for BOOTS can be found on the second and third pages of
BOOTS.PAR.
.blank 1
.indent 3
GETBTS is also composed of 3 files: GETBTS.PAR, SAIO.MAC, and GETBTS.MAC.
Assembly instructions for GETBTS can be found on the second page of
GETBTS.PAR.
.blank 1
.indent 3
In addition to GETBTS, there is another paper tape READ-IN program which may
be used to load BOOTS from the disk.
This program is called XGTBTS and assembly instructions for this program can
be found on the first page of XGTBTS.MAC.
Note that GETBTS is preferred to XGTBTS since GETBTS uses the SAIO package.
The only advantage of XGTBTS is that it`s small and several copies can be
punched on one paper tape, thus eliminating the need to re-position the paper
tape each time BOOTS is loaded.
Also, if a need is demonstrated, XGTBTS could be easily modified to replace
TENDMP on the READ-IN DECtape (i.e. XGTBTS will fit in 3 DECtape blocks).
.page
.indent 3
WRTBTS is the program that writes BOOTS out to the disk.
Assembly instructions for WRTBTS can be found on the first page of
WRTBTS.MAC.
.blank 1
.indent 3
Note that there are 3 assembly parameters which would probably change at
some other installation (besides SUMEX).
They are:
.blank 1
.left margin 18
.indent -12
1)##FTCPU###The type of CPU for which BOOTS and GETBTS are assembled.
Currently, this parameter is defined to be 1 (i.e. a KI DECsystem-10).
FTCPU must be defined to be 0 for a KA TENEX system.
This parameter is defined in BOOTS.PAR, GETBTS.PAR, and XGTBTS.MAC.
.blank 1
.indent -12
2)##$$SA0###The I/O bus address of the SA-10.
Currently, this parameter is defined (in SAIO.MAC) to be 274.
.blank 1
.indent -12
3)##$$BASE##The base address of the SA-10`s channel control block.
Currently, this parameter is defined (in SAIO.MAC) to be 160.
.left margin 0
.blank 2
8.0)##DECtape#READ-IN#Mode
.blank 1
.indent 3
Both BOOTS and GETBTS exist on DECtape as SAVe files. Since all save files are
zero compressed, core must be zeroed before loading either BOOTS or GETBTS
via DECtape READ-IN mode.
If core is not zeroed, then any word in BOOTS or GETBTS that was either
explicitly defined to be zero or was allocated via a BLOCK statement will
contain the value that was previously in that location even after reading in
BOOTS or GETBTS from the DECtape.
.blank 1
.indent 3
The standard procedure to load and start the DECtape version of either
BOOTS or GETBTS is as follows:
.blank 1
.left margin 10
.indent -4
1)##Clear all of core.
.blank 1
.left margin 14
.indent -4
A)##Insure that the following switches are off: CONSOLE LOCK, CONSOLE
DATALOCK, EXEC PAGING and USER PAGING.
Ignore this step for a KA DECsystem-10.
.blank 1
.indent -4
B)##Hit the ADDRESS CLEAR and DATA CLEAR keys. On a KA, insure that the
data and address switches are all off.
.blank 1
.indent -4
C)##Hit the DEPOSIT THIS and RESET keys,
set the PAR(ity) STOP, NXM STOP and REPEAT switches and then hit the
DEPOSIT NEXT key.
.blank 1
.left margin 10
.indent -4
2)##Mount the DECtape on drive 0.
.blank 1
.indent -4
3)##Set the READ#IN DEVICE switches to 320 and press the STOP, RESET and
READ#IN keys in this order.
.page
.indent -4
4)##After the DECtape stops spinning, a CR-LF will typed on the CTY.
In response to the CR-LF, type either BOOTS (if you want to load the
DECtape version of BOOTS) or GETBTS (if you want to load the DECtape version
of GETBTS which in turn will load the disk version of BOOTS).
.blank 1
.indent -4
5)##Eventually, BOOTS will be started and it will type [BOOTS] followed
by an asterisk on the CTY.
.blank 1
.indent -4
6)##In response to the asterisk, type the command string and terminate it
with a carriage return. BOOTS will ask you to confirm the command which is
done by hitting the RETURN key again.
.blank 1
.indent -4
7)##After executing the command, BOOTS will either request another command
(by typing another asterisk) or start the file just loaded into core,
depending on the command switch.
.left margin 0
.blank 2
9.0)##Miscellaneous#Notes
.blank 1
.left margin 6
.indent -6
9.1)##If the disk version of BOOTS is loaded and the contents of AC 0
are non-zero, then BOOTS will assume that AC 0 contains the address of an
ASCIZ command string which it will read in preference to anything
typed on the CTY.
This feature could be used by the monitor if it calls BOOTS when it
crashes.
Note that this feature is only available in the disk version of BOOTS and
furthermore, GETBTS always zeroes AC 0 before starting BOOTS.
.blank 1
.indent -6
9.2)##BOOTS supports both the old and new directory formats.
Before writing BOOTS out to the disk, WRTBTS sets a flag in BOOTS
(which it gets from the FDFMTF system table) which indicates the directory
format used by the system.
The readin versions of BOOTS use an assembly parameter (i.e. DIRFMT)
to specify which directory format is being used.
.blank 1
.indent -6
9.3)##When BOOTS loads a file into core, it will not load any data
into absolute page 0. Instead, it will map all references to page 0
into a buffer in high core. The reason for this is that both the SA-10
and CTY interrupt routine use pre-defined locations in page 0 to do
their I/O.
Whenever BOOTS executes a ,G or ,n switch, it will first copy this
buffer down to absolute page 0 and then start the program.
Note that when a file is loaded via the ,L switch,
BOOTS will type out a message (i.e. "Page 0 loaded at n") indicating
the address of the buffer which contains the file`s page 0. If you
wish to examine anything in the file`s page 0, simply append the
address typed out by BOOTS to the address of the word in page 0
and then examine the word pointed to by this new address.
.page
.indent -6
9.4)##Although BOOTS is usually loaded into the top 23 pages of directly
addressable memory (5 code pages + 18 buffer pages),
the disk version can be loaded anywhere since
it is completely self relocatable.
When the disk version of BOOTS starts up,
it determines where it has been loaded and then sets
up its own relocation relative to this point.
.left margin 0
.blank 3
[End of BOOTS.DOC]
