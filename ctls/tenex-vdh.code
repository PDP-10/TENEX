;<MON>TENEX-VDH.CODE;1    22-MAY-75 10:41:16    EDIT BY LIEB
;******* THIS IS THE ASSEMBY CONTROL FILE *******
/MACRO %W%200OSYS:STENEX.REL/REL
DSK:TENDMP.10X
PROLOG.SRL=PARAMS.SMX+PROLOG/COMPILE
%&RESMA0&OVERSIO.SRL=VERSIO+SYSNAM.SMX/COMPILE
LDINIT.SRL=LDINIT
%SMON.SRL=SCHED+PAGEM+PISRV+KISRV/COMPILE
SWPMON.SRL=SWPMON
TTYSRV.SRL=TTYSRV.SMX+TYMSRV
IMPDV.SRL=IMPDV+VDH.VDH
DSK.SRL=DSK.SMX+DSKPAK.SMX
DRM.SRL=DRMDDC
FILEDE.SRL=PARAMS.SMX+FILE/COMPILE
I4.SRL=I4
ISYS.SRL=ISYS
SSYS.SRL=SSYS
LINEPR.SRL=LINEPR
CRSHSV.SRL=CRSHSV
DEVICE.SRL=DEVICE
DIRECT.SRL=DIRECT
FREE.SRL=FREE
FUTILI.SRL=FUTILI
GTJFN.SRL=GTJFN
IO.SRL=IO
JSYS.SRL=JSYS
LOOKUP.SRL=LOOKUP
DECTAP.SRL=DECTAP
MAGTAP.SRL=MAGTAP.SMX
NETWRK.SRL=NETWRK
HOSTS.SRL=HOSTS
DISC.SRL=DISC
FILINI.SRL=FILINI
FILTTY.SRL=FILTTY
NIL.SRL=NIL
PTP.SRL=PTP
PTR.SRL=PTR
STRING.SRL=STRING
SYSSAV.SRL=SYSSAV.SMX
SYSBT.SRL=SYSBT/COMPILE
%1H%WMFLIN
%-BMR
MFLOUT
DATIME
SYS:JOBDAT.REL/REL
%-HEDDT.SRL=EDDT.SMX
POSTLD.SRL=POSTLD%P/MAP



;******* THIS IS THE CROSSREFERENCED PARAM AND PROLOG FILES *******


;******* THIS IS CROSSREFERENCED NETWRK,IMPDV, AND VDH *******

PARAMS.SMX;21                      22-MAY-75 10:31     Page 1

     1	;<MON>PARAMS.VDH;3    19-MAR-75 12:38:12    EDIT BY LIEB
     2	;<MON>PARAMS.VDH;2    12-MAR-75 16:04:53    EDIT BY LIEB
     3	;CHANGED NPACKS TO ADD NEW DRIVES AND CHANGED LOGICAL DRUM SIZE
     4	;ADDED 16 MORE NVTS
     5	;<MON>PARAMS.SMX;15    27-JAN-75 23:19:26    EDIT BY LIEB
     6	;ADDED BUGSTR SPACE FOR VDH,HOST AND ADDED NETWIZ TO CAPABILITIES--LIEB
     7	;<MON>PARAMS.SMX;14    26-JAN-75 20:41:16    EDIT BY LIEB
     8	;ADDED NVTHI VALUE   LIEB
     9	;<MON>PARAMS.SMX;13    26-JAN-75 18:19:38    EDIT BY LIEB
    10	;CHANGED BUG DEFINE TO HANDLE PUSHJS IN 132-133 --JIM LIEB
    11	;<MON>PARAMS.SMX;12    26-JAN-75 17:01:58    EDIT BY LIEB
    12	;INSERTED PARAMS FOR VDH AT SUMEX---JIM LIEB
    13	;<KI-ASSEMBLY>PARAMS.KI4;1    18-JUL-73 22:20:32	EDIT BY DURHAM
    14	;<TENEX-130>PARAMS.A;29     4-JAN-73 13:57:29	EDIT BY TOMLINSON
    15	;<TENEX-130>PARAMS.A;28     4-JAN-73 11:10:30	EDIT BY TOMLINSON
    16	;<TENEX-130>PARAMS.A;27    26-DEC-72 15:12:40	EDIT BY TOMLINSON
    17	; CHANGED TO 8 PACKS AND CD215F
    18	;<TENEX-130>PARAMS.A;26     2-DEC-72 20:44:04	EDIT BY CLEMENTS
    19	;<TENEX-130>PARAMS.A;25     2-DEC-72 18:10:47	EDIT BY CLEMENTS
    20	;<TENEX-130>PARAMS.A;24     1-DEC-72 17:58:15	EDIT BY TOMLINSON
    21	;<TENEX-130>PARAMS.A;23     1-DEC-72 14:58:15	EDIT BY TOMLINSON
    22	;<TENEX-130>PARAMS.A;22     1-DEC-72 14:26:54	EDIT BY TOMLINSON
    23	;<TENEX-130>PARAMS.A;21    29-NOV-72 14:36:50	EDIT BY TOMLINSON
    24	;<TENEX-130>PARAMS.A;20    29-NOV-72 14:09:15	EDIT BY TOMLINSON
    25	;<TENEX-130>PARAMS.B;19    10-NOV-72 11:05:52	EDIT BY TOMLINSON
    26	;<TENEX-130>PARAMS.B;18    10-NOV-72 10:00:24	EDIT BY TOMLINSON
    27	;<TENEX-130>PARAMS.B;17    10-NOV-72  0:12:16	EDIT BY TOMLINSON
    28	;<TENEX-130>PARAMS.B;16     9-NOV-72 20:14:38	EDIT BY TOMLINSON
    29	;<TENEX-130>PARAMS.B;15     9-NOV-72 19:42:33	EDIT BY TOMLINSON
PARAMS.SMX;21                      22-MAY-75 10:31     Page 2

    30	
    31	;9 JUN 72, 1207:
    32	;PARAMETERS FOR SYSTEM A
    33	
    34	DEFINE	SYSNAM(A%,B%)<A%'SUMEX-AIM-TENEX'B%>
    35	
    36	KAFLG==0	;1 FOR KA-10
    37	KIFLG==1	;1 FOR KI-10
    38	;;;KIMAIN==0		;MEMORY DISPLACEMENT FOR DISK
    39	
    40	BBNCLK==KAFLG	;1 FOR BBN 1 MS CLK
    41	DK10F==KIFLG	;1 FOR DEC DK10 CLOCK
    42	
    43	;;;IMP11F==1	;IMP 11 FLAG
    44	IMSSS==0	;IMSSS SWITCH
    45	SUMEX==1	;SUMEX SWITCH
    46	I4SW==1	;ILLIAC 4 SYSTEM SWITCH--IF THIS SYMBOL IS
    47	;		;DEFINED,THEN VARIOUS PORTIONS OF BBN CODE
    48	;		;WILL NOT BE ASSEMBLED AND WILL BE REPLACED
    49	;		;WITH ILLIAC 4 CODE
    50	
    51	;
    52	;	TYMNET
    53	TYMSW==1	;when defined, adds in TYMNET interface handler
    54	;
    55	NJOBS==^D50		;NUMBER OF JOBS ON SYSTEM
    56	NAUTO==^D0		;NUMBER OF NON-JOB0 AUTO STARTUP JOBS
    57	
    58	; FULL DEFINITION OF TTY LINES.
    59	
    60	DTYLO==^D1		;FIRST DIAL UP LINE
    61	NDTY==^D23		;NUMBER OF DIAL UP LINES
    62	NHSLN==^D40		;NUMBER OF TTY LINES
    63	CTYLIN==NHSLN		;CONSOLE TTY
    64	PTYLO==CTYLIN+1		;FIRST PSEUDO TTY
    65	NPTY==^D8		;NUMBER OF PSEUDO TTY'S
    66	TYMTTL==PTYLO+NPTY	;first TYMNET line
    67	NTYMTT==^D16		;number of TYMNET ports
    68	NVTLO==TYMTTL+NTYMTT	;FIRST NVT (NETWORK) LINE
    69	TYMTTH==NVTLO-1
    70	NNVTLN==^D24		;NUMBER OF NETWORK TERMINALS
    71	NLINES==NVTLO+NNVTLN	;TOTAL TENEX LINES
    72	NVTHI==NLINES -1	;HI NVT NUMBER
    73	NTTYS==CTYLIN+1		;TOTAL EXCLUDING NETWORK AND PTY'S
    74	OTYLNE==0		; OPERATOR TTY (ENTRY ALLOWED EVEN IF DISC GONE)
    75	
    76	NTTBF==NLINES*3		;NUMBER OF TTY BUFFERS
    77	TTSIZ==20		;SIZE OF INDIVIDUAL TTY BUFFER (POWER OF 2)
    78	
    79	
    80	USRSCF==0		; INITIAL CONTENT OF USRSPC (NON-0 TO PROHIBIT
    81				;  WRITE OPENF IF USER IS EXCEEDING ALLOCATION)
    82	SYSSCF==0		; INITIAL CONTENT OF SYSSPC (DISK SPACE LEVEL
PARAMS.SMX;21                      22-MAY-75 10:31     Page 2.1

    83				;  BELOW WHICH NO NEW WRITES ARE ALLOWED
    84	SSPT==6000		;SIZE OF SPT (H'WARE MAX IS 20000)
    85	NDST=^D4500		;LOGICAL DRUM SIZE
    86	TMZONE==8		;LOCAL TIME ZONE. HOURS BEHIND GMT, SEE DATIME
    87	
    88	IJSFRE==100		; INITIAL SIZE OF JSB FREE AREA
    89	NFDIB==20		; NUMBER OF FILE DIRECTORY INDEX BLOCKS
    90	NPACKS==6		; NUMBER OF PACKS
    91	;NPPCKS==8		; NUMBER OF PACKS IN PUBLIC STRUCTURE
    92	DTAN==2			; NUMBER OF dectape units
    93	MTAN==2			; NUMBER OF mag tape units 
    94	LPTN==1			; LPT: EXISTS
    95	LPTDVF==1		; Physical lpt exists
    96	LPTSPL==1		; Line printer spooler exists
    97	NETN==1			; We have a network
    98	NNTBFS==40000		; SIZE OF NETWORK BUFFER AREA
    99	NSKT==^D100		; Number of network sockets
   100	LHOSTN==70		;LOCAL HOST NUMBER FOR TNILLI-TENEX
   101	;PLTN==1			; Plotter exists
   102	PTPN==1			; Paper tape punch exists
   103	PTRN==1			; Paper tape reader exists
   104	;NDP==4			; Number of display processes
   105	;NDC==2		; NUMBER OF DISPLAY CONSOLES
   106	
   107	TTSTOP==37	;TTY STOP CHARACTER = CTRL _
   108	;LOGTTY==-1
   109	LOGTTY==400000			; DESIGNATOR FOR LOGGING INFO
   110	;JB0TTY==377777
   111	JB0TTY==400000			; DESIGNATOR FOR JOB 0 AND ERROR MSGS.
   112	
   113	IFDEF DPKN,<NDSKS==1+DPKN>
   114	IFNDEF DPKN,<NDSKS==1>
PARAMS.SMX;21                      22-MAY-75 10:31     Page 3

   115	
   116	;IF PI CHANNEL FOR DEVICE IS NOT DEFINED, CODE FOR THAT DEVICE
   117	;IS NOT ASEMBLED
   118	
   119	DSKCHN==5		;DISK
   120	RP02F==1		;DEC RP02 DRIVES (RP03)
   121	; DC10F==1		; TELEFILE DC10 DISK DEVICE
   122	; CD215F==1		; CD215 TYPE DRIVES
   123	DRMCHN==4		;DRUM
   124	DLSCHN==6		;DLS AND TTY PI CHANNEL
   125	;BBNDLS==1		;FOR BBN-MODIFIED SCANNER
   126	DECDLS==1		;FOR DEC STANDARD SCANNER
   127	IFDEF MTAN,<
   128	 MTDCHN==1		;MAG TAPE DATA CHANNEL
   129	 MTACHN==5>		;MAG TAPE FLAGS CHANNEL
   130	IFDEF DTAN,<
   131	 DTDCHN==2		;DECTAPE DATA
   132	 DTACHN==5>		;DECTAPE CONTROL
   133	IFDEF NETN,<
   134	 IMPCHN==5>		;IMP (NETWORK)
   135	IFDEF PTPN,<
   136	 PTPCHN==6>		;PAPER TAPE PUNCH
   137	IFDEF PTRN,<
   138	 PTRCHN==5>		;PAPER TAPE READER
   139	IFDEF PLTN,<
   140	 PLTCHN==6>		;PLOTTER
   141	IFDEF LPTDVF,<
   142	 LPTCHN==6>		; LINE PRINTER PI CHANNEL
   143	IFDEF NDP,<
   144	 DSPCHN==6>		; E&S DISPLAY
   145	
   146	;GLOBAL PARAMETERS
   147	
   148	SJFN==4			;LOG2 NUMBER OF JFN WORDS
PARAMS.SMX;21                      22-MAY-75 10:31     Page 4

   149	
   150	;STORAGE BOUNDARIES, JUGGLED TO USE SPACE BETWEEN CST0 AND SPT
   151	
   152	MAXCOR==1000		; MAXIMUM REAL CORE EVER USABLE
   153	
   154		DEFINE DX(NM,SIZ)
   155	<	NM=DXX
   156		DXX=DXX+SIZ>
   157	;
   158	;	TYMNET
   159	IFDEF TYMSW,<
   160	TYMBUF==2000		;TYMNET interface buffer
   161	TYMBSZ==1000		;is 512. words long
   162	>
   163	;
   164	MMAP==3000		;MONITOR MAP
   165	DXX==4000		;VARIOUS STORAGE STARTS AFTER CST0
   166	
   167	DX(SPT,SSPT)
   168	 IFN SPT-4000,<PRINTX !SPT DEFINED WRONG!>
   169	DX(SPTH,SSPT)
   170	DX(CST0,MAXCOR)
   171	DX(CST1,MAXCOR)
   172	DX(CST2,MAXCOR)
   173	DX(CST3,MAXCOR)
   174	DX(DST,NDST)		;DRUM STATUS TABLE
   175	DX(TTBUFS,TTSIZ*<NTTBF+1>)  ;TTY BUFFERS
   176	TTBUFF==1		;NOTE TTY BUFFERS DEFINED HERE
   177	
   178	DXX=<DXX+777>&777000	;BUMP TO NEXT PAGE BOUNDARY
   179	
   180	IFN KIFLG,<
   181	DX(KIEPT,1000)	;KI EXECUTIVE PAGE TABLE
   182	DX(KIUPT,1000)		;KI USER PAGE TABLE
   183	>
   184	;
   185	DX(RESLOC,0)		;ALL OTHER RESIDENT STORAGE
   186	
   187	;MAX END OF SYMBOL TABLE, USED BY POSTLD
   188	
   189	RLRPG==170		;MAX PAGE TO RELOAD OR SAVE ON CRASH
   190	RLRMA==176000		;RUN LOCATION FOR RELOAD ROUTINE ON CRASH
   191				;HAS TO BE HIGHER THAN MAXSYM
   192	MAXSYM==<RLRPG>B26
   193	
   194	;SWAPPABLE STORAGE AND CODE BOUNDARIES
   195	
   196	IFN KIFLG,<
   197	NRESBG=350000		;BEGINNING OF SWAPPABLE VARIABLE STORAGE
   198	NRPLBG=444000		; " " SWAPPABLE PAGE STORAGE
   199	INTERNAL RESMA0
   200	RESMA0==72000
   201	SWPMP0=400		; START OF SWAPPABLE CODE
PARAMS.SMX;21                      22-MAY-75 10:31     Page 4.1

   202	>
   203	IFN KAFLG,<
   204	NRESBG=200000
   205	NRPLBG=410000
   206	INTERNAL RESMA0
   207	RESMA0=52000
   208	SWPMP0=240
   209	>
   210	SWPMA0=SWPMP0*1000	; ..
PARAMS.SMX;21                      22-MAY-75 10:31     Page 5

   211	
   212	;PARAMETERS FOR BUG STRING STORAGE
   213	
   214	DEFINE	DFBGP(NAM,SIZ)<
   215	%P'NAM==..BGP
   216	%S'NAM==..BGS
   217	%N'NAM==SIZ
   218	..BGP==..BGP+SIZ
   219	..BGS==..BGS+10*SIZ>
   220	
   221	NBUGP==3000		; SIZE OF BUG POINTER AREA
   222	SBUGTF==6000		; SIZE OF BUGTABLE IMAGE FILE
   223	STRBGP==6000		; START OF POINTER AREA
   224	..BGP==STRBGP		; BEGINNING OF POINTER AREA
   225	..BGS==STRBGP+SBUGTF	; BEGINNING OF STRING AREA
   226	
   227			DFBGP(LDINIT,0)
   228		DFBGP(SYSNAM,0)
   229			DFBGP(MON,140)
   230			DFBGP(SWPMON,30)
   231	IFNDEF TYMSW,<	DFBGP(TTYSRV,10)>
   232	IFDEF TYMSW,<	DFBGP(TTYSRV,25)>
   233			DFBGP(DSK,70)
   234			DFBGP(DRM,15)
   235	IFDEF IMPCHN,<	DFBGP(IMPDV,45)>
   236			DFBGP(DEVICE,0)
   237			DFBGP(DIRECT,20)
   238			DFBGP(FREE,10)
   239			DFBGP(FUTILITY,0)
   240			DFBGP(GTJFN,0)
   241			DFBGP(IO,0)
   242			DFBGP(JSYS,40)
   243			DFBGP(LOOKUP,10)
   244	IFDEF DTAN,<	DFBGP(DECTAP,10)>
   245			DFBGP(DISC,10)
   246	IFDEF NDP,<	DFBGP(DISPLAY,4)>
   247			DFBGP(FILINI,20)
   248			DFBGP(I4,20)
   249			DFBGP(SUMX,4)
   250			DFBGP(FILTTY,0)
   251	IFDEF LPTN,<	DFBGP(LINEPR,10)>
   252	IFDEF MTAN,<	DFBGP(MAGTAP,10)>
   253	IFDEF NETN,<	DFBGP(NETWRK,10)
   254			DFBGP(HOSTS,5)>
   255			DFBGP(NIL,0)
   256	IFDEF PLTN,<	DFBGP(PLOTTE,0)>
   257	IFDEF PTPN,<	DFBGP(PTP,0)>
   258	IFDEF PTRN,<	DFBGP(PTR,0)>
   259			DFBGP(STRING,0)
   260			DFBGP(POSTLD,0)
   261			DFBGP(ISYS,5)
   262	
   263	PURGE	..BGP,..BGS
PARAMS.SMX;21                      22-MAY-75 10:31     Page 6

   264	
   265	; NON-VARIABLE PARAMETERS -- USED GLOBALLY
   266	
   267	; CAPABILITY BITS
   268	
   269	WHEEL==400000
   270	OPER==200000
   271	CONF==100000	;CONFIDENTIAL INFO ACCESS
   272	LOG==40000		;
   273	NETWIZ==20000		;NET WIZARD
   274	MAINT==040000
   275	DIAG==10	;DIAGNOSTICIAN
   276	ACL==20	;ACL USER--GETS SPECIAL EXEC
   277	HVYLSH==0	;3 BITS ARE BEING LEFT FOR HEAVY FIELD FOR
   278	;               FUTURE EXPANSION--HVYLSH IS THE NUMBER OF
   279	;               BITS TO RIGHT OF HEAVY FIELD
   280	HEAVY==1_HVYLSH	;HEAVY RESERVATION
   281	
   282	; BIT DEFINITIONS IN FACTSW
   283	
   284	FACTON==1B0		;FACT FILE IS ON
   285	CHKDSE==1B2		;CHECKDSK DISCOVERED ERRORS
   286	CHKDSR==1B3		;CHECKDSK RUNNING UNDER JOB ZERO
PARAMS.SMX;21                      22-MAY-75 10:31     Page 7

   287	
   288	; PROLOG-ISH THINGS THAT ARE COMMON TO BOTH FILE AND MON
   289	; TO BE MOVED INTO COMMON PROLOG FILE WHEN IT EXISTS
   290	
   291	; USE MACRO SWITCHES PC'S
   292	
   293	DEFINE	USE(PC,IVAL)<
   294	.OLDPC(.)		;; SAVE CURRENT LOCATION AS OLD PC
   295	IFDIF <IVAL><><PC==IVAL>;; IF (OPTIONAL) IVAL, SET NEW PC TO IT
   296	IFNDEF PC,<PRINTX PC NOT DEFINED>
   297	ORG PC			;; SET LOCATION TO CURRENT VALUE OF PC
   298	DEFINE	.OLDPC(V)<PC==V>;; REDEFINE OLD PC
   299	>
   300	
   301	; DEFINE ALTERNATES FOR TITLE AND END
   302	
   303	IF1,<	SYN TITLE,.TITLE
   304		SYN END,.END>
   305	
   306	; REDEFINE TITLE TO INIT PC'S AND BUGSTRINGS
   307	
   308	DEFINE	TITLE(S)<
   309	.TITLE S		; GENERATE ACTUAL TITLE
   310	RESPC==.		; DEFINE RESPC AS RELOCATABLE 0
   311		TWOSEG SWPMA0		; SIDE EFFECT IS RELOC(SWPMA0)
   312	DEFINE	.OLDPC(V)<SWAPPC==V>	;; SO REMEMBER THAT FACT
   313	USE RESPC			; AND RETURN TO RESIDENT CODE
   314	%P==%P'S			; DEFINE BUG PS'S
   315	%S==%S'S
   316	%IP==%P'S
   317	%IS==%S'S
   318	%IN==%N'S
   319	SUPPRESS %P'S,%S'S,%N'S
   320	>
   321	
   322	; REDEFINE END TO CLEANUP AFTER ASSEMBLY
   323	
   324	DEFINE	END(ZZZ)<
   325	IFN RESPC,<USE RESPC>		; IF ANY RESIDENT CODE
   326	LITS:	LIT			; MAKE LITS RESIDENT
   327	BUGOFL(<BUG POINTERS>,\<%P-%IP-%IN>); PRINT AMOUNT OF OVERFLOWS IF ANY
   328	BUGOFL(<BUG STRINGS>,\<%S-%IS-10*%IN>)
   329	PURGE %P,%S,%IP,%IS,%IN
   330	.END ZZZ>
   331	
   332	; MACRO TO PRINT AMOUNT OF OVERFLOW IF ANY
   333	
   334	DEFINE	BUGOFL(WHAT,AMOUNT)<
   335		IFG AMOUNT,<PRINTX WHAT OVERFLOW BY AMOUNT>
   336	>
   337	
   338	;MACROS FOR DEFINING BUGHLT AND BUGCHK STRINGS
   339	
PARAMS.SMX;21                      22-MAY-75 10:31     Page 7.1

   340	;THIS IS THE MACRO THAT APPEARS IN THE CODE.  ITS FIRST ARG IS
   341	;CHK OR HLT, AND CAUSES ASSEMBLY OF JSR BUGCHK OR JSR BUGHLT
   342	;RESPECTIVELY.  ITS SECOND ARGUMENT IS A STRING DEFINING THE
   343	;PROBLEM REPRESENTED BY THE CHECK.
   344	
   345	DEFINE BUG (TYP,STR,PUSHF,%TG1,%TG2)<
   346	XLIST
   347	%TG1:
   348	ORG %S
   349	%TG2:	ASCIZ /STR/
   350	%S==.
   351	ORG %P
   352		%TG1,,%TG2
   353	%P==.
   354	ORG %TG1
   355	LIST
   356	IFIDN	<PUSHF>,<>,<JSR BUG'TYP>
   357	IFDIF	<PUSHF>,<>,<PUSHJ P,BGR'TYP>
   358	IF2,<	PURGE %TG1,%TG2>
   359	>
PARAMS.SMX;21                      22-MAY-75 10:31     Page 8

   360	
   361	;	SPECIAL PARAMETERS DEALING WITH PROCESSOR COMMUNICATION
   362	;
   363	;
   364	LSTRPG==777	;LAST REAL CORE PAGE AVAILABLE
   365	
   366	REPEAT 0,<
   367	
   368	BIOMVA==337	;BIOM VIRTUAL ADDRESS
   369	BIOMRA==740	;BIOM REAL ADDRESS
   370	ME10RA==700	;ME10 REAL ADDRESS FOR PDP11 COMMUNICATION
   371	BIOMSZ==40	;SIZE OF BIOM MEMORY
   372	ME10SZ==40	;SIZE OF ME10 MEMORY
   373	JOHN==3600	;UNUSED PORTION OF MON MAP FOR FIXED COMMUNICATION
   374	
   375	
   376	;	THE FOLLOWING INDICATES THE CURRENT ALLOCATION
   377	;	OF THIS AREA FROM JOHN TO JOHN+177.  PLEASE UPDATE THE
   378	;	LIST WHEN ALLOCATING NEW SPACE.  UNLESS OTHERWISE INDICATED,
   379	;	THIS AREA IS ZEROED AT SYSTEM STARTUP TIME.
   380	;
   381	;	THE FOLLOWING ADDRESSES ARE RELATIVE TO JOHN:
   382	
   383	;	0-7      PDP-11 BOOTSTRAP PROGRAM
   384	;	10       CURRENT PROCESSOR INDEX (USED FOR LOCKING)
   385	;	11-16    INTERLOCK CONTROL WORDS
   386	;	31-36	 PDP11 DISK HANDLER WORDS
   387	;	37-40	 PDP-11 PRINTER (LOCAL - AMES)
   388	;	41-42	 PDP-11 PRINTER (REMOTE - ANNEX)
   389	;	43-62	 DISK SEEK QUEUE
   390	;	106-117	IMP11 STATUS AREA
   391	;	120      BIOM ALLOCATION CONTROL WORD
   392	;	121-122  CARD TESTER LOCATIONS
   393	;	123-172  MMP COMMUNICATION SLOTS
   394	;       173-177  PDP-11 STUFF
   395	
   396	LOCKIX==JOHN+10		;CURRENT PROCESSOR INDEX FOR LOCK CONTROL
   397	PDP10N==5		;PDP-10 PROCESSOR ID(ALSO MUST BE EQUAL TO
   398	;			THE HIGHEST PROCESSOR ID)
   399	DSK11C==JOHN+31		;POINTERS FOR PDP11 DISK HANDLING
   400	DSK11D==DSK11C+1	;DATAO WORD
   401	DSK11S==DSK11C+2	;STATUS
   402	DSK10F==DSK11S+1	;FLAG WORD, SET BY PDP-11
   403	DSK11F==DSK10F+1	;FLAG WORD, SET BY PDP-10
   404	DSKSQ==JOHN+43		;DISK SEEK QUEUE.
   405	LOCKC==JOHN+11		;INTERLOCK CONTROL WORDS
   406	IMP11S==JOHN+106		;IMP11 STATUS CONTROL WORDS
   407	INTLWS==JOHN+120		;ADDRESS OF FIRST CRITICAL WORD
   408	BIOMAW==JOHN+120	;BIOM ALLOCATION CONTROL WORD
   409	INTLWE==JOHN+120	;ADDRESS OF LAST CRITICAL WORD
   410	MMPTBL==JOHN+123	;MMP TABLES UP TO JOHN+172
   411	
   412	>;END REPEAT 0
PARAMS.SMX;21                      22-MAY-75 10:31     Page 8.1

   413	


PROLOG.MAC;20                      22-MAY-75 10:31     Page 2

   414	;<MON>PROLOG.PAT;2    27-JAN-75 23:09:41    EDIT BY LIEB
   415	;ADDED JSYS DEFS FOR NEW IMP  JSYS'S--LIEB
   416	;<TENEX-130>PROLOG.MAC;87    27-NOV-72 13:54:11	EDIT BY TOMLINSON
   417	;<TENEX-130>PROLOG.MAC;86    27-NOV-72 13:38:51	EDIT BY TOMLINSON
   418	;<TENEX-130>PROLOG.MAC;85    20-NOV-72 17:47:12	EDIT BY WALLACE
   419	;<TENEX-130>PROLOG.MAC;84    20-NOV-72 17:26:40	EDIT BY WALLACE
   420	;<TENEX-130>PROLOG.MAC;83    20-NOV-72 15:32:14	EDIT BY TOMLINSON
   421	;<TENEX-130>PROLOG.MAC;82    18-NOV-72 16:31:20	EDIT BY WALLACE
   422	;<TENEX-130>PROLOG.MAC;81    13-NOV-72 11:44:15	EDIT BY TOMLINSON
   423	; ADDED ESOUT AND SPLFK JSYS'S
   424	;<TENEX-130>PROLOG.MAC;80    10-NOV-72 10:02:09	EDIT BY TOMLINSON
   425	;<TENEX-130>PROLOG.MAC;79     9-NOV-72 17:23:58	EDIT BY TOMLINSON
   426	; FIX UP BUG STRING REMOTER
   427	;<TENEXDLM>PROLOG.MAC;78    30-OCT-72 19:08:24	EDIT BY TOMLINSON
   428	; BIGGER UPDL 1 LESS UACB
   429	;<TENEXDLM>PROLOG.MAC;77    18-SEP-72 15:28:55	EDIT BY MURPHY
   430	;<TENEXDLM>PROLOG.MAC;76    18-SEP-72 13:30:12	EDIT BY MURPHY
   431	;<TENEXDLM>PROLOG.MAC;75    14-SEP-72 16:59:11	EDIT BY MURPHY
   432	;<TENEXDLM>PROLOG.MAC;74     8-AUG-72 21:49:07	EDIT BY MURPHY
   433	;<TENEXDLM>PROLOG.MAC;73     7-AUG-72 21:45:57	EDIT BY MURPHY
   434	
   435	;26 JUN 72, 1724:
   436	
   437		UNIVERSAL PROLOG
   438		PASS2
   439	
   440	;GENERAL PARAMETERS AND MACROS
   441	
   442	EOL=37			;END OF LINE CHARACTER
   443	
   444	UMODF==10000		;USER MODE FLAG IN PC WORD
   445	UIOF==4000		;USER I/O MODE IN PC WORD
   446	NUPDL==120		;PDL FOR MONITOR CALLS
   447	
   448	NFKS==2*NJOBS+^D50	;NUMBER OF FORKS
   449	NSAC==16		;HIGHEST AC SAVED BY MENTR
   450	NTERMI==^D36		;NUMBER OF TERMINAL INTERRUPTS
   451	NPILEV==3		;NUMBER OF PSEUDO-INTERRUPT LEVELS
   452	NPIPDL==40		;SIZE OF PSI LOCAL PDL
   453	NTSK==50		;SIZE OF PAGE TRAP PDL
   454	NUFKS==30		;MAX NUMBER FORKS/JOB
   455	NLFKS==20		;NUMBER OF LOCAL FORKS
   456	NWSPGS==<1000/44>+1	;SIZE OF WORKING SET PAGES BIT TABLE, 1 BIT/PG
   457	
   458	APRCHN==3		;APR PI CHANNEL
   459	SCDCHN==7		;SCHEDULER PI CHANNEL
   460	
   461	PI==4			;DEVICE CODE FOR PI
   462	
   463	;PAGER BITS
   464	
   465	READB==1B20		;READ ALLOW
   466	WRITEB==1B21		;WRITE ALLOW
PROLOG.MAC;20                      22-MAY-75 10:31     Page 2.1

   467	XCTB==1B22		;EXECUTE ALLOW
   468	;
   469	LKPBIT==1B24	;PAGE LOCKED BY .LKPG JSYS
   470	;
   471	TRAPUB==1B26		;TRAP TO USER BIT
   472	ACCESB==1B30		;ACCESS ALLOW
   473	COPYB==1B27		;COPY ON WRITE
   474	CORMB=1B9		;MODIFIED BIT IN CST0
   475	
   476	RWXB==READB+WRITEB+XCTB+ACCESB	;ALL ACCESS
   477	RWX==RWXB-ACCESB
   478	
   479	;SYSTEM CAN RUN WITH BBN 1 MS KLUDGE CLOCK, DEC DK10 CLOCK, OR NEITHER
   480	
   481	IFE DK10F,<		;ASSUME BBN CLOCK, WORK EVEN IF NOT PRESENT
   482	
   483	OAP==20			;CLOCK DEVICE (ORIGINALLY FOR OTHER APR)
   484	
   485	DEFINE MSCKON
   486	<	CONO OAP,1B29>	;CLOCK ON
   487	
   488	DEFINE MSCKOF
   489	<	CONO OAP,1B29>	;CLOCK OFF (SAME THING, STATE COMPLEMENTS)
   490	
   491	DEFINE SOMSCK
   492	<	CONSO OAP,1B28>	;SKIP IF CLOCK FLAG SET
   493	
   494	DEFINE MSCKCL
   495	<	CONO OAP,1B28>	;CLEAR CLOCK FLAG
   496	   >			;END OF BBN CLOCK DEFS
   497	
   498	IFN DK10F,<		;DEC HIGH RESOLUTION CLOCK, TIMES 1 MS INTERVALS
   499	
   500	CLK==070
   501	
   502	DEFINE MSCKON
   503	<	CONO CLK,1B30+APRCHN>
   504	
   505	DEFINE MSCKOF
   506	<	CONO CLK,1B29+APRCHN>
   507	
   508	DEFINE SOMSCK
   509	<	CONSO CLK,1B31+1B32>	;CHECKS OVERFLOW TOO
   510	
   511	DEFINE MSCKCL
   512	<	CONO CLK,1B31+1B32+APRCHN>
   513	   >			;END OF DK10 CLOCK DEFS
   514	
   515	;BITS FOR CONI/CONO APR
   516	
   517	IFN KIFLG,<
   518	APNXM==1B29
   519	APCHNS==<APRCHN>B32+APRCHN	;APR HAS 2 PI ASMTS
PROLOG.MAC;20                      22-MAY-75 10:31     Page 2.2

   520	>
   521	IFN KAFLG,<
   522	APNXM==1B23
   523	APCHNS==APRCHN
   524	>
PROLOG.MAC;20                      22-MAY-75 10:31     Page 3

   525	
   526	
   527	;MONITOR MAP BOUNDARIES
   528	IFN KIFLG,<
   529	 PPRMPG==340
   530	 SWPMPG==400>
   531	
   532	IFN KAFLG,<
   533	 PPRMPG==174		;PER PROCESSOR REGION
   534	 SWPMPG==200>		;PER PROCESSOR REGION
   535	
   536	PJMPG==600		;PER JOB REGION
   537	PPMPG==740		;PER PROCESS REGION
   538	
   539	PPRMA==<PPRMPG>B26
   540	SWPMA==<SWPMPG>B26
   541	PJMA==<PJMPG>B26
   542	PPMA==<PPMPG>B26
   543	
   544	;SWAPPER PAGES RESERVED IN PROCESSOR-PRIVATE AREA
   545	
   546	DEFINE ASNPPG (P,N)
   547	<P==PPGCT
   548	PPGCT=PPGCT+N
   549	P'A=<P>B26 >
   550	
   551	PPGCT==PPRMPG		;ASSIGNMENT START AT LOWEST MAPPED AREA
   552	
   553	ASNPPG CSWPG,1		;SWAPPER TEMP
   554	ASNPPG FITPG,1		;FORK INIT TEMP
   555	ASNPPG PRLPG,1		;PRELOAD/POSTPURGE TEMP
   556	   IFN KIFLG,<
   557	ASNPPG KIPG,1>		;TEMP FOR KI SIMUL ROUTINE
   558	ASNPPG PIPG,1		;FOR REAL-CORE REFS AT PI LEVEL
   559	
   560	NRSPG==PPGCT-PPRMPG	;NUMBER OF SPECIAL PAGES
   561	
   562	;SPECIAL RESERVED AREA FOR MDDT REENTRANT CODE
   563	;PRIVATE SEGMENT LIVES IN PER-PROCESS AREA
   564	
   565	LMDDT==10000		;LENGTH OF MDDT AREA
   566	MDDTPG==PJMPG-LMDDT/1000 ;DDT LIVES AT HIGH END OF SWPMON AREA
   567	MDDT=<MDDTPG>B26
PROLOG.MAC;20                      22-MAY-75 10:31     Page 4

   568	
   569	;JOB-COMMON AREA
   570	
   571	JSBPG==PJMPG		;JSB IS FIRST PAGE IN JOB-COMMON AREA
   572	JSB=<JSBPG>B26
   573	
   574	FREJP==PJMPG+4		;4 PAGES RESERVED FOR JSB EXPANSION
   575	FREJPA=<FREJP>B26
   576	
   577	;JFN STORAGE PARAMETERS
   578	
   579	JFNPC0=JSB+454			;MUST BE ADJUSTED IF JSB STORAGE GROWS
   580	NJFNW==1_SJFN			; = 2^SJFN
   581	MJFN=<<FREJPA-JFNPC0>/NJFNW> ;MAX NUMBER JFNS
   582	RJFN=MJFN*NJFNW			;ACTUAL SPACE USED BY JFNS
   583	
   584	;PROCESS-PRIVATE AREA
   585	
   586	PSB=777000		;PSB IS TOP PAGE OF MAP
   587	PSBPG==<PSB>B44
   588	
   589	UPTA=PSB-1000		;USER PAGE TABLE
   590	UPTPG==<UPTA>B44
   591	
   592	UACPG==PSBPG-2		;VIRTUAL PAGE FOR AC SAVE BLOCKS
   593	
   594	DEFINE ASNPPG (P,N)
   595	<P==PPGCT
   596	PPGCT=PPGCT+N
   597	P'A=<P>B26 >
   598	
   599	PPGCT=PPMPG		;VARIOUS PROCESS RESERVED PAGES
   600	
   601	ASNPPG CXBPG,1		;SWAPPER, MAP TEMP
   602	ASNPPG CPTPG,1		; ..
   603	ASNPPG CPYPG,1		; ..
   604	ASNPPG DDPG1,1		;DDMP
   605	ASNPPG DDPG2,1		; ..
   606	ASNPPG PSIPG,1		;PSI IN PROGRESS STORAGE
   607	ASNPPG FTPG1,1		;FORK
   608	ASNPPG FPBPG,1		;FORK, HOLDS OBJECT PSB
   609	
   610	FPG2==DDPG1		;USED BY SSAVE
   611	FPG2A=DDPG1A
   612	FPG3==DDPG2
   613	FPG3A=DDPG2A
   614	DDTPPG==774		;MDDT PRIVATE SEGMENT
   615	
   616	ALRMAX==0		;NUMBER OF PAGES RESERVED FOR ALR
   617	ALRVAL==10-<ALRMAX>B40	;3-BIT QUANTITY FOR PAGER ALR
PROLOG.MAC;20                      22-MAY-75 10:31     Page 5

   618	
   619	;AC DEFINITIONS
   620	
   621	P=17		;UNIVERSAL STACK
   622	
   623	OPDEF JSYS [104B8]
   624	OPDEF CALL [PUSHJ P,0]
   625	OPDEF RET [POPJ P,0]
   626	IFN KAFLG,<
   627	OPDEF XCTUU [XCT 7,0]
   628	OPDEF XCTMU [XCT 1,0]
   629	OPDEF XCTUM [XCT 4,0]
   630	OPDEF XCTBU [XCT 1,0]>
   631	IFN KIFLG,<
   632	OPDEF XCTUU [XCT 3,0]
   633	OPDEF XCTMU [XCT 2,0]
   634	OPDEF XCTUM [XCT 1,0]
   635	OPDEF XCTBU [XCT 3,0]
   636	
   637	DEFINE UMOVE (A,L)
   638	<	XCTUU [MOVE A,L]>
   639	DEFINE UMOVEM (A,L)
   640	<	XCTUU [MOVEM A,L]>
   641	DEFINE UMOVEI (A,L)
   642	<	PRINTX	!UMOVEI NOT AVAILABLE ON KI-10!>
   643	DEFINE UMOVES (A,L)
   644	<	XCTUU [MOVES (A,L)]>
   645	>;END OF KI-10 DEFINITIONS
   646	
   647	;LOCAL STORAGE ALLOCATION MACRO
   648	
   649	DEFINE LS (T,N)
   650	<	IFB <N>,<ASSIGN T,RESVLC,1>
   651		IFNB <N>,<ASSIGN T,RESVLC,N>>
   652	
   653	;GLOBAL STORAGE
   654	
   655	DEFINE GS (T,N)
   656	<	IFB <N>,<ASSIGN T,RESVLC,1>
   657		IFNB <N>,<ASSIGN T,RESVLC,N>
   658	>
   659	
   660	;SWAPPABLE STORAGE
   661	
   662	DEFINE NGS (T,N)
   663	<	IFB <N>,<ASSIGN T,NRESLC,1>
   664		IFNB <N>,<ASSIGN T,NRESLC,N>
   665	>
   666	
   667	;SWAPPABLE STORAGE ASSIGNED PAGE-AT-A-TIME
   668	
   669	DEFINE NGSP(T,N)
   670	<	IFB <N>,<ASSIGN T,NRPLOC,1000>
PROLOG.MAC;20                      22-MAY-75 10:31     Page 5.1

   671		IFNB <N>,<ASSIGN T,NRPLOC,N*1000>
   672	>
PROLOG.MAC;20                      22-MAY-75 10:31     Page 6

   673	
   674	
   675	;SWAPPABLE, RESIDENT CODE
   676	
   677	DEFINE SWAPCD<USE SWAPPC>
   678	DEFINE RESCD<USE RESPC>
   679	
   680	;REDEFINE TITLE TO DO ALL NECESSARY INITIAL THINGS
   681	
   682	SYN TITLE,%TITLE
   683	
   684	DEFINE TITLE(TT)
   685	<	%TITLE TT
   686	   IF2,<IFDEF SCDV1,<
   687		TSMAC(TTS)
   688		JSMAC(JJS)>
   689	     IFDEF LDINIT,<
   690		JSYSLC==0
   691		EXTERN UJSYS
   692		JDMAC(LJD)>
   693	   >
   694	>
PROLOG.MAC;20                      22-MAY-75 10:31     Page 7

   695	
   696	OPDEF PIOFF [CONO PI,1B27]
   697	OPDEF PION [CONO PI,1B28]
   698	
   699	DEFINE CHNOFF (CHN)
   700	<	CONO PI,1B26+1B<28+CHN>>
   701	
   702	DEFINE CHNON (CHN)
   703	<	CONO PI,1B25+1B<28+CHN>>
   704	
   705	DEFINE TESTI(CHN)
   706	<	CONSZ PI,1B<28+CHN>>
   707	DEFINE ISB (CHN)
   708	<	CONO PI,4000+1B<28+CHN>>
   709	IFN KIFLG,<
   710	DEFINE CLSB (CHN)
   711	<	CONO PI,1B22+1B<28+CHN>>
   712	
   713	  >
   714	DEFINE UNBRK (DEV)
   715	<	EXTERN DEV'CHR
   716		JRST DEV'CHR>
   717	
   718	;INSTRUCTION TRAP ERROR
   719	
   720	DEFINE ITERR (ERN)
   721	<IFNB <ERN>,<
   722		EXTERN ERN
   723		JRST [	MOVEI 1,ERN
   724			JRST ITRAP1]
   725	>
   726	IFB <ERN>,<
   727		JRST ITRAP
   728	>>
   729	DEFINE RETERR (ERN)
   730	<IFNB <ERN>,<
   731		EXTERN ERN
   732		JRST [	MOVEI 1,ERN
   733			JRST MRETNE]
   734	>
   735	IFB <ERN>,<
   736		JRST MRETN
   737	>>
PROLOG.MAC;20                      22-MAY-75 10:31     Page 8

   738	
   739	;SCHEDULING CONTROL MACROS
   740	
   741	DEFINE NOSWAP
   742	<	AOS NSWAP>
   743	
   744	DEFINE OKSWAP
   745	<	SOSG NSWAP
   746		AOS ISKED>
   747	
   748	DEFINE RESKED
   749	<	AOS ISKED
   750		ISB SCDCHN>
   751	
   752	DEFINE NOSKED
   753	<	AOS NSKED>
   754	
   755	DEFINE OKSKED
   756	<	SOSG NSKED
   757		XCT RSKED>
   758	
   759	;THIS CALL USED BY SCHEDULER. CANNOT BE JSYS ON KI-10
   760	IFN KAFLG,<
   761	DEFINE ENTSKD
   762	<	JSYS ENSKED>>
   763	IFN KIFLG,<
   764	DEFINE ENTSKD
   765	<	JSR ENSKR>>
   766	;NOSKED AND OKSKED FOR CODE POSSIBLY BEING RUN UNDER SCHEDULER
   767	
   768	DEFINE NOSKD1
   769	<	SKIPN INSKED
   770		AOS NSKED>
   771	
   772	DEFINE OKSKD1
   773	<	SKIPN INSKED
   774		SOSLE NSKED
   775		CAIA
   776		XCT RSKED>
   777	
   778	;PSI CONTROL
   779	
   780	DEFINE NOINT
   781	<	AOS INTDF>
   782	
   783	DEFINE OKINT
   784	<	XCT INTDFF>
   785	
   786	DEFINE TSTINT
   787	<	SKIPE PSIBW>
PROLOG.MAC;20                      22-MAY-75 10:31     Page 9

   788	
   789	IFN KAFLG,<	;PAGER INSTRUCTIONS
   790	
   791	;CLEAR AR'S AND LOAD PARAMETERS
   792	
   793	DEFINE PGRCLD
   794	<	CONO PGR,0>
   795	
   796	;CLEAR SPECIFIC MONITOR PAGE
   797	
   798	DEFINE MONCLR(A)
   799	<	CONO PGR,1>	;CLEARS ALL MON AR'S
   800	
   801	;LOAD AGE REGISTER
   802	
   803	DEFINE PGRLAG
   804	<	CONO PGR,0>	;MUST DO WHOLE WORKS
   805	
   806	;TURN ON PAGING (EXCEPT RESMON)
   807	
   808	DEFINE PGRON
   809	<	CONO PGR,6
   810		DATAO APR,[XWD 776776,0]>
   811	
   812	;TURN OFF PAGING (MAKE ALL REFS GO TO REAL CORE)
   813	
   814	DEFINE PGROFF
   815	<	CONO PGR,4>
   816	
   817	DEFINE SETACB (A)
   818	<	DPB A,[POINT 5,PGR71,22]
   819		CONO PGR,10>
   820	 >	;END OF KA PAGER DEFS
PROLOG.MAC;20                      22-MAY-75 10:31     Page 10

   821	
   822	IFN KIFLG,<	;KI-10 PAGER INSTRUCTIONS, MUUO'S,ETC.
   823	
   824	;MONITOR LUUO'S
   825	
   826	OPDEF .IMCLR [1B8]	;MONITOR MAP CLEAR
   827	
   828	;TRAP MUUO'S
   829	
   830	OPDEF .PGTRP [40B8]	;PAGE FAULT, USER OR MONITOR
   831	OPDEF .AROVT [41B8]	;AR OV, USER ONLY
   832	OPDEF .PDOVT [42B8]	;PDL OV, USER OR MONITOR
   833	
   834	
   835	;NO-TRAP UUO'S ARE JSYS (104) AND TOPS-10 MONITOR CALLS,DEFINED ELSEWHERE
   836	
   837	;PAGER INSTRUCTIONS - TO IMPLEMENT KA10/BBN-PAGER SET
   838	
   839	DEFINE PGRCLD
   840	<	JSR KIPCLD>	;CLEAR AR'S AND LOAD PARAMETERS
   841	
   842	DEFINE MONCLR(A)<
   843		IFE A,< .IMCLR >
   844		IFN A,<	IFLE 400-A,<
   845				IFE A&1,<HRRZS KIEPT+A/2>
   846				IFN A&1,<HLLZS KIEPT+A/2>>
   847			IFG  400-A,<
   848				PUSH P,1
   849				MOVE 1,KXUPT
   850				IFE A&1,<HRRZS 400+<A-340>/2(1)>
   851				IFN A&1,<HLLZS 400+<A-340>/2(1)>
   852				POP P,1 >
   853				DATAO PAG,KIPGWD
   854		>>
   855	
   856	DEFINE MONSET(A,B,C)<
   857		IFLE 400-A,<
   858			IFE A&1,<HRLM B,KIEPT+A/2>
   859			IFN A&1,<HRRM B,KIEPT+A/2>>
   860		IFG 400-A,<
   861			PUSH P,C
   862			MOVE C,KXUPT
   863			IFE A&1,<HRLM B,400+<A-340>/2(C)>
   864			IFN A&1,<HRRM B,400+<A-340>/2(C)>
   865			POP P,C >
   866	>
   867	
   868	DEFINE SETKIM(A,X1,X2,%L1)<
   869		PUSH P,X1
   870		PUSH P,X2
   871		LDB X2,[POINT 13,X1,26]
   872		MOVE X2,SPT(X2)
   873		TLNE X2,17
PROLOG.MAC;20                      22-MAY-75 10:31     Page 10.1

   874		JRST %L1
   875		LDB X1,[POINT 9,CST0(X2),8]
   876		CAIGE X1,100
   877		JRST %L1
   878		MOVSI X1,(CORMB)
   879		TDNE X1,CST0(X2)
   880		IORI X2,KIWB
   881		IORI X2,KIAXB
   882		MONSET(A,X2,X1)
   883	%L1:	POP P,X2
   884		POP P,X1
   885	>
   886	DEFINE PGRLAG
   887	<	CALL KIPLAG>	;LOAD AGE REG
   888	
   889	DEFINE PGRON
   890	<	JSR KIPCLD>	;TURN ON PAGING
   891	
   892	DEFINE PGROFF
   893	<	JSR KIPOFF>	;TURN OFF PAGING
   894	
   895	DEFINE SETACB(A)
   896	<	DPB A,[POINT 5,PGR71,22]
   897		JSR KIPSAB>	;SET AC BASE REG
   898	 >	;END OF KI DEFS
PROLOG.MAC;20                      22-MAY-75 10:31     Page 11

   899	
   900	;TS BLOCK ASSIGNMENTS
   901	
   902	UACB=PSB+440		;ADDRESS OF FIRST BLOCK FOR AC STORAGE
   903	EUACB==PSB+560		;END OF AC BLOCKS IN PSB
   904	
   905	ACBAS=PSB+570		;LOCATION OF AC'S FOR FORCED USER REFS
   906	TRAPS0=PSB+571		;PAGER TRAP STATUS WORD
   907	TRAPWD=PSB+572		;PAGER TRAP WRITE DATA
   908	TRAPPC=PSB+573		;PAGER TRAP PC
   909	TRAPAP=PSB+574		;PAGER TRAP AC-P
   910	TRAPSW=PSB+575		;TRAP OLD STATUS WORD
   911	UTRSW=PSB+576		;SAVED TRAPSW FOR USER
   912	UTRWD=PSB+577		;SAVED TRAPWD FOR USER
   913	
   914	DEFINE TTS (T,N)
   915	<	IFB <N>,<ASSIGN T,TSBLOC,1>
   916		IFNB <N>,<ASSIGN T,TSBLOC,N>
   917	>
   918	
   919	DEFINE ETS (T,N)
   920	<	EXTERN T
   921	>
   922	
   923	DEFINE TSMAC (TS)
   924	<
   925	TS JOBNO,1		;JOB NUMBER TO WHICH THIS FORK BELONGS
   926	TS JOBBIT,1		;SCHEDULER CONTROL BITS
   927	TS JOBCK0,1		;VARIABLES FOR SCHEDULER TIME QUARANTEE
   928	TS JOBCK1,1		; ..
   929	
   930	TS FKTAB,NLFKS/2	;LOCAL FORK HANDLE TO JOB HANDLE TABLE
   931	
   932	TS FORKN,1		;JOB FORK NUMBER OF TOP FORK,,THIS FORK
   933	TS FKRT,1		;FORK RUN TIME
   934	TS ENTVEC,1		;ENTRY VECTOR POINTER
   935	TS PATADR,1		;10/50 COMPATABILITY ENTRY VECTOR
   936	TS PATU40,1		;WHERE TO STORE C(40), SETUP AS UMOVEM 1,XX
   937	TS PATUPC,1		;WHERE TO STORE PC, SETUP AS UMOVEM 1,YY
   938	
   939	TS MPP,1		;MONITOR SAVED STACK POINTER AT LAST MENTR
   940	TS UPP,1		;MON ROUTINES STACK POINTER
   941	TS SLOWF,1		;SLOW MON ROUTINE FLAG
   942	TS XMENTR,1		;MENTR-MRETN TEMP
   943	TS XMENT1,1		;MENTR TEMP
   944	TS INTDF,1		;DEFER INTERRUPTS IF .GE. 0
   945	TS INTDFF,1		;SOS INTDF  OR JSYS PSISV1
   946	TS MJRSTF,1		;JRSTF @FPC  OR  JRST PSISV0
   947	TS ACBAS1,1		;ACBAS FOR FIRST MON CALL
   948	
   949	TS TW1,1		;DEBRK TEMPS
   950	TS TW2,1
   951	
PROLOG.MAC;20                      22-MAY-75 10:31     Page 11.1

   952	IFN IMSSS,<
   953	TS TW3,1		;USED BY PBTIN >
   954	
   955	TS ITFPC,1		;FPC AT LAST ITRAP
   956	TS KITMPS,2		;KI-10 MUUO HANDLER TEMPS
PROLOG.MAC;20                      22-MAY-75 10:31     Page 12

   957	
   958	TS PAC,20		;PROCESS AC'S
   959	TS PPC,1		;PROCESS PC
   960	TS PSB40,1		;PROCESS LOCATION 40
   961	
   962	TS ENSKR,2		;SCHEDULER TEMP (RETURN)
   963	TS SKDPC,1		;SCHEDULER TEMP (RETURN)
   964	TS NSKED,1		;NO-SCHEDULE WORD
   965	TS RSKED,1		;NO-SCHEDULE TRAP
   966	TS NSWAP,1		;NO-SWAP FLAG
   967	
   968	TS TRAPSK,NTSK		;STACK USED DURING PAGER TRAPS
   969	TS PGTIM,1		;TIME SINCE AGE REG TICK
   970	TS IFTIM,1		;TIME SINCE LAST PAGE FAULT
   971	TS TRAPC,1		;PAGER TRAP RECURSION COUNT
   972	TS UTRPCT,1		;COUNT OF PAGER TRAPS FOR THIS PROCESS
   973	TS USWPCT,1		;COUNT OF SWPINW CALLS FOR THIS PROCESS
   974	TS PTTIM,1		;TIME SPENT IN PAGER TRAPS
   975	TS IFAV,1		;INTER-FAULT AVERAGE, CONTINUOUSLY MAINTAINED
   976	TS CAPT,1		;WORKING SET WINDOW SIZE IN MS.
   977	TS WSPGS,NWSPGS		;WORKING SET PAGES BIT TABLE
   978	XWSPGS=<Z WSPGS-PSB+FITPGA>
   979	
   980	TS MONBK,1		;INTERRUPT TO MONITOR IF NON-0
   981	TS PIPC,1		;SAVED PC DURING INITIAL PI SERVICE
   982	TS PIMSK,1		;PSI REQUEST WORD BEING PASSED TO PSI SERVICE
   983	TS PIPDB,NPIPDL		;PSI ROUTINES STACK
   984	TS PIAC,20		;SAVED USER AC'S DURING BREAK START
   985	
   986	TS PSICHA,NTERMI/6	;CHANNEL ASSIGNED TO TERM CODE
   987	TS PSIBW,1		;BREAK WAITING WORD
   988	TS FORCTC,1		;CHANNEL WHICH CAUSED FORCED FORK TERMINATION
   989	TS PSICHM,1		;CHANNEL ENABLED WORD
   990	TS SUPCHN,1		;CHANNELS RESERVED BY SUPERIOR
   991	TS PSIBIP,1		;BREAK IN PROGRESS WORD (LEVELS)
   992	TS PSIPT,1		;PSI STORAGE LIST POINTER
   993	TS PIOLDS,1		;FKSTAT PRIOR TO PSI IF WAS WAITING
   994	TS LEVCHN,1		;LEVEL TABLE,,CHANNEL TABLE  ADDRESSES
   995	TS PSISYS,1		;NON-0 IF PSI SYSTEM OFF
   996	TS MONCHN,1		;CHANNELS RESERVED BY MONITOR
   997	TS MONINT,1		;FOR DDT BREAKPOINTS
   998	TS OVFLG,1		;NON-0 =) INITIATE INTERRUPTS ON MONITOR OV'S
   999	
  1000	TS UPDL,NUPDL		;PDL FOR MONITOR CALLS
  1001	
  1002	TS FPC,1		;MENTR-MRETN JSYS PC
  1003	>
  1004		TSMAC (ETS)		;DEFINE AS EXTERNAL ALWAYS
PROLOG.MAC;20                      22-MAY-75 10:31     Page 13

  1005	
  1006	;JOB STORAGE BLOCK ASSIGNMENTS
  1007	
  1008	DEFINE JJS (T,N)
  1009	<	IFB <N>,<ASSIGN T,JSBLOC,1>
  1010		IFNB <N>,<ASSIGN T,JSBLOC,N>
  1011	>
  1012	
  1013	DEFINE EJS (T,N)
  1014	<	EXTERN T
  1015	>
  1016	
  1017	DEFINE JSMAC (JS)
  1018	<
  1019	JS JOBMAP,PPMPG-PJMPG	;OBJECT MAP FOR JOB-COMMON AREA
  1020	
  1021	JS SYSFK,NUFKS		;JOB FORK INDEX TO SYSTEM FORK INDEX
  1022	JS FKPTRS,NUFKS		;FORK POINTERS (STRUCTURE)
  1023	JS FKPSIE,NUFKS		;TERM INTERRUPT ENABLED WORD
  1024	JS FKDPSI,NUFKS		;DEFERRED TERM INTERRUPTS MASK
  1025	JS FREJFK,1		;FREE JOB FORK SLOT LIST
  1026	
  1027	JS CTRLTT,1		;LINE NUMBER OF CONTROLLING TTY
  1028	JS TTSPSI,1		;CODE ENABLED ANYWHERE IN THIS JOB
  1029	JS TTSDPS,1		;TERM INT CODE DEFERRED
  1030	JS TTJTIW,1		;TERMINAL INTERRUPT ENABLE MASK
  1031	JS JOBPMF,1		;JFN OF PRIV MEM FILE
  1032	JS PMFCNT,1		;COUNT OF PMF PMAPS
  1033	JS CONSTO,1		;CONSOLE TIME ON
  1034	JS ACCTPT,1		;ACCOUNT NUMBER+5B2 OR ACCOUNT STRING PTR
  1035	JS LOGBUF,5		;LOGIN-OUT EFACT DATA, MUST PRECEDE ACCTSR
  1036	JS ACCTSR,11		;ACCOUNT STRING
  1037	>
  1038		JSMAC (ETS)		;DEFINE AS EXTERNAL ALWAYS
PROLOG.MAC;20                      22-MAY-75 10:31     Page 14

  1039	
  1040	;JSYS DISPATCH TABLE, INITIALIZED TO ALL ILLEGAL
  1041	
  1042	DEFINE JJD (N,A)
  1043	<	OPDEF N [JSYS A]
  1044	>
  1045	
  1046	;THE FOLLOWING USED ONLY IN LDINIT
  1047	
  1048	DEFINE LJD (N,A)
  1049	<	LOC 1000+JSYSLC
  1050		IFL A-JSYSLC,<PRINTX JSYS'S MUST BE DEFINED IN ORDER>
  1051		REPEAT A-JSYSLC,<XWD FPC,UJSYS>
  1052		EXTERN .'N
  1053		XWD FPC,.'N
  1054	JSYSLC==.-1000
  1055		RELOC
  1056	>
  1057	
  1058	DEFINE JDMAC (JD)
  1059	<
  1060	JD LOGIN,1
  1061	REPEAT 0,<JD CRJOB,2>
  1062	JD LGOUT,3
  1063	JD CACCT,4
  1064	JD EFACT,5
  1065	JD SMON,6
  1066	JD TMON,7
  1067	JD GETAB,10
  1068	JD ERSTR,11
  1069	JD GETER,12
  1070	JD GJINF,13
  1071	JD TIME,14
  1072	JD RUNTM,15
  1073	JD SYSGT,16
  1074	JD GNJFN,17
  1075	JD GTJFN,20
  1076	JD OPENF,21
  1077	JD CLOSF,22
  1078	JD RLJFN,23
  1079	JD GTSTS,24
  1080	JD STSTS,25
  1081	JD DELF,26
  1082	JD SFPTR,27
  1083	JD JFNS,30
  1084	JD FFFFP,31
  1085	JD RDDIR,32
  1086	REPEAT 0,<JD CPRTF,33>
  1087	JD CLZFF,34
  1088	JD RNAMF,35
  1089	JD SIZEF,36
  1090	JD GACTF,37
PROLOG.MAC;20                      22-MAY-75 10:31     Page 15

  1091	
  1092	JD STDIR,40
  1093	JD DIRST,41
  1094	JD BKJFN,42
  1095	JD RFPTR,43
  1096	JD CNDIR,44
  1097	JD RFBSZ,45
  1098	JD SFBSZ,46
  1099	JD SWJFN,47
  1100	JD BIN,50
  1101	JD BOUT,51
  1102	JD SIN,52
  1103	JD SOUT,53
  1104	JD RIN,54
  1105	JD ROUT,55
  1106	JD PMAP,56
  1107	JD RPACS,57
  1108	JD SPACS,60
  1109	JD RMAP,61
  1110	JD SACTF,62
  1111	JD GTFDB,63
  1112	JD CHFDB,64
  1113	JD DUMPI,65
  1114	JD DUMPO,66
  1115	JD DELDF,67
  1116	JD ASND,70
  1117	JD RELD,71
  1118	REPEAT 0,<JD CSYNO,72>
  1119	JD PBIN,73
  1120	JD PBOUT,74
  1121	REPEAT 0,<JD PSIN,75>
  1122	JD PSOUT,76
  1123	JD MTOPR,77
PROLOG.MAC;20                      22-MAY-75 10:31     Page 16

  1124	
  1125	JD CFIBF,100
  1126	JD CFOBF,101
  1127	JD SIBE,102
  1128	JD SOBE,103
  1129	JD DOBE,104
  1130	JD GTABS,105
  1131	JD STABS,106
  1132	JD RFMOD,107
  1133	JD SFMOD,110
  1134	JD RFPOS,111
  1135	JD RFCOC,112
  1136	JD SFCOC,113
  1137	JD STI,114
  1138	JD DTACH,115
  1139	JD ATACH,116
  1140	JD DVCHR,117
  1141	JD STDEV,120
  1142	JD DEVST,121
  1143	JD MOUNT,122
  1144	JD DSMNT,123
  1145	JD INIDR,124
  1146	JD SIR,125
  1147	JD EIR,126
  1148	JD SKPIR,127
  1149	JD DIR,130
  1150	JD AIC,131
  1151	JD IIC,132
  1152	JD DIC,133
  1153	JD RCM,134
  1154	JD RWM,135
  1155	JD DEBRK,136
  1156	JD ATI,137
  1157	JD DTI,140
  1158	JD CIS,141
  1159	JD SIRCM,142
  1160	JD RIRCM,143
  1161	JD RIR,144
  1162	JD GDSTS,145
  1163	JD SDSTS,146
  1164	JD RESET,147
PROLOG.MAC;20                      22-MAY-75 10:31     Page 17

  1165	
  1166	JD RPCAP,150
  1167	JD EPCAP,151
  1168	JD CFORK,152
  1169	JD KFORK,153
  1170	JD FFORK,154
  1171	JD RFORK,155
  1172	JD RFSTS,156
  1173	JD SFORK,157
  1174	JD SFACS,160
  1175	JD RFACS,161
  1176	JD HFORK,162
  1177	JD WFORK,163
  1178	REPEAT 0,<JD GFRKH,164
  1179	JD RFRKH,165>
  1180	JD GFRKS,166
  1181	JD DISMS,167
  1182	JD HALTF,170
  1183	JD GTRPW,171
  1184	JD GTRPI,172
  1185	JD RTIW,173
  1186	JD STIW,174
  1187	JD SOBF,175
  1188	JD RWSET,176
  1189	JD GETNM,177
  1190	
  1191	JD GET,200
  1192	JD SFRKV,201
  1193	JD SAVE,202
  1194	JD SSAVE,203
  1195	JD SEVEC,204
  1196	JD GEVEC,205
  1197	JD GPJFN,206
  1198	JD SPJFN,207
  1199	JD SETNM,210
  1200	JD FFUFP,211
  1201	JD DIBE,212
  1202	JD FDFRE,213
  1203	JD GDSKC,214
  1204	JD LITES,215
  1205	JD TLINK,216
  1206	JD STPAR,217
PROLOG.MAC;20                      22-MAY-75 10:31     Page 18

  1207	
  1208	JD ODTIM,220
  1209	JD IDTIM,221
  1210	JD ODCNV,222
  1211	JD IDCNV,223
  1212	JD NOUT,224
  1213	JD NIN,225
  1214	JD STAD,226
  1215	JD GTAD,227
  1216	JD ODTNC,230
  1217	JD IDTNC,231
  1218	JD FLIN,232
  1219	JD FLOUT,233
  1220	JD DFIN,234
  1221	JD DFOUT,235
  1222	
  1223	JD CRDIR,240
  1224	JD GTDIR,241
  1225	JD DSKOP,242
  1226	JD SPRIW,243
  1227	JD DSKAS,244
  1228	JD SJPRI,245
  1229	
  1230	IFDEF DSPCHN,<
  1231	JD ASNDP,260		; E&S JSYS'S
  1232	JD RELDP,261
  1233	JD ASNDC,262
  1234	JD RELDC,263
  1235	JD STRDP,264
  1236	JD STPDP,265
  1237	JD STSDP,266
  1238	JD RDSDP,267
  1239	JD WATDP,270
  1240	>
  1241	
  1242	IFDEF IMPCHN,<
  1243	JD ATPTY,274
  1244	JD CVSKT,275
  1245	JD CVHST,276
  1246	JD FLHST,277
  1247	>
  1248	
  1249	JD GCVEC,300
  1250	JD SCVEC,301
  1251	JD STTYP,302
  1252	JD GTTYP,303
  1253	JD BPT,304
  1254	JD GTDAL,305
  1255	JD WAIT,306
  1256	JD HSYS,307
  1257	JD USRIO,310
  1258	JD PEEK,311
  1259	JD MSFRK,312
PROLOG.MAC;20                      22-MAY-75 10:31     Page 18.1

  1260	JD ESOUT,313
  1261	JD SPLFK,314
  1262	JD ADVIZ,315
  1263	JD JOBTM,316
  1264	JD DELNF,317
  1265	JD SWTCH,320
  1266	
  1267	JD OPRFN,326			;!! MAH @ SUMEX 4/75 !!
  1268	
  1269	REPEAT 0,<
  1270	;
  1271	;	JSYS DEFS FOR TNILLI-TENEX
  1272	;
  1273	JD LKPG,340
  1274	JD XCM,341
  1275	JD BLKPM,343
  1276	JD WAKUP,344
  1277	JD LD11P,345
  1278	JD UJFNO,346
  1279	JD BLKMC,347
  1280	JD AQMMP,351
  1281	JD SMMPT,352
  1282	JD RMMPR,353
  1283	JD SMMPR,354
  1284	JD SMMPI,355
  1285	JD RLMMP,356
  1286	>;END REPEAT 0
  1287	JD DRMOP,357
  1288	JD ASPTY,360
  1289	JD REPTY,361
  1290	JD PSTI,362
  1291	JD PSTO,363
  1292	JD SIBF,364
  1293	JD SRUBA,365
  1294	REPEAT 0,<
  1295	JD INTLK,366
  1296	>
  1297	IFN IMSSS,<
  1298	JD PBTIN,600		;BYTE IN AND TIME
  1299	JD TTCVT,601		;CONVERT TTYS TO HSL
  1300	JD KIDNO,602		;READ/SET KIDDIE NUMBER
  1301	JD LOGSV,603		;WRITE LOGSAV DATA
  1302	JD DATSV,604		;SAVE KIDDIE DATA
  1303	JD SCEDR,605		;READ LOGIN SCHEDULE
  1304	JD SCEDS,606		;SET LOGIN SCHEDULE
  1305	>;end of imsss
  1306	JD CNTSZ,607		;COUNT FORK(S),SIZE FOR ANY JOB
  1307	IFN IMSSS,<
  1308	JD SYSLK,610		;LOOK AT A SYSTEM LOCATION
  1309	>;END OF IMSSS
  1310	JD PSTIN,611		;STRING INPUT
  1311	JD RAND,612		;RANDOM NUMBER GENERATOR
  1312	IFN IMSSS,<
PROLOG.MAC;20                      22-MAY-75 10:31     Page 18.2

  1313	JD KLGOT,613		;HALTF IF EXEC- LOGOUT IF KIDDY
  1314	>;end of imsss
  1315	JD PTINF,614		;PUTINF JSYS
  1316	JD GTINF,615		;GETINF JSYS
  1317	IFN IMSSS,<
  1318	;JD SETWS,616		;SET WORKING SET ENTRIES
  1319	;JD CLRWS,617		;CLEAR WORKING SET ENTRIES
  1320	;JD AUTWS,620		;SET AUTO WS SWITCH
  1321	;JD RDWS,621		;READ WORKING SET
  1322	;JD CLAWS,622		;CLEAR WHOLE WORKING SET
  1323	JD KLGIN,623		;KIDDY LOGIN JSYS
  1324	
  1325	JD DEVCT,624		;DEVICE IO JSYS
  1326	>;end of imsss
  1327	JD DELCH,625
  1328	JD SJPCT,626	;SET JOB PRIORITY
  1329	JD RJPCT,627	;READ JOB PRIORITY
  1330	JD IIT,630		;TIMER INTERRUPT
  1331	JD PARRD,631		;READ PARAMETERS
  1332	JD PARST,632		;SET PARAMETERS
  1333	JD STCHA,633		;SET STOP CHARACTER
  1334	JD GTBLT,634		;BLT SYSTABLES
  1335	
  1336	;TYMNET JSYS'S ALLOW ABOUT 10 FOR EXPANSION
  1337	IFDEF TYMSW,<
  1338	JD TYMBW,651		;store a word into TYMNET interface page
  1339	JD TYMBR,652		;get a word from the TYMNET interface page
  1340	JD TYMLI,653		;get connected TYMNET line node info
  1341	>
  1342	
  1343	;SUMEX JSYS's ALLOW ABOUT 20(8) FOR EXPANSION
  1344	IFN SUMEX, <
  1345	JD VKEEP,674		;set # versions to retain for a file
  1346	JD PRGE,675		;expunge a single file
  1347	>	
  1348	
  1349	IFDEF IMPCHN,<
  1350	JD SNDIM,750	;ADDED WITH NEW IMPDV.133
  1351	JD RCVIM,751
  1352	JD ASNSQ,752
  1353	JD RELSQ,753
  1354	>
  1355	IFDEF IMPCHN,<
  1356	JD DBGIM,766>
  1357	
  1358	;TEMPORARY DEF'S
  1359	JD MRPAC,772
  1360	JD TTMSG,775
  1361	JD EXEC,777
  1362	>
  1363		JDMAC (JJD)		;OPDEF ALL
  1364	
  1365		.END
PROLOG.MAC;20                      22-MAY-75 10:31     Page 18.3

  1366	

PROLOG.MAC;20                      22-MAY-75 10:31     Page 19

%IN   	  318#  327   328   329 
%IP   	  316#  327   329 
%IS   	  317#  328   329 
%L1   	  868   874   877   883#
%N    	  217   318   319 
%P    	  215   314#  314   316   319   327   329   351   353#
%S    	  216   315#  315   317   328   329   348   350#
%TG1  	  345   347#  352   354   358 
%TG2  	  345   349#  352   358 
%TITLE	  682   685 
..BGP 	  218#  218   224#  263 
..BGS 	  219#  219   225#  263 
.AROVT	  831#
.END  	  304   330  1365 
.IMCLR	  826#  843 
.OLDPC	  294   298#  312#
.PDOVT	  832#
.PGTRP	  830#
.TITLE	  309 
A     	  637   638   639   640   641   643   644   798   817   818   842   843 
	  844   844   845   845   846   846   847   850   850   851   851   856 
	  857   858   858   859   859   860   863   863   864   864   868   882 
	  895   896  1042  1043  1048  1050  1051 
A%    	   34    34 
ACBAS 	  905#
ACBAS1	  947 
ACCESB	  472#  476   477 
ACCTPT	 1034 
ACCTSR	 1036 
ACL   	  276#
ADVIZ 	 1262 
AIC   	 1150 
ALRMAX	  616#  617 
ALRVAL	  617#
AMOUNT	  334   335 
APCHNS	  519#  523#
APNXM 	  518#  522#
APR   	  810 
APRCHN	  458#  503   506   512   519   519   523 
AQMMP 	 1280 
ASND  	 1116 
ASNDC 	 1233 
ASNDP 	 1231 
ASNPPG	  546#  553   554   555   557   558   594#  601   602   603   604   605 
	  606   607   608 
ASNSQ 	 1352 
ASPTY 	 1288 
ASSIGN	  650   651   656   657   663   664   670   671   915   916  1009  1010 
ATACH 	 1139 
ATI   	 1156 
ATPTY 	 1243 
B     	  856   858   859   863   864 
B%    	   34    34 
PROLOG.MAC;20                      22-MAY-75 10:31     Page 19.1

BBNCLK	   40#
BGR   	  357 
BIN   	 1100 
BIOMAW	  408#
BIOMRA	  369#
BIOMSZ	  371#
BIOMVA	  368#
BKJFN 	 1094 
BLKMC 	 1279 
BLKPM 	 1275 
BOUT  	 1101 
BPT   	 1253 
BUG   	  327   328   345#  356 
BUGOFL	  327   328   334#
C     	  856   861   862   863   864   865 
CACCT 	 1063 
CALL  	  624#  887 
CAPT  	  976 
CFIBF 	 1125 
CFOBF 	 1126 
CFORK 	 1168 
CHFDB 	 1112 
CHKDSE	  285#
CHKDSR	  286#
CHN   	  699   700   702   703   705   706   707   708   710   711 
CHNOFF	  699#
CHNON 	  702#
CIS   	 1158 
CLK   	  500#  503   506   509   512 
CLOSF 	 1077 
CLSB  	  710#
CLZFF 	 1087 
CNDIR 	 1096 
CNTSZ 	 1306 
CONF  	  271#
CONSTO	 1033 
COPYB 	  473#
CORMB 	  474#  878 
CPRTF 	 1086 
CPTPG 	  602 
CPYPG 	  603 
CRDIR 	 1223 
CRJOB 	 1061 
CST0  	  170   875   879 
CST1  	  171 
CST2  	  172 
CST3  	  173 
CSWPG 	  553 
CSYNO 	 1118 
CTRLTT	 1027 
CTYLIN	   63#   64    73 
CVHST 	 1245 
CVSKT 	 1244 
PROLOG.MAC;20                      22-MAY-75 10:31     Page 19.2

CXBPG 	  601 
DATSV 	 1302 
DBGIM 	 1356 
DDPG1 	  604   610 
DDPG1A	  611 
DDPG2 	  605   612 
DDPG2A	  613 
DDTPPG	  614#
DEBRK 	 1155 
DECDLS	  126#
DECTAP	  244 
DELCH 	 1327 
DELDF 	 1115 
DELF  	 1081 
DELNF 	 1264 
DEV   	  714   715   716 
DEVCT 	 1325 
DEVICE	  236 
DEVST 	 1142 
DFBGP 	  214#  227   228   229   230   231   232   233   234   235   236   237 
	  238   239   240   241   242   243   244   245   246   247   248   249 
	  250   251   252   253   254   255   256   257   258   259   260   261 
DFIN  	 1220 
DFOUT 	 1221 
DIAG  	  275#
DIBE  	 1201 
DIC   	 1152 
DIR   	 1149 
DIRECT	  237 
DIRST 	 1093 
DISC  	  245 
DISMS 	 1181 
DISPLA	  246 
DK10F 	   41#  481   498 
DLSCHN	  124#
DOBE  	 1129 
DPKN  	  113   113   114 
DRM   	  234 
DRMCHN	  123#
DRMOP 	 1287 
DSK   	  233 
DSK10F	  402#  403 
DSK11C	  399#  400   401 
DSK11D	  400#
DSK11F	  403#
DSK11S	  401#  402 
DSKAS 	 1227 
DSKCHN	  119#
DSKOP 	 1225 
DSKSQ 	  404#
DSMNT 	 1144 
DSPCHN	  144# 1230 
DST   	  174 
PROLOG.MAC;20                      22-MAY-75 10:31     Page 19.3

DTACH 	 1138 
DTACHN	  132#
DTAN  	   92#  130   244 
DTDCHN	  131#
DTI   	 1157 
DTYLO 	   60#
DUMPI 	 1113 
DUMPO 	 1114 
DVCHR 	 1140 
DX    	  154#  167   169   170   171   172   173   174   175   181   182   185 
DXX   	  155   156#  156   165#  178#  178 
EFACT 	 1064 
EIR   	 1147 
EJS   	 1013#
END   	  324#
ENSKED	  762 
ENSKR 	  765   962 
ENTSKD	  761#  764#
ENTVEC	  934 
EOL   	  442#
EPCAP 	 1167 
ERN   	  720   721   722   723   726   729   730   731   732   735 
ERSTR 	 1068 
ESOUT 	 1260 
ETS   	  919# 1004  1038 
EUACB 	  903#
EXEC  	 1361 
FACTON	  284#
FDFRE 	 1202 
FFFFP 	 1084 
FFORK 	 1170 
FFUFP 	 1200 
FILINI	  247 
FILTTY	  250 
FITPG 	  554 
FITPGA	  978 
FKDPSI	 1024 
FKPSIE	 1023 
FKPTRS	 1022 
FKRT  	  933 
FKTAB 	  930 
FLHST 	 1246 
FLIN  	 1218 
FLOUT 	 1219 
FORCTC	  988 
FORKN 	  932 
FPBPG 	  608 
FPC   	 1002  1051  1053 
FPG2  	  610#
FPG2A 	  611#
FPG3  	  612#
FPG3A 	  613#
FREE  	  238 
PROLOG.MAC;20                      22-MAY-75 10:31     Page 19.4

FREJFK	 1025 
FREJP 	  574#  575 
FREJPA	  575#  581 
FTPG1 	  607 
FUTILI	  239 
GACTF 	 1090 
GCVEC 	 1249 
GDSKC 	 1203 
GDSTS 	 1162 
GET   	 1191 
GETAB 	 1067 
GETER 	 1069 
GETNM 	 1189 
GEVEC 	 1196 
GFRKH 	 1178 
GFRKS 	 1180 
GJINF 	 1070 
GNJFN 	 1074 
GPJFN 	 1197 
GS    	  655#
GTABS 	 1130 
GTAD  	 1215 
GTBLT 	 1334 
GTDAL 	 1254 
GTDIR 	 1224 
GTFDB 	 1111 
GTINF 	 1316 
GTJFN 	  240  1075 
GTRPI 	 1184 
GTRPW 	 1183 
GTSTS 	 1079 
GTTYP 	 1252 
HALTF 	 1182 
HEAVY 	  280#
HFORK 	 1176 
HOSTS 	  254 
HSYS  	 1256 
HVYLSH	  277#  280 
I4    	  248 
I4SW  	   46#
IDCNV 	 1211 
IDTIM 	 1209 
IDTNC 	 1217 
IFAV  	  975 
IFTIM 	  970 
IIC   	 1151 
IIT   	 1330 
IJSFRE	   88#
IMP11S	  406#
IMPCHN	  134#  235  1242  1349  1355 
IMPDV 	  235 
IMSSS 	   44#  952  1297  1307  1312  1317 
INIDR 	 1145 
PROLOG.MAC;20                      22-MAY-75 10:31     Page 19.5

INSKED	  769   773 
INTDF 	  781   944 
INTDFF	  784   945 
INTLK 	 1295 
INTLWE	  409#
INTLWS	  407#
IO    	  241 
ISB   	  707#  750 
ISKED 	  746   749 
ISYS  	  261 
ITERR 	  720#
ITFPC 	  955 
ITRAP 	  727 
ITRAP1	  724 
IVAL  	  293   295   295 
JB0TTY	  111#
JD    	 1058  1060  1061  1062  1063  1064  1065  1066  1067  1068  1069  1070 
	 1071  1072  1073  1074  1075  1076  1077  1078  1079  1080  1081  1082 
	 1083  1084  1085  1086  1087  1088  1089  1090  1092  1093  1094  1095 
	 1096  1097  1098  1099  1100  1101  1102  1103  1104  1105  1106  1107 
	 1108  1109  1110  1111  1112  1113  1114  1115  1116  1117  1118  1119 
	 1120  1121  1122  1123  1125  1126  1127  1128  1129  1130  1131  1132 
	 1133  1134  1135  1136  1137  1138  1139  1140  1141  1142  1143  1144 
	 1145  1146  1147  1148  1149  1150  1151  1152  1153  1154  1155  1156 
	 1157  1158  1159  1160  1161  1162  1163  1164  1166  1167  1168  1169 
	 1170  1171  1172  1173  1174  1175  1176  1177  1178  1179  1180  1181 
	 1182  1183  1184  1185  1186  1187  1188  1189  1191  1192  1193  1194 
	 1195  1196  1197  1198  1199  1200  1201  1202  1203  1204  1205  1206 
	 1208  1209  1210  1211  1212  1213  1214  1215  1216  1217  1218  1219 
	 1220  1221  1223  1224  1225  1226  1227  1228  1231  1232  1233  1234 
	 1235  1236  1237  1238  1239  1243  1244  1245  1246  1249  1250  1251 
	 1252  1253  1254  1255  1256  1257  1258  1259  1260  1261  1262  1263 
	 1264  1265  1267  1273  1274  1275  1276  1277  1278  1279  1280  1281 
	 1282  1283  1284  1285  1287  1288  1289  1290  1291  1292  1293  1295 
	 1298  1299  1300  1301  1302  1303  1304  1306  1308  1310  1311  1313 
	 1315  1316  1323  1325  1327  1328  1329  1330  1331  1332  1333  1334 
	 1338  1339  1340  1345  1346  1350  1351  1352  1353  1356  1359  1360 
	 1361 
JDMAC 	  692  1058# 1363 
JFNPC0	  579#  581 
JFNS  	 1083 
JJD   	 1042# 1363 
JJS   	  688  1008#
JOBBIT	  926 
JOBCK0	  927 
JOBCK1	  928 
JOBMAP	 1019 
JOBNO 	  925 
JOBPMF	 1031 
JOBTM 	 1263 
JOHN  	  373#  396   399   404   405   406   407   408   409   410 
JS    	 1017  1019  1021  1022  1023  1024  1025  1027  1028  1029  1030  1031 
	 1032  1033  1034  1035  1036 
PROLOG.MAC;20                      22-MAY-75 10:31     Page 19.6

JSB   	  572#  579 
JSBLOC	 1009  1010 
JSBPG 	  571#  572 
JSMAC 	  688  1017# 1038 
JSYS  	  242   623#  762  1043 
JSYSLC	  690# 1049  1050  1051  1054#
KAFLG 	   36#   40   203   521   532   626   760   789 
KFORK 	 1169 
KIAXB 	  881 
KIDNO 	 1300 
KIEPT 	  181   845   846   858   859 
KIFLG 	   37#   41   180   196   517   528   556   631   709   763   822 
KIPCLD	  840   890 
KIPG  	  557 
KIPGWD	  853 
KIPLAG	  887 
KIPOFF	  893 
KIPSAB	  897 
KITMPS	  956 
KIUPT 	  182 
KIWB  	  880 
KLGIN 	 1323 
KLGOT 	 1313 
KXUPT 	  849   862 
L     	  637   638   639   640   641   643   644 
LD11P 	 1277 
LDINIT	  227   689 
LEVCHN	  994 
LGOUT 	 1062 
LHOSTN	  100#
LINEPR	  251 
LITES 	 1204 
LITS  	  326#
LJD   	  692  1048#
LKPBIT	  469#
LKPG  	 1273 
LMDDT 	  565#  566 
LOCKC 	  405#
LOCKIX	  396#
LOG   	  272#
LOGBUF	 1035 
LOGIN 	 1060 
LOGSV 	 1301 
LOGTTY	  109#
LOOKUP	  243 
LPTCHN	  142#
LPTDVF	   95#  141 
LPTN  	   94#  251 
LPTSPL	   96#
LS    	  649#
LSTRPG	  364#
MAGTAP	  252 
MAINT 	  274#
PROLOG.MAC;20                      22-MAY-75 10:31     Page 19.7

MAXCOR	  152#  170   171   172   173 
MAXSYM	  192#
MDDT  	  567#
MDDTPG	  566#  567 
ME10RA	  370#
ME10SZ	  372#
MJFN  	  581#  582 
MJRSTF	  946 
MMAP  	  164#
MMPTBL	  410#
MON   	  229 
MONBK 	  980 
MONCHN	  996 
MONCLR	  798#  842#
MONINT	  997 
MONSET	  856#  882 
MOUNT 	 1143 
MPP   	  939 
MRETN 	  736 
MRETNE	  733 
MRPAC 	 1359 
MSCKCL	  494#  511#
MSCKOF	  488#  505#
MSCKON	  485#  502#
MSFRK 	 1259 
MTACHN	  129#
MTAN  	   93#  127   252 
MTDCHN	  128#
MTOPR 	 1123 
N     	  546   548   594   596   649   650   651   651   655   656   657   657 
	  662   663   664   664   669   670   671   671   914   915   916   916 
	  919  1008  1009  1010  1010  1013  1042  1043# 1048 
NAM   	  214 
NAUTO 	   56#
NBUGP 	  221#
NDP   	  143   246 
NDSKS 	  113#  114#
NDST  	   85#  174 
NDTY  	   61#
NETN  	   97#  133   253 
NETWIZ	  273#
NETWRK	  253 
NFDIB 	   89#
NFKS  	  448#
NGS   	  662#
NGSP  	  669#
NHSLN 	   62#   63 
NIL   	  255 
NIN   	 1213 
NJFNW 	  580#  581   582 
NJOBS 	   55#  448 
NLFKS 	  455#  930 
NLINES	   71#   72    76 
PROLOG.MAC;20                      22-MAY-75 10:31     Page 19.8

NM    	  154   155#
NNTBFS	   98#
NNVTLN	   70#   71 
NOINT 	  780#
NOSKD1	  768#
NOSKED	  752#
NOSWAP	  741#
NOUT  	 1212 
NPACKS	   90#
NPILEV	  451#
NPIPDL	  452#  983 
NPTY  	   65#   66 
NRESBG	  197#  204#
NRESLC	  663   664 
NRPLBG	  198#  205#
NRPLOC	  670   671 
NRSPG 	  560#
NSAC  	  449#
NSKED 	  753   756   770   774   964 
NSKT  	   99#
NSWAP 	  742   745   966 
NTERMI	  450#  986 
NTSK  	  453#  968 
NTTBF 	   76#  175 
NTTYS 	   73#
NTYMTT	   67#   68 
NUFKS 	  454# 1021  1022  1023  1024 
NUPDL 	  446# 1000 
NVTHI 	   72#
NVTLO 	   68#   69    71 
NWSPGS	  456#  977 
OAP   	  483#  486   489   492   495 
ODCNV 	 1210 
ODTIM 	 1208 
ODTNC 	 1216 
OKINT 	  783#
OKSKD1	  772#
OKSKED	  755#
OKSWAP	  744#
OPENF 	 1076 
OPER  	  270#
OPRFN 	 1267 
ORG   	  297   348   351   354 
OTYLNE	   74#
OVFLG 	  998 
P     	  357   546   547#  549   594   595#  597   621#  624   625   848   852 
	  861   865   869   870   883   884 
PAC   	  958 
PAG   	  853 
PARRD 	 1331 
PARST 	 1332 
PATADR	  935 
PATU40	  936 
PROLOG.MAC;20                      22-MAY-75 10:31     Page 19.9

PATUPC	  937 
PBIN  	 1119 
PBOUT 	 1120 
PBTIN 	 1298 
PC    	  293   295#  296   297   298#
PDP10N	  397#
PEEK  	 1258 
PGR   	  794   799   804   809   815   819 
PGR71 	  818   896 
PGRCLD	  793#  839#
PGRLAG	  803#  886#
PGROFF	  814#  892#
PGRON 	  808#  889#
PGTIM 	  969 
PI    	  461#  696   697   700   703   706   708   711 
PIAC  	  984 
PIMSK 	  982 
PIOFF 	  696#
PIOLDS	  993 
PION  	  697#
PIPC  	  981 
PIPDB 	  983 
PIPG  	  558 
PJMA  	  541#
PJMPG 	  536#  541   566   571   574  1019 
PLOTTE	  256 
PLTCHN	  140#
PLTN  	  139   256 
PMAP  	 1106 
PMFCNT	 1032 
POINTE	  327 
POSTLD	  260 
PPC   	  959 
PPGCT 	  547   548#  548   551#  560   595   596#  596   599#
PPMA  	  542#
PPMPG 	  537#  542   599  1019 
PPRMA 	  539#
PPRMPG	  529#  533#  539   551   560 
PRGE  	 1346 
PRLPG 	  555 
PROLOG	  437 
PSB   	  586#  587   589   902   903   905   906   907   908   909   910   911 
	  912   978 
PSB40 	  960 
PSBPG 	  587#  592 
PSIBIP	  991 
PSIBW 	  787   987 
PSICHA	  986 
PSICHM	  989 
PSIN  	 1121 
PSIPG 	  606 
PSIPT 	  992 
PSISYS	  995 
PROLOG.MAC;20                      22-MAY-75 10:31     Page 19.10

PSOUT 	 1122 
PSTI  	 1290 
PSTIN 	 1310 
PSTO  	 1291 
PTINF 	 1315 
PTP   	  257 
PTPCHN	  136#
PTPN  	  102#  135   257 
PTR   	  258 
PTRCHN	  138#
PTRN  	  103#  137   258 
PTTIM 	  974 
PTYLO 	   64#   66 
PUSHF 	  345   356   357 
RAND  	 1311 
RCM   	 1153 
RCVIM 	 1351 
RDDIR 	 1085 
RDSDP 	 1238 
READB 	  465#  476 
RELD  	 1117 
RELDC 	 1234 
RELDP 	 1232 
RELSQ 	 1353 
REPTY 	 1289 
RESCD 	  678#
RESET 	 1164 
RESKED	  748#
RESLOC	  185 
RESMA0	  199   200#  206   207#
RESPC 	  310#  313   325   325   678 
RESVLC	  650   651   656   657 
RET   	  625#
RETERR	  729#
RFACS 	 1175 
RFBSZ 	 1097 
RFCOC 	 1135 
RFMOD 	 1132 
RFORK 	 1171 
RFPOS 	 1134 
RFPTR 	 1095 
RFRKH 	 1179 
RFSTS 	 1172 
RIN   	 1104 
RIR   	 1161 
RIRCM 	 1160 
RJFN  	  582#
RJPCT 	 1329 
RLJFN 	 1078 
RLMMP 	 1285 
RLRMA 	  190#
RLRPG 	  189#  192 
RMAP  	 1109 
PROLOG.MAC;20                      22-MAY-75 10:31     Page 19.11

RMMPR 	 1282 
RNAMF 	 1088 
ROUT  	 1105 
RP02F 	  120#
RPACS 	 1107 
RPCAP 	 1166 
RSKED 	  757   776   965 
RTIW  	 1185 
RUNTM 	 1072 
RWM   	 1154 
RWSET 	 1188 
RWX   	  477#
RWXB  	  476#  477 
S     	  308   309   314   319 
SACTF 	 1110 
SAVE  	 1193 
SBUGTF	  222#  225 
SCDCHN	  459#  750 
SCDV1 	  686 
SCEDR 	 1303 
SCEDS 	 1304 
SCVEC 	 1250 
SDSTS 	 1163 
SETACB	  817#  895#
SETKIM	  868#
SETNM 	 1199 
SEVEC 	 1195 
SFACS 	 1174 
SFBSZ 	 1098 
SFCOC 	 1136 
SFMOD 	 1133 
SFORK 	 1173 
SFPTR 	 1082 
SFRKV 	 1192 
SIBE  	 1127 
SIBF  	 1292 
SIN   	 1102 
SIR   	 1146 
SIRCM 	 1159 
SIZ   	  154   156   214   218   219 
SIZEF 	 1089 
SJFN  	  148#  580 
SJPCT 	 1328 
SJPRI 	 1228 
SKDPC 	  963 
SKPIR 	 1148 
SLOWF 	  941 
SMMPI 	 1284 
SMMPR 	 1283 
SMMPT 	 1281 
SMON  	 1065 
SNDIM 	 1350 
SOBE  	 1128 
PROLOG.MAC;20                      22-MAY-75 10:31     Page 19.12

SOBF  	 1187 
SOMSCK	  491#  508#
SOUT  	 1103 
SPACS 	 1108 
SPJFN 	 1198 
SPLFK 	 1261 
SPRIW 	 1226 
SPT   	  167   168   872 
SPTH  	  169 
SRUBA 	 1293 
SSAVE 	 1194 
SSPT  	   84#  167   169 
STABS 	 1131 
STAD  	 1214 
STCHA 	 1333 
STDEV 	 1141 
STDIR 	 1092 
STI   	 1137 
STIW  	 1186 
STPAR 	 1206 
STPDP 	 1236 
STR   	  345 
STRBGP	  223#  224   225 
STRDP 	 1235 
STRING	  259   328 
STSDP 	 1237 
STSTS 	 1080 
STTYP 	 1251 
SUMEX 	   45# 1344 
SUMX  	  249 
SUPCHN	  990 
SWAPCD	  677#
SWAPPC	  312#  677 
SWJFN 	 1099 
SWPMA 	  540#
SWPMA0	  210#  311 
SWPMON	  230 
SWPMP0	  201#  208#  210 
SWPMPG	  530#  534#  540 
SWTCH 	 1265 
SYSFK 	 1021 
SYSGT 	 1073 
SYSLK 	 1308 
SYSNAM	   34#  228 
SYSSCF	   82#
T     	  649   650   651   655   656   657   662   663   664   669   670   671 
	  914   915   916   919   920  1008  1009  1010  1013  1014 
TESTI 	  705#
TIME  	 1071 
TITLE 	  308#  682   684#
TLINK 	 1205 
TMON  	 1066 
TMZONE	   86#
PROLOG.MAC;20                      22-MAY-75 10:31     Page 19.13

TRAPAP	  909#
TRAPC 	  971 
TRAPPC	  908#
TRAPS0	  906#
TRAPSK	  968 
TRAPSW	  910#
TRAPUB	  471#
TRAPWD	  907#
TS    	  923   925   926   927   928   930   932   933   934   935   936   937 
	  939   940   941   942   943   944   945   946   947   949   950   953 
	  955   956   958   959   960   962   963   964   965   966   968   969 
	  970   971   972   973   974   975   976   977   980   981   982   983 
	  984   986   987   988   989   990   991   992   993   994   995   996 
	  997   998  1000  1002 
TSBLOC	  915   916 
TSMAC 	  687   923# 1004 
TSTINT	  786#
TT    	  684   685 
TTBUFF	  176#
TTBUFS	  175 
TTCVT 	 1299 
TTJTIW	 1030 
TTMSG 	 1360 
TTS   	  687   914#
TTSDPS	 1029 
TTSIZ 	   77#  175 
TTSPSI	 1028 
TTSTOP	  107#
TTYSRV	  231   232 
TW1   	  949 
TW2   	  950 
TW3   	  953 
TYMBR 	 1339 
TYMBSZ	  161#
TYMBUF	  160#
TYMBW 	 1338 
TYMLI 	 1340 
TYMSW 	   53#  159   231   232  1337 
TYMTTH	   69#
TYMTTL	   66#   68 
TYP   	  345 
UACB  	  902#
UACPG 	  592#
UIOF  	  445#
UJFNO 	 1278 
UJSYS 	  691  1051 
UMODF 	  444#
UMOVE 	  637#
UMOVEI	  641#
UMOVEM	  639#
UMOVES	  643#
UNBRK 	  714#
UPDL  	 1000 
PROLOG.MAC;20                      22-MAY-75 10:31     Page 19.14

UPP   	  940 
UPTA  	  589#  590 
UPTPG 	  590#
USE   	  293#  313   325   677   678 
USRIO 	 1257 
USRSCF	   80#
USWPCT	  973 
UTRPCT	  972 
UTRSW 	  911#
UTRWD 	  912#
V     	  298   298   312   312 
VKEEP 	 1345 
WAIT  	 1255 
WAKUP 	 1276 
WATDP 	 1239 
WFORK 	 1177 
WHAT  	  334 
WHEEL 	  269#
WRITEB	  466#  476 
WSPGS 	  977   978 
X1    	  868   869   871   875   876   878   879   882   884 
X2    	  868   870   871   872   872   873   875   879   880   881   882   883 
XCM   	 1274 
XCTB  	  467#  476 
XCTBU 	  630#  635#
XCTMU 	  628#  633#
XCTUM 	  629#  634#
XCTUU 	  627#  632#  638   640   644 
XMENT1	  943 
XMENTR	  942 
XWSPGS	  978#
ZZZ   	  324   330 
NETWRK.VDH;1                       22-MAY-75 10:29     Page 1

     1	;<MON>NETWRK.MAC;3    12-MAR-75 13:04:38    EDIT BY LIEB
     2	;RESTRICTED BUFFER SIZE FOR VDH OUTPUT TO PREVENT 9 PACKET MESSAGES
     3	;<MON>NETWRK.MAC;2    28-JAN-75 23:59:25    EDIT BY LIEB
     4	;INSEERTED SEARCH PROLOG TO GET OPDEFS--LIEB
     5	;<LIEB>NETWRK.MAC;2    28-JAN-75 00:00:15    EDIT BY LIEB
     6	;CHANGED NCPERR+7 TO KEEP ERRORS OUT OF UTAH--LIEB
     7	;<133-TENEX>NETWRK.MAC;224    13-DEC-74 10:43:05    EDIT BY TOMLINSON
     8	; RESET CONNECTION CLOCK EVERY SUCCESSFUL XMIT TO MINIMIZE RESYNCS
     9	; FIX CAIG/GE CHECK IN SK2DWN TO BE CORRECT
    10	;<133-TENEX>NETWRK.MAC;223    25-SEP-74 12:52:27    EDIT BY TOMLINSON
    11	; INTERN SK2DWN. REMOVE INTERN SKTDWN.
    12	;<TENEX-132>NETWRK.MAC;222    14-JUN-74 16:44:10    EDIT BY TOMLINSON
    13	; FIX ALLOCATE RESYNC
    14	;<TENEX-132>NETWRK.MAC;221     7-JUN-74 13:46:29    EDIT BY ALLEN
    15	; FIX DMPBUF FOR FORCED CLOSES
    16	;<TENEX-132>NETWRK.MAC;220     3-JUN-74 11:57:54    EDIT BY TOMLINSON
    17	; ADDED ALLOCATION CHECKER -- GENERATE IO ERROR ON FAILURE IF CLOSING
    18	;<TENEX-132>NETWRK.MAC;217    14-MAY-74 08:51:15    EDIT BY TOMLINSON
    19	; Eliminated perpetual hang-up if missing allocate
    20	;<TENEX-132>NETWRK.MAC;216    13-MAY-74 09:33:48    EDIT BY TOMLINSON
    21	;<TENEX-132>NETWRK.MAC;215     6-MAY-74 13:10:58    EDIT BY TOMLINSON
    22	; INTERN SKTDWN
    23	;<TENEX-132>NETWRK.MAC;214     4-APR-74 12:36:46	EDIT BY TOMLINSON
    24	; ADDED MTOPR 23 TO ABORT CONNECTION
    25	;<TENEX-132>NETWRK.MAC;213    28-MAR-74 18:21:08	EDIT BY TOMLINSON
    26	;<TENEX-132>NETWRK.MAC;212    28-MAR-74 14:04:44	EDIT BY TOMLINSON
    27	; CHANGE MNHSTS TO VARIABLE. NOT CONSTANT
    28	;<TENEX-132>NETWRK.MAC;211    28-MAR-74 13:44:55	EDIT BY TOMLINSON
    29	;<TENEX-132>NETWRK.MAC;210    27-MAR-74 21:33:48	EDIT BY TOMLINSON
    30	; FIX EDITTING ERRORS ABOUT INIHST
    31	;<TENEX-132>NETWRK.MAC;209    27-MAR-74 19:56:20	EDIT BY TOMLINSON
    32	; ADDED CALL TO INITIALIZE HOST TABLES FROM NETINI
    33	;<TENEX-132>NETWRK.MAC;208    15-MAR-74 22:36:07	EDIT BY TOMLINSON
    34	; FIXED BUG IN PC BACKUP BUG FIX
    35	; ADDED MTOPR 26 FOR NETWRK -- SET UP INPUT BUFFERS AND SEND ALLOCATE
    36	; NOTE MTOPR 25 IS DEFINED AS WAITING UNTIL OUTPUT CAN BE DONE
    37	; BUT THIS IS NOT DOCUMENTED IN JSYS MANUAL.
    38	;<TENEX-132>NETWRK.MAC;207    15-MAR-74 19:30:40	EDIT BY TOMLINSON
    39	; FIXED BALTST AND WATBAL
    40	;<TENEX-132>NETWRK.MAC;206    13-MAR-74 18:32:15	EDIT BY CLEMENTS
    41	; CHANGED SOS OF RETURN PC TO HALF-WORD ARITHMETIC
    42	;<TENEX-132>NETWRK.MAC;205    11-MAR-74 11:44:45	EDIT BY TOMLINSON
    43	; FIXED ATPTY BUG, NEW NVT PROTOCOL OPTION INTO ATPTY
    44	;<TENEX-132>NETWRK.MAC;204     7-MAR-74 19:56:31	EDIT BY TOMLINSON
    45	;<TENEX-132>NETWRK.MAC;203     5-MAR-74 14:27:48	EDIT BY TOMLINSON
    46	; INTERN LCKNCP AND ULKNCP.
    47	;<TENEX-132>NETWRK.MAC;202    11-FEB-74 17:26:23	EDIT BY TOMLINSON
    48	; ADDED DESIRED BIT ALLOCATION VARIABLE
    49	;<TENEX-132>NETWRK.MAC;201     7-FEB-74 14:54:18	EDIT BY TOMLINSON
    50	; HANDLE SERVICE INTERUPTIONS
    51	;<TENEX-132>NETWRK.MAC;199     1-FEB-74 16:40:20	EDIT BY TOMLINSON
    52	; NEW MSG ALLOC STRATEGY
    53	;<TENEX-132>NETWRK.MAC;198     1-FEB-74 09:13:26	EDIT BY TOMLINSON
NETWRK.VDH;1                       22-MAY-75 10:29     Page 1.1

    54	; FLUSH PREVIOUS CONNECTIONS WHEN RFC ARRIVES FOR SAME SOCKETS/LINK
    55	;<TENEX-132>NETWRK.MAC;197    27-NOV-73 17:15:47	EDIT BY CLEMENTS
    56	;<TENEX-132>NETWRK.MAC;195    10-NOV-73 20:15:17	EDIT BY CLEMENTS
    57	;<TENEX-132>NETWRK.MAC;194    10-NOV-73 18:00:10	EDIT BY CLEMENTS
    58	; NETRDY, NETSQO, DMPBUF AND BALTST WAIT FOR MSG ALLOC AS WELL AS BITS.
    59	; ALSO CHANGES FOR KI-10
    60	;<TENEX-132>NETWRK.MAC;193    20-AUG-73 17:31:18	EDIT BY CLEMENTS
    61	;<TENEX-132>NETWRK.MAC;192     6-MAR-73 17:38:54	EDIT BY CLEMENTS
    62	;<TENEX-132>NETWRK.MAC;191     6-MAR-73 17:04:57	EDIT BY CLEMENTS
    63	;MOVED HOST TABLES OUT INTO HOST.MAC, RANGE CK RECINS/RECINR
    64	;<TENEX-132>NETWRK.MAC;190    13-FEB-73 17:07:49	EDIT BY CLEMENTS
    65	; PATCHES WHICH WERE DISTRIBUTED VIA GRIPE FILE
    66	;<TENEX-131>NETWRK.MAC;189    16-JAN-73 12:39:42	EDIT BY CLEMENTS
    67	;<TENEX-131>NETWRK.MAC;188    11-JAN-73 16:56:59	EDIT BY CLEMENTS
    68	;CHANGED "CC" TO "CC." IN HOST MACROS,DUE TO NAME CONFLICTS
    69	;<TENEX-130>NETWRK.MAC;187    28-DEC-72 18:15:41	EDIT BY CLEMENTS
    70	;<TENEX-130>NETWRK.MAC;186    11-DEC-72 10:36:20	EDIT BY TOMLINSON
    71	; ADDED USC-44 TO HOST TABLE
    72	;<TENEX-130>NETWRK.MAC;185    29-NOV-72 14:35:50	EDIT BY TOMLINSON
    73	;<TENEX-130>NETWRK.MAC;184    29-NOV-72 13:50:16	EDIT BY TOMLINSON
    74	;<TENEX-130>NETWRK.MAC;183    29-NOV-72 13:09:32	EDIT BY TOMLINSON
    75	;<TENEX-130>NETWRK.MAC;182    20-NOV-72 13:19:55	EDIT BY TOMLINSON
    76	; ADDED PATCH SPACE FOR HOST TABLES
    77	;<TENEX-130>NETWRK.MAC;181     6-NOV-72 10:52:13	EDIT BY TOMLINSON
    78	; INTERN NETNAM
    79	;<DLM/TEMP>NETWRK.MAC;180    31-OCT-72 22:48:28	EDIT BY TOMLINSON
    80	; MATHLAB==306, HSTCHK SUCCEEDS FOR LISTEN
    81	;<DLM/TEMP>NETWRK.MAC;179    19-OCT-72 19:13:13	EDIT BY TOMLINSON
    82	;<DLM/TEMP>NETWRK.MAC;178    19-OCT-72 15:29:08	EDIT BY TOMLINSON
    83	;<DLM/TEMP>NETWRK.MAC;177    17-OCT-72 17:58:22	EDIT BY TOMLINSON
    84	;<DLM/TEMP>NETWRK.MAC;176    17-OCT-72 15:40:03	EDIT BY TOMLINSON
    85	;<DLM/TEMP>NETWRK.MAC;175    16-OCT-72 15:24:33	EDIT BY TOMLINSON
    86	;<DLM/TEMP>NETWRK.MAC;174    16-OCT-72 15:02:04	EDIT BY TOMLINSON
    87	;<DLM/TEMP>NETWRK.MAC;173    16-OCT-72 14:50:08	EDIT BY TOMLINSON
    88	;<DLM/TEMP>NETWRK.MAC;172    16-OCT-72 14:45:09	EDIT BY TOMLINSON
    89	;<DLM/TEMP>NETWRK.MAC;171    16-OCT-72 14:03:51	EDIT BY TOMLINSON
    90	;<DLM/TEMP>NETWRK.MAC;170    15-OCT-72 15:35:55	EDIT BY TOMLINSON
    91	;<DLM/TEMP>NETWRK.MAC;169    15-OCT-72 14:26:52	EDIT BY TOMLINSON
    92	;<DLM/TEMP>NETWRK.MAC;168    14-OCT-72 13:52:36	EDIT BY TOMLINSON
    93	;<DLM/TEMP>NETWRK.MAC;167    13-OCT-72 15:45:40	EDIT BY TOMLINSON
    94	;<DLM/TEMP>NETWRK.MAC;166    13-OCT-72 13:40:47	EDIT BY TOMLINSON
    95	;<DLM/TEMP>NETWRK.MAC;165    11-OCT-72 23:16:46	EDIT BY TOMLINSON
    96	;<DLM/TEMP>NETWRK.MAC;164    10-OCT-72 23:39:58	EDIT BY TOMLINSON
    97	;<DLM/TEMP>NETWRK.MAC;163    10-OCT-72 22:19:55	EDIT BY TOMLINSON
    98	;<DLM/TEMP>NETWRK.MAC;162    10-OCT-72 13:10:20	EDIT BY TOMLINSON
    99	;<DLM/TEMP>NETWRK.MAC;161    10-OCT-72 10:41:42	EDIT BY TOMLINSON
   100	;<DLM/TEMP>NETWRK.MAC;160    10-OCT-72 10:28:45	EDIT BY TOMLINSON
   101	;<DLM/TEMP>NETWRK.MAC;159     6-OCT-72 12:35:15	EDIT BY TOMLINSON
   102	;<DLM/TEMP>NETWRK.MAC;158     6-OCT-72 12:33:57	EDIT BY TOMLINSON
   103	;<DLM/TEMP>NETWRK.MAC;157     5-OCT-72 17:19:07	EDIT BY TOMLINSON
   104	;<DLM/TEMP>NETWRK.MAC;156     5-OCT-72 10:13:05	EDIT BY TOMLINSON
   105	;<DLM/TEMP>NETWRK.MAC;155     4-OCT-72 16:27:58	EDIT BY TOMLINSON
   106	;<DLM/TEMP>NETWRK.MAC;154     4-OCT-72 14:27:41	EDIT BY TOMLINSON
NETWRK.VDH;1                       22-MAY-75 10:29     Page 1.2

   107	;<DLM/TEMP>NETWRK.MAC;153     3-OCT-72 14:32:50	EDIT BY TOMLINSON
   108	;<DLM/TEMP>NETWRK.MAC;152     1-OCT-72 14:43:20	EDIT BY MURPHY
   109	;<DLM/TEMP>NETWRK.MAC;151    29-SEP-72 13:45:10	EDIT BY TOMLINSON
   110	;<DLM/TEMP>NETWRK.MAC;150    29-SEP-72 13:24:05	EDIT BY TOMLINSON
   111	;<DLM/TEMP>NETWRK.MAC;149    29-SEP-72 13:12:19	EDIT BY TOMLINSON
   112	;<DLM/TEMP>NETWRK.MAC;148    29-SEP-72 12:12:58	EDIT BY TOMLINSON
   113	;<DLM/TEMP>NETWRK.MAC;147    28-SEP-72 21:47:24	EDIT BY TOMLINSON
   114	;<DLM/TEMP>NETWRK.MAC;146    28-SEP-72 21:35:27	EDIT BY TOMLINSON
   115	;<DLM/TEMP>FREE.MAC;34    28-SEP-72 21:13:05	EDIT BY TOMLINSON
   116	;<DLM/TEMP>NETWRK.MAC;144    28-SEP-72 19:43:58	EDIT BY MURPHY
   117	;<DLM/TEMP>NETWRK.MAC;143    28-SEP-72 14:53:47	EDIT BY TOMLINSON
   118	;<DLM/TEMP>NETWRK.MAC;142    28-SEP-72 14:12:17	EDIT BY TOMLINSON
   119	;<DLM/TEMP>NETWRK.MAC;141    12-SEP-72 17:27:19	EDIT BY TOMLINSON
   120	;<DLM/TEMP>NETWRK.MAC;140    12-SEP-72 15:02:23	EDIT BY TOMLINSON
   121	;<DLM/TEMP>NETWRK.MAC;139    12-SEP-72 13:29:54	EDIT BY TOMLINSON
   122	;<DLM/TEMP>NETWRK.MAC;138    12-SEP-72 12:07:51	EDIT BY TOMLINSON
   123	;<DLM/TEMP>NETWRK.MAC;137    12-SEP-72 11:22:23	EDIT BY TOMLINSON
   124	;<DLM/TEMP>NETWRK.MAC;136    12-SEP-72 11:17:11	EDIT BY TOMLINSON
   125	;<DLM/TEMP>NETWRK.MAC;135    11-SEP-72 16:27:08	EDIT BY TOMLINSON
   126	;<DLM/TEMP>NETWRK.MAC;134    11-SEP-72 14:37:48	EDIT BY TOMLINSON
   127	;<DLM/TEMP>NETWRK.MAC;133     7-SEP-72 14:48:58	EDIT BY TOMLINSON
   128	;<DLM/TEMP>NETWRK.MAC;132     6-SEP-72 14:45:24	EDIT BY TOMLINSON
   129	;<DLM/TEMP>NETWRK.MAC;131    30-AUG-72 12:22:25	EDIT BY TOMLINSON
   130	;<FILESYSTEM>NETWRK.MAC;133    25-AUG-72 18:07:01	EDIT BY TOMLINSON
   131	;<FILESYSTEM>NETWRK.MAC;132    25-AUG-72 16:30:16	EDIT BY TOMLINSON
   132	;<FILESYSTEM>NETWRK.MAC;131    22-AUG-72 20:32:10	EDIT BY CLEMENTS
   133	;<FILESYSTEM>NETWRK.MAC;130    22-AUG-72 11:08:37	EDIT BY TOMLINSON
   134	;<FILESYSTEM>NETWRK.MAC;129    29-JUN-72 10:22:46	EDIT BY TOMLINSON
NETWRK.VDH;1                       22-MAY-75 10:29     Page 2

   135	
   136		SEARCH PROLOG
   137		SEARCH	FILEDEF,STENEX
   138	IFDEF	NETN,<
   139		TITLE	NETWRK
   140		SUBTTL	R.S.Tomlinson
   141	
   142	; Entries to this part
   143	
   144	; Externally defined things
   145	
   146	EXTERN	BHC,BITS,DBUGSW
   147	EXTERN	ASGFRE,RELFRE
   148	EXTERN	PBYTSZ,PBYTPO
   149	EXTERN	CHKJFN,RELJFN,UNLCKF,DISGT,DISLT,FORKX,JFNSS,MPP
   150	EXTERN	BLOCKW
   151	EXTERN	TODCLK,SKMRTN,SK2RET
   152	EXTERN	CPOPJ,SKPRET
   153	EXTERN	MULKMP
   154	EXTERN	PSIRQ	; Generate psi request
   155	EXTERN	MRETNE	; Error return to user
   156	EXTERN	FKINT	; Bit 1 tested to see if deferred int
   157	EXTERN	EDISMS	; Dismiss til test
   158	EXTERN	MLKPG	; Lock page
   159	EXTERN	MULKPG	; Unlock page
   160	EXTERN	FPTA	; Find page table from address
   161	EXTERN	PSIBW	; Breaks waiting mask
   162	EXTERN	INSKED	; Flag says in scheduler
   163	EXTERN	NSKED
   164	EXTERN	RSKED
   165	EXTERN	NETTIM
   166	
   167	; LINKAGE TO HOSTS (HOST NAME TABLES ETC)
   168	
   169	EXTERN	MHOSTS,HOSTN,HSTNAM
   170	
   171	; Linkage to imp driver section
   172	
   173	EXTERN	NTTRC3
   174	EXTERN	IMPBG0
   175	EXTERN	PTNETI,PTNETO
   176	EXTERN	IMPLT1,IMPLT2,IMPLT3,IMPLT4
   177	EXTERN	PKCHK,PKULCK,PKBYT,PKMSG,UPMSG
   178	EXTERN	IMPALL,NETON,IMPCLL,IMPABL,IMPOPL,IMPSDB,IMPSYN
   179	EXTERN	IMPCLS,IMPINR,IMPINS
   180	EXTERN	HSTDED
   181	EXTERN	IMPRTS,IMPSTR,IMPRRP,IMSRST,IMPERR
   182	EXTERN	ASNNVT,NVTDET,IMPHRT,IMPRDY,IMPBHT,IMPCHO
   183	
   184	INTERN	NETINI
   185	INTERN	NETNAM
   186	INTERN	NCPERR
   187	INTERN	SK2DWN
NETWRK.VDH;1                       22-MAY-75 10:29     Page 2.1

   188	INTERN	NETRAL
   189	INTERN	NTSIBE
   190	INTERN	ASNTBF,RLNTBF
   191	INTERN	LCKNCP,ULKNCP
   192	INTERN	NSKT,NETHDN,NETDWN,NETCHK,RECRST
   193	INTERN	RECINS,RECINR,NETKFK
   194	INTERN	RECSTR,RECRTS,RCFRFN,RECCLS,PLINK,PFHST,PFSM,PLIDX,SVCINT,SVCRST
   195	INTERN	PBPBYT,PBFSIZ
   196	INTERN	EOTF,DEDF,ERRB,NVTCLZ
   197	INTERN	.ATPTY,.ATNVT,.CVSKT,.FLHST,.CVHST
NETWRK.VDH;1                       22-MAY-75 10:29     Page 3

   198	
   199	; Macros to turn imp on and off
   200	
   201	DEFINE	NCPON<PUSHJ P,ULKNCP>
   202	
   203	DEFINE	NCPOFF<PUSHJ P,LCKNCP>
   204	
   205	; Local accumulators
   206	
   207	UNIT=5		; Pseudo-unit number
   208	IOS=6		; Status flags (loaded from netsts(unit))
   209	
   210	; Parameters
   211	
   212	FLINK==2	; First link number to use
   213	LLINK==^D72
   214	NLNKBW==<LLINK+^D35>/^D36
NETWRK.VDH;1                       22-MAY-75 10:29     Page 4

   215	
   216	; Storage
   217	
   218	LS(LSKT,NSKT)		; Local socket number
   219	LS(FSKT,NSKT)		; Foreign socket number
   220	LS(NETAWD,NSKT)		; B0-8 -- foreign host number (777 for none)
   221				; B9-17 -- link number (0 for none)
   222				; B18-23 -- time-out countdown
   223				; B24-26 -- unused
   224				; B27-35 -- index to link table
   225	LS(NETBAL,NSKT)		; Bits of allocation
   226	LS(NETDAL,NSKT)		; Desired level of bit allocation
   227	LS(NETBUF,NSKT)		; B0-17 -- bytes per buffer
   228				; B18-35 -- buffer location -1 (0 for none)
   229	LS(NETSTS,NSKT)		; B0-3 -- fsm state
   230				; B4-11 -- flag bits
   231				; B12-17 -- bit stream byte size
   232				; B18-35 -- MESSAGE COUNT STATISTICS
   233	LS(NETFRK,NSKT)		; B0-b5 -- interrupt channel for ins
   234				; B6-B11 -- UNUSED
   235				; B12-B17 -- FSM STATE CHANGE INTERRUPT CHANNEL
   236				; B18-b35 -- forkx of fork to interrupt
   237	LS(NETBTC,NSKT)		; BIT COUNT STATISTICS
   238	LS(NCPLCK)		; Lock to prevent DOFSM confusion
   239	LS(NCPLLK)		; FORKX OF LAST NCPLCK LOCKER
   240	LS(NCPLCN)		; COUNT OF NCPLCK LOCKS
   241	LS(NCPLFC)		; COUNT OF NCPLCK FAILURES
   242	LS(ASNTBC)		; ASNTBF TRAFFIC COUNTER
   243	LS(NETCNC)		; Count of total conections opened
   244	LS(FUNNYC)		; Count of funny inputs to fsm
   245	NRP(NTBUFS,NNTBFS)	; Network buffer area
   246	LS(NETFRE,7)		; Net buffer free list header
   247	
   248	; Flags in lh of netsts
   249	
   250	FLG(BFSND,L,IOS,020000)	; Buffered send mode
   251	FLG(ERRB,L,IOS,010000)	; Error has occurred
   252	FLG(EOTF,L,IOS,004000)	; End of transmission flag
   253	FLG(SVCIF,L,IOS,002000)	; Service interruption in progress
   254	FLG(CLZF,L,IOS,001000)	; Connection is being closed
   255	FLG(DEDF,L,IOS,000400)	; Host is dead
   256	FLG(PROGF,L,IOS,000200)	; Set if program is watching this connection
   257	FLG(ALLFF,L,IOS,000100)	; Allocation resync has been done
NETWRK.VDH;1                       22-MAY-75 10:29     Page 5

   258	
   259	; Pointers to various fields of a connection
   260	
   261		USE	RESPC
   262	
   263	MSGALL:	2		; DESIRED MESSAGE ALLOCATION LEVEL
   264	IFDEF VDH,<MAXBPM::^D<8095-3*36-8*16> ;MAX DATA BITS FOR VDH
   265	>
   266	IFNDEF VDH,<MAXBPM::^D<8095-3*36>	; MAX DATA BITS PER MESSAGE
   267	>
   268	
   269	PLINK:	POINT 9,NETAWD(UNIT),8	; Pointer to link number
   270	PFHST:	POINT 9,NETAWD(UNIT),17	; Pointer to foreign host number
   271	PCLKS:	POINT 6,NETAWD(UNIT),23	; Pointer to time-out counter
   272	PLIDX:	POINT 9,NETAWD(UNIT),35	; Pointer to link table index
   273	PLIDXC:	POINT 9,NETAWD(C),35	; SAME AS PLIDX, BUT (C) FOR SCHED LEVEL
   274	PINTCH:	POINT 6,NETFRK(UNIT),5	; Pointer to ins/inr psi channel
   275	PFSMCH:	POINT 6,NETFRK(UNIT),17	; Pointer to psi channel for fsm change
   276	PFSM:	POINT 4,NETSTS(UNIT),3	; Pointer to current state of fsm
   277	PBPBYT:	POINT 6,NETSTS(UNIT),17	; Pointer to net bit stream byte size
   278	PBFSIZ:	POINT 18,NETBUF(UNIT),17; Pointer to bytes per buffer
   279	
   280	; Bbn socket numbers description
   281	; A socket number is a 32-bit number which in conjunction with
   282	; A host number specifies one end of a connection
   283	; For bbn sockets, the 32 bit field is divided in 3 parts:
   284	; The high 17 bits is used as follows:
   285	;  if 0:      then this is a system socket
   286	;  if <100000 then the number is a bbn user number and the socket is
   287	;             is called a user socket
   288	;  if >99999  then the number is tss job-number plus 100000, and the
   289	;             socket is called a job socket
   290	
   291	; A job socket is analogous to a temporary file and is guaranteed to
   292	; Be unique to that job.  a user socket is analogous to a regular file
   293	; And is guaranteed to be unique to that user.  a system socket is
   294	; For use as agreed upon by members of the network for such purposes
   295	; As inter system communication, memo-distribution etc.
   296	
   297	; The next 14 bits are an arbitrary number which may be defaulted
   298	; To the jfn associated with the socket or specified by the name field
   299	; Of the file name string.  the low order bit is determined by
   300	; The gender of the socket.  a socket opened for for writing
   301	; Will have this bit equal to one. a socket opened for reading will
   302	; Have this bit equal to zero.
NETWRK.VDH;1                       22-MAY-75 10:29     Page 6

   303	
   304	; Network dispatch table
   305	
   306		USE	SWAPPC
   307	
   308	NETDTB::NETSET		; Directory setup
   309		NETNAM		; Name lookup
   310		NETEXT		; Extension lookup
   311		NETVER		; Version lookup
   312		CPOPJ		; Protection insert
   313		CPOPJ		; Account insert
   314		CPOPJ		; Status insert
   315		NETOPN		; Open
   316		NETSQI		; Byte input
   317		NETSQO		; Byte output
   318		NETCLZ		; Close
   319		CPOPJ		; Rename
   320		CPOPJ		; Delete
   321		CPOPJ		; Dump
   322		CPOPJ
   323		CPOPJ		; Mount
   324		CPOPJ		; Dismount
   325		CPOPJ		; Initialize
   326		NETMTP		; Mtopr
   327		NETGST		; Get status
   328		NETSST		; Set status
   329	
   330	; Network lock and unlock
   331	
   332	LCKNCP:	AOS NCPLCN		; COUNT CALLS TO THIS ROUTINE
   333		AOSE NCPLCK
   334		 JRST [	AOS NCPLFC	; COUNT FAILURES
   335			PUSH P,1
   336			MOVEI 1,NCPLKT
   337			JSYS EDISMS
   338			POP P,1
   339			JRST .+1]
   340		PUSH P,FORKX
   341		POP P,NCPLLK		; SAVE LAST LOCKER
   342		POPJ P,
   343	
   344		USE	RESPC
   345	
   346	NCPLKT:	AOSE NCPLCK
   347		 JRST 0(4)
   348		JRST 1(4)
   349	
   350		USE SWAPPC
   351	
   352	ULKNCP:	SETOM NCPLCK
   353		POPJ P,
NETWRK.VDH;1                       22-MAY-75 10:29     Page 7

   354	
   355	; Initialize network stuff
   356	
   357	NETINI:	SETZM NETSTS
   358		MOVE A,[NETSTS,,NETSTS+1]
   359		BLT A,NETSTS+NSKT-1
   360		SETZM NETCNC
   361		SETZM FUNNYC
   362		MOVEI A,NTBUFS
   363		HRLOM A,NETFRE		; Initial free list
   364		MOVEI A,NNTBFS		; Size of buffer area
   365		MOVEM A,NETFRE+2
   366		HRRZM A,NTBUFS
   367		MOVE A,[NTBUFS+NNTBFS,,NTBUFS]
   368		MOVEM A,NETFRE+4
   369		MOVEI A,400
   370		MOVEM A,NETFRE+3
   371		SETOM NETFRE+1
   372		SETOM NCPLCK
   373		MOVE A,DBUGSW		; IN SYSTEM DEBUG MODE?
   374		CAIGE A,2		; IF SO, DON'T TURN ON NET.
   375		SETOM NETON		; Net on
   376		POPJ P,
   377	
   378	; Prepare to lookup network names
   379	
   380	NETSET:	NOINT
   381		JRST SK2RET		; Complicated huh?
   382	
   383	; Name lookup routine
   384	
   385	NETNAM:	JUMPE A,NAMBAD		; *. -- failure
   386		HRLI A,(<POINT 7,0,35>)	; Make lookup pointer into byte pointer
   387		PUSHJ P,NAMDEC		; Decode name
   388		JRST NAMBAD		; Bad syntax
   389	OKRET:	TEST(NE,UNLKF)
   390		JRST SK2RET
   391		OKINT
   392		JRST SK2RET
   393	
   394	NAMBAD:	MOVEI A,GJFX18
   395		JRST ERRET		; Error return
   396	
   397	ERRET:	OKINT
   398		POPJ P,
NETWRK.VDH;1                       22-MAY-75 10:29     Page 8

   399	
   400	; Extension lookup routine
   401	
   402	NETEXT:	JUMPE A,NAMBAD		; .* -- failure
   403		HRLI A,(<POINT 7,0,35>)	; Make lookup pointer into byte pointer
   404		PUSHJ P,EXTDEC		; Decode extension to check syntax
   405		JRST EXTBAD		; Bad syntax
   406		JRST OKRET		; Success
   407	
   408	EXTBAD:	MOVEI A,GJFX19
   409		JRST ERRET
   410	
   411	; Version lookup
   412	
   413	NETVER:	HRRES A			; Extend sign
   414		CAIGE A,^D100000	; If lss 100000
   415		HRRZ A,FILDDN(JFN)	; Then use user number
   416		TEST(NE,UNLKF)
   417		JRST SKPRET
   418		OKINT
   419		JRST SKPRET
NETWRK.VDH;1                       22-MAY-75 10:29     Page 9

   420	
   421	; Decode extension string
   422	; Called both at gtjfn and openf to decode extension string into
   423	; Foreign socket number and host number
   424	
   425	EXTDEC:	PUSH P,A
   426		ILDB D,A
   427		POP P,A
   428		JUMPE D,[SETOB A,B
   429			JRST SKPRET]
   430		CAIGE D,"8"
   431		CAIGE D,"0"
   432		 JRST EXTDES		; Symbolic
   433		MOVEI C,10
   434		NIN
   435		 POPJ P,
   436		CAIL B,0
   437		CAILE B,377
   438		 POPJ P,
   439		MOVE D,B
   440		LDB B,A
   441		CAIE B,"-"
   442		 POPJ P,
   443		NIN
   444		 POPJ P,
   445		MOVE A,D
   446		JRST SKPRET
   447	
   448	EXTDES:	HRLZ D,MHOSTS		;MINUS NHOSTS
   449	EXTDE1:	PUSH P,A
   450		HRRZ C,HOSTN(D)
   451		ADD C,[POINT 7,HSTNAM]
   452		PUSH P,C
   453	EXTDE2:	ILDB B,A
   454		ILDB C,0(P)
   455		JUMPE C,EXTDE3
   456		CAMN C,B
   457		 JRST EXTDE2
   458	EXTDE4:	SUB P,BHC+1
   459		POP P,A
   460		AOBJN D,EXTDE1
   461		POPJ P,
   462	
   463	EXTDE3:	CAIE B,"-"
   464		 JRST EXTDE4		; Not this one
   465		MOVEI C,10
   466		NIN			; Convert remainder of string to number
   467		 JRST EXTDE4		; Must not be this one
   468		LDB C,A			; Get terminator
   469		JUMPN C,EXTDE4		; Not this one
   470		SUB P,BHC+2		; This is it, flush stack
   471		LDB A,[POINT 9,HOSTN(D),17]
   472		JRST SKPRET
NETWRK.VDH;1                       22-MAY-75 10:29     Page 10

   473	
   474	; Decode name string
   475	; Called both at gtjfn and openf to decode name string into
   476	; Local socket number
   477	
   478	NAMDEC:	MOVEI C,10		; Perhaps this should be decimal?
   479		NIN			; Convert to a number
   480		JRST NAMDE1		; Failure: no number there
   481		LDB C,A			; Get terminator
   482		CAIE C,"#"		; If not number sign
   483		JRST NAMDE2		; Then ordinary
   484		MOVE C,CAPMSK		; Else system socket
   485		TRNN C,WHEEL!OPR	; Must be operator or wheel
   486		POPJ P,			; Else fail
   487		ILDB C,A		; Get next ch
   488		TDZA A,A		; Zero for high 17 bits
   489	NAMDE2:	HRRZ A,FILVER(JFN)	; Use filver for high 17 bits
   490		JUMPN C,CPOPJ		; String too long
   491		SKIPE A
   492		 ANDI B,77777		; If not system socket, retain 15 bits
   493		TRZ B,1			; Clear gender
   494		ROT A,^D15
   495		IOR A,B
   496		JRST SKPRET
   497	
   498	NAMDE1:	LDB C,A
   499		JUMPN C,CPOPJ		; Not number, fail
   500		MOVE B,JFN		; Default to jfn
   501		LSH B,1-SJFN		; Jfn will end up lsh'ed 1
   502		JRST NAMDE2
NETWRK.VDH;1                       22-MAY-75 10:29     Page 11

   503	
   504	; Open network file
   505	
   506	NETOPN:	TEST(NE,XCTF,RNDF)
   507		JRST ILLACC		; Illegal to access in append or xct
   508		TEST(NE,READF)
   509		TEST(NN,WRTF)
   510		TEST(NN,READF,WRTF)
   511		JRST ILLACC		; Must be only one of read or write
   512		LDB A,PBYTSZ
   513		CAIG A,^D36
   514		CAIG A,0
   515		 JRST [	MOVEI A,SFBSX2
   516			POPJ P,]	; Bad byte size
   517		HLRZ A,FILNEN(JFN)
   518		HRLI A,(<POINT 7,0,35>)
   519		PUSHJ P,NAMDEC		; Decode name
   520		JRST ILLACC		; Can only happen if wheel lost
   521		TEST(NE,WRTF)
   522		TROA A,1		; If writing set gender bit for local
   523		TRZ A,1			; Else clear it
   524		PUSH P,A		; Save for later
   525		HRRZ A,FILNEN(JFN)
   526		HRLI A,(<POINT 7,0,35>)
   527		PUSHJ P,EXTDEC		; Decode extension
   528		BUG(HLT,<NETOPN: EXTDEC FAILURE AFTER PREVIOUS NON-FAILURE.>)
   529		TEST(NE,READF)
   530		TROA B,1		; If reading set gender bit for forskt
   531		TRZ B,1			; Else clear
   532		POP P,C
   533		LDB D,PBYTSZ		; Get file byte size
   534		CAIN D,7
   535		MOVEI D,8		; Make ascii be net ascii
   536		JUMPL A,OPNLSN		; No foreign socket, do a listen
   537		PUSHJ P,CONNECT		; Connect
   538		 POPJ P,
   539		TEST(Z,WNDF)		; Remember this was not a listen
NETWRK.VDH;1                       22-MAY-75 10:29     Page 12

   540	
   541	NETOP1:	HRLM UNIT,DEV		; Remember unit number
   542		HRLM UNIT,FILDEV(JFN)
   543		SETZ IOS,		; Clear status bits
   544		LDB A,[POINT 4,STS,35]
   545		CAIE A,5		; In modes 5
   546		CAIN A,7		; Or 7
   547		TEST(O,BFSND)		; Do buffered transmission
   548		IORB IOS,NETSTS(UNIT)	; Set it in status word
   549		MOVEI A,^D36
   550		LDB B,PBYTSZ
   551		IDIV A,B		; Get bytes per WORD
   552		XCTBU [	LDB C,[POINT 6,2,17]]
   553		LSH C,2			; GET DESIRED SIZE OF BUFFER
   554		IMUL A,C		; DESIRED BYTES
   555		DPB A,PBFSIZ		; Gives bytes per buffer
   556		SETZM FILBYN(JFN)	; About to reference byte 0 of buffer
   557		SETZM FILOFN(JFN)	; NEXT BYTE TO XMIT = 0
   558		TEST(O,SIZF)		; Cannot change byte size
   559		TEST(OE,WNDF)		; No buffer yet. also if listen
   560		JRST SKPRET		; Return immediately
   561		LDB A,[POINT 4,STS,35]
   562		CAIE A,6		; Also in modes 6
   563		CAIN A,7		; And 7
   564		JRST SKPRET		; Return immediately
   565		LDB A,PFSM		; No. get current state
   566		CAIN A,RFCS		; Will usually be rfcs
   567		PUSHJ P,WATNOT		; If so, wait for it to not be
   568		MOVE IOS,NETSTS(UNIT)	; GET STATE
   569		LDB A,[POINT 4,IOS,3]
   570		TEST(NN,EOTF)		; IF LEFT OPND
   571		CAIN A,OPND		; OR STILL OPENED
   572		 JRST SKPRET		; THEN SUCCEED
   573	OPNFAI:	MOVSI B,PROGF
   574		ANDCAM B,NETSTS(UNIT)	; Program not watching
   575		TEST(NE,ERRB)		; ERRB REMEMBERS BAD BYTE SIZE
   576		SKIPA A,[OPNX22]	; MAKE THAT THE ERROR CODE
   577		MOVEI A,OPNX21		; ELSE IT WAS REJECTED
   578		POPJ P,			; And give bad return
   579	
   580	OPNLSN:	PUSHJ P,LISTEN
   581		 POPJ P,		; Can't listen
   582		TEST(O,WNDF)		; To remember that this was a listen
   583		JRST NETOP1		; First bin/out is accept
   584	
   585	ILLACC:	MOVEI A,OPNX14
   586		POPJ P,
NETWRK.VDH;1                       22-MAY-75 10:29     Page 13

   587	
   588	; Wait for fsm to leave state given in a
   589	
   590	WATNOT:	HRLI A,NOTTST		; TEST ROUTINE ADDRESS
   591	WATNO1:	MOVE B,UNIT		; COMPUTE SCHEDULER TEST ARGUMENT
   592		ROT B,-9
   593		MOVSS A
   594		IOR A,B
   595		SKIPE INSKED
   596		BUG(HLT,<WATNOT: WAS CALLED FROM SCHEDULER LEVEL.>)
   597		JSYS EDISMS
   598		POPJ P,
   599	
   600	; Wait for fsm to enter a particular state
   601	
   602	WATFOR:	HRLI A,WATTST
   603		JRST WATNO1
   604	
   605		USE	RESPC
   606	
   607	NOTTST:	LDB B,[POINT 9,A,26]	; EXTRACT UNIT
   608		ANDI A,777		; AND STATE TO TEST AGAINST
   609		EXCH UNIT,B
   610		LDB C,PFSM		; GET CURRENT STA(E
   611		EXCH UNIT,B
   612		CAME A,C		; IS IT THE SAME
   613		JRST 1(4)		; NO, READY TO GO
   614		JRST WATTS1		; YES, MAKE OTHER TESTS
   615	
   616	; SCHEDULER TEST WAITING FOR CONNECTION TO GET TO A STATE
   617	
   618	WATTST:	LDB B,[POINT 9,A,26]	; EXTRACT UNIT
   619		ANDI A,777		; AND STATE
   620		EXCH B,UNIT
   621		LDB C,PFSM		; GET CURRENT STATE
   622		EXCH B,UNIT
   623		CAMN C,A		; SAME?
   624		JRST 1(4)		; YES, READY TO GO
   625	WATTS1:	MOVE C,FKINT(7)		; Look for deferred interrupts
   626		TLNN C,(1B1)
   627		JRST 0(4)		; None. return no skip
   628		EXCH B,UNIT		; Deferred interrupt, get back unit
   629		SETZ C,
   630		DPB C,PCLKS		; Set clock to zero to hasten time-out
   631		EXCH B,UNIT
   632		JRST 0(4)
   633	
   634	; BIT ALLOCATION TEST
   635	
   636	BALTST:	EXCH UNIT,A
   637		LDB B,PBPBYT
   638		LDB C,PLIDX
   639		HLL C,NETSTS(UNIT)	; GET STATUS INFO
NETWRK.VDH;1                       22-MAY-75 10:29     Page 13.1

   640		SKIPE IMPLT4(C)		; SKIP IF NEITHER MSG ALLOC OR BUFFER
   641		CAMLE B,NETBAL(UNIT)	; MSG OK, HOW ABOUT BITS?
   642		TLNE C,DEDF+EOTF	; ALLOC BAD. BUT IF DEAD..STILL OK
   643		 AOS 4
   644		EXCH UNIT,A
   645		JRST 0(4)
NETWRK.VDH;1                       22-MAY-75 10:29     Page 14

   646	
   647		USE	SWAPPC
   648	
   649	; Close network file
   650	
   651	NETCLZ:	HLRZ UNIT,DEV
   652		TEST(NN,WNDF)		; If no buffer ever assigned
   653		TEST(NN,WRTF)		; Or if reading
   654		JRST NETCL1		; Then skip the following
   655		PUSHJ P,DMPBUF		; Dump last buffer
   656		 JRST NETCLW		; NOT ALL SENT. GO WAIT.
   657	NETCL1:	TEST(NE,ERRF)		; ANY FINAL ERRORS
   658		 JRST [	MOVEI A,IOX5
   659			RET]		; DON'T CLOSE IF ANY UN-HANDLED ERRORS
   660		SETOM NETFRK(UNIT)
   661		HRRZ B,NETBUF(UNIT)
   662		SKIPE B
   663		 PUSHJ P,RLNTBF
   664		TEST(NN,WRTF)		; IF NOT sending
   665		SKIPA A,[CLZR]		; THEN DO CLZR
   666		MOVEI A,CLZS		; ELSE do clzs
   667		PUSHJ P,DOFSM
   668		UMOVE A,1
   669		TDNN A,[1,,400000]
   670		TLNN A,(1B1)
   671		 JRST NETCL2		; Return immediately if no bit 1
   672		LDB B,PFSM
   673		MOVEI A,FREE
   674		CAIE B,FREE
   675		PUSHJ P,WATFOR
   676	NETCL2:	MOVSI A,PROGF
   677		ANDCAM A,NETSTS(UNIT)	; No program wants this any more
   678		JRST SKPRET
   679	
   680	NETCLW:	MOVEI B,^D60		; 5 MINUTES OF TICKS
   681		DPB B,PCLKS
   682		MOVSI IOS,CLZF
   683		IORB IOS,NETSTS(UNIT)
   684		JSYS EDISMS
   685		JRST NETCLZ		; AND GO TRY AGAIN
   686	
   687	; Close nvt
   688	
   689	NVTCLZ:	MOVE A,LSKT(UNIT)
   690		TRNN A,1
   691		SKIPA A,[CLZR]
   692		MOVEI A,CLZS
   693		PUSHJ P,DOFSM
   694		POPJ P,
NETWRK.VDH;1                       22-MAY-75 10:29     Page 15

   695	
   696	; Network mtopr routines
   697	
   698	NETMTP:	HLRZ UNIT,DEV
   699		MOVE IOS,NETSTS(UNIT)
   700		CAIG B,26
   701		CAIGE B,20
   702		 POPJ P,
   703		JRST .+1-20(B)
   704		JRST NETACP
   705		JRST NETDMP
   706		JRST SNDINT
   707		JRST ABTCON
   708		JRST NETINT
   709		JRST NETRDY
   710		JRST NETFAL
   711	
   712	NETACP:	LDB B,PFSM
   713		MOVEI A,ACPT
   714		CAIN B,RFCR
   715		 PUSHJ P,DOFSM
   716		POPJ P,
   717	
   718	NETDMP:	TEST(NE,BFSND)
   719		TEST(NN,WRTF)
   720		 POPJ P,
   721		TEST(NE,WNDF)
   722		 POPJ P,
   723		PUSHJ P,DMPBUF
   724		 JRST WATXXX
   725		POPJ P,
   726	
   727	SNDINT:	LDB A,PFHST
   728		LDB B,PLINK
   729		MOVE D,LSKT(UNIT)
   730		TRNE D,1
   731		SKIPA D,[IMPINS]
   732		MOVEI D,IMPINR
   733		NCPOFF
   734		LDB C,PFSM
   735		CAIN C,OPND
   736		PUSHJ P,@D
   737		NCPON
   738		POPJ P,
NETWRK.VDH;1                       22-MAY-75 10:29     Page 16

   739	
   740	; WAIT FOR READY TO SEND AT LEAST ONE BYTE
   741	
   742	ABTCON:	MOVE A,CAPENB
   743		TRNN A,NETWIZ
   744		 POPJ P,
   745		JRST SKTDWN
   746	
   747	NETRDY:	TEST(NN,WRTF)		; RECEIVE OR SEND?
   748		 JRST NETRD1		; RECEIVE. SEND ALLOCATES OUT
   749		LDB A,PLIDX
   750		PUSHJ P,PKCHK		; GET BYTES THAT CAN BE SENT
   751		JUMPN B,PKULCK		; READY TO GO
   752		PUSHJ P,WATBAL		; COMPUTE ACTIVATION TEST
   753		JRST WATXXX		; AND WAIT
   754	
   755	NETRD1:	TEST(NE,WNDF)		;HAS ALLOCATION ALREADY BEEN SENT?
   756		PUSHJ P,FIRSTI		;NO. SEND IT OUT.
   757		POPJ P,
   758	
   759	NETINT:	UMOVE B,3
   760		HRR B,FORKX
   761		MOVEM B,NETFRK(UNIT)
   762		POPJ P,
   763	
   764	NETFAL:	TEST(NE,WNDF,WRTF)	; IF WRITE OR FIRSTI ALREADY DONE
   765		 POPJ P,		; DO NOTHING
   766		JRST FIRSTI		; ELSE SET UP BUFFERS AND SEND ALLOCATE
   767	
   768	NETKFK:	PUSH P,UNIT
   769		PUSH P,A
   770		MOVSI UNIT,-NSKT
   771	NETKF1:	HRRE A,NETFRK(UNIT)
   772		CAMN A,FORKX
   773		 SETOM NETFRK(UNIT)
   774		AOBJN UNIT,NETKF1
   775		POP P,A
   776		POP P,UNIT
   777		POPJ P,
   778	
   779	; SKIP IF NET INPUT BUFFER EMPTY
   780	
   781	NTSIBE:	HLRZ UNIT,DEV
   782		LDB A,PLIDX
   783		MOVSI B,777777
   784		TDNN B,IMPLT4(A)
   785		TDNE B,IMPLT3(A)
   786		 POPJ P,
   787		JRST SKPRET
NETWRK.VDH;1                       22-MAY-75 10:29     Page 17

   788	
   789	; Network file sequential byte input
   790	
   791	NETSQI:	HLRZ UNIT,DEV
   792		MOVE IOS,NETSTS(UNIT)
   793		TEST(NE,WNDF)
   794		PUSHJ P,FIRSTI		; Wait for listen set up buffers etc.
   795		SOSGE FILCNT(JFN)
   796		PUSHJ P,LODBUF		; Get another bufferful
   797		TEST(NE,EOFF)
   798		POPJ P,
   799		ILDB A,FILBYT(JFN)
   800		AOS FILBYN(JFN)
   801		POPJ P,
   802	
   803	LODBUF:	MOVSI IOS,ERRB
   804		TDNE IOS,NETSTS(UNIT)
   805		TEST(O,ERRF)
   806		ANDCAB IOS,NETSTS(UNIT)
   807		LDB D,PBFSIZ
   808		MOVE C,NETBUF(UNIT)
   809		HLL C,FILBYT(JFN)
   810		TLZ C,770000
   811		MOVEM C,FILBYT(JFN)
   812		LDB A,PLIDX
   813		PUSHJ P,UPMSG		; Unpack message(s) into buffer
   814		 JRST [	MOVSI IOS,EOTF
   815			TDNE IOS,NETSTS(UNIT)
   816			 JRST [	TEST(O,EOFF)
   817				POPJ P,]
   818			JRST WATXXX]	; BACK OUT AND WAIT
   819		LDB B,PBFSIZ
   820		SUB B,D			; Bytes loaded
   821		MOVEM B,FILCNT(JFN)
   822		ADDM B,FILLEN(JFN)
   823		LDB D,PBPBYT		; Byte size
   824		IMUL D,B		; Bits received
   825		ADDM D,NETBTC(UNIT)	; KEEP COUNT OF BITS RECEIVED
   826		MOVN B,D
   827		ADDM B,NETBAL(UNIT)	; DEBIT ALLOCATION FOR MESSAGE RECEIVED
   828		PUSHJ P,NETRAL		; Re-allocate if needed
   829		SOSGE FILCNT(JFN)
   830		 JRST LODBUF		; No bytes
   831		POPJ P,
   832	
   833	NETRAL:	NCPOFF			; PREVENT CONFUSION
   834		MOVE IOS,NETSTS(UNIT)
   835		TEST(NE,EOTF,DEDF)
   836		 JRST NETRAX		; DON'T BOTHER IF DEAD OR DONE
   837		MOVE D,NETDAL(UNIT)	; GET DESIRED BIT ALLOCATION
   838		MOVE B,D
   839		ASH B,-1		; HALVE
   840		PUSH P,B		; SAVE
NETWRK.VDH;1                       22-MAY-75 10:29     Page 17.1

   841		MOVE C,MSGALL		; DESIRED LEVEL OF MSG ALLOC
   842		MOVE B,C
   843		ASH B,-1		; HALVE
   844		PUSH P,B		; AND SAVE
   845		LDB B,PLIDX
   846		HRRZ B,IMPLT4(B)	; OUTSTANDING MSG ALLOC
   847		SUB C,B			; NEEDED INCREMENT
   848		SUB D,NETBAL(UNIT)	; NEEDED INCREMENT
   849		LDB B,PLINK
   850		LDB A,PFHST
   851		CAMGE D,-1(P)		; IF GREATER THAN HALF
   852		CAML C,0(P)		; FOR EITHER ONE
   853		 PUSHJ P,IMPALL		; THEN SEND AN ALLOCATE
   854		SUB P,BHC+2
   855	NETRAX:	NCPON
   856		POPJ P,
NETWRK.VDH;1                       22-MAY-75 10:29     Page 18

   857	
   858	FIRSTI:	PUSHJ P,FRSTIO		; SET UP BUFFER
   859		JUMPG B,FRSTI1		; BUFFER SPECIFIED. USE FOR ALLOCATION
   860		PUSH P,A
   861		MOVE A,MAXBPM		; MAXIMUM BITS IN A MESSAGE
   862		LDB B,PBPBYT		; CONNECTION BYTE SIZE
   863		IDIV A,B		; BYTES
   864		IMUL A,MSGALL		; TIMES MESSAGE ALLOCATION
   865		ADDM A,0(P)		; THAT PLUS FILE BUFFER BYTES
   866		POP P,B			; IS WHAT TO USE
   867	FRSTI1:	LDB D,PBPBYT		; GET BYTES SIZE
   868		IMUL D,B		; BITS IN BUFFERS
   869		MOVEM D,NETDAL(UNIT)	; SAVE DESIRED LEVEL
   870		PUSHJ P,NETRAL		; SEND ALLOCATE AS NEEDED
   871		POPJ P,
NETWRK.VDH;1                       22-MAY-75 10:29     Page 19

   872	
   873	WATLSN:	LDB A,PFSM		; Get state of this connection
   874		CAIN A,OPND
   875		 POPJ P,
   876		CAIN A,RFCR
   877		 JRST [	MOVEI A,ACPT
   878			PUSHJ P,DOFSM
   879			POPJ P,]
   880		CAIN A,RFCS		; If still waiting for rfc
   881		 JRST WATLS1		; Continue waiting
   882		CAIE A,LSNG
   883		 JRST [	MOVSI IOS,EOTF
   884			TDNE IOS,NETSTS(UNIT)
   885			 POPJ P,	; Null file sent
   886			MOVSI IOS,ERRB!EOTF	; Connection never actually opened
   887			IORB IOS,NETSTS(UNIT)
   888			POPJ P,]
   889	WATLS1:	MOVE P,MPP		; Reset stack
   890		MOVE B,0(P)		; GET RETURN PC
   891		SOS B		; DECREMENT WITHOUT CARRY FROM LH
   892		HRRM B,0(P)		; BACK TO RETURN ON STACK
   893		PUSHJ P,UNLCKF		; Unlock file and turn ints back on
   894		PUSHJ P,WATNOT		; Wait to leave current state
   895		JRST MRETN		; Back to user to restart jsys
   896	
   897	WATBUF:	MOVE P,MPP		; Else
   898		MOVE B,0(P)		; GET RETURN PC
   899		SOS B		; DECREMENT WITHOUT CARRY FROM LH
   900		HRRM B,0(P)		; BACK TO RETURN ON STACK
   901		PUSHJ P,UNLCKF		; Unlock file
   902		MOVEI A,^D5000
   903		DISMS			; Wait a while
   904		JRST MRETN		; And start again from the top
   905	
   906	WATXXX:	MOVE P,MPP
   907		MOVE B,0(P)		; GET RETURN PC
   908		SOS B		; DECREMENT WITHOUT CARRY FROM LH
   909		HRRM B,0(P)		; BACK TO RETURN ON STACK
   910		PUSHJ P,UNLCKF
   911		JSYS EDISMS
   912		JRST MRETN
NETWRK.VDH;1                       22-MAY-75 10:29     Page 20

   913	
   914	; Network file sequential byte output
   915	
   916	NETSQO:	HLRZ UNIT,DEV
   917		MOVE IOS,NETSTS(UNIT)
   918		TEST(NE,DEDF,ERRB)
   919		 TEST(O,ERRF)
   920		TEST(NE,DEDF,EOTF)
   921		 POPJ P,
   922		PUSH P,A
   923		TEST(NE,WNDF)
   924		PUSHJ P,FIRSTO
   925		TEST(NE,BFSND)		; Immediate send
   926		 JRST NTSQO1		; No
   927		LDB A,PLIDX
   928		PUSHJ P,PKCHK		; HOW MANY BYTES CAN WE SEND?
   929		JUMPE B,NTSQO3		; NOT ENOUGH
   930		POP P,C
   931		PUSHJ P,PKBYT
   932		 JFCL
   933		LDB A,PBPBYT
   934		ADDM A,NETBTC(UNIT)
   935		MOVNS A
   936		ADDM A,NETBAL(UNIT)
   937		MOVEI A,^D24
   938		DPB A,PCLKS		; RESET CLOCK TO TWO MINUTES
   939		POPJ P,
   940	
   941	NTSQO1:	SOSL FILCNT(JFN)
   942		 JRST NTSQO2
   943		PUSHJ P,DMPBUF
   944		 JRST WATXXX		; Can't dump now, wait
   945	NTSQO2:	AOS FILBYN(JFN)
   946		POP P,A
   947		IDPB A,FILBYT(JFN)
   948		POPJ P,
   949	
   950	NTSQO3:	PUSHJ P,WATBAL		;WAIT FOR BITS AND A MSG TO BE ALLOCATED
   951		JRST WATXXX		; ..
NETWRK.VDH;1                       22-MAY-75 10:29     Page 21

   952	
   953	DMPBUF:	MOVSI IOS,ERRB
   954		TDNE IOS,NETSTS(UNIT)
   955		 TEST(O,ERRF)
   956		ANDCAB IOS,NETSTS(UNIT)
   957		MOVE D,FILOFN(JFN)	; GET CURRENT OUTPUT POINT
   958		CAML D,FILBYN(JFN)	; DONE?
   959		 JRST DMPDUN		; YES
   960		TEST(NE,EOTF,DEDF)
   961		 JRST [	TEST(O,ERRF)
   962			SETZM FILBYT(JFN)
   963			SETZM FILBYN(JFN)
   964			SETZM FILOFN(JFN)
   965			HRLOI A,377777
   966			MOVEM A,FILCNT(JFN)
   967			JRST SKPRET]
   968		LDB A,PLIDX
   969		PUSHJ P,PKCHK		; HOW MANY BYTES CAN WE SEND?
   970		JUMPE B,WATBAL		; NONE, WAIT
   971		MOVE D,FILBYN(JFN)
   972		SUB D,FILOFN(JFN)	; NUMBER OF BYTES IN BUFFER
   973		CAML D,B
   974		MOVE D,B		; TAKE MIN OF THE TWO
   975		LDB B,PBYTSZ		; COMPUTE BYTE POINTER, GET BYTE SIZE
   976		MOVEI A,^D36
   977		IDIV A,B		; BYTES PER WORD
   978		MOVE B,FILOFN(JFN)
   979		IDIV B,A		; WORD NUMBER AND OFFSET
   980		LDB A,PBYTSZ
   981		IMULM A,C		; BIT OFFSET
   982		MOVNS C
   983		ADDI C,^D36
   984		ROT C,6
   985		IOR C,A
   986		ROT C,-^D12
   987		HRR C,NETBUF(UNIT)
   988		ADDI C,1(B)		; YIELDS BYTE POINTER
   989		LDB A,PLIDX
   990		PUSH P,D
   991		PUSHJ P,PKMSG
   992		POP P,D
   993		ADDM D,FILOFN(JFN)
   994		LDB C,PBPBYT
   995		IMUL D,C		; GIVES BITS JUST SENT
   996		ADDM D,NETBTC(UNIT)	; KEEP COUNT OF BITS SENT
   997		MOVNS D
   998		ADDM D,NETBAL(UNIT)
   999	;	HRRM B,NETSTS(UNIT)	; NEED TO HAVE MESSAGES GENERATED
  1000		MOVEI A,^D24
  1001		DPB A,PCLKS		; RESET CLOCK FOR THIS CONNECTION
  1002		JRST DMPBUF
NETWRK.VDH;1                       22-MAY-75 10:29     Page 22

  1003	
  1004	DMPDUN:	SETZM FILBYN(JFN)
  1005		SETZM FILOFN(JFN)
  1006		MOVE A,NETBUF(UNIT)
  1007		HLL A,FILBYT(JFN)
  1008		TLZ A,770000
  1009		MOVEM A,FILBYT(JFN)
  1010		LDB A,PBFSIZ
  1011		SUBI A,1
  1012		MOVEM A,FILCNT(JFN)
  1013		JRST SKPRET
  1014	
  1015	WATBAL:	LDB A,PLIDX
  1016		PUSHJ P,PKULCK		; UNLOCK CONNECTION TOO
  1017		MOVEI A,BALTST
  1018		HRL A,UNIT
  1019		POPJ P,
NETWRK.VDH;1                       22-MAY-75 10:29     Page 23

  1020	
  1021	FIRSTO:	TEST(NN,BFSND)		; BUFFERED?
  1022		 JRST [	PUSHJ P,WATLSN	; NO, WAIT FOR CONNECTION TO OPEN
  1023			TEST(Z,WNDF)
  1024			POPJ P,]
  1025		PUSHJ P,FRSTIO		; YES, SET UP BUFFER ETC
  1026		POPJ P,
  1027	
  1028	; SET UP BUFFER 
  1029	
  1030	FRSTIO:	PUSHJ P,WATLSN		; WaIt for connection complete
  1031		MOVEI A,^D36
  1032		LDB C,PBYTSZ
  1033		IDIV A,C		; BYTES PER WORD
  1034		MOVEI C,^D36
  1035		LDB B,PBPBYT		; BITS PER BYTE
  1036		IDIVM C,B		; BYTES PER WORD
  1037		IMUL C,B		; BITS PER WORD
  1038		MOVE B,MAXBPM		; BITS PER MESSAGE
  1039		IDIVM B,C		; MAX WORDS FOR MESSAGE
  1040		PUSH P,A		; SAVE BYTES PER WORD
  1041		LDB B,PBFSIZ		; DESIRED BYTES IN BUFFER
  1042		IMUL A,B		; WORDS NEEDED
  1043		SKIPE A			; IF ZERO
  1044		CAML A,C		; OR BIGGER THAN MAX
  1045		 MOVE A,C		; USE MAX
  1046		AOS B,A			; PLUS HEADER
  1047		PUSHJ P,ASNTBF
  1048		 JRST [	CAILE B,4
  1049			 JRST .-1	; TAKE WHAT WE CAN GET
  1050			JRST WATBUF]	; ELSE WAIT
  1051		HRRM A,NETBUF(UNIT)
  1052		HRRZ C,0(A)
  1053		SUBI C,1
  1054		POP P,A
  1055		IMUL A,C
  1056		LDB B,PBFSIZ		; RETURN AS VALUE
  1057		DPB A,PBFSIZ		; REAL BYTES PER BUFFER
  1058		TEST(Z,WNDF)
  1059		POPJ P,
NETWRK.VDH;1                       22-MAY-75 10:29     Page 24

  1060	
  1061	; Attach sockets to pty
  1062	; Call:	1	; Receive jfn of opened network connection
  1063	;	2	; Send jfn of opened network connection
  1064	;	ATNVT
  1065	; Returns
  1066	;	+1	; Cannot attach
  1067	;	+2	; Ok.  the jfns are released, ac 1 has line number of
  1068	;		; Attached pty.
  1069	
  1070	.ATPTY::
  1071	.ATNVT::JSYS MENTR
  1072		UMOVE JFN,1
  1073		HRRZS JFN
  1074		PUSHJ P,CHKJFN		; Check jfn of receive connection
  1075		 JRST ATPER0		; Only real jfns are legal
  1076		 JRST ATPER0
  1077		 JRST ATPER0
  1078		MOVEI A,ATPX2		; Error code if test skips
  1079		TEST(NE,READF)		; Must be opened for reading
  1080		PUSHJ P,CHKATP		; Check for dev=net, open, no buffer
  1081		 JRST ATPER1		; Failed one of the above
  1082		PUSH P,DEV		; Save dev and jfn
  1083		PUSH P,JFN
  1084	ATNVT1:	UMOVE JFN,2		; Get send jfn
  1085		PUSHJ P,CHKJFN		; Check it
  1086		JRST ATPER2		; Must also be a real jfn
  1087		JRST ATPER2
  1088		JRST ATPER2
  1089		MOVEI A,ATPX2		; Becomes atpx8 at atper3
  1090		TEST(NE,WRTF)		; This one must be for writing
  1091		PUSHJ P,CHKATP		; And dev=net, open, no buffer
  1092		 JRST ATPER3		; Failed above tests
  1093		HLRZ UNIT,DEV
  1094		LDB A,PFSM
  1095		CAIN A,RFCS
  1096		PUSHJ P,WATNOT		; Wait for response from foreign host
  1097		MOVEI A,ATPX12		; Error code for refused send
  1098		LDB B,PFSM		; Now get state
  1099		CAIE B,OPND		; If not opnd
  1100		JRST ATPER4		; Then fail
  1101		EXCH DEV,-1(P)		; Switch to receive connection
  1102		HLRZ UNIT,DEV
  1103		LDB A,PFSM		; Get its state
  1104		CAIN A,RFCS
  1105		PUSHJ P,WATNOT		; Wait for response from foreign host
  1106		MOVEI A,ATPX6		; Error code for refused receive
  1107		LDB B,PFSM
  1108		CAIE B,OPND		; If not opnd
  1109		JRST ATPER4		; Then fail
NETWRK.VDH;1                       22-MAY-75 10:29     Page 25

  1110	
  1111	ATNVT2:	PUSH P,UNIT
  1112		NCPOFF
  1113		LDB A,PFSM
  1114		CAIE A,OPND
  1115		 JRST [	MOVEI A,ATPX6
  1116			JRST ATPERZ]
  1117		HLRZ UNIT,-2(P)
  1118		LDB A,PFSM
  1119		CAIE A,OPND
  1120		 JRST [		MOVEI A,ATPX12
  1121			JRST ATPERZ]
  1122		UMOVE 1,1		; GET OPTION FLAGS
  1123		UMOVE 3,3		; LINE NUMBER IF NEEDED
  1124		HRR 1,0(P)		; Set up args, receive unit in 1
  1125		HLRZ 2,-2(P)		; Send unit in 2
  1126		PUSHJ P,ASNNVT		; Assign pty to these units
  1127		 JRST [	MOVEI A,ATPX13	; Can't, no pty's
  1128			JRST ATPERZ]
  1129		POP P,UNIT
  1130		MOVSI B,PROGF
  1131		ANDCAM B,NETSTS(UNIT)	; PROGRAM NO LONGER LOOKING
  1132		HRRM 1,NETBUF(UNIT)	; Store pty number here
  1133		HRRM UNIT,-1(P)
  1134		HLRZ UNIT,-1(P)
  1135		ANDCAM B,NETSTS(UNIT)	; NOT HERE EITHER
  1136		HRRM 1,NETBUF(UNIT)	; Put pty here also
  1137		NCPON
  1138		IORI A,400000		; Convert pty to tty designator
  1139		UMOVEM A,1		; Return to user
  1140		PUSHJ P,RELJFN		; Release send jfn
  1141		POP P,JFN
  1142		PUSHJ P,RELJFN		; And receive jfn
  1143		POP P,UNIT
  1144		PUSHJ P,NTTRC3
  1145		JRST SKMRTN		; Return skipping
NETWRK.VDH;1                       22-MAY-75 10:29     Page 26

  1146	
  1147	; Check validity of jfn for atpty
  1148	
  1149	CHKATP:	MOVEI A,ATPX3		; Receive not open
  1150		TEST(NN,OPNF)
  1151		POPJ P,
  1152		HRRZ B,DEV
  1153		MOVEI A,ATPX4
  1154		CAIE B,NETDTB
  1155		POPJ P,
  1156		MOVEI A,ATPX5
  1157		TEST(NN,WNDF)
  1158		POPJ P,
  1159		JRST SKPRET
  1160	
  1161	ATPERZ:	NCPON
  1162		POP P,UNIT
  1163		JRST ATPER4
  1164	
  1165	ATPER2:	MOVEI A,ATPX7		; Bad send jfn
  1166		JRST ATPER5
  1167	
  1168	ATPER3:	ADDI A,ATPX7-ATPX1	; Convert receive errors to send errors
  1169	ATPER4:	PUSHJ P,UNLCKF
  1170	ATPER5:	POP P,JFN
  1171		POP P,DEV
  1172		MOVE STS,FILSTS(JFN)
  1173	ATPER1:	PUSHJ P,UNLCKF
  1174		JRST MRETNE		; Save error return in ac1
  1175	
  1176	ATPER0:	MOVEI A,ATPX1		; Bad receive jfn
  1177		JRST MRETNE
  1178	
  1179	; Convert jfn to absolute network socket number
  1180	; Call:	1	; Jfn
  1181	;	CVSKT
  1182	; Returns
  1183	;	+1	; Error
  1184	;	+2	; Ok, in 2 the absolute socket number
  1185	
  1186	.CVSKT:	JSYS MENTR
  1187		MOVE JFN,1
  1188		PUSHJ P,CHKJFN
  1189		 JRST CVSER0
  1190		 JRST CVSER0
  1191		 JRST CVSER0
  1192		HLRZ A,FILNEN(JFN)
  1193		HRLI A,(<POINT 7,0,35>)
  1194		PUSHJ P,NAMDEC
  1195		 JRST CVSER1
  1196		TRZ A,1
  1197		PUSHJ P,UNLCKF
  1198		UMOVEM A,2
NETWRK.VDH;1                       22-MAY-75 10:29     Page 26.1

  1199		JRST SKMRTN
  1200	
  1201	CVSER1:	PUSHJ P,UNLCKF
  1202		SKIPA A,[CVSKX2]
  1203	CVSER0:	MOVEI A,CVSKX1
  1204		JRST MRETNE
NETWRK.VDH;1                       22-MAY-75 10:29     Page 27

  1205	
  1206	; Flush host
  1207	
  1208	.FLHST:	JSYS MENTR
  1209		MOVEI B,WHEEL!OPR
  1210		TDNN B,CAPENB
  1211		 JRST MRETN
  1212		PUSHJ P,HSTDED
  1213		PUSHJ P,IMSRST
  1214		JRST MRETN
  1215	
  1216	; Convert host number to string
  1217	
  1218	.CVHST:	JSYS MENTR
  1219		HRLZ D,MHOSTS		;MINUS NHOSTS
  1220		LDB C,[POINT 9,HOSTN(D),17]
  1221		CAME C,B
  1222		 AOBJN D,.-2
  1223		JUMPGE D,MRETN
  1224		HRRZ A,HOSTN(D)
  1225		ADDI A,HSTNAM-1
  1226		PUSHJ P,JFNSS
  1227		JRST SKMRTN
  1228	
  1229	; Get net status
  1230	
  1231	NETGST:	HLRZ UNIT,DEV
  1232		MOVE A,NETSTS(UNIT)
  1233		LDB B,PFHST
  1234		UMOVEM B,3
  1235		MOVE B,FSKT(UNIT)
  1236		UMOVEM B,4
  1237		POPJ P,
  1238	
  1239	; Set net status
  1240	
  1241	NETSST:	POPJ P,
NETWRK.VDH;1                       22-MAY-75 10:29     Page 28

  1242	
  1243	; ASSIGN BUFFERS IN NETWORK AREA
  1244	
  1245	ASNTBF:	AOS ASNTBC		; COUNT CALLS
  1246		PUSH P,3
  1247		PUSH P,4
  1248		MOVEI A,NETFRE
  1249		PUSHJ P,ASGFRE		; ASSIGN FROM FREE LIST
  1250		 SKIPA			; FAIL, NO SKIP
  1251		AOS -2(P)		; SUCCESS. SKIP RETURN
  1252		POP P,4
  1253		POP P,3
  1254		POPJ P,
  1255	
  1256	; RELEASE NETWORK BUFFERS
  1257	
  1258	RLNTBF:	PUSH P,3
  1259		PUSH P,4
  1260		MOVEI A,NETFRE
  1261		PUSHJ P,RELFRE
  1262		POP P,4
  1263		POP P,3
  1264		POPJ P,
NETWRK.VDH;1                       22-MAY-75 10:29     Page 29

  1265	
  1266	; The following code and tables PROVIDE a finite state machine
  1267	; Implementation of the transitions and actions produced by various
  1268	; Events associated with a connection
  1269	; Assumed are that unit indexes the proper local socket
  1270	
  1271	; Events are numbered as follows
  1272	
  1273	RRFC==0		; Received an rfc
  1274	CLSR==1		; Cls for a receive socket
  1275	CLSS==2		; Cls for a send socket
  1276	CLZR==3		; Close done on a receive socket
  1277	CLZS==4		; Close done on a send socket
  1278	ACPT==5		; Program issued an accept
  1279	CONN==6		; Program issued a connect
  1280	LISN==7		; Program issued a listen
  1281	RRFN==10	; Received a rfnm with no more data outstanding
  1282	HUNG==11	; Time out event (happens 2 minutes after last dofsm)
  1283	RRFB==12	; RECEIVED RFC WITH NON-MATCHING BYTE SIZE
  1284	
  1285	; Actions are numbered as follows
  1286	
  1287	ANOP==0		; No operation
  1288	AFNY==1		; No operation (unexpected event)
  1289	ACLS==2		; Send cls
  1290	ARFC==3		; Send rfc
  1291	AOPB==4		; Send rfc and open link
  1292	AOPL==5		; Open link
  1293	ACLL==6		; Close link
  1294	ACLO==7		; Close link and send cls
  1295	AEOR==10	; END OF RECEIVE
  1296	AEOS==11	; END OF SEND
  1297	AES1==12	; END OF SEND WHEN ABORTED BY FOREIGN HOST
  1298	AABT==13	; CONNECTION ABORTED BY FAR END
  1299	ACKA==14	; CHECK ALLOCATION
  1300	
  1301	; States are numbered as follows
  1302	
  1303	DEAD==0		; Never used
  1304	CLZD==1		; Closed
  1305	PNDG==2		; Pending. rfc received while closed
  1306	LSNG==3		; Listening. listen issued while closed
  1307	RFCR==4		; Rfc received while listening
  1308	CLW1==5		; Close wait alternate. clzr from opnd
  1309	RFCS==6		; Rfc sent
  1310	OPND==7		; Opened
  1311	CLSW==10	; Waiting for a cls
  1312	DATW==11	; Waiting for all data to be sent
  1313	RFN1==12	; Waiting for last rfnm
  1314	CLZW==13	; Waiting for program close
  1315	RFN2==14	; Waiting for rfnm after clss
  1316	NUSE==15	; THIS STATE NO LONGER USED
  1317	FREE==16	; Not in use
NETWRK.VDH;1                       22-MAY-75 10:29     Page 30

  1318	
  1319	; The following table of byte pointers is used to get to the next state
  1320	; Given the current state and the event
  1321	; This table is indexed by event, the table addressed by this table
  1322	; Is indexed by old state
  1323	
  1324	RADIX ^D10
  1325	
  1326	QQ==3
  1327	
  1328	CBPFSM:	REPEAT 9,<
  1329		POINT 4,NXTSTT(B),QQ
  1330	QQ==QQ+4>
  1331	QQ==3
  1332		REPEAT 9,<
  1333		POINT 4,NXTSTT+1(B),QQ
  1334	QQ==QQ+4>
  1335	
  1336	; Following table of pointers is used to get the action to be taken
  1337	; Given the current state and the event
  1338	; This table is indexed by event, the table addressed by this table
  1339	; Is indexed by old state
  1340	
  1341	QQ==3
  1342	CBAFSM:	REPEAT 9,<
  1343		POINT 4,ACTION(B),QQ
  1344	QQ==QQ+4>
  1345	QQ==3
  1346	
  1347		REPEAT 9,<
  1348		POINT 4,ACTION+1(B),QQ
  1349	QQ==QQ+4
  1350	>
  1351	
  1352	; This is the transition table
  1353	; Each word contains the new state for a given old state
  1354	; Successive bytes are used for different events
  1355	
  1356	; Event rrfc clsr clss clzr clzs acpt conn lisn rrfe hung  old state
  1357	
  1358	NXTSTT:
  1359	BYTE (4)DEAD,DEAD,DEAD,DEAD,DEAD,DEAD,DEAD,DEAD,DEAD,DEAD,DEAD	; Dead
  1360	BYTE (4)PNDG,CLZD,CLZD,CLZD,CLZD,CLZD,RFCS,LSNG,CLZD,CLZD,CLZD	; Clzd
  1361	BYTE (4)PNDG,FREE,FREE,PNDG,PNDG,PNDG,OPND,RFCR,PNDG,CLSW,PNDG	; Pndg
  1362	BYTE (4)RFCR,LSNG,LSNG,FREE,FREE,LSNG,LSNG,LSNG,LSNG,LSNG,CLSW	; Lsng
  1363	BYTE (4)RFCR,FREE,FREE,CLSW,CLSW,OPND,RFCR,RFCR,RFCR,RFCR,RFCR	; Rfcr
  1364	BYTE (4)CLW1,FREE,FREE,CLW1,CLW1,CLW1,CLW1,CLW1,CLW1,FREE,CLW1	; Clw1
  1365	BYTE (4)OPND,FREE,FREE,CLSW,CLSW,RFCS,RFCS,RFCS,RFCS,CLSW,CLSW	; Rfcs
  1366	BYTE (4)OPND,CLZW,RFN2,CLW1,DATW,OPND,OPND,OPND,OPND,OPND,OPND	; Opnd
  1367	BYTE (4)CLSW,FREE,FREE,CLSW,CLSW,CLSW,CLSW,CLSW,CLSW,FREE,CLSW	; Clsw
  1368	BYTE (4)DATW,DATW,RFN1,DATW,DATW,DATW,DATW,DATW,CLW1,CLW1,DATW	; Datw
  1369	BYTE (4)RFN1,RFN1,RFN1,RFN1,RFN1,RFN1,RFN1,RFN1,FREE,FREE,RFN1	; Rfn1
  1370	BYTE (4)CLZW,CLZW,CLZW,FREE,FREE,CLZW,CLZW,CLZW,CLZW,CLZW,CLZW	; CLZW
NETWRK.VDH;1                       22-MAY-75 10:29     Page 30.1

  1371	BYTE (4)RFN2,RFN2,RFN2,RFN1,RFN1,RFN2,RFN2,RFN2,CLZW,CLZW,RFN2	; Rfn2
  1372	BYTE (4)NUSE,NUSE,NUSE,NUSE,NUSE,NUSE,NUSE,NUSE,NUSE,NUSE,NUSE	; NUSE
  1373	BYTE (4)FREE,FREE,FREE,FREE,FREE,FREE,FREE,FREE,FREE,FREE,FREE	; Free
NETWRK.VDH;1                       22-MAY-75 10:29     Page 31

  1374	
  1375	; This is the action table
  1376	; It is referenced the same as the transition table
  1377	
  1378	; Event rrfc clsr clss clzr clzs acpt conn lisn rrfe hung  old state
  1379	
  1380	ACTION:
  1381	BYTE (4)AFNY,AFNY,AFNY,AFNY,AFNY,ANOP,AFNY,AFNY,AFNY,ANOP,AFNY	; Dead
  1382	BYTE (4)ANOP,AFNY,AFNY,AFNY,AFNY,ANOP,ARFC,ANOP,AFNY,ANOP,AFNY	; Clzd
  1383	BYTE (4)AFNY,ACLS,ACLS,AFNY,AFNY,ANOP,AOPB,ANOP,AFNY,ACLS,AFNY	; Pndg
  1384	BYTE (4)ANOP,AFNY,AFNY,ANOP,ANOP,ANOP,AFNY,AFNY,AFNY,ANOP,ACLS	; Lsng
  1385	BYTE (4)AFNY,ACLS,ACLS,ACLS,ACLS,AOPB,AFNY,AFNY,AFNY,ANOP,AFNY	; Rfcr
  1386	BYTE (4)AFNY,ACLL,ACLL,AFNY,AFNY,ANOP,AFNY,AFNY,AFNY,ACLL,AFNY	; Clw1
  1387	BYTE (4)AOPL,ACLS,ACLS,ACLS,ACLS,ANOP,AFNY,AFNY,AFNY,ACLS,ACLS	; Rfcs
  1388	BYTE (4)AFNY,AEOR,AES1,ACLS,AEOS,ANOP,AFNY,AFNY,AFNY,ACKA,AFNY	; Opnd
  1389	BYTE (4)ANOP,ANOP,ANOP,ANOP,ANOP,ANOP,AFNY,AFNY,AFNY,ANOP,AFNY	; Clsw
  1390	BYTE (4)AFNY,AFNY,AES1,AFNY,AFNY,ANOP,AFNY,AFNY,ACLS,ACLS,AFNY	; Datw
  1391	BYTE (4)AFNY,AFNY,AFNY,AFNY,AFNY,ANOP,AFNY,AFNY,ACLO,ACLO,AFNY	; Rfn1
  1392	BYTE (4)AFNY,AFNY,AFNY,ACLL,ANOP,ANOP,AFNY,AFNY,AFNY,ANOP,AFNY	; CLZW
  1393	BYTE (4)AFNY,AFNY,AFNY,ANOP,ANOP,ANOP,AFNY,AFNY,ACLO,ACLO,AFNY	; Rfn2
  1394	BYTE (4)AFNY,AFNY,AFNY,AFNY,AFNY,AFNY,AFNY,AFNY,AFNY,AFNY,AFNY	; NUSE
  1395	BYTE (4)AFNY,AFNY,AFNY,ANOP,ANOP,AABT,AFNY,AFNY,AFNY,ANOP,AFNY	; Free
  1396	
  1397	; Dispatch table for actions
  1398	; Routines are called effectively by pushj p,@actab(action#)
  1399	
  1400	ACTAB:	CPOPJ		; Nop
  1401		FUNNY		; Unexpected event
  1402		SNDCLS		; Send cls
  1403		SNDRFC		; Send str or rts
  1404		NETOPB		; Sned rfc and open link
  1405		NETOPL		; Open link
  1406		NETCLL		; Close link
  1407		NETCLB		; Close link and send cls
  1408		DOEOR		; Finish up input
  1409		DOEOS		; FINISH UP OUTPUT
  1410		DOES1		; END OF SEND IF TRANSMISSION ABORTED
  1411		DOABT		; ACCEPT ON ABORTED CONNECTION
  1412		CKALL		; ALLOCATIN CHECK FOR OPENED CONN
  1413	
  1414	RADIX 8
NETWRK.VDH;1                       22-MAY-75 10:29     Page 32

  1415	
  1416	; Unexpected event
  1417	
  1418	FUNNY:	MOVE 2,NETSTS(UNIT)	; Get status
  1419		DPB UNIT,[POINT 8,2,11]	; Include unit
  1420		DPB A,[POINT 6,2,17]	; And event
  1421		LDB A,PFHST
  1422		HRR B,A			; And host
  1423		PUSHJ P,IMPBG0		; And create impbug
  1424		AOS FUNNYC		; Count them
  1425		JRST NCPERR		; AND SEND TYPE 0 ERR
  1426	
  1427	; ACCEPTED AN ABORTED REQUEST
  1428	
  1429	DOABT:	MOVSI IOS,EOTF		; SET FLAG TO CAUSE ERROR
  1430		IORB IOS,NETSTS(UNIT)	; IN STATUS WORD
  1431		POPJ P,
  1432	
  1433	; CHECK ALLOCATION
  1434	
  1435	CKALL:	MOVE A,LSKT(UNIT)
  1436		TRNN A,1		; SEND SOCKET?
  1437		 RET			; NO. DO NOTHING
  1438		TEST(NE,ALLFF)		; Allocation failure??
  1439		TEST(NN,CLZF)		; BEING CLOSED?
  1440		 JRST CKALL1			; NO, IGNORE
  1441		TEST(O,ERRB,EOTF)	; SIGNAL ERROR, AND STOP TRANSMISSION
  1442		MOVEM IOS,NETSTS(UNIT)
  1443		RET
  1444	
  1445	CKALL1:	LDB A,PLIDX
  1446		LDB B,PBPBYT
  1447		CAMG B,NETBAL(UNIT)	; SUFFICIENT BIT ALLOCATION?
  1448		SKIPN IMPLT4(A)		; AND MESSAGE SPACE?
  1449		 JRST CKALL2		; NO
  1450		TEST(Z,ALLFF)
  1451		MOVEM IOS,NETSTS(UNIT)
  1452		RET
  1453	
  1454	CKALL2:	LDB A,PLIDX 
  1455		CALL IMPSYN		; RESYNC ALLOCATION
  1456		MOVSI IOS,ALLFF
  1457		IORB IOS,NETSTS(UNIT)	; REMEMBER WE DID THIS ONCE
  1458		RET
  1459	; END OF SEND
  1460	
  1461	DOES1:	PUSHJ P,DOEOS
  1462		PUSHJ P,IMPABL		; FLUSH QUEUED MESSAGES
  1463		POPJ P,
  1464	
  1465	DOEOS:	MOVSI IOS,EOTF
  1466		IORB IOS,NETSTS(UNIT)
  1467		LDB A,PLIDX
NETWRK.VDH;1                       22-MAY-75 10:29     Page 32.1

  1468		PUSHJ P,IMPSDB		; SET DONE BIT IN LINK TABLE
  1469		POPJ P,
  1470	
  1471	; End of receive
  1472	
  1473	DOEOR:	PUSHJ P,SNDCLS
  1474		HRRZ B,NETBUF(UNIT)
  1475		JUMPE B,DOEOS
  1476		CAIL B,1000
  1477		JRST DOEOS
  1478	EORNVT:	PUSHJ P,DOEOS		; DO SAME AS END OF SEND
  1479		NCPON			; NCP BACK ON SO NVTDET CAN USE IT
  1480		HRRZ B,NETBUF(UNIT)	; PICK UP LINE NUMBER
  1481		PUSH P,UNIT
  1482		PUSHJ P,NVTDET
  1483		POP P,UNIT
  1484		NCPOFF			; BACK OFF SO CALLER IS NOT CONFUSED
  1485		POPJ P,
  1486	
  1487	; Close link
  1488	
  1489	NETCLL:	LDB A,PLIDX		; Get link table index
  1490		PUSHJ P,IMPCLL
  1491		POPJ P,
  1492	
  1493	NETCLB:	PUSHJ P,NETCLL
  1494	SNDCLS:	LDB A,PFHST		; Get foreign host
  1495		MOVE C,FSKT(UNIT)	; And foreign socket
  1496		MOVE B,LSKT(UNIT)	; And local socket
  1497		TEST(NN,DEDF)
  1498		PUSHJ P,IMPCLS		; Send the control message
  1499		POPJ P,
NETWRK.VDH;1                       22-MAY-75 10:29     Page 33

  1500	
  1501	; OPEN LINK
  1502	
  1503	NETOPL:	LDB A,PFHST
  1504		MOVE B,LSKT(UNIT)
  1505		TRNE B,1		; Send socket?
  1506		 IORI A,1000		; Mak as such
  1507		LDB B,PLINK		; Get link
  1508		LDB C,PBPBYT
  1509		PUSHJ P,IMPOPL
  1510		DPB A,PLIDX		; Save link index
  1511		POPJ P,
  1512	
  1513	; Send rfc and open link
  1514	
  1515	NETOPB:	PUSHJ P,NETOPL
  1516		JRST SNDRFC
  1517	
  1518	; Send rfc
  1519	
  1520	SNDRFC:	TEST(NE,DEDF)
  1521		 POPJ P,
  1522		LDB A,PFHST		; Get foreign host
  1523		MOVE B,LSKT(UNIT)	; And local socket
  1524		MOVE C,FSKT(UNIT)
  1525		LDB D,PBPBYT		; Byte size
  1526		TRNE B,1
  1527		JRST IMPSTR
  1528		LDB D,PLINK
  1529		JRST IMPRTS		; Send control message
NETWRK.VDH;1                       22-MAY-75 10:29     Page 34

  1530	
  1531	; This here is the main fsm routine
  1532	
  1533	DOFSM:	MOVE IOS,NETSTS(UNIT)
  1534		TEST(NN,DEDF)
  1535		 JRST DOFSMA
  1536		PUSHJ P,DOFSMA
  1537		LDB A,PFSM
  1538	DOFSMB:	PUSH P,A
  1539		MOVEI A,HUNG
  1540		PUSHJ P,DOFSMA
  1541		LDB A,PFSM
  1542		POP P,B
  1543		CAME A,B
  1544		 JRST DOFSMB
  1545		POPJ P,
  1546	
  1547	DOFSMA:	NCPOFF			; Allow no control messages while here
  1548		PUSH P,A		; Save event for footprints
  1549		MOVEI B,^D24		; Time out in 2 minutes
  1550		DPB B,PCLKS
  1551		LDB B,PFSM		; Get old state
  1552		PUSH P,B
  1553		LSH B,1			; Two words per old state
  1554		LDB C,CBPFSM(A)		; Get new state
  1555		LDB B,CBAFSM(A)		; Get action
  1556		DPB C,PFSM
  1557		PUSH P,B		; Save action
  1558		MOVE B,-1(P)		; Get old state
  1559		CAME C,B		; State changed?
  1560		 PUSHJ P,STCPSI		; GENERATE STATE CHANGE PSI
  1561	DOFSM2:	POP P,B			; GET ACTION
  1562		SUB P,BHC+1		; FLUSH OLD STATE
  1563		POP P,A			; Restore event
  1564		PUSHJ P,@ACTAB(B)	; Call action routine
  1565		NCPON
  1566		POPJ P,
  1567	
  1568	; Generate state change PSI
  1569	
  1570	STCPSI:	HRRE A,NETFRK(UNIT)
  1571		JUMPL A,CPOPJ		; No fork for interrupts
  1572		LDB B,PFSMCH		; Get psi channel
  1573		CAIL B,^D36
  1574		 POPJ P,
  1575		EXCH A,B
  1576		PUSHJ P,PSIRQ
  1577		POPJ P,
NETWRK.VDH;1                       22-MAY-75 10:29     Page 35

  1578	
  1579	; Make a socket or find existing one
  1580	
  1581	GETSKT:	TDZA D,D
  1582	MAKSKT:	SETO D,
  1583		PUSH P,D
  1584		PUSH P,A		; Save foreign host
  1585		PUSH P,B		; Save foreign socket
  1586		PUSH P,C		; Save local socket
  1587		MOVE UNIT,C
  1588		XOR UNIT,B
  1589		TRNN UNIT,1		; Homosexual?
  1590		JRST MAKSKX		; Yes. error
  1591		ROT C,-4
  1592		MOVS UNIT,C
  1593		IMULI C,123431
  1594		XOR UNIT,C		; Randomize from local socket
  1595		LSH UNIT,-1
  1596		MULI UNIT,NSKT		; Initial probe
  1597		MOVEI D,NSKT
  1598		SETO C,
  1599		NCPOFF
  1600	MAKSKL:	LDB A,PFSM		; Get state of this socket
  1601		CAIE A,FREE
  1602		CAIN A,DEAD
  1603		JRST MAKSK1
  1604		CAIN A,CLZW		; WAITING FOR USER TO CLOSE?
  1605		JRST MAKSKN		; YES. DON'T PICK THIS ONE
  1606		MOVE B,LSKT(UNIT)	; What local socket is this for?
  1607		CAME B,(P)
  1608		JRST MAKSKN		; Not the one we're after, try next
  1609	MAKSK3:	SKIPGE -2(P)
  1610		JRST MAKSK6
  1611		LDB B,PFHST
  1612		MOVE A,FSKT(UNIT)
  1613		CAIN B,777
  1614		JRST [	SKIPN -3(P)	; Was getskt called?
  1615			JRST MAKSKN	; Yes, getskt called
  1616			POP P,C		; Makskt...suceed
  1617			JRST MAKSKF]
  1618		CAMN B,-2(P)
  1619		CAME A,-1(P)
  1620		 JRST MAKSKN		; Foreign host or socket doesn't match
  1621		AOS -4(P)		; EVERYTHING MATCHES. SKIP RETURN
  1622		SETZ A,
  1623		JRST MAKSKV		; NCPON, POP STACK
  1624	
  1625	
  1626	MAKSK6:	POP P,C
  1627		SUB P,BHC+3
  1628		MOVE B,FSKT(UNIT)
  1629		LDB A,PFHST
  1630		NCPON
NETWRK.VDH;1                       22-MAY-75 10:29     Page 35.1

  1631		JRST SKPRET
  1632	
  1633	MAKSKN:	SOJLE D,MAKSKE		; Full, error
  1634		SOJGE UNIT,MAKSKL	; Loop back for next slot
  1635		MOVEI UNIT,NSKT-1
  1636		JRST MAKSKL
NETWRK.VDH;1                       22-MAY-75 10:29     Page 36

  1637	
  1638	MAKSK1:	MOVSI B,PROGF
  1639		TDNE B,NETSTS(UNIT)
  1640		 JRST MAKSKN		; Ignore those assigned to programs
  1641		SKIPGE C
  1642		MOVE C,UNIT		; Save where it's at
  1643		CAIE A,DEAD
  1644		JRST MAKSKN		; Space keeper, test next
  1645	MAKSK5:	SKIPN -3(P)
  1646		JRST MAKSKR
  1647		MOVE UNIT,C
  1648		SETZM NETSTS(UNIT)
  1649		SETZM NETBUF(UNIT)
  1650		SETZM NETAWD(UNIT)
  1651		SETZM NETBAL(UNIT)
  1652		SETZM NETBTC(UNIT)
  1653		SETOM NETFRK(UNIT)
  1654		MOVEI A,CLZD
  1655		DPB A,PFSM		; Set its state to be closed
  1656		POP P,C
  1657		MOVEM C,LSKT(UNIT)
  1658	MAKSKF:	MOVE A,-1(P)		; Foreign host
  1659		MOVE B,LSKT(UNIT)
  1660		TRNE B,1		; Receive?
  1661		 JRST MAKSKQ
  1662		PUSHJ P,ASNLNK		; Assign link for that host
  1663		 JRST [	LDB A,PFSM
  1664			MOVEI B,FREE
  1665			CAIN A,CLZD	; Just created?
  1666			 DPB B,PFSM	; Yes, delete it
  1667			PUSH P,LSKT(UNIT)
  1668			JRST MAKSKR]	; And fail
  1669	MAKSKQ:	POP P,B			; Common for old and new
  1670		MOVEM B,FSKT(UNIT)
  1671		POP P,A
  1672		DPB A,PFHST
  1673		SUB P,BHC+1
  1674		NCPON
  1675		JRST SKPRET
  1676	
  1677	MAKSKE:	JUMPGE C,MAKSK5
  1678	MAKSKW:	SKIPA A,[0]		; FULL
  1679	MAKSKR:	MOVEI A,4		; NON-EXISTENT
  1680	MAKSKV:	NCPON
  1681		SKIPA A,A
  1682	MAKSKX:	MOVEI A,3		; BAD PARAMETERS
  1683		HRLM A,-2(P)		; STORE ERROR CODE
  1684		POP P,C
  1685		POP P,B
  1686		POP P,A
  1687		SUB P,BHC+1
  1688		POPJ P,
NETWRK.VDH;1                       22-MAY-75 10:29     Page 37

  1689	
  1690	; Assign link number for this connection
  1691	
  1692	ASNLNK:	PUSH P,B
  1693		PUSH P,C
  1694		PUSH P,D
  1695		MOVEI D,1(P)		; Where bits will be
  1696		PUSH P,[<1B<FLINK>-1>_1+1]
  1697		REPEAT NLNKBW-2,<PUSH P,[-1]>
  1698		PUSH P,[-<1B<LLINK-<^D36*<NLNKBW-1>>-1>>]
  1699		PUSH P,UNIT		; Preserve unit
  1700		PUSH P,A
  1701		MOVSI UNIT,-NSKT
  1702	ASNLNL:	LDB A,PFSM
  1703		CAIE A,FREE
  1704		CAIN A,DEAD
  1705		 JRST ASNLNN
  1706		LDB A,PFHST
  1707		CAME A,0(P)		; Check all connection to this host
  1708		 JRST ASNLNN		; Get next
  1709		MOVE A,LSKT(UNIT)
  1710		TRNE A,1		; Only receive connections
  1711		 JRST ASNLNN
  1712		LDB A,PLINK		; Get link assigned
  1713		IDIVI A,^D36		; Separate word and bit
  1714		MOVE B,BITS(B)		; Get the bit
  1715		ADD A,D
  1716		ANDCAM B,0(A)		; Clear bits for links in use
  1717	ASNLNN:	AOBJN UNIT,ASNLNL	; Loop thru all connections
  1718		HRLI D,-NLNKBW		; Prepare to look at all bits
  1719		SETZ C,
  1720	ASNLNC:	MOVE A,0(D)
  1721		JFFO A,ASNLNF
  1722		ADDI C,^D36
  1723		AOBJN D,ASNLNC
  1724		JRST ASNLN1		; Failed
  1725	
  1726	ASNLNF:	ADD B,C
  1727	ASNLN0:	POP P,A
  1728		POP P,UNIT
  1729		DPB B,PLINK
  1730		SUB P,BHC+NLNKBW
  1731		AOS -3(P)
  1732	ASNLN1:	POP P,D
  1733		POP P,C
  1734		POP P,B
  1735		POPJ P,
NETWRK.VDH;1                       22-MAY-75 10:29     Page 38

  1736	
  1737	; Do a listen (openf for file with no foreign host/socket)
  1738	
  1739	LISTEN:	PUSHJ P,HSTCHK
  1740		POPJ P,
  1741		PUSH P,D		; Save byte size
  1742		PUSHJ P,MAKSKT		; Make a socket
  1743		 JRST [	POP P,D
  1744			MOVEI A,OPNX10
  1745			POPJ P,]	; No room
  1746		MOVEI A,LISN
  1747		JRST CONNE1
  1748	
  1749	; Do a connect (openf for file with foreign host/socket specified)
  1750	
  1751	CONNEC:	PUSHJ P,HSTCHK
  1752		POPJ P,
  1753		PUSH P,D		; Save byte size
  1754		PUSHJ P,MAKSKT		; Make a socket or find existing one
  1755		 JRST [	POP P,D
  1756			MOVEI A,OPNX10
  1757			POPJ P,]	; No room
  1758		MOVEI A,CONN
  1759	CONNE1:	NCPOFF
  1760		LDB B,PFSM
  1761		CAIN B,CLZD		; Received any rfc here?
  1762		 JRST CONNE2		; No
  1763		CAIN B,PNDG		; Same question
  1764		 JRST CONNE3		; Yes
  1765		MOVEI A,OPNX9		; Already in use
  1766		POP P,D
  1767		NCPON
  1768		POPJ P,
  1769	
  1770	CONNE2:	MOVSI D,PROGF
  1771		IORM D,NETSTS(UNIT)	; Mark as attached to program
  1772		NCPON
  1773		POP P,D			; My choice of byte size
  1774		DPB D,PBPBYT		; Set byte size
  1775		PUSHJ P,DOFSM		; Send rfc etc
  1776		JRST SKPRET
  1777	
  1778	CONNE3:	TRNE C,1		; Are we sender?
  1779		 JRST CONNE2		; Also our choice
  1780		LDB D,PBPBYT		; Get his byte size
  1781		CAMN D,0(P)		; Does byte size agree?
  1782		 JRST CONNE2		; Yes, same as if my choice
  1783		NCPON
  1784		MOVEI A,HUNG		; Flush his connection attempt
  1785		PUSHJ P,DOFSM
  1786		POP P,D
  1787		MOVEI A,OPNX22		; Bad byte size error
  1788		POPJ P,
NETWRK.VDH;1                       22-MAY-75 10:29     Page 39

  1789	
  1790	; Check if host is available
  1791	
  1792	HSTCHK:	SKIPL IMPRDY
  1793		 JRST [	MOVEI A,OPNX19
  1794			POPJ P,]
  1795		JUMPL 1,SKPRET		; ALWAYS OK IF LISTEN
  1796		PUSH P,B
  1797		PUSH P,A
  1798		IDIVI A,^D36
  1799		MOVE B,BITS(B)
  1800		TDNE B,IMPBHT(A)
  1801		 JRST [	MOVEI A,OPNX20
  1802			JRST HSTCHF]
  1803		TDNE B,IMPHRT(A)
  1804		 JRST HSTCHO
  1805		MOVE A,0(P)
  1806		PUSH P,3
  1807		PUSH P,4
  1808		PUSH P,5
  1809		PUSHJ P,IMSRST		; RESET HIM
  1810		POP P,5
  1811		POP P,4
  1812		POP P,3
  1813		MOVE A,TODCLK		; GET NOW
  1814		ANDI A,377777
  1815		ADDI A,^D5000		; PLUS 5 SECONDS
  1816		ANDI A,777777-377	; LEAVE ROOM FOR HOST
  1817		IOR A,0(P)
  1818		HRLI A,HUPTST		; TEST ADDRESS
  1819		MOVSS A
  1820		JSYS EDISMS
  1821		MOVE A,0(P)
  1822		IDIVI A,^D36
  1823		MOVE B,BITS(B)
  1824		TDNN B,IMPHRT(A)
  1825		 JRST [	MOVEI A,OPNX20
  1826			JRST HSTCHF]
  1827	HSTCHO:	POP P,A
  1828		AOSA -1(P)
  1829	HSTCHF:	SUB P,BHC+1
  1830		POP P,B
  1831		POPJ P,
  1832	
  1833		USE	RESPC
  1834	
  1835	HUPTST:	MOVE 2,1
  1836		ANDI 2,377
  1837		IDIVI 2,^D36
  1838		MOVE 3,BITS(3)
  1839		TDNE 3,IMPHRT(2)
  1840		 JRST 1(4)
  1841		ANDCMI 1,377
NETWRK.VDH;1                       22-MAY-75 10:29     Page 39.1

  1842		JRST BLOCKW		; CHECK TIME RUN OUT
  1843	
  1844		USE	SWAPPC
NETWRK.VDH;1                       22-MAY-75 10:29     Page 40

  1845	
  1846	; Routines to call when control messages are received
  1847	
  1848	; Receive cls
  1849	; Reccls(fhost,fskt,lskt)--nil
  1850	
  1851	RECCLS:	PUSHJ P,GETSKT		; Get the socket entry
  1852		 JRST NCPERR
  1853	RECCL1:	MOVE B,LSKT(UNIT)
  1854		TRNN B,1
  1855		SKIPA A,[CLSR]
  1856		MOVEI A,CLSS
  1857		PUSHJ P,DOFSM
  1858		POPJ P,
  1859	
  1860	; RECEIVED INCORRECT MESSAGE
  1861	; REPLY WITH ERR
  1862	
  1863	NCPERR:	PUSH P,1		; SAVE AC'S
  1864		PUSH P,2
  1865		PUSH P,3
  1866		PUSH P,4
  1867		PUSH P,5
  1868		MOVE 5,[IMPCHO,,2]	; COMPLAIN ABOUT LAST CONTROL MESSAGE
  1869		BLT 5,5
  1870	;[EDIT] DEL HLRZ 1,-4(P) AND ADD 2 LINES TO KEEP ERRORS OUT OF UTAH
  1871		HLRZ 2,1		;SUBCODE TYPE FOR "ERR" MSG
  1872		HRRZS 1			;AND HOST TO COMPLAIN TO
  1873		PUSHJ P,IMPERR
  1874		POP P,5
  1875		POP P,4
  1876		POP P,3
  1877		POP P,2
  1878		POP P,1
  1879		HRRZS 1
  1880		POPJ P,
  1881	
  1882	; Receive str
  1883	; Recstr(fhost,fskt,lskt)--nil
  1884	
  1885	RECSTR:	PUSH P,D		; Save byte size
  1886	RCSTR0:	PUSHJ P,MAKSKT
  1887		 JRST [	POP P,D
  1888			JRST NCPERR]
  1889		MOVE D,0(P)
  1890		PUSHJ P,CHKSKT		; MAKE SURE THIS SOCKET NOT IN USE
  1891		 JRST RCSTR0		; IT WAS. DELETED. NOW TRY AGAIN.
  1892		LDB A,PFSM		; What is state of this connection
  1893		CAIE A,CLZD		; If not clzd
  1894		 JRST [	LDB D,PBPBYT	; Then get user's byte size
  1895			CAMN D,0(P)	; If not the same
  1896			JRST .+1
  1897			MOVEI A,RRFB	; RECEIVED BAD BYTE SIZE
NETWRK.VDH;1                       22-MAY-75 10:29     Page 40.1

  1898			PUSHJ P,DOFSM
  1899			MOVSI A,ERRB
  1900			IORM A,NETSTS(UNIT)
  1901			POP P,D
  1902			POPJ P,]
  1903		POP P,D
  1904		DPB D,PBPBYT
  1905		MOVEI A,RRFC
  1906		PUSHJ P,DOFSM
  1907		MOVE A,UNIT
  1908		LDB B,PLINK
  1909		POPJ P,
  1910	
  1911	CHKSKT:	PUSH P,A
  1912		PUSH P,B
  1913		PUSH P,C
  1914		PUSH P,D
  1915		LDB A,PFSM		; GET STATE
  1916		CAIE A,RFCS		; STATES WHERE RFC IS EXPECTED
  1917		CAIN A,CLZD
  1918		 JRST SKTCK1
  1919		CAIN A,LSNG
  1920	SKTCK1:	 AOSA -4(P)		; OK, SKIP RETURN
  1921		PUSHJ P,SK2DWN		; ELSE KILL THE OLD ONE
  1922		POP P,D
  1923		POP P,C
  1924		POP P,B
  1925		POP P,A
  1926		POPJ P,
  1927	
  1928	CHKLNK:	PUSH P,A
  1929		PUSH P,B
  1930		PUSH P,C
  1931		PUSH P,D
  1932		MOVSI UNIT,-NSKT
  1933	CHKLK1:	LDB B,PLINK		; GET THE LINK
  1934		LDB C,PFHST		; AND HOST
  1935		CAMN B,0(P)
  1936		CAME C,-3(P)
  1937		 JRST CHKLK2
  1938		MOVE B,LSKT(UNIT)
  1939		TRNN B,1
  1940		 JRST CHKLK2		; SKIP SEND CONNECTIONS
  1941		LDB B,PFSM		; LINK-HOST MATCHES. GET STATE
  1942		CAIE B,DEAD
  1943		CAIN B,FREE
  1944		 JRST CHKLK2
  1945		CAIE B,CLZD
  1946		CAIN B,RFCS
  1947		 JRST CHKLK2
  1948		CAIE B,LSNG
  1949		CAIN B,CLZW
  1950		 JRST CHKLK2
NETWRK.VDH;1                       22-MAY-75 10:29     Page 40.2

  1951		PUSHJ P,SK2DWN
  1952	CHKLK2:	AOBJN UNIT,CHKLK1
  1953		POP P,D
  1954		POP P,C
  1955		POP P,B
  1956		POP P,A
  1957		POPJ P,
NETWRK.VDH;1                       22-MAY-75 10:29     Page 41

  1958	
  1959	; Receive rts
  1960	; Recrts(fhost,fskt,lskt,link)
  1961	
  1962	RECRTS:	PUSHJ P,CHKLNK		; CHECK AND DELETE ANY MATCHING LINKS
  1963		PUSH P,D		; SAVE LINK
  1964		PUSHJ P,MAKSKT		; MAKE SOCKET TABLE ENTRY
  1965		 JRST [	POP P,D		; FAILED, SEND ERR
  1966			JRST NCPERR]
  1967		POP P,D			; RESTORE LINK
  1968		PUSHJ P,CHKSKT		; MAKE SURE NO DUPLICATES
  1969		 JRST RECRTS		; PREVIOUS CONNECTION CLOSED. TRY AGAIN
  1970		DPB D,PLINK
  1971		MOVEI A,RRFC
  1972		PUSHJ P,DOFSM
  1973		POPJ P,
  1974	
  1975	; Receive rfnm
  1976	
  1977	RCFRFN:	MOVEI A,RRFN
  1978		PUSHJ P,DOFSM
  1979		POPJ P,
  1980	
  1981	; Receive ins/inr
  1982	
  1983	RECINR:
  1984	RECINS:	LDB B,PINTCH
  1985		LDB A,PFSM
  1986		CAIGE B,^D36		; RETURN IF CHANNEL IS 77 OCTAL
  1987		CAIE A,OPND
  1988		 POPJ P,
  1989		HRRZ A,NETBUF(UNIT)
  1990		SKIPE A
  1991		CAIL A,1000
  1992		CAIA
  1993		 POPJ P,
  1994		HRRE A,NETFRK(UNIT)
  1995		JUMPL A,CPOPJ
  1996		EXCH A,B
  1997		PUSHJ P,PSIRQ
  1998		POPJ P,
  1999	
  2000	; INITIATE SERVICE INTERRUPTION (HOST DEAD)
  2001	
  2002	SVCINT:	MOVSI IOS,SVCIF
  2003		IORB IOS,NETSTS(UNIT)
  2004		PUSHJ P,STCPSI		; GENERATE STATE CHANGE PSI
  2005		POPJ P,
  2006	
  2007	; TERMINATE SERVICE INTERRUPTION
  2008	
  2009	SVCRST:	MOVSI IOS,SVCIF
  2010		ANDCAB IOS,NETSTS(UNIT)
NETWRK.VDH;1                       22-MAY-75 10:29     Page 41.1

  2011		PUSHJ P,STCPSI
  2012		POPJ P,
  2013	
  2014	; Receive reset message
  2015	
  2016	RECRST:	PUSHJ P,NETHDN
  2017		JRST IMPRRP
NETWRK.VDH;1                       22-MAY-75 10:29     Page 42

  2018	
  2019	; Kill all connection -- net is down
  2020	
  2021	NETDWN:	MOVSI UNIT,-NSKT
  2022		PUSHJ P,SKTDWN
  2023		AOBJN UNIT,.-1
  2024	
  2025	; Periodic check of all connections for time-out
  2026	
  2027	NETCHK:	MOVSI UNIT,-NSKT
  2028	NETCKL:	LDB A,PFSM
  2029		CAIE A,DEAD
  2030		CAIN A,FREE
  2031		 JRST NETCKN
  2032		MOVSI A,DEDF
  2033		TDNN A,NETSTS(UNIT)
  2034		SKIPL IMPRDY
  2035		JRST NETCK1
  2036		LDB B,PCLKS
  2037		SOS B
  2038		DPB B,PCLKS
  2039		JUMPG B,NETCKN
  2040	NETCK1:	MOVEI A,HUNG
  2041		PUSHJ P,DOFSM
  2042	NETCKN:	AOBJN UNIT,NETCKL
  2043		MOVEI A,^D5000
  2044		SKIPL IMPRDY
  2045		MOVEI A,^D500
  2046		ADD A,TODCLK
  2047		MOVEM A,NETTIM
  2048		POPJ P,
NETWRK.VDH;1                       22-MAY-75 10:29     Page 43

  2049	
  2050	; Host has died
  2051	
  2052	NETHDN:	MOVSI UNIT,-NSKT
  2053		PUSH P,A
  2054	NETHDL:	LDB A,PFSM
  2055		CAIE A,FREE
  2056		CAIN A,DEAD
  2057		JRST NETHDX
  2058		LDB A,PFHST
  2059		CAMN A,(P)
  2060		PUSHJ P,SKTDWN
  2061	NETHDX:	AOBJN UNIT,NETHDL
  2062		POP P,A
  2063		POPJ P,
  2064	
  2065	SK2DWN:	HRRZ B,NETBUF(UNIT)
  2066		CAIG B,NVTHI		; AN NVT?
  2067		CAIGE B,NVTLO
  2068		 JRST SKTDWN		; NO, TREAT NORMALLY
  2069		PUSH P,UNIT
  2070		PUSH P,B
  2071		PUSHJ P,SKTDWN
  2072		POP P,B
  2073		LDB UNIT,PTNETI
  2074		PUSHJ P,SKTDWN
  2075		POP P,UNIT
  2076		POPJ P,
  2077	
  2078	SKTDWN:	LDB A,PFSM		; GET STATE
  2079		CAIN A,LSNG		; IF LSNG
  2080		 POPJ P,		; IGNORE
  2081		MOVSI B,ERRB!DEDF
  2082		IORM B,NETSTS(UNIT)
  2083		CAIE A,CLSW		; IF WAITING FOR CLOSE,
  2084		CAIN A,CLW1
  2085		PUSHJ P,SKTDW2		; PRETEND ONE HAPPENED.
  2086		CAIE A,RFCR
  2087		CAIN A,OPND		; If opnd
  2088	SKTDW2:	PUSHJ P,RECCL1		; Simulate receipt of cls
  2089		MOVEI A,HUNG
  2090		PUSHJ P,DOFSM
  2091		POPJ P,
  2092	>		; End of ifdef on page 1
  2093		END
NETWRK.VDH;1                       22-MAY-75 10:29     Page 44

  2094	


IMPDV.VDH;1                        22-MAY-75 10:30     Page 2

  2095	;<MON>IMPDV.MAC;8     6-FEB-75 15:42:15    EDIT BY LIEB
  2096	;CRESET VDH VARIABLES ON INIT AND RESTART
  2097	;<MON>IMPDV.MAC;6     5-FEB-75 13:07:51    EDIT BY LIEB
  2098	;ADDED PATCH TO KEEP INPUT BUFFER POOL ABOVE 8 INSTEAD OF 2
  2099	;<MON>IMPDV.MAC;5     5-FEB-75 10:39:11    EDIT BY LIEB
  2100	;ADD CHANGES TO WORK WITH NEWER CLOCK ROUTINE
  2101	;<MON>IMPDV.MAC;3     1-FEB-75 16:50:45    EDIT BY LIEB
  2102	;CORRECT VDH INIT AND MAKE IMPRDY AND RTSTAT WORK
  2103	;<MON>IMPDV.MAC;2    30-JAN-75 03:05:50    EDIT BY LIEB
  2104	;<MON>IMPDV.VDH;2    29-JAN-75 17:19:29    EDIT BY LIEB
  2105	;<MON>IMPDV.VDH;1    29-JAN-75 14:24:17    EDIT BY LIEB
  2106	;INSERTED CHANGES FOR VDH--LIEB
  2107	;<133-TENEX>IMPDV.MAC;314    24-DEC-74 08:32:56    EDIT BY TOMLINSON
  2108	; DISABLE RCTE UNTIL DEBUGGED THOROUGHLY
  2109	;<133-TENEX>IMPDV.MAC;313    18-DEC-74 15:40:48    EDIT BY TOMLINSON
  2110	;<133-TENEX>IMPDV.MAC;312    17-DEC-74 16:17:00    EDIT BY TOMLINSON
  2111	; CAUSE INITIAL SB STRING FOR RCTE
  2112	;MISC BUG FIXES TO RCTE
  2113	;<133-TENEX>IMPDV.MAC;311    16-DEC-74 15:50:14    EDIT BY TOMLINSON
  2114	; TAKE OUT CODE TO TURN ON RCTE IN ASNNVT. CAN'T DO IT BECAUSE NCPLCK IS SET.
  2115	;<133-TENEX>IMPDV.MAC;309    13-DEC-74 12:41:16    EDIT BY TOMLINSON
  2116	; INITITATE TURN ON OF RCTE AND SUPPRESS GA
  2117	;<133-TENEX>IMPDV.MAC;308    13-DEC-74 12:32:18    EDIT BY TOMLINSON
  2118	; BUG FIXES TO RCTE
  2119	; PKBY1: MOVE SOS IMPLT4 TO AFTER ASNTBF CALL
  2120	; UPBRB: CHANGE BUG MSG
  2121	; IM8RAS:  ACCOUNT FOR BUFFERS IN CONNECTION QUEUE WHEN RESETTING ALLOC
  2122	;<133-TENEX>IMPDV.MAC;306     8-DEC-74 18:28:13    EDIT BY CLEMENTS
  2123	; FIX MISSING EXTERN ON SKPRET
  2124	;<133-TENEX>IMPDV.MAC;303     3-DEC-74 10:25:14    EDIT BY TOMLINSON
  2125	; Added RCTE code
  2126	;<133-TENEX>IMPDV.MAC;300    29-OCT-74 08:22:03    EDIT BY TOMLINSON
  2127	; SET UP STACK FOR BUG(IMP) AT IMIMTL
  2128	;<133-TENEX>IMPDV.MAC;299     1-OCT-74 13:16:36    EDIT BY TOMLINSON
  2129	; REMOVE SUPERFLUOUS INSTRINCTION AT IMPRAP+2
  2130	;<133-TENEX>IMPDV.MAC;298    25-SEP-74 12:47:56    EDIT BY TOMLINSON
  2131	; (1) MARK HOST USING NEW PROTOCOL AS UNDERSTANDING SAME.
  2132	; (2) RELEASE BOTH HALVES OF AN NVT WHEN RECEIVING NXS/R
  2133	; (3) FIX BUGIMH ARG IN BADLKS/R
  2134	; (4) BUGCHK IF IMPLT4 IS OVERDECREMENTED IN UPBRB
  2135	;<133-TENEX>IMPDV.MAC;297    22-AUG-74 16:28:54    EDIT BY CLEMENTS
  2136	;<TENEX-132>IMPDV.MAC;296    22-JUN-74 13:07:40    EDIT BY TOMLINSON
  2137	; NOP IMPCHK IF IMPRDY = 0
IMPDV.VDH;1                        22-MAY-75 10:30     Page 3

  2138	
  2139		SEARCH	PROLOG
  2140	IFDEF IMPCHN,<	; This whole file is included only if imp exists
  2141		TITLE	IMPDV
  2142		SEARCH	STENEX
  2143	
  2144	; Accumulators
  2145	A==1
  2146	
  2147	IMPUN==5		; Ac for 'unit'
  2148	
  2149	; Parameters
  2150	
  2151	IMPNLK==200		; Size of link table
  2152	IMP8XS==40		; Size of irreg mes buffer
  2153	NSQ==8			; Size of special q tables
  2154	SIQMAX==3000		; Maximum buffer space allowed on siq
  2155	NIMSTK==^D20		; Pi level stack
  2156	IMPLBT==400/^D36+1	; Size of bit tables for host states
  2157	CLINK==0		; Control link
  2158	FLINK==2		; First link to use
  2159	LLINK==^D72		; Last link to use
  2160	RFNTMO==^D20000		; Rfnm time-out interval (three of these)
  2161	UPROBI==^D300000	; Interval at which to probe every up host
  2162	UPROBT==^D60000		; Time to spend probing every down host
  2163	SIQTM0==^D30000		; Special queue time-out interval
  2164	NEGTM0==^D30000		; Negotiation time-out (between 1 & 2 of these)
  2165	
  2166	; NVT special characters
  2167	
  2168	IACCH==377		; Initiate command
  2169	DNTCH==376		; DON'T
  2170	DOCH==375		; DO
  2171	WNTCH==374		; WON'T
  2172	WILCH==373		; WILL
  2173	SBCH==372		; SB beginning of sub negotiation
  2174	GACH==371		; GA go ahead
  2175	ELCH==370		; EL erase line
  2176	ECCH==367		; EC erase character
  2177	AYTCH==366		; AYT are you there?
  2178	AOCH==365		; AO abort output
  2179	IPCH==364		; IP interrupt process
  2180	BRKCH==363		; BREAK
  2181	DMCH==362		; DM data mark
  2182	NOPCH==361		; NOP
  2183	SECH==360		; SE end of subnegotiation
  2184	
  2185	; Nvt option definitions
  2186	
  2187	BINOPT==0		; Binary
  2188	ECHOPT==1		; Echo
  2189	RCNOPT==2		; Reconnection
  2190	SGAOPT==3		; Suppress ga
IMPDV.VDH;1                        22-MAY-75 10:30     Page 3.1

  2191	NAMOPT==4		; Negotiate message size
  2192	STSOPT==5		; Status
  2193	TMKOPT==6		; Timing mark option
  2194	RCTOPT==7		; RCTE option
  2195	WILOPT==10		; Offset for requests
  2196	MAXOPT==^D18		; Only 1 half word of option bits
  2197	
  2198	; Bits in ttnetw
  2199	
  2200	NVTCRP==1		; Bit in ttnetw -- last char out was cr
  2201	IMPTB2==2		; Bit in ttnetw, last char in was cr
  2202	NVTGAB==4		; Bit in ttnetw -- suppress go-ahead
  2203				; Bits 12-14 used for nvtstp
  2204	NEGTMO==100		; Negotiation time-out started
  2205	NEWNVB==200		; New style nvt
  2206	NVTRCP==400		; RCTE reset pending
  2207	NVTRCS==1000		; RCTE CHAAGE IN STATE
  2208	
  2209	; The following nvt states are stored in ttnetw bits 12-14 (nvtstp)
  2210	
  2211	DFRWIL==1		; Deferred will
  2212	DFRWNT==2		; Deferred wont
  2213	DFRDO==3		; Deferred do
  2214	DFRDNT==4		; Deferred dont
  2215	DFRIAC==5		; Deferred iac
IMPDV.VDH;1                        22-MAY-75 10:30     Page 4

  2216	
  2217	; Imp message leader bits
  2218	
  2219	IMPHIP==1B0		; Hi priority imp msg leader bit
  2220	FRMIMP==1B1		; From imp
  2221	
  2222	; Bits in implt2
  2223	
  2224	RFNMC=3B1		; Rfnm outstanding (2 bit count)
  2225	LTDF=1B2		; 'done' flag
  2226	HIPFLG=1B3		; High priority connection
  2227	ILCKB==1B4		; Connection locked (no transmissions)
  2228	RXMTF==1B5		; Retransmission after time-out
  2229	RARF==1B6		; Rar expected
  2230	RARRF==1B7		; Send ras whe no rfnm's out
  2231	
  2232	; Cono-coni bits
  2233	
  2234	IMP=550
  2235	
  2236	IMPINB==1B32		; Input word ready
  2237	IMPOUB==1B28		; Ready for next output word
  2238	IMPEIB==1B24		; End of input
  2239	IMPGEB==1B23		; Clear eib
  2240	IMPEOB==1B22		; End of output
  2241	IMPSTO==1B21		; Stop output
  2242	
  2243	IMPIOF==10B27+10		; E of cono to clear input pi asmt
  2244	IMPION==<10+IMPCHN>B27+<10+IMPCHN> ; E of cono to set input pi asmt
  2245	IMPOOF==10B31			; E of cono to clear output assmnt
  2246	IMPOON==<10+IMPCHN>B31		; E of cono to set output pi asmt
  2247	
  2248	; Pointers to various fields
  2249	
  2250	PTNETI:	POINT 9,TTNETW(2),35	; Input unit
  2251	PTNETO:	POINT 9,TTNETW(2),26	; Output unit
  2252	PTINTC:	POINT 3,TTNETW(2),5	; Count, sync-ins
  2253	NVTSTP:	POINT 3,TTNETW(2),14	; Current nvt state
  2254	IMPLBS:	POINT 8,IMPLT2(1),17	; Connection byte size
  2255	LTHOST:	POINT 8,IMPLT1(1),27	; Foreign host
  2256	LTLINK:	POINT 8,IMPLT1(1),35	; Link
  2257	
  2258	MAXWPM:	400	; Max wds/input msg = (8000/32) + ovhd + slop =
  2259			; 250 + 3 + 3 = 256 = 400(8)
  2260	
  2261	; Following two are a getab table - don't separate
  2262	
  2263	NLHOST:	LHOSTN	; All references to lhostn should be to this cell,
  2264			; So it can be patched if needed.
  2265	NVTPTR:	XWD -NNVTLN,NVTLO	; -number of nvt's,,first nvt
  2266	
  2267	; End of getab group
IMPDV.VDH;1                        22-MAY-75 10:30     Page 5

  2268	
  2269	; Linkage into impdv
  2270	
  2271	INTERN	IMPBEG,IMPNLK,IMPLBT,CHKNET,NVTDOB,NVTCOB,NVTPAR,NTTCSO,NETCAP
  2272	INTERN	IMPHLT,NVTRCC
  2273	INTERN	NVTCHO,NVTXCR,NVTXGA,NVTMOD
  2274	INTERN IMPSV,IMPCHK,IMPOPL,IMPCLL,IMPABL,IMPSYN,IMPRTS,IMPSTR,IMPCLS,IMPALL
  2275	INTERN ASNNVT,NVTDET,TTNETW
  2276	INTERN	.ASNSQ,.RELSQ,.SNDIM,.RCVIM,.DBGIM	;ADDED LINK FOR DBGIM JSYS--LIEB
  2277	INTERN IMPRST,IMPRRP,IMSRST,IMPERR,IMPINR,IMPINS
  2278	INTERN HSTDED,IMPBG0,NTTRC3
  2279	INTERN IMPSDB,PKBYT,PKCHK,PKULCK,PKMSG,UPBYT,UPMSG,MAXWPM,NLHOST,NVTPTR
  2280	INTERN	PTNETI,PTNETO
  2281	
  2282	; Linkage to swpmon
  2283	
  2284	EXTERN	CHKBG1,CHKH1
  2285	
  2286	; Linkage to forks
  2287	
  2288	EXTERN	CAPENB,LSTERR
  2289	; Linkage to pisrv
  2290	
  2291	EXTERN	MENTR,CHNSON,BUGCHK,BUGNTE,BUGHLT,MRETN,SKMRTN
  2292	
  2293	; Linkage to ttysrv
  2294	
  2295	EXTERN	TTOCT,TTECT,TTICT,TTCHI,TTYLMD,TTFORK,NVTCOF,TTPSI,TTCOBI,TTCIBF
  2296	EXTERN	TTRLOB,TTOOUT,TTEOUT,WRPMSK,TTIMAX,TTOMAX,TCOB,TCOBQ,TTFLGS
  2297	EXTERN	TCOTST
  2298	
  2299	; Linkage to scheduler
  2300	
  2301	EXTERN	EDISMS,FORKX,JB0FLG,DISNT,ITRAP,IMPTM2,STMINQ,INSKED
  2302	
  2303	; Miscellaneous
  2304	
  2305	EXTERN	BHC,BITS,R,RSKP
  2306	EXTERN	BYTBLT
  2307	
  2308	EXTERN	NETBUF
  2309	EXTERN	MAXBPM
  2310	EXTERN RECRTS,RECSTR,RECCLS,DISG,PFHST,PLINK,EOTF,DEDF,NVTCLZ
  2311	EXTERN NETSTS,RLNTBF,ASNTBF,MULKMP,RCFRFN,MLKMA
  2312	EXTERN	SK2DWN
  2313	EXTERN ERRB,NETDWN,NETHDN,NETCHK,HOSTN,NHOSTS,DISGT
  2314	EXTERN RECRST,NETBAL,NETRAL,RECINR,RECINS,PLIDX,DISL,SVCINT,SVCRST
  2315	EXTERN	LCKNCP,ULKNCP
  2316	EXTERN	JOBRTT,TODCLK
IMPDV.VDH;1                        22-MAY-75 10:30     Page 6

  2317	
  2318	; Macros
  2319	
  2320	; Lock imp device lock
  2321	
  2322	DEFINE ILOCK (A)
  2323	<	CALL LCKIDV
  2324	IFB <A>,<0>
  2325	IFNB<A>,<A>
  2326	>
  2327	
  2328	; Unlock imp device lock
  2329	
  2330	DEFINE IUNLK
  2331	<	CALL ULKIDV>
  2332	
  2333	; Call clock switch code
  2334	
  2335	DEFINE	IMSCLK(CLOCK)<
  2336		MOVEI 1,CLOCK
  2337		CALL IMUCLK>
IMPDV.VDH;1                        22-MAY-75 10:30     Page 7

  2338	
  2339	; Storage
  2340	
  2341	; First impgtn are a getab table - don't separate
  2342	
  2343	LS IMPRDY,1		; 0=down, .gtr. 0 =going down, -1=up
  2344	LS NETON,1		; 0=network off
  2345	LS NETENT,1		; Flags to drive netser. e.g., don't allow login
  2346	LS NCPUPT,1		; Gtad of last time ncp cycled up.
  2347	LS IGDMSG,1		; Most recent imp-going-down msg
  2348	LS IMPDNT,1		; Time of last imp ready line drop
  2349	LS IMPUPT,1		; Time of last imp ready line up
  2350	LS IGDTIM,1		; Time of above imp-going-down msg
  2351	IMPGTN==:8		;LENGTH OF THIS GETAB TABLE
  2352	; End of getab group
  2353	
  2354	LS IMPORD,1		; Output ready. non-zero permits outgoing msgs
  2355	LS IMPRDL,1		; Ready line noticed off
  2356	LS IMPRDT,1		; Todclk when ready line first went off
  2357	LS IMPFLG,1		; Service needed by async process
  2358	LS NCPFRK,1		; Forkx of ncp fork
  2359	LS TTNOF,1		; Scan of net tty lines requested if non-0
  2360	LS IMPNOS,1		; Output scan request flag
  2361	LS IDVLCK,1		; Local lock
  2362	LS IDVLLK,1		; Last idvlck locker
  2363	LS IMPDRQ,1		; Reset cycle requested in non-0
  2364	LS NETTCH,1		; State of net has changed if non-0
  2365	LS IMPFRI,1		; List of free input buffers
  2366	LS IMPNFI,1		; Count of free input buffers
  2367	LS SIQIBI,NSQ		; Special queue
  2368	LS SIQIBO,NSQ
  2369	LS SIQTIM,NSQ		; Time of first message on special queue
  2370	LS SIQSPC,NSQ		; Space occupied by special input q
  2371	LS SQJOB,NSQ		; Job to which special q is assigned
  2372	LS SQVAL,NSQ		; Value to compare against for mux special q
  2373	LS SQMSK,NSQ		; Mask to use in compare
  2374	LS SQLCK,1		; Interlock for assigning special q
  2375	LS IMPIBI,1		; In buffers in ptr
  2376	LS IMPIBO,1		; In buffers out ptr
  2377	LS IMPOBI,1		; Output buffers in pointer
  2378	LS IMPOBO,1		; Output buffers out pointer
  2379	LS IMPHBI,1		; Hi priority output buffers in pointer
  2380	LS IMPHBO,1		; Hi priority output buffers out pointer
  2381	LS IMIB,1		; Current in bfr, pi level
  2382	LS IMPOB,1		; Buffer now being emptied by pi routine
  2383	LS IMPINP,1		; Blki pointer on input
  2384	LS IMPOUP,1		; Blko pointer
  2385	LS IMIDSP,1		; Input pi dispatch
  2386	LS IMODSP,1		; Output pi dispatch
  2387	LS IMINFB,1		; Buffers made free by pi routines
IMPDV.VDH;1                        22-MAY-75 10:30     Page 8

  2388	
  2389	; Storage continued
  2390	
  2391	LS IMPNCL,1		; Number of control input conns
  2392	LS IMPNOL,1		; Number of control output conns
  2393	LS LNKNDL,1		; Number of deletes in link table
  2394	IFNDEF VDH,<		;WE DONT NEED THESE FOR VDH--LIEB
  2395	LS IMIS32,1		; Input repacking state word
  2396	LS IMOS32,1		; Output repacking state word
  2397	>
  2398	LS IMPSVX,1		; Pi service return
  2399	LS IMPTIM,1		; Time of next clock run down
  2400	LS IBPTIM,1		; Time of next impibp run
  2401	LS NETTIM,1		; Time of next check of fsm for hangs
  2402	LS RFNTIM,1		; Time of next check for lost rfnm's
  2403	LS NEGTIM,1		; Negotiation time-out clock
  2404	LS IMPCHU,1		; 0 if current control mess host not up
  2405	LS IMPCHO,1		; Host number of control msg, must precede i8cal
  2406	LS I8CAL,5		; Args of control operation, must follow impcho
  2407	LS IMPFLS,1		; Count (neg) of messages to flush
  2408	LS NOPCNT,1		; Count of nops left to send
  2409	LS IMPGDM,1		; Last imp going down msg
  2410	LS HSTGDM,1		; Current host going down message
  2411	LS IMPCCH,1		; Index to host number for periodic check
  2412	
  2413	LS IMP8XI,1		; Irreg mes buffer in ptr
  2414	LS IMP8XO,1		; .. .. out
  2415	LS IMP8XC,1		; .. .. count
  2416	LS IMP8XB,IMP8XS	; Irreg mes buffer
  2417	
  2418	LS IMPHRT,IMPLBT	; Host ready bits
  2419	LS HSTSTS,200		; Dead host status table (18 bits per host)
  2420	LS IMPHCT,IMPLBT	; Recent message sent
  2421	IFDEF POLLF,<LS IMPHL1,IMPLBT>	; Hosts which have gone down
  2422	IFDEF POLLF,<LS IMPHL2,IMPLBT>	; State of hrt at last log tty report
  2423	
  2424	LS IMPBGC,1		; Impbug count
  2425	LS IMPBGH,1		; Host involved in last impbug
  2426	LS BADHMS,1		; Message associated with header below
  2427	LS BADHDR,2		; Header of last funny message received
  2428	LS BUGIMP,1		; Impbug w/o host
  2429	
  2430	LS IMPBHT,IMPLBT	; 'bad' host table
  2431	LS NWPBT,IMPLBT	; BIT TABLE OF HOSTS USING RAR/RAS ETC.
  2432	LS IMPIAC,5		; Pi level ac storage
  2433	LS IMSTK,NIMSTK		; Pi level stack
  2434	LS IMINP,1
  2435	
  2436	LS TTNETX,NNVTLN	; Stuff for nvt's
  2437	TTNETW=<Z TTNETX-NVTLO>	; Relative to 0
  2438	LS NVTOPX,NNVTLN	; Lh -- bit for each option in progress
  2439				; Rh -- bit for result of each option
  2440	NVTOPF=<Z NVTOPX-NVTLO>	; Relative to 0
IMPDV.VDH;1                        22-MAY-75 10:30     Page 9

  2441	
  2442	; Time accumulators
  2443	
  2444	LS IMCCLK,1		; Run time of last check
  2445	LS IMCLST,1		; Pointer to current clock
  2446	LS IMCIDL,1		; Time spent idling
  2447	LS IMCNRB,1		; Time spent releasing spent buffers
  2448	LS IMCGC,1		; Time spent garbage collecting link tables
  2449	LS IMCGIB,1		; Time spent assigning input buffers
  2450	LS IMCCNP,1		; Time spent processing control messages
  2451	LS IMCP1,1		; Time spent dispatching input messages
  2452	LS IMC8XM,1		; Time spent processing irregular messages
  2453	LS IMCTS,1		; Time spent scanning for nvt output
  2454	LS IMCNVI,1		; Time spent unpacking nvt input
  2455	LS IMCOS,1		; Time spent scanning for output to do
  2456	LS IMCNCK,1		; Time spent probing network
  2457	LS IMCRFN,1		; Time spent checking overdue rfnm's
  2458	LS IMCNCC,1		; Time spent in ncp checks
  2459	LS IMNIDL,1		; Count of idling
  2460	LS IMNNRB,1		; Count of releasing spent buffers
  2461	LS IMNGC,1		; Count of garbage collecting link tables
  2462	LS IMNGIB,1		; Count of assigning input buffers
  2463	LS IMNCNP,1		; Count of processing control messages
  2464	LS IMNP1,1		; Count of dispatching input messages
  2465	LS IMN8XM,1		; Count of processing irregular messages
  2466	LS IMNTS,1		; Count of scanning for nvt output
  2467	LS IMNNVI,1		; Count of unpacking nvt input
  2468	LS IMNOS,1		; Count of scanning for output to do
  2469	LS IMNNCK,1		; Count of probing network
  2470	LS IMNRFN,1		; Count of checking overdue rfnm's
  2471	LS IMNNCC,1		; Count of ncp checks
  2472	
  2473	; Link tables
  2474	
  2475	LS IMPLT1,IMPNLK	; Lh -- UNIT (INDEX TO NCP TABLES)
  2476				;  OR -1 IF CONTROL LINK
  2477				; B18-19/00 -- receive
  2478				;        10 -- SEND
  2479				;        11 -- FREE
  2480				;        01 -- DELETED
  2481				; B20-27 -- host
  2482				; B28-35 -- link
  2483	LS IMPLT2,IMPNLK	; B0-b5 -- flags
  2484				; B5-9 -- unused
  2485				; B10-17 -- byte size
  2486				; Rh -- in bfr ptr
  2487	LS IMPLT3,IMPNLK	; Lh -- out bfr ptr
  2488				; Rh -- save message for retransmission
  2489	LS IMPLT4,IMPNLK	; Lh -- CURRENT BUFFER
  2490				; Rh -- MSG ALLOCATION
IMPDV.VDH;1                        22-MAY-75 10:30     Page 10

  2491	
  2492	; Pi dispatch
  2493	IFNDEF VDH,<		;USE THIS PI SERVICE IF LCL HOST ELSE IN VDH.MAC--LIEB
  2494	
  2495	IMPSV:	XWD IMPSVX,.+1
  2496		CONSO IMP,7		; Input turned off?
  2497		JRST IMPSV1		; Yes
  2498		CONSZ IMP,IMPINB
  2499		JRST @IMIDSP		; Word in
  2500		CONSZ IMP,IMPEIB
  2501		 JRST [	CONSO IMP,IMPINB; It can happen that last input came in
  2502			 JRST IMPEIN	; Within the last few instructions
  2503			JRST @IMIDSP]	; If so, handle it first
  2504	IMPSV1:	CONSZ IMP,7B31		; Do nothing if no channel assigned
  2505		CONSO IMP,IMPOUB
  2506		JRST @IMPSVX		; N.o.t.a
  2507		SKIPE IMPOB
  2508		JRST @IMODSP		; Word out
  2509		CONO IMP,IMPSTO
  2510		JRST @IMPSVX
  2511	
  2512	IMPCHK:	MOVEI 2,^D1000
  2513		MOVEM 2,IMPTM2		; Call this every second
  2514		SKIPN IMPRDY		; Net on?
  2515		 RET			; NO.
  2516		CONSZ IMP,1B19		; Power not on
  2517		CONSZ IMP,1B21!1B20	; Or error flop on, or host not ready?
  2518		SKIPL IMPRDT		; And not already noticed?
  2519		 RET
  2520		CALL IMIERR		; Be sure it's noticed
  2521		AOS IMPFLG		; No, cause running of ncp fork
  2522		RET
  2523	>	;END OF VDH IFNDEF
IMPDV.VDH;1                        22-MAY-75 10:30     Page 11

  2524	
  2525	; Called by periodic check routine
  2526	
  2527		SWAPCD
  2528	
  2529	CHKNET:	IFDEF POLLF,<		; Do this printout only if pollf is dfnd
  2530		MOVSI 5,-IMPLBT		; Setup to scan host bit tables
  2531	CHKN2:	MOVE 3,IMPHL1(5)	; Bit set if host has gone down since lst
  2532		JFFO 3,[MOVE 3,BITS(4)	; Found one
  2533			ANDCAM 3,IMPHL1(5) ; Reset bits
  2534			ANDCAM 3,IMPHL2(5)
  2535			HRROI 1,[ASCIZ /HOST /]
  2536			PSOUT		; Report downage
  2537			MOVEI 1,101
  2538			MOVEI 2,0(5)	; Compute host number
  2539			IMULI 2,^D36
  2540			ADDI 2,0(4)
  2541			MOVEI 3,^D8	; Octal for nout
  2542			CVHST		; Type host name if any,
  2543			NOUT		; But if that fails, type number
  2544			JFCL
  2545			HRROI 1,[ASCIZ / DOWN
  2546	/]
  2547			PSOUT
  2548			JRST CHKN2]
  2549		MOVE 3,IMPHL2(5)	; State of hosts as reported
  2550		XOR 3,IMPHRT(5)		; Compare with state from ncp
  2551		JFFO 3,[MOVE 3,BITS(4)	; Found a difference
  2552			XORM 3,IMPHL2(5) ; Update logged table
  2553			HRROI 1,[ASCIZ /HOST /]
  2554			PSOUT		; Report change on log tty
  2555			MOVEI 1,101
  2556			MOVEI 2,0(5)	; Compute host number
  2557			IMULI 2,^D36
  2558			ADDI 2,0(4)
  2559			MOVEI 3,^D8	; Octal for nout
  2560			CVHST		; Type host name
  2561			NOUT		; Or host number
  2562			JFCL
  2563			MOVE 3,BITS(4)
  2564			HRROI 1,[ASCIZ / UP
  2565	/]
  2566			TDNN 3,IMPHL2(5)
  2567			HRROI 1,[ASCIZ / DOWN
  2568	/]
  2569			PSOUT
  2570			JRST CHKN2]
  2571		AOBJN 5,CHKN2		; Scan tables
  2572	>				; End of ifdef pollf at chknet
  2573		SKIPE BUGIMP
  2574		 CALL CHKN1		; Yes
  2575		SKIPE NETTCH		; Change of state?
  2576		 CALL CHKN5		; Yes
IMPDV.VDH;1                        22-MAY-75 10:30     Page 11.1

  2577		SKIPE IMPGDM		; Any "imp going down" messages?
  2578		  CALL CHKN7		; Yes, go print it
  2579		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 12

  2580	
  2581	; Log network change of state
  2582	
  2583	CHKN5:	HRROI 1,[ASCIZ /
  2584	***** NETWORK /]
  2585		PSOUT
  2586		HRROI 1,[ASCIZ /ON/]
  2587		SKIPN NETON
  2588		HRROI 1,[ASCIZ /OFF/]
  2589		PSOUT
  2590		HRROI 1,[ASCIZ /, IMP /]
  2591		PSOUT
  2592		HRROI 1,[ASCIZ /ON/]
  2593		SKIPN IMPRDY
  2594		HRROI 1,[ASCIZ /OFF/]
  2595		PSOUT
  2596		MOVEI 1," "
  2597		PBOUT
  2598	;CHANGE STATUS OUTPUT FOR VDH---LIEB
  2599	IFNDEF VDH,<	CONI IMP,2>
  2600	IFDEF VDH,<	MOVE 2,RTSTAT>	;STATUS WORD OF VDH
  2601		SETZM NETTCH
  2602		CALL CHKH1		; Go print coni word and tod
  2603		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 13

  2604	
  2605	; Log impbug/imhbug
  2606	
  2607	CHKN1:	HRROI 1,[ASCIZ /
  2608	***IMPBUG /]
  2609		PSOUT
  2610		MOVEI 1,101
  2611		MOVEI 3,^D10
  2612		MOVE 2,IMPBGC
  2613		NOUT
  2614		JFCL
  2615		HRRZ 2,IMPBGH		; Host number if any
  2616		JUMPE 2,CHKN4		; None
  2617		HRROI 1,[ASCIZ / HOST /]
  2618		PSOUT
  2619		MOVEI 1,101
  2620		MOVEI 3,^D8
  2621		CVHST			; Type host name or number
  2622		 NOUT
  2623		  JFCL
  2624	CHKN4:	HLRZ 2,IMPBGH		; Status if any
  2625		JUMPE 2,CHKN3		; None
  2626		HRROI 1,[ASCIZ \ STS/LINK \]
  2627		PSOUT
  2628		MOVEI 1,101
  2629		MOVEI 3,10
  2630		NOUT			; Print status in octal
  2631		JFCL
  2632	CHKN3:	SKIPN 4,BADHMS		; Any header to print
  2633		 JRST CHKN8		; No
  2634		HRROI 1,[ASCIZ / HEADER: /]
  2635		PSOUT
  2636		MOVE 5,[POINT 4,BADHDR]
  2637		MOVEI 1,101
  2638		MOVEI 3,10
  2639	CHKN8L:	ILDB 2,5
  2640		ROT 2,4
  2641		ILDB 6,5
  2642		IOR 2,6
  2643		NOUT
  2644		 JFCL
  2645	CHKN8:	MOVEI 2," "
  2646		BOUT
  2647		SOJG 4,CHKN8L
  2648		HRROI 1,[ASCIZ /AT /]
  2649		PSOUT
  2650		SOS 2,BUGIMP		; Back pc up to point at jsr
  2651		SETZM BADHMS
  2652		SETZM BUGIMP
  2653		SETZM IMPBGH
  2654		CALL CHKBG1		; Print address and message
  2655		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 14

  2656	
  2657	; Broadcast imp going down message
  2658	
  2659	CHKN7:	HRROI 1,1(P)		; Buffer on pdl
  2660		ADD P,[20,,20]
  2661		HRROI 2,[ASCIZ /IMP GOING DOWN FOR /]
  2662		SETZ 3,
  2663		SOUT
  2664		LDB 2,[POINT 10,IMPGDM,31]
  2665		IMULI 2,5
  2666		MOVEI 3,^D10
  2667		NOUT
  2668		 JFCL
  2669		HRROI 2,[ASCIZ / MIN IN /]
  2670		SETZ 3,
  2671		SOUT
  2672		LDB 2,[POINT 4,IMPGDM,21]
  2673		MOVEI 3,^D10
  2674		IMULI 2,5
  2675		NOUT
  2676		 JFCL
  2677		HRROI 2,[ASCIZ / MIN DUE TO /]
  2678		SETZ 3,
  2679		SOUT
  2680		LDB 2,[POINT 2,IMPGDM,17]
  2681		HRRO 2,[[ASCIZ /PANIC
  2682	/]
  2683			[ASCIZ /SCHED HDWRE PM
  2684	/]
  2685			[ASCIZ /SOFTWRE RELOAD
  2686	/]
  2687			[ASCIZ /EMRGNCY RESTRT
  2688	/]](2)
  2689		SOUT
  2690		HRROI 2,-17(P)
  2691		SETO 1,
  2692		TTMSG
  2693		SUB P,[20,,20]
  2694		SETZM IMPGDM
  2695		RET
  2696	
  2697		RESCD
IMPDV.VDH;1                        22-MAY-75 10:30     Page 15

  2698	
  2699	; Routines to make footprints for debugging
  2700	
  2701	; Take imp footprints jsys
  2702	; Call:	1	; Jfn of output file
  2703	;	2	; Word count (stops at first opportunity past this)
  2704	;	3	; Re-init flag (non-zero to reset pointers)
  2705	
  2706	.DBGIM::JSYS MENTR
  2707		HRRZS 1			; Don't allow byte pointers
  2708		MOVEI 4,WHEEL!NETWIZ
  2709		TDNN 4,CAPENB
  2710		 JRST MRETN
  2711		JUMPE 3,DBGIM0		; Skip init stuff
  2712		NOSKED
  2713		SETZM DBGNWD
  2714		SETZM DBGSP
  2715		SETZM DBGFAC
  2716		OKSKED
  2717		SETZM DBGRP
  2718		AOS DBGRP		; Point at first word
  2719	DBGIM0:	PUSH P,2		; Save count on stack
  2720		PUSH P,1
  2721	DBGDBL:	SKIPG 3,DBGNWD
  2722		 JRST DBGDBW
  2723		MOVEI 4,DBGNBF
  2724		SUB 4,DBGRP		; Space to end of buffer
  2725		CAMGE 3,4
  2726		 MOVEM 3,4		; Keep min
  2727		MOVN 3,4
  2728		MOVE 2,DBGRP
  2729		ADD 2,[POINT 36,DBGBUF]
  2730		SOUT
  2731		MOVN 3,4
  2732		ADDM 3,DBGNWD
  2733		ADDB 4,DBGRP
  2734		CAIL 4,DBGNBF
  2735		 SETZB 4,DBGRP
  2736		ADDB 3,-1(P)		; Count words written
  2737		JUMPG 3,DBGDBL		; Continue if still .gr. 0
  2738		UMOVEM 3,3		; Else return updated count
  2739		SUB P,BHC+2
  2740		JRST SKMRTN
  2741	
  2742	DBGDBW:	MOVEI 1,DBGNWD
  2743		PUSHJ P,DISG
  2744		MOVE 1,0(P)
  2745		JRST DBGDBL
IMPDV.VDH;1                        22-MAY-75 10:30     Page 16

  2746	
  2747	; Variables
  2748	
  2749	DBGNBF==2000
  2750	
  2751	LS(DBGFAC,1)		; Failure counter
  2752	LS(DBGSP,1)		; Store pointer
  2753	LS(DBGRP,1)		; Read pointer
  2754	LS(DBGNWD,1)		; Number of words in buffer
  2755	NGS(DBGBUF,DBGNBF)	; Buffer
  2756	
  2757	
  2758	; Stash input irregular msg
  2759	
  2760	DBGIIM:	PUSH P,2
  2761		MOVEI 2,1
  2762	DBGSIM:	PUSHJ P,DBGCKS		; Check for space
  2763		 JRST DBGXIT
  2764		PUSHJ P,DBGS2B
  2765		MOVE 2,1
  2766		PUSHJ P,DBGS1B
  2767	DBGXIT:	OKSKED
  2768		POP P,2
  2769		POPJ P,
  2770	
  2771	DBGIM:	PUSH P,2
  2772		MOVE 2,1(1)
  2773		TDNE 2,[377B23]
  2774		 SKIPA 2,[3]
  2775		  HRRZ 2,0(1)
  2776	DBGSM:	SOS 2
  2777		PUSHJ P,DBGCKS
  2778		 JRST DBGXIT
  2779		PUSH P,1
  2780		PUSHJ P,DBGS2B
  2781		MOVNI 1,0(2)
  2782		HRLZS 1
  2783		HRR 1,0(P)
  2784	DBGSLP:	MOVE 2,1(1)
  2785		PUSHJ P,DBGS1B
  2786		AOBJN 1,DBGSLP
  2787		POP P,1
  2788		JRST DBGXIT
  2789	
  2790	
  2791	DBGOM:	PUSH P,2
  2792		MOVE 2,1(1)
  2793		TLNE 2,(17B7)
  2794		 JRST [	HRROI 2,2
  2795			JRST DBGSM]
  2796		TDNE 2,[377B23]
  2797		 SKIPA 2,[-1,,3]
  2798		  HRRO 2,0(1)
IMPDV.VDH;1                        22-MAY-75 10:30     Page 16.1

  2799		JRST DBGSM
IMPDV.VDH;1                        22-MAY-75 10:30     Page 17

  2800	
  2801	; Record impbug
  2802	
  2803	DBGBG1:	PUSH P,2
  2804		MOVEI 2,1
  2805		CALL DBGCKS
  2806		 JRST DBGXIT
  2807		MOVE 2,1
  2808		HRLI 2,3
  2809		CALL DBGS2B
  2810		MOVE 2,0(P)
  2811		CALL DBGS1B
  2812		JRST DBGXIT
  2813	
  2814	; Store header word and time stamp
  2815	
  2816	DBGS2B:	PUSHJ P,DBGS1B
  2817		PUSH P,2
  2818		EXCH 1,2
  2819		GTAD
  2820		EXCH 1,2
  2821		PUSHJ P,DBGS1B
  2822		POP P,2
  2823		POPJ P,
  2824	
  2825	; Store 1 word in debug buffer
  2826	
  2827	DBGS1B:	PUSH P,1
  2828		AOS 1,DBGSP
  2829		CAIL 1,DBGNBF
  2830		 SETZB 1,DBGSP
  2831		MOVEM 2,DBGBUF(1)
  2832		AOS DBGNWD
  2833		POP P,1
  2834		POPJ P,
  2835	
  2836	; Check for sufficient space to make new entry
  2837	
  2838	DBGCKS:	SKIPE DBGFAC		; Any intervening failures?
  2839		 AOJA 2,DBGCK2		; Yes
  2840	DBGCK1:	PUSH P,1
  2841		NOSKED
  2842		MOVE 1,DBGNWD
  2843		ADDI 1,2(2)
  2844		CAIG 1,DBGNBF
  2845		 AOSA -1(P)
  2846		  AOS DBGFAC
  2847		POP P,1
  2848	DBGCK3:	POPJ P,
  2849	
  2850	DBGCK2:	PUSHJ P,DBGCK1
  2851		 SOJA 2,DBGCK3
  2852		EXCH 2,DBGFAC
IMPDV.VDH;1                        22-MAY-75 10:30     Page 17.1

  2853		HRLI 2,1
  2854		PUSHJ P,DBGS1B
  2855		SOS 2,DBGFAC
  2856		SETZM DBGFAC
  2857		POPJ P,
IMPDV.VDH;1                        22-MAY-75 10:30     Page 18

  2858	
  2859	; Imp asynchronous process
  2860	; Started once, call from rundd
  2861	
  2862	IMPBEG:	MOVSI 1,(1B1)		; Create fork of job 0
  2863		CFORK
  2864		BUG(HLT,<CAN'T CREATE IMP FORK>)
  2865		MOVEI 2,IMPBP0
  2866		MSFRK			; Start fork in monitor
  2867		RET
  2868	
  2869	; Init
  2870	
  2871	IMPBP0:	MOVSI 1,UMODF		; Establish usual jsys context
  2872		MOVEM 1,FPC
  2873		JSYS MENTR
  2874		MOVE 1,FORKX
  2875		MOVEM 1,NCPFRK
  2876		MOVE 1,[XWD ITFPC,IMPUXI]
  2877		MOVEM 1,MONBK		; Trap any interrupts
  2878		MOVE 1,CHNSON
  2879		MOVEM 1,MONCHN
  2880		MOVEI 1,202
  2881		MOVEM 1,JOBBIT
  2882		CALL IMPINI
  2883		MOVEI 1,2
  2884		MOVEM 1,IMCLST		; Make last clock be dummy (ac 2)
  2885	IMPBP1:	IMSCLK(IMCIDL)		; Start charging time to imcidl
  2886		PUSH P,[IMPBP1]		; Return for following dispatches
  2887		SETZM IMPFLG		; Clear request flag
  2888		CALL IMPSTT		; Check state of net and imp
  2889		JRST IMPBP3		; Down
  2890		SKIPE IMINFB		; Garbage buffers to release?
  2891		JRST IMINRB		; Yes
  2892		MOVE 1,LNKNDL		; Deletes in link table
  2893		CAIL 1,IMPNLK/2		; Time for gc?
  2894		JRST IMPGC		; Yes
  2895		MOVE 1,IMPNFI
  2896		CAIGE 1,^D8		; Need more input buffers?
  2897		CALL IMPGIB		; Yes
  2898		SKIPE IMPNCL		; Control msgs for processing?
  2899		JRST IMPCN0		; Yes
  2900		SKIPE IMPIBO		; Input buffers ready?
  2901		JRST IMIP1		; Yes
  2902		SKIPE IMP8XC		; Irreg msgs for processing?
  2903		JRST IMP8XM		; Yes
  2904		SKIPE TTNOF		; Scan of net ttys requested?
  2905		JRST IMPTS		; Yes
  2906		SKIPE IMPNOS		; Need output scan?
  2907		CALL IMPOS		; Yes
  2908		IMSCLK(IMCIDL)		; Back to imcidl for charging
IMPDV.VDH;1                        22-MAY-75 10:30     Page 19

  2909	
  2910	IMPBP2:	MOVE 1,TODCLK
  2911		CAML 1,IMPTIM		; Time for local checks?
  2912		JRST NETCH0		; Yes
  2913		CAML 1,RFNTIM		; Time for overdue rfnm check?
  2914		JRST RFNCHK		; Yes
  2915		CAML 1,NETTIM		; Time for netwrk checks?
  2916		 JRST [	IMSCLK(IMCNCC)
  2917			JRST NETCHK]	; Yes
  2918		CAML 1,NEGTIM
  2919		 JRST NEGCHK		; Check incomplete negotiations
  2920		PUSHJ P,SIQCHK
  2921		CAMLE 1,IMPTIM
  2922		MOVE 1,IMPTIM		; Compute min clocks as
  2923		CAMLE 1,NETTIM		; Next time to wakeup
  2924		MOVE 1,NETTIM
  2925		CAMLE 1,RFNTIM
  2926		MOVE 1,RFNTIM
  2927		CAMLE 1,NEGTIM
  2928		 MOVE 1,NEGTIM
  2929		MOVEM 1,IBPTIM
  2930		MOVEI 1,IMPBPT
  2931		JSYS EDISMS		; Dismiss until something to do
  2932		RET
  2933	
  2934	IMPBPT:	SKIPE IMPFLG		; Flag set?
  2935		JRST 1(4)		; Yes, wakeup
  2936		MOVE 1,TODCLK		; Check alarm clock
  2937		CAML 1,IBPTIM
  2938		JRST 1(4)
  2939		SKIPGE IDVLCK		; Lock clear and out scan needed?
  2940		SKIPG IMPNOS
  2941		JRST 0(4)
  2942		JRST 1(4)		; Yes, wakeup
  2943	
  2944	IMPBP3:	MOVE 1,TODCLK
  2945		CAML 1,NETTIM
  2946		 CALL NETCHK		; Continue calling netchk if net down
  2947		MOVEI 1,^D10000
  2948		DISMS			; Wait 10 sec
  2949		RET			; Then try again
  2950	
  2951	; Unexpected interrupt
  2952	
  2953	IMPUXI:	BUG(CHK,<IMP JB0 FORK - UNEXPECTED INTERRUPT>)
  2954		MOVSI 1,UMODF		; Reset stack
  2955		MOVEM 1,FPC
  2956		JSYS MENTR
  2957		JRST IMPBP1
IMPDV.VDH;1                        22-MAY-75 10:30     Page 20

  2958	
  2959	; Special raw message routines
  2960	
  2961	; Assign a special message queue
  2962	
  2963	.ASNSQ:	JSYS MENTR
  2964		PUSHJ P,CKNTWZ
  2965		 JRST ERMRTN
  2966		NOINT
  2967		AOSE SQLCK
  2968		 PUSHJ P,SQLWAT
  2969		MOVSI 3,-NSQ
  2970		SETZ 4,
  2971	ASNSQL:	SKIPGE SQJOB(3)		; Assigned?
  2972		 JRST [	JUMPL 4,ASNSQN
  2973			MOVE 4,3
  2974			JRST ASNSQN]
  2975		UMOVE 1,1		; Get mask
  2976		AND 1,SQMSK(3)		; Joint mask
  2977		UMOVE 2,2
  2978		XOR 2,SQVAL(3)		; Difference
  2979		TDNN 1,2		; Must be different in joint mask bits
  2980		 JRST ASNSQF		; Else fail
  2981	ASNSQN:	AOBJN 3,ASNSQL		; Test all possibilities
  2982		MOVEI 1,ASNSX1
  2983		JUMPGE 4,ASNSF1
  2984		UMOVE 1,1		; Mask
  2985		MOVEM 1,SQMSK(4)	; Store mask in table
  2986		XCTUU [	AND 1,2]	; Mask good bits of value
  2987		MOVEM 1,SQVAL(4)
  2988		MOVE 1,JOBNO
  2989		MOVEM 1,SQJOB(4)
  2990		SETOM SQLCK
  2991		XCTUU [HRRZM 4,1]
  2992		JRST SKMRTN
  2993	
  2994	ASNSQF:	MOVEI 1,ASNSX2
  2995	ASNSF1:	UMOVEM 1,1
  2996		SETOM SQLCK
  2997		JRST MRETN
IMPDV.VDH;1                        22-MAY-75 10:30     Page 21

  2998	
  2999	; Release special q
  3000	
  3001	.RELSQ:	JSYS MENTR
  3002		NOINT
  3003		AOSE SQLCK
  3004		 PUSHJ P,SQLWAT
  3005		CAMN 1,[-1]
  3006		 JRST RELASQ
  3007		CAIL 1,0
  3008		CAIL 1,NSQ
  3009		 JRST RELSQ1
  3010		PUSHJ P,REL1SQ
  3011	RELSQ1:	SETOM SQLCK
  3012		JRST MRETN
  3013	
  3014	RELASQ:	MOVSI 4,-NSQ
  3015	RELAS1:	HRRZ 1,4
  3016		PUSHJ P,REL1SQ
  3017		AOBJN 4,RELAS1
  3018		JRST RELSQ1
  3019	
  3020	REL1SQ:	MOVE 2,JOBNO
  3021		CAME 2,SQJOB(1)
  3022		 POPJ P,
  3023		SETOM SQJOB(1)
  3024	REL1S1:	PUSHJ P,SIQGET
  3025		 POPJ P,
  3026		PUSH P,1
  3027		PUSHJ P,RLNTBF
  3028		POP P,1
  3029		JRST REL1S1
IMPDV.VDH;1                        22-MAY-75 10:30     Page 22

  3030	
  3031	; .rcvim receive raw messages
  3032	
  3033	.RCVIM:	JSYS MENTR
  3034	RCVIM1:	NOINT
  3035		UMOVE 1,1
  3036		CALL CHKSQ		; Check for accessibility to special q
  3037		 JRST ERMRTN		; No access
  3038		PUSHJ P,SIQGET		; Get the message
  3039		 JRST [	OKINT		; None there
  3040			JSYS EDISMS	; Wait
  3041			JRST RCVIM1]	; Try again
  3042		UMOVE 1,2		; Get user's buffer
  3043		HRL 1,2			; Message location
  3044		MOVE 3,1		; Copy of user's buffer location
  3045		ADD 3,0(2)		; Plus size -- end
  3046		XCTMU [BLT 1,-1(3)]	; Transfer to user
  3047		PUSHJ P,RLNTBF		; Release the buffer
  3048		JRST SKMRTN		; Return
  3049	
  3050	ERMRTN:	UMOVEM 1,1
  3051		JRST MRETN
  3052	
  3053	SIQGET:	MOVE 2,TODCLK
  3054		ADDI 2,SIQTM0
  3055		MOVEM 2,SIQTIM(1)	; Reset time
  3056		NOSKED
  3057		HLRZ 2,SIQIBO(1)
  3058		JUMPE 2,SIQEMT
  3059		HLLZ 3,0(2)
  3060		MOVEM 3,SIQIBO(1)
  3061		JUMPN 3,.+3
  3062		MOVEI 3,SIQIBO(1)
  3063		MOVEM 3,SIQIBI(1)
  3064		HRRZS 3,0(2)		; Get size
  3065		MOVNS 3
  3066		ADDM 3,SIQSPC(1)	; Credit space used
  3067		OKSKED
  3068		AOS 0(P)
  3069		RET
  3070	
  3071	SIQEMT:	OKSKED
  3072		HRLZI 1,SIQIBO(1)
  3073		HRRI 1,DISNT
  3074		POPJ P,
IMPDV.VDH;1                        22-MAY-75 10:30     Page 23

  3075	
  3076	; .sndim: send special message
  3077	
  3078	.SNDIM:	JSYS MENTR
  3079		CALL CHKSQ		; Check access to special q
  3080		 JRST ERMRTN
  3081		UMOVE 1,2
  3082		UMOVE 2,0(1)		; Get size
  3083		CAIL 2,2
  3084		CAML 2,MAXWPM
  3085		 JRST [	MOVEI 1,SNDIX1
  3086			JRST ERMRTN]	; Bad size
  3087		NOINT
  3088		PUSHJ P,ASNTBF		; Get a buffer
  3089		 JRST [	MOVEI 1,SNDIX2
  3090			JRST ERMRTN]	; No room
  3091		PUSH P,1		; Save it
  3092		XCTUU [HRL 1,2]		; Make blt pointer
  3093		MOVE 2,0(1)		; Size
  3094		ADD 2,1			; End of buffer
  3095		ADD 1,BHC+1		; Don't transfer first word
  3096		XCTUM [BLT 1,-1(2)]	; Transfer message to monitor space
  3097		POP P,2			; The buffer
  3098		MOVE 1,1(2)		; Get header word
  3099		AND 1,[FRMIMP+377B23]
  3100		CAMG 1,[LLINK*1B23]
  3101		 JRST [	PUSHJ P,RLNTBF	; Don't allow messages with ncp links
  3102			MOVEI 1,SNDIX3
  3103			JRST ERMRTN]
  3104		UMOVE 1,1		; Get sq index
  3105		MOVE 3,1(2)		; And header
  3106		XOR 3,SQVAL(1)		; Difference with value
  3107		TDNE 3,SQMSK(1)		; Must be equal in masked bits
  3108		 JRST [	PUSHJ P,RLNTBF
  3109			MOVEI 1,SNDIX4
  3110			JRST ERMRTN]
  3111		NOSKED
  3112		SKIPL IMPRDY		; Last minute check if imp is up
  3113		 JRST [	OKSKED
  3114			PUSHJ P,RLNTBF
  3115			MOVEI 1,SNDIX5
  3116			JRST ERMRTN]
  3117		PUSHJ P,IMPQOA		; Put onto output q
  3118		OKSKED
  3119		JRST SKMRTN
IMPDV.VDH;1                        22-MAY-75 10:30     Page 24

  3120	
  3121	; Check for access to specific special q
  3122	
  3123	CHKSQ:	CAIL 1,0
  3124		CAIL 1,NSQ
  3125		 JRST [	MOVEI 1,SQX1
  3126			POPJ P,]
  3127		MOVE 2,JOBNO
  3128		CAMN 2,SQJOB(1)
  3129		JRST RSKP
  3130		MOVEI 1,SQX2
  3131		POPJ P,
  3132	
  3133	; Check for net wizardry
  3134	
  3135	CKNTWZ:	MOVEI 2,NETWIZ
  3136		TDNE 2,CAPENB
  3137		 JRST RSKP
  3138		MOVEI 1,NTWZX1
  3139		POPJ P,
  3140	
  3141	SQLWAT:	PUSH P,1
  3142		MOVEI 1,SQLTST
  3143		JSYS EDISMS
  3144		POP P,1
  3145		POPJ P,
  3146	
  3147	SQLTST:	AOSE SQLCK
  3148		JRST 0(4)
  3149		JRST 1(4)
  3150	
  3151	; Siqchk: check for unclaimed messages
  3152	
  3153	SIQCHK:	HRLOI 3,377777
  3154		MOVSI 2,-NSQ
  3155	SIQCKL:	SKIPGE SQJOB(2)
  3156		 JRST SIQCKE
  3157		CAMG 1,SIQTIM(2)
  3158		 JRST SIQCKX
  3159		PUSH P,1
  3160		PUSH P,2
  3161		PUSH P,3
  3162		HRRZ 1,2
  3163		PUSHJ P,SIQGET
  3164		SKIPA
  3165		PUSHJ P,RLNTBF
  3166		POP P,3
  3167		POP P,2
  3168		POP P,1
  3169	SIQCKX:	CAML 3,SIQTIM(2)
  3170		 MOVE 3,SIQTIM(2)
  3171	SIQCKE:	AOBJN 2,SIQCKL
  3172		MOVE 1,3
IMPDV.VDH;1                        22-MAY-75 10:30     Page 24.1

  3173		POPJ P,
IMPDV.VDH;1                        22-MAY-75 10:30     Page 25

  3174	
  3175	USE RESPC
  3176	
  3177	; Update imp clocks
  3178	
  3179	IMUCLK:	PUSH P,1
  3180		SUBI 1,IMCIDL
  3181		AOS IMNIDL(1)		; Count entries
  3182		MOVE 1,JOBRTT		; Time since last update of fkrt
  3183		ADD 1,FKRT		; Fork cpu to now
  3184		SUB 1,IMCCLK		; Time since last measurement
  3185		ADDM 1,IMCCLK		; Update to be time of this clock measurement
  3186		ADDM 1,@IMCLST		; Charge to current clock
  3187		POP P,IMCLST		; Set to new clock
  3188		RET
  3189	
  3190	; Set idvlck
  3191	
  3192	LCKIDV:	PUSH P,1
  3193		MOVEI 1,1
  3194		CALL STMINQ		; Prohibit dropping below q1 while locked
  3195		AOSE IDVLCK		; Try for the lock
  3196		 JRST LCKID1		; Didnt get it
  3197	LCKID0:	AOS -1(P)
  3198		POP P,1
  3199		PUSH P,FORKX
  3200		POP P,IDVLLK
  3201		RET
  3202	
  3203	LCKID1:	SKIPE @-1(P)		; Wait wanted?
  3204		 JRST ULKID0		; No, return
  3205		MOVEI 1,IDVTST
  3206		JSYS EDISMS
  3207		JRST LCKID0
  3208	
  3209	; Unlock idvlck
  3210	
  3211	ULKIDV:	SETOM IDVLCK
  3212		PUSH P,1
  3213	ULKID0:	SETZ 1,
  3214		CALL STMINQ
  3215		POP P,1
  3216		RET
  3217	
  3218	IDVTST:	AOSE IDVLCK
  3219		 JRST 0(4)
  3220		JRST 1(4)
IMPDV.VDH;1                        22-MAY-75 10:30     Page 26

  3221	
  3222	; Release buffers left by pi routines
  3223	
  3224	IMINRB:	IMSCLK(IMCNRB)		; Charge time to releasing buffers
  3225		SETZ 4,
  3226		EXCH 4,IMINFB		; Get all garbage buffers
  3227	IMINR1:	JUMPE 4,R		; Quit when all released
  3228		MOVEI 2,0(4)
  3229		HLRZ 4,0(4)
  3230		CALL RLNTBF		; Release one
  3231		JRST IMINR1
  3232	
  3233	; Get one buffer for input and lock it in core
  3234	
  3235	IMPGIB:	IMSCLK(IMCGIB)		; Charge to imcgib
  3236		MOVE 2,MAXWPM		; For max input msg
  3237		CALL ASNTBF		; Assign from pool
  3238		JRST IMPB03
  3239		MOVEI 2,0(1)
  3240		CALL IMPLKB		; Lock buffer
  3241		PIOFF
  3242		EXCH 2,IMPFRI		; Put bfr on input free list
  3243		HRLM 2,@IMPFRI
  3244		AOS 2,IMPNFI		; Count number free, if was 0, then
  3245		PION
  3246		SKIPN IMIB		; Input is off?
  3247		SKIPG IMPNFI		; YES, BUFFERS AVAILABLE?
  3248		 RET			; NO. RETURN
  3249		PUSHJ P,IMISRT		; Yes, restart
  3250		RET
  3251	
  3252	; Scan net tty lines
  3253	
  3254	IMPTS:	IMSCLK(IMCTS)		; Charge to imcts
  3255		SETZM TTNOF
  3256		MOVSI 10,-NNVTLN	; Count thru nvt lines
  3257	IMPTS1:	MOVEI 2,NVTLO(10)
  3258		SKIPN TTOCT(2)		; Output ready?
  3259		SKIPE TTECT(2)
  3260		CALL NETTCS		; Yes
  3261		AOBJN 10,IMPTS1
  3262		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 27

  3263	
  3264	; Scan all connections for output possible
  3265	; Called by asynch process
  3266	
  3267	IMPOS:	IMSCLK(IMCOS)		; Charge to imcos
  3268		MOVSI 6,-IMPNLK
  3269		SETZM IMPNOS		; Cancel request
  3270	IMPOS2:	HRRZ 2,IMPLT1(6)
  3271		TRNE 2,1B18		; Output connection has bit 18 on
  3272		TRNE 2,1B19		; And bit 19 off
  3273	IMPOS1:	AOBJN 6,IMPOS2
  3274		JUMPGE 6,[SUB P,BHC+1	; Flush .+1 return, go back to top
  3275			RET]
  3276		ILOCK(<JRST [AOS IMPNOS	; Try again later
  3277			RET]>)		; Return if can't set lock
  3278		MOVEI 1,0(6)
  3279		CALL IMPKO1		; Check and send if possible
  3280		JRST IMPOS1
IMPDV.VDH;1                        22-MAY-75 10:30     Page 28

  3281	
  3282	; Asynch process to put buffers on proper connection queues
  3283	
  3284	IMIP1:	IMSCLK(IMCP1)		; Charge to imcp1
  3285		HLRZ 2,IMPIBO		; Try to get next buffer
  3286		JUMPE 2,R		; None left
  3287		PIOFF
  3288		HLLZ 3,0(2)
  3289		JUMPN 3,.+3
  3290		MOVEI 4,IMPIBO
  3291		MOVEM 4,IMPIBI
  3292		MOVEM 3,IMPIBO
  3293		PION
  3294		PUSH P,2		; Save bfr address
  3295		MOVEI 1,0(2)
  3296	IFDEF DBGBUF,<
  3297		CALL DBGIM>
  3298		NOSKED
  3299		CALL MULKMP		; Unlock head, tail unlocked at pi lev
  3300		HRRZS 0(2)		; Clear fwd pointer
  3301		MOVE 1,1(2)		; Get header
  3302		AND 1,[FRMIMP+377B23]	; Extract link + frmimp
  3303		CAML 1,[<LLINK>B23]	; Normal link?
  3304		 JRST IMIPSQ		; No, dispatch to special q
  3305		OKSKED
  3306		LDB 1,[POINT 16,1(2),23] ; Get host-link
  3307		ILOCK
  3308		CALL LNKLUK		; See if connection exists
  3309		 JRST [	TRNE 1,377	; Doesn't, control link?
  3310			 JRST IMIBB	; Link non-existant
  3311			MOVEI 3,^D8	; Create connection, byte size is 8
  3312			CALL IMPOP1
  3313			HRROS IMPLT1(1)	; Make unit -1
  3314			MOVEI 3,377777
  3315			HRRM 3,IMPLT4(1) ; Set infinite msg alloc
  3316			AOS IMPNCL	; Count control connections
  3317			JRST .+1]
  3318		POP P,2
  3319		MOVE 3,IMPLT2(1)
  3320		HRLM 2,0(3)		; Put msg on queue for conn
  3321		HRRM 2,IMPLT2(1)
  3322		HLRE IMPUN,IMPLT1(1)
  3323		IUNLK
  3324		JUMPL IMPUN,R		; See if nvt connection
  3325		LDB 2,PNVT
  3326		CAIL 2,NVTLO
  3327		CAIL 2,NLINES
  3328		RET			; Isn't
  3329		CALL NVTUPI		; Unpack nvt input
  3330		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 29

  3331	
  3332	IMIPSQ:	MOVSI 3,-NSQ
  3333	IMIPS1:	MOVE 1,1(2)		; Get header
  3334		XOR 1,SQVAL(3)		; Compare to value
  3335		SKIPL SQJOB(3)		; In use?
  3336		TDNE 1,SQMSK(3)		; Yes, equal?
  3337		 AOBJN 3,IMIPS1		; No or no
  3338		JUMPGE 3,IMIPS2		; Found nobody, go throw away
  3339		MOVE 1,SIQSPC(3)	; How much space in use?
  3340		CAIL 1,SIQMAX		; Less than max?
  3341		 JRST IMIPS2		; No, too much, go throw away
  3342		MOVE 1,TODCLK
  3343		ADDI 1,SIQTM0
  3344		SKIPN SIQIBI(3)
  3345		MOVEM 1,SIQTIM(3)
  3346		HRRZ 1,0(2)		; Buffer size
  3347		ADDM 1,SIQSPC(3)	; Total so far
  3348		HRLM 2,@SIQIBI(3)
  3349		HRRZM 2,SIQIBI(3)
  3350		OKSKED
  3351		JRST IMIPS3
  3352	
  3353	IMIPS2:	OKSKED
  3354		PUSHJ P,RLNTBF		; Throw message away
  3355	IMIPS3:	SUB P,BHC+1 
  3356		RET
  3357	
  3358	; Cause bad msg to be printed
  3359	
  3360	IMIBB:	IUNLK
  3361		LSHC 1,-8	; Host in 1
  3362		ROT 2,8			; Link in 2
  3363		ANDI 1,377
  3364		ANDI 2,377
  3365		CALL IMPNXR		; Send nxr
  3366		JRST IMIPB1
  3367	
  3368	IMIPB:	IUNLK
  3369	IMIPB1:	HRLI 2,9
  3370		BUG(IML,<Received msg for unknown link>,X)
  3371	IMIPB2:	POP P,2
  3372		JRST RLNTBF
IMPDV.VDH;1                        22-MAY-75 10:30     Page 30

  3373	
  3374	; Send rst to all hosts on startup
  3375	
  3376	NETCH0:	IMSCLK(IMCNCK)		; Charge to imcnck
  3377		SKIPGE 7,IMPCCH		; Sending rst's?
  3378		 JRST IMPET		; No.
  3379	IMPRC1:	CALL IMPRCC		; Check for space in link table
  3380		 JRST [	MOVEI 1,^D50
  3381			JRST IMPET1]
  3382		HRRZ 1,7
  3383		CAMN 1,NLHOST		; Local host?
  3384		 JRST IMPRC2		; Never send reset to local host
  3385		HRRZ 2,7
  3386		IDIVI 2,^D36
  3387		MOVE 3,BITS(3)
  3388		TDNN 3,IMPHRT(2)	; No reset if already up
  3389		CALL IMSRST
  3390	IMPRC2:	CAIGE 7,377
  3391		AOJA 7,IMPRC1
  3392	IMPEET:	SETZM IMPHCT
  3393		MOVE 1,[IMPHCT,,IMPHCT+1]
  3394		BLT 1,IMPHCT+IMPLBT-1
  3395		MOVSI 7,-IMPNLK
  3396		MOVE 1,[UPROBI-UPROBT]
  3397		JRST IMPET1
  3398	
  3399	IMPRCC:	MOVE 1,IMPNOL		; Number of links in use
  3400		CAIG 1,IMPNLK/4-10
  3401		 AOS 0(P)
  3402		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 31

  3403	
  3404	; Echo tester
  3405	
  3406	IMPET:	MOVEI 1,^D120000
  3407		SKIPL IMPRDY
  3408		 JRST IMPCC6		; Don't probe if ncp not fully up
  3409		PUSHJ P,IMPRCC		; Check space in link table
  3410		 JRST [	MOVEI 1,^D5000	; Try again in 5 seconds
  3411			JRST IMPCC6]
  3412	IMPET3:	MOVE 1,IMPLT1(7)
  3413		TRNE 1,200000		; Active?
  3414		 JRST IMPET4		; No, get next
  3415		LSH 1,-8
  3416		ANDI 1,377		; The host
  3417		MOVE 2,1
  3418		IDIVI 2,^D36		; Compute bit table index
  3419		MOVE 3,BITS(3)
  3420		TDNE 3,IMPHCT(2)	; Recently sent a message
  3421		 JRST [	ANDCAM 3,IMPHCT(2)
  3422			JRST IMPET4]	; Send next time not this
  3423		IORM 3,IMPHCT(2)	; Remember we have sent one
  3424		MOVE 2,1		; If up, data=host
  3425		CALL IMPNOP		; And send nop (echo might be better)
  3426	IMPET4:	AOBJP 7,IMPEET
  3427	IMPET0:	TRNE 7,7		; Wait every eighth entry
  3428		 JRST IMPET
  3429		MOVEI 1,UPROBT*8/IMPNLK	; Delay for correct interval
  3430	IMPET1:	MOVEM 7,IMPCCH		; Save current state
  3431	IMPCC6:	ADD 1,TODCLK		; Compute when to do it again
  3432		MOVEM 1,IMPTIM
  3433		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 32

  3434	
  3435	; Check for overdue rfnm's
  3436	; Count down rfnmc field if non-zero.
  3437	; If it reaches 0, then generate impbug cause rfnm seems lost
  3438	RFNCHK:	IMSCLK(IMCRFN)		; Charge imcrfn
  3439		MOVSI 10,-IMPNLK	; Set to scan conn table
  3440	RFNCK0:	MOVSI 6,(RFNMC)
  3441		MOVEI 5,1B19
  3442	RFNCK2:	TDNN 5,IMPLT1(10)	; Connection in use?
  3443		TDNN 6,IMPLT2(10)	; Rfnm set here?
  3444	RFNCK1:	AOBJN 10,RFNCK2		; No
  3445		JUMPGE 10,RFNCK4
  3446		LDB 7,[POINT 2,IMPLT2(10),1]
  3447		SOJE 7,RFNCK5		; Decrement count, jump if exhausted
  3448		DPB 7,[POINT 2,IMPLT2(10),1]
  3449		JRST RFNCK1
  3450	
  3451	RFNCK5:	PIOFF			; Prevent confusion if pi stores buffer
  3452		HRRZ 2,IMPLT3(10)	; While we get message to retransmit
  3453		HLLZS IMPLT3(10)	; And clear the pointer
  3454		PION
  3455		JUMPE 2,RFNCK3		; Apparently hasn't made it thru q yet
  3456		HRRZ 3,IMPLT1(10)	; Get host/link
  3457		ROT 3,-8
  3458		ANDI 3,377		; Retain only host
  3459		MOVSI 5,(RXMTF)
  3460		CAME 3,NLHOST		; If local host
  3461		TDNE 5,IMPLT2(10)	; Or retransmission wanted?
  3462		 JRST RFNCK7		; Then retransmit
  3463		CALL RLNTBF		; Else release the buffer
  3464		DPB 7,[POINT 2,IMPLT2(10),1]
  3465		HRRZ 2,IMPLT1(10)	; Yes, rfnm lost. get host-link
  3466		CALL IMP8X1		; Reformat for bug msg
  3467		BUG(IMH,<RFNM OVERDUE>,X)
  3468		AOS IMPNOS		; Cause output scan to restart output
  3469	RFNCK6:	AOBJN 10,RFNCK0		; Reset ac5 and 6
  3470	RFNCK4:	MOVEI 1,RFNTMO
  3471		ADD 1,TODCLK		; Set next check for rfntmo msec.
  3472		MOVEM 1,RFNTIM
  3473		RET
  3474	
  3475	RFNCK7:	IORM 6,IMPLT2(10)	; Set rfnmc again
  3476		CALL IMPQOA		; Put message back on output queue
  3477		JRST RFNCK6		; Go to next item
  3478	
  3479	RFNCK3:	IORM 6,IMPLT2(10)	; Set rfnmc again
  3480		HRRZ 2,IMPLT1(10)	; Get host/link
  3481		CALL IMP8X1		; Format for bug msg
  3482		BUG(IMH,<MESSAGE STUCK IN OUTPUT QUEUE>,X)
  3483		JRST RFNCK6		; Go on to next item
IMPDV.VDH;1                        22-MAY-75 10:30     Page 33

  3484	
  3485	; Queue irreg msg
  3486	
  3487	IMP8XQ:	AOS 3,IMP8XI		; Increment input index
  3488		CAIL 3,IMP8XS
  3489		SETZB 3,IMP8XI		; Wraparound
  3490		CAMN 3,IMP8XO		; Overflow?
  3491		BUG(NTE,<IRREG MSG BUFFER OVERFLOW>)
  3492		MOVEM 2,IMP8XB(3)
  3493		AOS IMP8XC
  3494		RET
  3495	
  3496	IMP8XM:	IMSCLK(IMC8XM)		; Charge to imc8xm
  3497		AOS 3,IMP8XO		; Retrieve stuff from queue
  3498		CAIL 3,IMP8XS
  3499		 SETZB 3,IMP8XO		; Wraparound
  3500		MOVE 1,IMP8XB(3)
  3501		SOS IMP8XC
  3502	IFDEF DBGBUF,<
  3503		CALL DBGIIM>
  3504		LDB 3,[POINT 4,1,7]	; Message type code
  3505		LDB 2,[POINT 16,1,23]	; Host-link
  3506		XCT IMPMTT(3)		; Dispatch to appropriate routine
  3507		RET
  3508	
  3509	XX==JRST IMP8XX			; Unimplemented code
  3510	
  3511	IMPMTT:	BUG(HLT,<IMP - REGULAR MESSAGE ON IRREG QUEUE>)
  3512		JRST IMPEC1		; Error
  3513		JRST IMPDN2		; Imp going down
  3514		XX			; Formerly blocked link
  3515		JFCL			; Nop
  3516	
  3517		JRST IMRFNM		; Rfnm
  3518		JRST IMPEC6		; Dead host status
  3519		JRST IMPEC7		; Destination dead
  3520		JRST IMPEC8		; Error
  3521		JRST IMPEC9		; Incomplete transmission
  3522		JRST IMPE10		; Imp dropped ready line
  3523		XX			; Cease timeout
  3524		XX			; Cease sent
  3525		XX			; Unassigned
  3526		XX			; "
  3527	
  3528		XX			; "
IMPDV.VDH;1                        22-MAY-75 10:30     Page 34

  3529	
  3530	; Irregular message processors
  3531	
  3532	; Error in leader (type 1)
  3533	
  3534	IMPEC1:	TRNN 1,377B31		; Sub-type 0?
  3535		 JRST IMPEC8		; Yes, retransmit
  3536		JRST BADIRM		; Go cause it to be printed
  3537	
  3538	; Imp going down (type 2)
  3539	
  3540	IMPDN2:	MOVEM 1,IMPGDM		; Save it for printing
  3541		AOS JB0FLG
  3542		MOVEM 1,IGDMSG
  3543		GTAD
  3544		MOVEM 1,IGDTIM
  3545		RET
  3546	
  3547	; Rfnm (type 5)
  3548	
  3549	IMRFNM:	MOVEI 1,1B18(2)		; Host and link, denote send connection
  3550		ILOCK
  3551		CALL LNKLUK		; Lookup in link table
  3552		 JSP 2,BADIRY		; Not found
  3553		PUSH P,1
  3554		MOVSI 2,(RFNMC)
  3555		PIOFF			;  if rfnm returns before msg out done
  3556		ANDCAM 2,IMPLT2(1)	; Clear rfnm and check flags
  3557		HRRZ 2,IMPLT3(1)	; Get retransmit buffer
  3558		HLLZS IMPLT3(1)
  3559		PION
  3560		SKIPE 2
  3561		 CALL RLNTBF
  3562		POP P,1
  3563		HLRE IMPUN,IMPLT1(1)	; Get impun
  3564		MOVSI 2,(RXMTF)
  3565		TDNN 2,IMPLT2(1)	; Have we been retransmitting?
  3566		 JRST IMPKO1		; No. just send next message
  3567		ANDCAM 2,IMPLT2(1)	; Yes. stop retransmitting
  3568		CALL IMPKO1		; Send next message
  3569		JUMPGE IMPUN,SVCRST	; If not ctrl generate service restored
  3570		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 35

  3571	
  3572	; Dead host status (type 6)
  3573	
  3574	IMPEC6:	TLNE 1,(1B1)		; Usual type?
  3575		 RET			; No. ignore it
  3576		ROT 2,-9		; Get host number/2 low bit in b0
  3577		LSH 1,-4		; Get msg id -- subtype
  3578		ANDI 1,177777		; Keep 16 bits
  3579		IORI 1,1B18+1B19	; Mark info valid and dead
  3580		JUMPL 2,[		; Odd host?
  3581			HRRM 1,HSTSTS(2); Yes, store in rh
  3582			JRST .+2]
  3583		HRLM 1,HSTSTS(2)	; No, store in lh
  3584		ANDI 1,17		; Extract sub-type
  3585		CAIE 1,2		; Is it simply tardy?
  3586		CAIN 1,^D10		; Or at a bpt
  3587		 RET			; Yes, no further action
  3588		ROT 2,9			; No. get back host/link
  3589		JRST IMPDD1		; And declare it dead
  3590	
  3591	; Destination dead (type 7)
  3592	
  3593	IMPEC7:	PUSH P,2
  3594		LDB 1,[POINT 8,2,27]	; Extract host
  3595		IDIVI 1,^D36
  3596		MOVE 1,IMPHRT(1)	; Get host up bits
  3597		AND 1,BITS(2)		; Mask in the correct one
  3598		POP P,2
  3599		JUMPE 1,IMPDD1		; If already down, call it down
  3600		MOVE 1,2		; Host/link
  3601		IORI 1,1B18		; Send
  3602		ILOCK
  3603		CALL LNKLUK		; Find the link
  3604		 JSP 2,BADIRY
  3605	IMPECC:	MOVSI 2,(RXMTF)
  3606		IORM 2,IMPLT2(1)	; Cause retransmission
  3607		HLRE IMPUN,IMPLT1(1)	; Get "unit"
  3608		IUNLK
  3609		JUMPL IMPUN,R		; Done if control connection
  3610		CALL SVCINT		; Else perform service interruption
  3611		RET
  3612	
  3613	IMPDD1:	LDB 1,[POINT 8,2,27]	; Host number
  3614	HSTDED:	MOVEI 3,0(1)
  3615		IDIVI 3,^D36
  3616		MOVE 5,BITS(4)
  3617		TDNE 5,IMPHRT(3)	; Did we already know he was down?
  3618		IFDEF POLLF,<
  3619		IORM 5,IMPHL1(3)>	; Request obituary
  3620		ANDCAM 5,IMPHRT(3)	; Mark him down
  3621		CALL IMPXLT		; Clear link table for dead host
  3622		CALL NETHDN		; Clean up any connections to host
  3623		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 36

  3624	
  3625	; Error in data & incomplete transmission (types 8 & 9)
  3626	
  3627	IMPEC8:
  3628	IMPEC9:	MOVEI 1,1B18(2)		; Send connection
  3629		ILOCK
  3630		CALL LNKLUK		; Get lt index for this one
  3631		 JSP 2,BADIRY		; Not there, can't retransmit
  3632		PIOFF			; Prevent pi from storing in implt3
  3633		HRRZ 2,IMPLT3(1)	; Get buffer for retransmission
  3634		HLLZS IMPLT3(1)
  3635		PION
  3636		JUMPE 2,IMPECC		; None there now. retransmit later
  3637		IUNLK
  3638		CALL IMPQOA		; Put it back on output queue
  3639		RET
  3640	
  3641	; Interface reset (type 10)
  3642	
  3643	IMPE10:	MOVSI 1,-IMPNLK
  3644	IMPRSY:	PUSH P,1
  3645		ILOCK
  3646		MOVE 2,IMPLT1(1)
  3647		TRNE 2,1B19		; In use?
  3648		 JRST IMPZSY		; No
  3649		TRNN 2,377
  3650		 JRST IMPZSY		; Control
  3651		TRNE 2,1B18		; Send?
  3652		 JRST IMPSSY		; Yes
  3653		LDB 2,LTLINK
  3654		LDB 1,LTHOST
  3655		IUNLK
  3656		CALL IMPRAP
  3657		JRST IMPXSY
  3658	
  3659	IMPSSY:	CALL IMPSYN
  3660	IMPZSY:	IUNLK
  3661	IMPXSY:	POP P,1
  3662		AOBJN 1,IMPRSY
  3663		MOVSI 4,-400
  3664	IMPOSY:	HRRZ 1,4
  3665		CALL CHKNWP		; DOES THIS HOST UNDERSTAND?
  3666		 JRST [	PUSH P,4	; NO
  3667			CALL HSTDED
  3668			POP P,4
  3669			JRST .+1]
  3670		AOBJN 4,IMPOSY
  3671		AOS IMPNOS		; Scan for output to pick up rarrf's
  3672		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 37

  3673	
  3674	; Check if host for control message knows about new protocol stuff
  3675	
  3676	CHKNWP:	PUSH P,2
  3677		PUSH P,1
  3678		IDIVI 1,^D36
  3679		MOVE 2,BITS(2)
  3680		TDNE 2,NWPBT(1)
  3681		 AOS -2(P)
  3682		POP P,1
  3683		POP P,2
  3684		RET
  3685	
  3686	; MARK NEW PROTOCOL BIT FOR HOST
  3687	
  3688	MRKNWP:	PUSH P,1
  3689		PUSH P,2
  3690		IDIVI 1,^D36
  3691		MOVE 2,BITS(2)
  3692		IORM 2,NWPBT(1)
  3693		POP P,2
  3694		POP P,1
  3695		RET
  3696	
  3697	; Error tail ends for irregular msg processors
  3698	
  3699	BADIRY:	IUNLK
  3700	BADIRM:
  3701	IMP8XX:	MOVE 2,IMP8XO
  3702		ADD 2,[4,,IMP8XB-1]	; Make pointer to one before message
  3703		BUG(IML,<Received irreg msg with unknown link or type>,X)
  3704		RET
  3705	
  3706	IMP8X1:	DPB 2,[POINT 8,2,9]	; Unpack host-link in b20-35 into
  3707		LSH 2,-^D8		; Xwd link,host
  3708		TRZ 2,777400
  3709		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 38

  3710	
  3711	
  3712	; Scan for input ready on control link connection
  3713	
  3714	IMPCN0:	IMSCLK(IMCCNP)		; Charge to imccnp
  3715		MOVEI 5,1B18+1B19+377	; Connection must be receive, link 0
  3716		PUSH P,BHC		; Put a zero on stack
  3717		MOVSI 6,-IMPNLK
  3718	IMPCN4:	TDNE 5,IMPLT1(6)	; Desired connection?
  3719		AOBJN 6,.-1		; No
  3720		JUMPGE 6,IMPCN5		; Done
  3721		AOS 0(P)		; Count number of msgs seen
  3722		MOVEI 1,0(6)		; Conn index
  3723		PUSH P,5		; Save these ac's
  3724		PUSH P,6
  3725		CALL IMPCNP		; Go process this host's control msgs
  3726		POP P,6			; Restore ac's
  3727		POP P,5
  3728		MOVEI 1,0(6)
  3729		CALL IMPCLL		; Close "connection"
  3730		JRST IMPCN4
  3731	IMPCN5:	POP P,1			; Done. get count of processed msgs
  3732		JUMPN 1,R		; If any, done.
  3733		BUG(IMP,<IMPNCL TOO HIGH>,X)
  3734		SOS IMPNCL		; Count it down so don't loop.
  3735		RET
  3736	
  3737	; Control table for control opcodes
  3738	
  3739		DEFINE CTOP (A,C)
  3740	<	XWD IM8'A,C>
  3741	
  3742	I8CCM:	CTOP NOP,0
  3743		CTOP RTS,441000
  3744		CTOP STR,441000
  3745		CTOP CLS,440000
  3746		CTOP ALL,124000
  3747	
  3748		CTOP GVB,111000
  3749		CTOP RET,124000
  3750		CTOP INR,100000
  3751		CTOP INS,100000
  3752		CTOP ECO,100000
  3753	
  3754		CTOP ERP,100000
  3755		CTOP ERR,144200
  3756		CTOP RST,0
  3757		CTOP RRP,0
  3758		CTOP RAR,100000
  3759		CTOP RAS,100000
  3760		CTOP RAP,100000
  3761		CTOP NXR,100000
  3762		CTOP NXS,100000
IMPDV.VDH;1                        22-MAY-75 10:30     Page 38.1

  3763	I8NCCM==.-I8CCM
IMPDV.VDH;1                        22-MAY-75 10:30     Page 39

  3764	
  3765	; Process control message
  3766	
  3767	IMPCNP:	LDB 2,LTHOST		; Get host
  3768		MOVEM 2,IMPCHO		; And leave it for following commands
  3769		IDIVI 2,^D36		; Compute index to bit tables
  3770		MOVE 3,BITS(3)
  3771		TDNE 3,IMPBHT(2) 	; Bad host?
  3772		 RET			; Yes. let impcll flush it
  3773		SETZM IMPCHU		; Say host not ready (no rst/rrp)
  3774		TDNE 3,IMPHRT(2)	; Unless it is up
  3775		 SETOM IMPCHU		; Then say it's up
  3776	IMP8T6:	CALL UPBYT		; Get next op code
  3777		 RET			; None left...done
  3778		CAIL 3,I8NCCM		; Legal code?
  3779		JRST IMP8T4		; No, flush whole message
  3780		MOVEI 6,I8CCM(3)	; Address of table entry for this code
  3781		HRLI 6,220300		; Pntr for 3-bit bytes specifying fields
  3782		HLRZ 7,I8CCM(3)		; Get routine dispatch address
  3783		MOVEI 4,I8CAL		; Args buffer
  3784	IMP8T1:	ILDB 5,6		; Number of (8-bit) bytes in next arg
  3785		SETZ 2,			; Clear word to construct arg
  3786		JUMPN 5,IMP8T2		; 0 means no more args
  3787		CAIN 7,IM8NOP		; Check for NOP's at this level
  3788		 JRST IMP8T6
  3789		CAIE 7,IM8RST		; Is rst?
  3790		CAIN 7,IM8RRP		; Or rrp?
  3791		 SETOM IMPCHU		; Yes, consider him up
  3792		SKIPN IMPCHU		; Is he up?
  3793		 MOVEI 7,IMSRST		; No. force call to send rst
  3794		PUSH P,1		; Preserve ac1
  3795		MOVE 6,[XWD IMPCHO,1]	; Move args to acs 1-6
  3796		BLT 6,6			; Ac1 (impcho) always gets host number
  3797		CALL 0(7)		; Do function
  3798		POP P,1			; Restore 1 (lt index)
  3799		JRST IMP8T6		; See if another
  3800	
  3801	IMP8T2:	PUSH P,2		; Preserve ac2
  3802		CALL UPBYT		; Get a byte of argument
  3803		 JRST IMP8T5		; Whoops, short message
  3804		POP P,2
  3805		ROT 3,-8		; And shift it
  3806		LSHC 2,8		; Into the arg being accumulated
  3807		SOJG 5,IMP8T2		; All bytes packed?
  3808		MOVEM 2,0(4)		; Yes, store arg in buffer
  3809		AOJA 4,IMP8T1		; And see if more args
  3810	
  3811	IMP8T5:	SUB P,BHC+1
  3812	IMP8T4:	MOVE 2,IMPCHO		; Screwed up control msg
  3813		BUG(IMH,<ILL FMT CTL MSG>,X)
  3814		RET			; Let impcll flush rest of message(s)
IMPDV.VDH;1                        22-MAY-75 10:30     Page 40

  3815	
  3816	; Control routines
  3817	
  3818	; Nop (type 0)
  3819	
  3820	IM8NOP:	RET
  3821	
  3822	; Receiver to sender request for connection (type 1)
  3823	
  3824	IM8RTS=RECRTS		; Code in  netwrk
  3825	
  3826	; Sender to receiver request for connection (type 2)
  3827	
  3828	IM8STR=RECSTR		; Code in netwrk
  3829	
  3830	; Close connection (type 3)
  3831	
  3832	IM8CLS=RECCLS		; Code in netwrk
  3833	
  3834	; Allocate (type 4)
  3835	
  3836	IM8ALL:	LSH 1,^D8		; Concat host and link
  3837		IORI 1,1B18(2)		; Bit for send connection
  3838		ILOCK
  3839		CALL LNKLUK		; Lookup in connect table
  3840		 JSP 2,BADLKS		; Not found
  3841		HLRE IMPUN,IMPLT1(1)	; Get unit
  3842		JUMPL IMPUN,ULKIDV	; Control connection, shouldn't happen
  3843		MOVSI 2,(RARF)		; Waiting for rar?
  3844		TDNE 2,IMPLT2(1)
  3845		 JRST ULKIDV		; Yes, ignore all allocates
  3846		HRRZ 2,IMPLT4(1)	; Get current msg alloc
  3847		ADD 2,3
  3848		CAILE 2,777777		; Bigger than max?
  3849		JRST IMPB06		; Yes
  3850		HRRM 2,IMPLT4(1)
  3851		ADDB 4,NETBAL(IMPUN)	; Update bit allocation
  3852		CAML 4,[1B3]		; Excessive?
  3853		JRST IMPB06
  3854		LDB 2,PNVT
  3855		CAIL 2,NVTLO		; Nvt attached?
  3856		CAIL 2,NLINES
  3857		JRST IMPKO1		; No, test more output for reg. connet'n
  3858		IUNLK
  3859		CALL NETTCS		; Yes, pack up more characters
  3860		JRST IMPCKO		; And try to send
IMPDV.VDH;1                        22-MAY-75 10:30     Page 41

  3861	
  3862	; Give back (code 5)
  3863	
  3864	IM8GVB:	LSH 1,^D8		; Give back requested
  3865		IORI 1,1B18(2)		; Construct host-link for send socket
  3866		ILOCK
  3867		CALL LNKLUK
  3868		 JSP 2,BADLKS		; Not found
  3869		HLRE IMPUN,IMPLT1(1)	; Get unit
  3870		JUMPL IMPUN,ULKIDV	; Control conn, shouldn't happen
  3871		HRRZ 2,IMPLT4(1)	; Msg alloc
  3872		CAIL 3,200		; All?
  3873		JRST .+3		; Yes
  3874		IMUL 2,3		; No, calc how much
  3875		IDIVI 2,200
  3876		HRRZ 3,IMPLT4(1)
  3877		SUB 3,2			; Reduce current msg alloc
  3878		HRRM 3,IMPLT4(1)
  3879		PUSH P,2
  3880		MOVE 2,NETBAL(IMPUN)	; Bit allocation
  3881		CAIL 4,200		; Return all?
  3882		JRST .+3		; Yes
  3883		MUL 2,4			; No, calc how much
  3884		DIVI 2,200
  3885		MOVN 3,2
  3886		ADDM 3,NETBAL(IMPUN)	; Reduce bit alloc
  3887		MOVE 4,2		; Setup call for ret
  3888		POP P,3
  3889		LDB 2,LTLINK
  3890		LDB 1,LTHOST
  3891		IUNLK
  3892		CALL IMPRET		; Send the ret
  3893		RET
  3894	
  3895	; Return (code 6)
  3896	
  3897	IM8RET:	RET			; Never send gvb/ nver get ret
IMPDV.VDH;1                        22-MAY-75 10:30     Page 42

  3898	
  3899	; Interrupt from receiver (code 7)
  3900	
  3901	IM8INR:	MOVE 3,1
  3902		LSH 1,^D8
  3903		IORI 1,1B18(2)		; We must be a send connection
  3904		ILOCK
  3905		CALL LNKLUK
  3906		 JSP 2,BADLKS		; No such connection
  3907		HLRE IMPUN,IMPLT1(1)	; Unit
  3908		IUNLK
  3909		JUMPL IMPUN,R		; Control connection, shouldn't happen
  3910		MOVE 1,3		; Host
  3911		JRST RECINR		; Not specified for nvt
  3912	
  3913	; Interrupt from sender (code 8)
  3914	
  3915	IM8INS:	MOVE 3,1
  3916		LSH 1,^D8
  3917		IORI 1,0(2)		; Combine host-link
  3918		ILOCK
  3919		CALL LNKLUK
  3920		 JSP 2,BADLKR
  3921		HLRE IMPUN,IMPLT1(1)
  3922		IUNLK
  3923		JUMPL IMPUN,R
  3924		MOVE 1,3
  3925		LDB 3,PNVT		; Get nvt number
  3926		CAIL 3,NVTLO
  3927		CAIL 3,NLINES
  3928		JRST RECINS		; Isn't nvt, go do regular connection
  3929		MOVE 2,3
  3930		LDB 1,PTINTC
  3931		SUBI 1,1		; Ins counts -1, sync char counts 1
  3932		DPB 1,PTINTC
  3933		LDB IMPUN,PTNETI
  3934		SKIPN NETBAL(IMPUN)
  3935		 CALL NVTRAL		; Send more allocation
  3936		RET
  3937	
  3938	
  3939	; Echo and echo reply (code 9 & 10)
  3940	
  3941	IM8ECO:	CALL IMPERP		; Send reply
  3942		RET
  3943	
  3944	IM8ERP:	CAME 1,2		; We send echo with data = host
  3945		JFCL			; Not equal ... oh well
  3946		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 43

  3947	
  3948	; Error (code 11)
  3949	
  3950	IM8ERR:	MOVSI 2,0(2)		; Arg
  3951		HRRI 2,0(1)		; Host
  3952		BUG(IMH,<RECD NCP ERR>,X)
  3953		RET
  3954	
  3955	; Reset and reset-reply ctrl msg (codes 12 & 13)
  3956	
  3957	IM8RST:	PUSH P,1
  3958		CALL RECRST		; Notify fsm
  3959		POP P,1
  3960	IM8RRP:	ROT 1,-1		; Halve
  3961		MOVEI 2,1B18		; Valid info, host up
  3962		JUMPL 1,[		; If od host number
  3963			HRRM 2,HSTSTS(1); Put into rh
  3964			JRST .+2]
  3965		HRLM 2,HSTSTS(1)
  3966		ROT 1,1			; Restore host number
  3967		IDIVI 1,^D36		; Get bit for host tables
  3968		MOVE 5,BITS(2)
  3969		IORM 5,IMPHRT(1)	; Mark host alive
  3970		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 44

  3971	
  3972	; Reset allocate by receiver (code 14)
  3973	
  3974	IM8RAR:	CALL MRKNWP		; MARK THIS HOST AS USING NEW PROTOCOL
  3975		LSH 1,^D8
  3976		IORI 1,1B18(2)
  3977		ILOCK
  3978		CALL LNKLUK
  3979		 JSP 2,BADLKS
  3980		HLRE IMPUN,IMPLT1(1)
  3981		JUMPL IMPUN,ULKIDV
  3982		MOVSI 2,(RARF)
  3983		ANDCAM 2,IMPLT2(1)	; Clear resync in progress flag
  3984		JRST ULKIDV
  3985	
  3986	; Reset allocate by sender (code 15)
  3987	
  3988	IM8RAS:	CALL MRKNWP		; MARK THIS HOST AS USING NEW PROTOCOL
  3989		LSH 1,8
  3990		IORI 1,0(2)
  3991		ILOCK
  3992		CALL LNKLUK
  3993		 JSP 2,BADLKR
  3994		HLRE IMPUN,IMPLT1(1)
  3995		JUMPL IMPUN,ULKIDV
  3996		HLLZS IMPLT4(1)
  3997		HLRZ 4,IMPLT4(1)	; ANY CURRENT BUFFER?
  3998		JUMPE 4,IM8RA1		; NO
  3999		MOVE 4,4(2)		; ACCUMULATE BYTES
  4000	IM8RA1:	HLRZ 2,IMPLT3(1)	; GET BUFFER
  4001		JUMPE 2,IM8RA3		; NONE
  4002	IM8RA2:	LDB 3,[POINT 16,2(2),27]; NUMBER OF BYTES
  4003		ADD 4,3
  4004		AOS IMPLT4(1)		; COUNT MSGS
  4005		HLRZ 2,0(2)		; NEXT BUFFER
  4006		JUMPN 2,IM8RA2
  4007	IM8RA3:	LDB 3,IMPLBS		; BYTE SIZE
  4008		IMUL 3,4
  4009		MOVEM 3,NETBAL(IMPUN)
  4010		IUNLK
  4011		LDB 2,LTLINK
  4012		LDB 1,LTHOST
  4013		CALL IMPRAR
  4014		LDB 2,PNVT
  4015		CAIG 2,NVTHI
  4016		CAIGE 2,NVTLO
  4017		 JRST NETRAL
  4018		JRST NVTRAL
  4019	
  4020	; Reset allocate please (code 16)
  4021	
  4022	IM8RAP:	CALL MRKNWP		; MARK THIS HOST AS USING NEW PROTOCOL
  4023		LSH 1,8
IMPDV.VDH;1                        22-MAY-75 10:30     Page 44.1

  4024		IORI 1,1B18(2)
  4025		ILOCK
  4026		CALL LNKLUK
  4027		 JSP 2,BADLKS
  4028		HLRE IMPUN,IMPLT1(1)
  4029		JUMPL IMPUN,ULKIDV
  4030		MOVSI 2,(RARF!RARRF)
  4031		IORM 2,IMPLT2(1)
  4032		JRST IMPKO1
IMPDV.VDH;1                        22-MAY-75 10:30     Page 45

  4033	
  4034	; Non-existent link from receiver and sender (codes 17 & 18)
  4035	
  4036	IM8NXR:	IORI 2,1B18
  4037	IM8NXS:	CALL MRKNWP		; MARK THIS HOST AS USING NEW PROTOCOL
  4038		LSH 1,8
  4039		IOR 1,2
  4040		ILOCK
  4041		CALL LNKLUK
  4042		 JRST ULKIDV
  4043		HLRE IMPUN,IMPLT1(1)	; Get impun
  4044		JUMPL IMPUN,ULKIDV	; Ignore if control conn
  4045		IUNLK
  4046		CALL SK2DWN
  4047		RET
  4048	
  4049	; Link lookup failure for receivers and senders
  4050	
  4051	BADLKR:	SKIPA 3,[IMPNXR]
  4052	BADLKS:	MOVEI 3,IMPNXS
  4053		IUNLK
  4054		PUSH P,2		; SAVE PC FOR INSPECTION
  4055		MOVE 2,1
  4056		LSH 1,-8
  4057		ANDI 1,377
  4058		ANDI 2,377
  4059		PUSH P,1
  4060		HRLM 2,0(P)
  4061		CALL 0(3)
  4062		POP P,2
  4063		BUG(IMH,<RECD CTL MSG FOR UNKNOWN LINK>,X)
  4064		SUB P,BHC+1		; FLUSH SAVED PC
  4065		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 46

  4066	
  4067	; Calls from ncp
  4068	
  4069	; Open link, i.e. associate host-link and unit
  4070	; 1/ host
  4071	; 2/ link
  4072	; 3/ byte size
  4073	
  4074	IMPOPL:	ILOCK
  4075		LSH 1,^D8
  4076		IORI 1,0(2)		; Concat host and link
  4077		CALL LNKLUK		; Now in table?
  4078		 JRST IMPOP0		; No, slot to use returned in 2
  4079		IUNLK
  4080		BUG(IMP,<IMPOPL: Link already exists>,X)
  4081		RET
  4082	
  4083	IMPOP0:	CALL IMPOP1
  4084		IUNLK
  4085		RET
  4086	
  4087	IMPOP1:	EXCH 1,2
  4088		MOVEM 2,IMPLT1(1)
  4089		HRLM IMPUN,IMPLT1(1)
  4090		MOVEI 2,IMPLT3(1)	; Init bfr queue
  4091		MOVEM 2,IMPLT2(1)	; Make in point to out
  4092		SETZM IMPLT3(1)
  4093		SETZM IMPLT4(1)
  4094		DPB 3,IMPLBS		; Set byte size
  4095		RET
  4096	
  4097	; Close link, inverse of above
  4098	; 1/	LT INDEX
  4099	
  4100	IMPCLL:	ILOCK
  4101		CALL IMPLL0
  4102		IUNLK
  4103		RET
  4104	
  4105	IMPLL0:	MOVEI 2,1B19
  4106		TDNE 2,IMPLT1(1)	; Was in use?
  4107		RET			; No, do nothing else
  4108		EXCH 2,IMPLT1(1)	; Set entry to deleted
  4109		TRNE 2,377		; Control link?
  4110		 JRST IMPLL9		; No, skip this
  4111		TRNE 2,1B18		; Send?
  4112		 SOSA IMPNOL		; Yes, decrease count of send cl's
  4113		  SOS IMPNCL		; Else decrease count of recv cl's
  4114	IMPLL9:	AOS LNKNDL		; Count deletes
  4115		CALL IMPLL1		; Flush messages
  4116		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 47

  4117	
  4118	; Set done flag for connection
  4119	; 1/ conn index
  4120	
  4121	IMPSDB:	MOVSI 2,(LTDF)
  4122		IORM 2,IMPLT2(1)
  4123		AOS IMPNOS		; Make output be looked at
  4124		RET
  4125	
  4126	; Abort link (called by ncp if transmission aborted)
  4127	
  4128	IMPABL:	ILOCK
  4129		CALL IMPLL1
  4130		IUNLK
  4131		RET
  4132	
  4133	; Clear link table for particular host
  4134	
  4135	IMPXLT:	PUSH P,1
  4136		ILOCK
  4137		MOVSI 1,-IMPNLK		; Set to scan conn table
  4138	IMPXLL:	LDB 2,LTHOST		; Get host
  4139		CAIE 2,@0(P)		; Specified one?
  4140		 JRST IMPXLN
  4141		LDB 2,LTLINK		; Get link
  4142		JUMPE 2,[CALL IMPLL0	; If control link, flush all
  4143			JRST IMPXLN]
  4144		CALL IMPLL1		; Else flush queued messages
  4145	IMPXLN:	AOBJN 1,IMPXLL
  4146		IUNLK
  4147		POP P,1
  4148		RET
  4149	
  4150	; Resync allocation
  4151	
  4152	IMPSYN:	PUSH P,1
  4153		LDB 1,LTHOST
  4154		CALL CHKNWP		; NEW PROTOCOL?
  4155		 JRST [	POP P,1
  4156			RET]
  4157		POP P,1
  4158		MOVSI 2,(RARF!RARRF)
  4159		IORM 2,IMPLT2(1)
  4160		AOS IMPNOS
  4161		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 48

  4162	
  4163	; Flush all messages for a connection
  4164	
  4165	IMPLL1:	HLRZ 2,IMPLT4(1)
  4166		HRRZS IMPLT4(1)
  4167		PUSH P,1
  4168		CAIE 2,0		; Is current bfr?
  4169		PUSHJ P,RLNTBF
  4170		MOVE 1,0(P)		; Get back lt index
  4171		MOVEI 2,IMPLT3(1)
  4172		HRRM 2,IMPLT2(1)	; Fix tail pointer
  4173		PIOFF
  4174		MOVSI 2,(RFNMC)
  4175		ANDCAM 2,IMPLT2(1)	; Cancel outstanding rfnm
  4176		HRRZ 2,IMPLT3(1)	; Get retransmit buffer
  4177		HLLZS IMPLT3(1)
  4178		PION
  4179		SKIPE 2
  4180	IMPLL2:	CALL RLNTBF		; Yes, release it
  4181		POP P,1
  4182		HLRZ 2,IMPLT3(1)	; Release any buffers on queue
  4183		JUMPE 2,R
  4184		HLLZ 3,0(2)
  4185		HLLM 3,IMPLT3(1)
  4186		PUSH P,1
  4187		JRST IMPLL2
IMPDV.VDH;1                        22-MAY-75 10:30     Page 49

  4188	
  4189	; Control message senders
  4190	
  4191	; Nop, rts, str, cls, all, gvb, ret, inr, ins, eco, erp
  4192	
  4193	IMPNOP:	PUSH P,[XWD 0,0]	; Nop, no args
  4194		JRST IMPSCM
  4195	
  4196	IMPRTS:	PUSH P,[XWD 441000,1]	; Arg descriptor,,opcode
  4197		JRST IMPSCM		; Construct message and output
  4198	
  4199	IMPSTR:	PUSH P,[XWD 441000,2]
  4200		JRST IMPSCM
  4201	
  4202	IMPCLS:	PUSH P,[XWD 440000,3]
  4203		JRST IMPSCM
  4204	
  4205	IMPALL:	CAIGE 3,0		; Don't send neg allocs
  4206		SETZ 3,
  4207		CAIGE 4,0
  4208		SETZ 4,
  4209		PUSH P,1
  4210		LDB 1,PLIDX		; Get conn index
  4211		PUSH P,2
  4212		MOVSI 2,(RARF)		; Waiting for ras?
  4213		TDNE 2,IMPLT2(1)
  4214		 JRST [	POP P,2		; Yes. do nothing
  4215			POP P,1
  4216			RET]
  4217		POP P,2			; No, get back ac2
  4218		ADDM 3,IMPLT4(1)	; Update msg alloc
  4219		POP P,1
  4220		ADDM 4,NETBAL(IMPUN)	; Bits
  4221		PUSH P,[XWD 124000,4]
  4222		JRST IMPSCM
  4223	
  4224	IMPGVB:	PUSH P,[XWD 111000,5]
  4225		JRST IMPSCM
  4226	
  4227	IMPRET:	PUSH P,[XWD 124000,6]
  4228		JRST IMPSCM
  4229	
  4230	IMPINR:	PUSH P,[XWD 100000,^D7]
  4231		JRST IMPSCM
  4232	
  4233	IMPINS:	PUSH P,[XWD 100000,^D8]
  4234		JRST IMPSCM
  4235	
  4236	IMPECO:	PUSH P,[XWD 100000,^D9]
  4237		JRST IMPSCM
  4238	
  4239	IMPERP:	PUSH P,[XWD 100000,^D10]
  4240		JRST IMPSCM
IMPDV.VDH;1                        22-MAY-75 10:30     Page 50

  4241	
  4242	; Control message senders (continued)
  4243	
  4244	; Err, rst, rrp, rar, ras, rap, nxr, nxs
  4245	
  4246	IMPERR:	PUSH P,[XWD 144200,^D11]
  4247		JRST IMPSCM
  4248	
  4249	IMSRST:	PUSH P,[XWD 0,^D12]
  4250		JRST IMPSCM
  4251	
  4252	IMPRRP:	PUSH P,[XWD 0,^D13]
  4253		JRST IMPSCM
  4254	
  4255	IMPRAR:	CALL CHKNWP
  4256		 RET
  4257		PUSH P,[100000,,^D14]
  4258		JRST IMPSCM
  4259	
  4260	IMPRAS:	CALL CHKNWP
  4261		 JRST IM8RAR		; Resync not implemented -- sim rar
  4262		PUSH P,[100000,,^D15]
  4263		JRST IMPSCM
  4264	
  4265	IMPRAP:	CALL CHKNWP
  4266		 RET			; DOES NOT UNDERSTAND NEW PROTOCOL
  4267		PUSH P,[100000,,^D16]
  4268		JRST IMPSCM
  4269	
  4270	IMPNXR:	CALL CHKNWP
  4271		 RET
  4272		PUSH P,[100000,,^D17]
  4273		JRST IMPSCM
  4274	
  4275	IMPNXS:	CALL CHKNWP
  4276		 RET
  4277		PUSH P,[100000,,^D18]
  4278		JRST IMPSCM
IMPDV.VDH;1                        22-MAY-75 10:30     Page 51

  4279	
  4280	; Send control message
  4281	; 1/ dest host
  4282	; 0(p) arg descriptor,,opcode
  4283	
  4284	IMPSCM:	EXCH 13,0(P)
  4285		PUSH P,6
  4286		PUSH P,7
  4287		PUSH P,10
  4288		PUSH P,11
  4289		PUSH P,12
  4290		PUSH P,14
  4291		MOVEI 10,0(P)		; Use 3 words on stack as buffer
  4292		ADD P,BHC+3
  4293		HRLI 10,1000		; Construct byte pointer, 8-bits
  4294		PUSH P,10		; Save it for later use
  4295		IDPB 13,10		; Store opcode as first byte of message
  4296		MOVEI 11,1		; Init message byte count
  4297		MOVEI 14,2		; Index to args
  4298	IMPSC4:	SETZ 12,
  4299		LSHC 12,3		; Next arg descriptor byte
  4300		JUMPN 12,IMPSC3		; 0 means done
  4301		LSH 1,^D8
  4302		IORI 1,1B18
  4303		ILOCK
  4304		CALL LNKLUK		; See if connection now exists
  4305		 JRST [	MOVEI 3,^D8	; Doesn't, create it
  4306			CALL IMPOP1
  4307			AOS IMPNOL	; Count open output links
  4308			HRROS IMPLT1(1)	; Set unit neg
  4309			MOVEI 3,377777	; Set infinite msg alloc
  4310			HRRM 3,IMPLT4(1)
  4311			MOVSI 3,(HIPFLG)
  4312			IORM 3,IMPLT2(1)	; Set high priority flag
  4313			JRST .+1]
  4314		POP P,3			; Byte ptr
  4315		MOVEI 4,0(11)		; Count
  4316		CALL PKMSG0		; Does iunlk
  4317		SUB P,BHC+3
  4318		POP P,14
  4319		POP P,12
  4320		POP P,11
  4321		POP P,10
  4322		POP P,7
  4323		POP P,6
  4324		POP P,13
  4325		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 52

  4326	
  4327	IMPSC3:	ADDI 11,0(12)		; Accumulate byte count of message
  4328		MOVNI 6,0(12)		; Compute number of bits to left of arg
  4329		IMULI 6,^D8		; Number bytes times bits per byte
  4330		ADDI 6,^D36		; Subtracted from size of word
  4331		MOVE 7,0(14)		; Get next arg
  4332		LSH 7,0(6)		; Shift out unused bits
  4333		ROT 7,^D8		; Shift next byte into place
  4334		IDPB 7,10		; Store it in message buffer
  4335		SOJG 12,.-2		; For all bytes
  4336		AOJA 14,IMPSC4		; Index arg pointer
IMPDV.VDH;1                        22-MAY-75 10:30     Page 53

  4337	
  4338	; Network tty logic
  4339	; For connection driven via the tty service routines
  4340	
  4341	; Assign a pseudo (network) tty
  4342	; 1/ receive unit
  4343	; 2/ send unit
  4344	; Returns 1/ line number
  4345	
  4346	ASNNVT:	MOVEI 3,NVTLO		; Nvt's start after scanner ttys
  4347		NOSKED
  4348	ASNPT1:	SKIPGE TTNETW(3)	; Free?
  4349		JRST ASNPT3		; Yes
  4350	ASNPT2:	CAIGE 3,NLINES-1	; Looked at all nvt's?
  4351		AOJA 3,ASNPT1		; No
  4352		OKSKED			; Yes,
  4353		RET			; Return bad
  4354	
  4355	ASNPT3:	SKIPL TTFORK(3)		; Tty already attached?
  4356		JRST ASNPT2		; Yes, don't use
  4357		TLNN 1,(1B2)		; New nvt protocol request?
  4358		 TLZA 3,-1		; No, make zeroes
  4359		  HRLI 3,NEWNVB		; Yes, make new nvb bit
  4360		HLLZM 3,TTNETW(3)	; Clear ttnetw except for newnvb
  4361		SETZM NVTOPF(3)		; Clear option status
  4362		OKSKED
  4363		EXCH 2,3
  4364		DPB 1,PTNETI		; Remeber units
  4365		DPB 3,PTNETO
  4366		CALL TTCOBI
  4367		CALL TTCIBF		; Clear buffers
  4368		MOVEI 1,3
  4369		DPB 1,[POINT 2,TTFLGS(2),33]
  4370		MOVEI 1,1
  4371		DPB 1,[POINT 2,TTFLGS(2),29]
  4372		MOVEI 1,0(2)		; Return line number
  4373		AOS 0(P)		; Return good
  4374		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 54

  4375	
  4376	; Close a full duplex net tty connection
  4377	
  4378	NVTDET:	PUSH P,2
  4379		SKIPL TTFORK(2)		; Line attached?
  4380		CALL NVTCOF		; Yes, initiate carrier off psi
  4381		MOVE 2,0(P)
  4382		SKIPG TTNETW(2)		; Reasonable units?
  4383		JRST NVTDT1		; No
  4384		LDB IMPUN,PTNETI	; Input unit
  4385		CALL NVTCLZ		; Close it
  4386		MOVE 2,0(P)
  4387		LDB IMPUN,PTNETO	; Output unit
  4388		CALL NVTCLZ		; Close it
  4389	NVTDT1:	POP P,2
  4390		SETZM NVTOPF(2)
  4391		SETOM TTNETW(2)
  4392		SETZM TTPSI(2)
  4393		CALL TTCOBI
  4394		CALL TTCIBF
  4395		RET
  4396	
  4397	PNVT:	POINT 18,NETBUF(IMPUN),35	; Used to get nvt line number
IMPDV.VDH;1                        22-MAY-75 10:30     Page 55

  4398	
  4399	; Called from tci
  4400	
  4401	NVTCAP:				; Alternate name
  4402	NETCAP:	SKIPGE TTNETW(2)	; Still connected?
  4403		RET			; No
  4404		PUSH P,IMPUN
  4405		PUSH P,2
  4406		NOINT			; Protect any possible ilocks
  4407		CALL CKNNVT		; If not new nvt
  4408		 JRST NETCA1		; Skip sending ga
  4409		CALL NVTXGA		; SEND GA IF NEEDED
  4410	NETCA1:	LDB IMPUN,PTNETI
  4411		SKIPN NETBAL(IMPUN)
  4412		 CALL NVTRAL		; Probably only 1st time, or after cfibf
  4413		OKINT
  4414		POP P,2
  4415		POP P,IMPUN
  4416		RET
  4417	
  4418	; Check if this nvt is using new protocol
  4419	
  4420	CKNNVT:	PUSH P,1
  4421		MOVSI 1,NEWNVB
  4422		TDNE 1,TTNETW(2)
  4423		 AOS -1(P)
  4424		POP P,1
  4425		RET
  4426	
  4427	; Check for special nvt output processing
  4428	; Called from tcoutx for nvt's
  4429	
  4430	NVTCHO:	PUSHJ P,CKNNVT		; Check if new nvt
  4431		 RET			; Not. no special processing
  4432		PUSH P,1		; Save character
  4433		MOVSI 3,NVTCRP
  4434		TDNE 3,TTNETW(2)	; Was previous char cr?
  4435		 JRST [	ANDCAM 3,TTNETW(2)	; Yes, clear it
  4436			CAIE 1,12	; Must be followed by lf
  4437			CAIN 1,0	; Or null
  4438			 JRST .+1
  4439			SETZ 1,		; If not follow it with null
  4440			PUSHJ P,TCOBQ
  4441			MOVE 1,0(P)
  4442			JRST .+1]
  4443		CAIN 1,IACCH		; Iac?
  4444		PUSHJ P,TCOBQ		; Yes. double the special character
  4445		POP P,1
  4446		RET
  4447	
  4448	; Set NVTCRP called from TTYSRV
  4449	
  4450	NVTXCR:	CALL CKNNVT
IMPDV.VDH;1                        22-MAY-75 10:30     Page 55.1

  4451		 RET
  4452		MOVSI 3,NVTCRP
  4453		IORM 3,TTNETW(2)
  4454		RET
  4455	
  4456	; Called from tcout
  4457	
  4458	NTTCSO:	MOVE 3,TTFORK(2)	; Get status of tty
  4459		TRNE 3,600000		; IS SOME FORK WAITING?
  4460		 JRST NTTCS1		; NO.
  4461		MOVSI 3,NVTRCP		; YES. SET RCTE RESET PENDING
  4462		IORM 3,TTNETW(2)
  4463	NTTCS1:	AOS TTNOF		; Request tty scan
  4464		AOS IMPFLG
  4465		RET
  4466	
  4467	; CHECK FOR ECHOS DONE BY RCTE
  4468	
  4469	NVTRCC:	CAIL 2,NVTLO
  4470		CAILE 2,NVTHI
  4471		 JRST SKPRET##
  4472		PUSH P,3
  4473		MOVEI 3,(1B<RCTOPT+WILOPT>)
  4474		TDNE 3,NVTOPF(2)
  4475		 TROA 1,400
  4476		  AOS -1(P)
  4477		POP P,3
  4478		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 56

  4479	
  4480	; Send ga
  4481	
  4482	NVTXGA:	CAIL 2,NVTLO
  4483		CAIL 2,NLINES
  4484		 RET
  4485		MOVSI 1,NVTGAB
  4486		TDNE 1,TTNETW(2)
  4487		 JRST NVTXG1
  4488		MOVEI 1,GACH
  4489		CALL NVTSSP
  4490	NVTXG1:	MOVSI 1,NVTRCP
  4491		IORM 1,TTNETW(2)	; SET IN CASE THE FOLLOWING FAILS
  4492	NVTRRR:	MOVEI 3,(1B<RCTOPT+WILOPT>)
  4493		TDNN 3,NVTOPF(2)	; IS RCTE TURNED ON?
  4494		 RET			; NO. RETURN
  4495		SETZ 1,			; ASSUME CMD OF 0
  4496		MOVSI 3,NVTRCS
  4497		TDNN 3,TTNETW(2)	; CHANGE IN STATE?
  4498		JRST NVTRR1		; NO, USE 0
  4499		MOVEI 1,11		; CMD BYTE -- CHANGE BREAK CLASS
  4500		MOVE 3,TTFLGS(2)	; CURRENT SETTING
  4501		TRNN 3,3B25		; ANY ECHO WANTED?
  4502		 TRO 1,6		; NO, SUPPRESS IT
  4503		TRC 3,3B25
  4504		TRCN 3,3B25		; NO ECHO BREAK?
  4505		 TRO 1,2		; SUPPRESS IT
  4506	NVTRR1:	PUSH P,1		; SAVE IT
  4507		MOVEI 1,6		; NEED 6 CHARACTERS IF JUST RESET
  4508		SKIPE 0(P)
  4509		 MOVEI 1,^D10		; ELSE NEED 10
  4510		CALL NVTRSV		; RESERVE SPACE
  4511		 JRST [	POP P,1
  4512			RET]
  4513		MOVEI 1,SBCH
  4514		CALL NVTSSP		; SEND IAC-SB
  4515		MOVEI 1,RCTOPT
  4516		CALL TCOBQ		; SAY WHICH OPTION WE ARE CHANGING
  4517		MOVE 1,0(P)
  4518		CALL TCOB		; SEND THE COMMAND
  4519		POP P,1
  4520		JUMPE 1,NVTRR2		; DONE IF COMMAND IS ZERO
  4521		MOVE 3,TTFLGS(2)	; GET BACK THE ARGUMENT
  4522		SETZ 1,
  4523		TRC 3,1B25
  4524		TRNN 3,3B25		; ECHO IMMEDIATE WANTED?
  4525		 TRO 1,777		; YES, MUST BREAK ON ALL
  4526		TRNE 3,1B23		; BREAK ON ALPHANUMERICS
  4527		 TRO 1,7		; UPPER AND LOWER CASE AND NUMBERS
  4528		TRNE 3,1B22		; PUNCTUATION
  4529		 TRO 1,740
  4530		TRNE 3,1B21		; NON-FORMATTIN CONTROLS
  4531		 TRO 1,20
IMPDV.VDH;1                        22-MAY-75 10:30     Page 56.1

  4532		TRNE 3,1B20		; FORMATTERS
  4533		 TRO 1,10
  4534		PUSH P,1		; SAVE LOWER ORDER BYTE
  4535		LSH 1,-8		; GET HIGH ORDER BYTE
  4536		CALL TCOB		; SEND IT
  4537		POP P,1
  4538		ANDI 1,377
  4539		CALL TCOB		; SEND LOW ORDER BYTE
  4540	NVTRR2:	MOVEI 1,SECH
  4541		CALL NVTSSP		; SEND SE
  4542		MOVSI 3,NVTRCP!NVTRCS
  4543		ANDCAM 3,TTNETW(2)	; CANCEL REQUEST
  4544		OKSKED
  4545		RET
  4546	
  4547	; Called from ttcobf
  4548	
  4549	NVTCOB:	SKIPG TTNETW(2)
  4550		 RET
  4551		NOINT			; Protect possible ilocks
  4552		PUSH P,IMPUN
  4553		PUSH P,2
  4554		LDB IMPUN,PTNETO
  4555		LDB 1,PLIDX
  4556		LDB 2,LTLINK
  4557		LDB 1,LTHOST
  4558		CALL IMPINS
  4559		POP P,2
  4560		POP P,IMPUN
  4561		OKINT
  4562		CALL CKNNVT		; New style nvt?
  4563		 JRST NVTCO1		; Old style
  4564		MOVEI 1,DMCH
  4565		CALL NVTSSP		; Send new dm
  4566		RET
  4567	
  4568	NVTCO1:	MOVEI 1,200
  4569		CALL TCOB
  4570		RET
  4571	
  4572	; Perform dobe sequence called from ttdobe
  4573	
  4574	NVTDOB:	CALL CKNNVT		; New nvt?
  4575		 RET			; No. just return
  4576		MOVEI 1,TMKOPT		; Timing mark option
  4577		PUSHJ P,NVTNGT		; Go negotiate option
  4578		 JFCL			; Ignore failure
  4579		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 57

  4580	
  4581	; Check stpar argument and negotiate any needed options
  4582	
  4583	NVTPAR:	CAIL 2,NVTLO
  4584		CAIL 2,NLINES
  4585		 RET			; Return if not nvt
  4586		CALL CKNNVT		; New nvt?
  4587		 JRST [	PUSH P,1
  4588			XOR 1,TTFLGS(2)
  4589			TRNN 1,14
  4590			 JRST NVTPAX
  4591			MOVE 1,0(P)
  4592			TRNE 1,14	; Is new full?
  4593			 SKIPA 1,[204]	; No. send "you echo"
  4594			  MOVEI 1,203	; Yes. send "i echo"
  4595			CALL TCOB
  4596			JRST NVTPAX]
  4597		MOVE 3,1		; Copy new state
  4598		PUSH P,1		; Save
  4599		XOR 1,TTFLGS(2)		; Get difference
  4600		TRNN 1,14		; Change in echo?
  4601		 JRST NVTPA1		; No, try next
  4602		PUSH P,1		; Save difference
  4603		TRNN 3,14		; Negotiate on?
  4604		SKIPA 3,[NVTNGT]	; Yes
  4605		MOVEI 3,NVTNGF		; No
  4606		MOVEI 1,ECHOPT+WILOPT
  4607		CALL @3
  4608		 JRST [	MOVEI 1,14
  4609			IORM 1,-1(P)
  4610			JRST .+1]
  4611		POP P,1
  4612	NVTPA1:					; Other checks go here if any
  4613	NVTPAX:	POP P,1
  4614		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 58

  4615	
  4616	; Check sfmod argument and negotiate any options needed
  4617	
  4618	NVTMOD:	CAIL 2,NVTLO
  4619		CAIL 2,NLINES
  4620		 RET			; Return if not nvt
  4621		CALL CKNNVT		; New nvt?
  4622		 RET			; No. do nothing
  4623		MOVE 3,1		; Copy of argument
  4624		PUSH P,1		; Save it
  4625		XOR 1,TTFLGS(2)		; Get bit difference
  4626		PUSH P,1
  4627		TRNN 1,100		; Change in binary?
  4628		 JRST NVTMO1
  4629		MOVE 3,0(P)
  4630		TRNN 3,100
  4631		SKIPA 3,[NVTNGT]
  4632		MOVEI 3,NVTNGF
  4633		PUSH P,3
  4634		MOVEI 1,BINOPT
  4635		CALL @3
  4636		 JRST [	MOVEI 1,100
  4637			IORM 1,-1(P)
  4638			SUB P,BHC+1
  4639			JRST NVTMO1]
  4640		MOVEI 1,BINOPT+WILOPT
  4641		POP P,3
  4642		CALL @3
  4643		 JRST [	MOVEI 1,BINOPT
  4644			CALL NVTNGF
  4645			 JFCL
  4646			MOVEI 1,100
  4647			IORM 1,0(P)
  4648			JRST NVTMO1]
  4649	NVTMO1:	MOVE 3,0(P)		; GET BIT DIFFERENCE
  4650		MOVEI 1,(1B<RCTOPT+WILOPT>)
  4651		TDNE 1,NVTOPF(2)	; NO RCTE ON?
  4652		TRNN 3,77B23+3B25	; OR NO CHANGE IN WAKEUP SET
  4653		 JRST NVTMO2		; NO,, SKIP FOLLOWING
  4654		MOVSI 3,NVTRCS
  4655		IORM 3,TTNETW(2)	; NOTE CHANGE IN RCTE SETTINGS
  4656	NVTMO2:	POP P,1			; GET BACK DIFFERENCE
  4657		POP P,1			; AND ARGUMENT
  4658		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 59

  4659	
  4660	; Negotiate an option
  4661	
  4662	NVTNGT:	MOVE 3,[NVTXWL,,NVTXDO]
  4663		CALL NVTNGC
  4664		 AOS 0(P)
  4665		RET
  4666	
  4667	NVTNGF:	MOVE 3,[NVTXWN,,NVTXDN]
  4668	NVTNGC:	CAIL 1,MAXOPT
  4669		 RET
  4670		PUSH P,1
  4671		PUSH P,3
  4672		MOVE 3,BITS(1)
  4673		IORM 3,NVTOPF(2)	; Set option negotiation in progress bit
  4674		TRZE 1,WILOPT
  4675		MOVSS 0(P)
  4676		POP P,3
  4677		CALL 0(3)		; Say "do, wil, dont, wont"
  4678		MOVE 1,0(P)
  4679		ROT 1,-9		; Into top 9 bits
  4680		TLO 1,(2)		; Line number in 9-17
  4681		HRRI 1,NVTNTT		; Activation test
  4682		JSYS EDISMS
  4683		MOVSI 1,NEGTMO
  4684		ANDCAM 1,TTNETW(2)	; Cancel any time-out in progress
  4685		POP P,1
  4686		MOVS 3,BITS(1)
  4687		TDNN 3,NVTOPF(2)
  4688		 AOS 0(P)		; Skip if successful
  4689		RET
  4690	
  4691	NVTNTT:	LDB 3,[POINT 9,1,26]	; Get option number
  4692		MOVE 3,BITS(3)
  4693		ANDI 1,777		; Line number
  4694		SKIPL TTNETW(1)		; Satisfied if disconnected
  4695		TDNN 3,NVTOPF(1)
  4696		 JRST 1(4)		; Negotiation complete
  4697		JRST 0(4)
IMPDV.VDH;1                        22-MAY-75 10:30     Page 60

  4698	
  4699	; Check overdue negotiations
  4700	
  4701	NEGCHK:	MOVE 2,NVTPTR		; Pointer to nvts
  4702	NEGCKL:	SKIPGE TTNETW(2)	; Attached?
  4703		 JRST NEGCKE		; No, skip it
  4704		MOVSI 3,NEGTMO
  4705		HLLZ 1,NVTOPF(2)	; Get outstanding options
  4706		 JUMPE 1,[ANDCAM 3,TTNETW(2)	; None, cancel time-out if any
  4707			JRST NEGCKE]
  4708		XORB 3,TTNETW(2)	; Yes, count counter
  4709		TLNN 3,NEGTMO		; Count from 1 to 0?
  4710		 HRRZS NVTOPF(2)	; Yes, cancel outstanding option
  4711	NEGCKE:	AOBJN 2,NEGCKL
  4712		MOVE 1,TODCLK
  4713		ADDI 1,NEGTM0
  4714		MOVEM 1,NEGTIM
  4715		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 61

  4716	
  4717	; Move tty output to net buffers
  4718	
  4719	NETTCS:	MOVSI 3,NVTRCP		; RESET PENDING?
  4720		TDNE 3,TTNETW(2)
  4721		 CALL NVTRRR		; YES, TRY TO SEND
  4722	NETTC8:	SKIPGE TTNETW(2)	; Still connected?
  4723		 JRST TTCOBI		; No, just clear buffer
  4724		SETZ 4,			; Init char count
  4725		MOVEI 6,0(P)		; Use stack as local buffer
  4726		HRLI 6,1000		; Construct 8-bit byte ptr
  4727		LDB IMPUN,PTNETO	; Get unit index
  4728		MOVE 7,NETSTS(IMPUN)
  4729		TLNN 7,EOTF
  4730		TLNE 7,DEDF
  4731		 JRST TTCOBI		; Yes, don't send any more
  4732		PUSH P,2		; Preserve line number
  4733		LDB 1,PLIDX		; Get link index
  4734		PUSHJ P,PKCHK		; Check how many bits can be sent now
  4735		MOVE 7,2
  4736		POP P,2
  4737		JUMPLE 7,PKULCK		; If none, give up
  4738		CAILE 7,40		; But limit to 40 (10 wds on stack)
  4739		MOVEI 7,40
  4740		ADD P,BHC+10		; Reserve space on stack
  4741		MOVE 3,6		; Save byte ptr
  4742	NETTC2:	SOJL 7,NETTC4		; Count down limit
  4743		NOSKED
  4744		SKIPE TTECT(2)		; Chars from echo buffer?
  4745		JRST [	CALL NETTEO	; Yes, get one
  4746			JRST NETTC1]
  4747		SKIPE TTOCT(2)		; Chars from output buffer?
  4748		JRST [	CALL NETTOO	; Yes, get one
  4749			JRST NETTC1]
  4750		PUSH P,3		; Preserve ac3
  4751		CALL TTRLOB		; Buffers empty, release them
  4752		POP P,3
  4753		OKSKED
  4754	NETTC4:	JUMPE 4,[SUB P,BHC+10	; No chars to send, clear stack
  4755			JRST PKULCK]
  4756		MOVNI 1,^D8
  4757		IMUL 1,4		; Adjust allocation
  4758		ADDM 1,NETBAL(IMPUN)
  4759		LDB 1,PLIDX		; Get conn index
  4760		PUSH P,2
  4761		CALL PKMSG
  4762		POP P,2
  4763		SUB P,BHC+10		; Clear stack
  4764		JRST NETTCS		; See if any more
  4765	
  4766	NETTC1:	OKSKED
  4767		IDPB 1,6		; Put char on stack buffer
  4768		AOJA 4,NETTC2
IMPDV.VDH;1                        22-MAY-75 10:30     Page 62

  4769	
  4770	; Get chars for output from echo buffer
  4771	
  4772	NETTOO:	SKIPN 1,TTOOUT(2)
  4773		RET			; Stuff vanished, return 0
  4774		TDNN 1,WRPMSK
  4775		HRR 1,1-TTSIZ(1)
  4776		MOVEM 1,TTOOUT(2)
  4777		ILDB 1,TTOOUT(2)
  4778		SOS TTOCT(2)
  4779		RET
  4780	
  4781	; Get chars for output from echo buffer
  4782	
  4783	NETTEO:	SKIPN 1,TTEOUT(2)
  4784		RET			; Stuff vanished, return 0
  4785		TDNN 1,WRPMSK
  4786		HRR 1,1-TTSIZ(1)
  4787		MOVEM 1,TTEOUT(2)
  4788		ILDB 1,TTEOUT(2)
  4789		SOS TTECT(2)
  4790		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 63

  4791	
  4792	; Unpack message into tty buffers
  4793	; Impun/socket table index (unit)
  4794	; 1/	LT INDEX
  4795	
  4796	NVTUPI:	PUSH P,1		; Preserve ac1
  4797		IMSCLK(IMCNVI)		; Charge to imcnvi
  4798		PUSH P,[0]		; Count bytes unpacked
  4799	NVTUPL:	MOVE 1,-1(P)		; Get link table index
  4800		CALL UPBYT		; Get  byte
  4801		 JRST NVTUPD
  4802		AOS 0(P)		; Count bytes
  4803		LDB 2,PNVT		; Get line number
  4804		MOVE 1,3
  4805		LDB 3,NVTSTP		; Get the current command state of this
  4806		SETZ 4,
  4807		DPB 4,NVTSTP
  4808		CALL @NVTSTD(3)		; Dispatch on it
  4809		JRST NVTUPL
  4810	
  4811	NVTSTD:	NVTNRM			; Nothing deferred
  4812		NVTWIL			; Deferred will
  4813		NVTWNT			; Deferred wont
  4814		NVTDO			; Deferred do
  4815		NVTDNT			; Deferred dont
  4816		NVTIAC			; Deferred iac
  4817		NVTNRM			; Not used
  4818		NVTNRM			; Not used
  4819	
  4820	NVTNRM:	CAIL 1,200
  4821		 JRST NVTCTL		; Process possible nvt control character
  4822	NVTDCH:	LDB 3,TTYLMD
  4823		JUMPE 3,NVTUPB		; Binary, skip special checks
  4824		MOVSI 3,IMPTB2
  4825		TDNE 3,TTNETW(2)	; Was last ch cr?
  4826		 JRST [	ANDCAM 3,TTNETW(2)
  4827			CAIE 1,12	; Yes, flush following lf
  4828			 JUMPN 1,.+1	; Or null
  4829			RET]
  4830		CAIN 1,15
  4831		 IORM 3,TTNETW(2)
  4832	NVTUPB:	SETZ 6,			; No special flags
  4833		PUSH P,IMPUN
  4834		NOSKED			; Ttchi expects to be called nosked
  4835		CALL TTCHI		; Stuff it in tty buffer
  4836		OKSKED
  4837		POP P,IMPUN
  4838		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 64

  4839	
  4840	NVTUPD:	POP P,4			; Bytes unpacked
  4841		POP P,1			; Restore lt index
  4842		IMUL 4,[-8]
  4843		ADDB 4,NETBAL(IMPUN)
  4844		JUMPGE 4,NVTRAL		; Reallocate
  4845		LDB 2,LTHOST		; Get host
  4846		BUG(IMH,<NVT RECEIVED BYTES EXCEEDING ALLOCATION>,X)
  4847		SETZM NETBAL(IMPUN)
  4848		JRST NVTRAL
  4849	
  4850	; Telnet control codes received
  4851	; 1/ code
  4852	; 2/ line
  4853	
  4854	NVTCTL:	SKIPGE TTNETW(2)	; If no sockets attached,
  4855		 JRST NVTDCH			; Ignore char
  4856		PUSHJ P,CKNNVT		; New style nvt?
  4857		 JRST NVTCT0		; No, look for old style commands
  4858		CAIE 1,IACCH		; Yes, is iac
  4859		 JRST NVTDCH		; No, continue processing
  4860		JRST NVTCL4		; Yes. take care of it
  4861	
  4862	NVTCT0:	CAIN 1,202		; Nop
  4863		 RET
  4864		CAIN 1,200		; Sync char?
  4865		 JRST NVTCL1
  4866		CAIN 1,203		; Echo off?
  4867		 JRST NVTCL2
  4868		CAIN 1,204		; Echo on?
  4869		 JRST NVTCL3
  4870		JRST NVTDCH
  4871	
  4872	NVTCL1:	LDB 1,PTINTC
  4873		ADDI 1,1		; Sync counts 1, ins counts -1
  4874		DPB 1,PTINTC
  4875		RET
  4876	
  4877	NVTCL3:	TDZA 1,1		; Zero ac and skip
  4878	NVTCL2:	MOVEI 1,3
  4879		DPB 1,[POINT 2,TTFLGS(2),33] ; Set duplex mode full/half
  4880		RET
  4881	
  4882	; Process iac
  4883	
  4884	NVTCL4:	MOVEI 3,DFRIAC
  4885		DPB 3,NVTSTP
  4886		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 65

  4887	
  4888	; Process byte after iac
  4889	
  4890	NVTIAC:	CAIGE 1,SECH
  4891		 RET			; Not a valid command
  4892		MOVSI 3,NEWNVB
  4893		IORM 3,TTNETW(2)	; Mark this new protocol
  4894		SETZ 3,			; Next state if any
  4895		XCT NVTDTB-SECH(1)	; Dispatch on the character
  4896		 JRST NVTDCH		; Special function character
  4897		DPB 3,NVTSTP		; Next state
  4898		RET
  4899	
  4900	NVTDTB:	RET			; (360) end of subnegotiation
  4901		RET			; (361) nop -- ignore
  4902		JRST NVTCL1		; (362) new data mark
  4903		RET			; (363) break -- ignore
  4904		MOVEI 1,3		; (364) ip -- convert to ^c
  4905		MOVEI 1,"O"-100		; (365) ao -- convert to ^o
  4906		MOVEI 1,"T"-100		; (366) ayt -- convert to ^t
  4907		MOVEI 1,"A"-100		; (367) ec -- convert to ^a
  4908		MOVEI 1,"Q"-100		; (370) el -- convert to ^q
  4909		RET			; (371) ga -- ignore
  4910		RET			; (372) sb -- shouldn't get this
  4911		TROA 3,DFRWIL		; (373) defer will
  4912		TROA 3,DFRWNT		; (374) defer wont
  4913		TROA 3,DFRDO		; (375) defer do
  4914		TROA 3,DFRDNT		; (376) defer dont
  4915		JFCL			; (377) iac iac -- iac
IMPDV.VDH;1                        22-MAY-75 10:30     Page 66

  4916	
  4917	; Send special character
  4918	
  4919	NVTSSP:	PUSH P,1
  4920		MOVEI 1,2
  4921		PUSHJ P,NVTRSV		; Reserve space in buffer (nosked)
  4922		 JRST [	POP P,1
  4923			RET]
  4924		HRROI 1,IACCH		; SAME AS 377, BUT PREVENT ITS DOUBLING
  4925		CALL TCOB		; CALL TCOB TO GET CR-NULL IF NEEDED
  4926		POP P,1
  4927		CALL TCOBQ
  4928		OKSKED
  4929		RET
  4930	
  4931	; Reserve space in buffer for characters specified in 1
  4932	
  4933	NVTRSV:	NOSKED			; Make sure space doesn't disappear
  4934		LDB 3,TTOMAX
  4935		SUB 3,TTOCT(2)		; Space in output buffers
  4936		CAML 3,1
  4937		 JRST RSKP		; Enough room, return skip
  4938		OKSKED
  4939		MOVE 3,FORKX
  4940		CAMN 3,NCPFRK		; Is this the ncp fork?
  4941		 JRST NVTRV1		; Yes, attempt to send the buffer
  4942		PUSH P,1		; No. wait for space
  4943		MOVEI 1,TCOTST
  4944		HRL 1,2
  4945		JSYS EDISMS		; Wait for space
  4946		POP P,1
  4947		JRST NVTRSV
  4948	
  4949	NVTRV1:	LDB IMPUN,PTNETO	;@GET UNIT NUMBER
  4950		PUSH P,1
  4951		LDB 1,PLIDX		; Get lt index
  4952		HRRZ 3,IMPLT4(1)	; Get msg alloc
  4953		SKIPE 3
  4954		 MOVE 3,NETBAL(IMPUN)	; Get bit alloc if non-zero msg alloc
  4955		LSH 3,-3		; Convert to bytes
  4956		CAMGE 3,0(P)		; At least what we need?
  4957		 JRST [	POP P,1		; No. give up
  4958			RET]
  4959		CALL NETTC8		; Yes, send as much as possible
  4960		POP P,1
  4961		JRST NVTRSV		; And try again
IMPDV.VDH;1                        22-MAY-75 10:30     Page 67

  4962	
  4963	; Send wont (refuse)
  4964	
  4965	NVTRFU:	MOVEI 1,WNTCH
  4966	
  4967	; Send reply in 1 for option on stack
  4968	
  4969	NVTSRP:	PUSH P,1
  4970		MOVEI 1,3
  4971		CALL NVTRSV		; Reserve space for three characters
  4972		 JRST [	SUB P,BHC+2
  4973			RET]
  4974		HRROI 1,IACCH		; SAME AS 377 BUT PREVENT DOUBLING
  4975		PUSHJ P,TCOB		; USE TCOB TO GET CR-NULL IF NEEDED
  4976		POP P,1
  4977		PUSHJ P,TCOBQ
  4978		POP P,1
  4979		PUSHJ P,TCOBQ
  4980		OKSKED
  4981		RET
  4982	
  4983	; Send will
  4984	
  4985	NVTXWL:	PUSH P,1		; Save option
  4986	NVTSWL:	MOVEI 1,WILCH		; Enter here when option is on stack
  4987		JRST NVTSRP		; Send reply
  4988	
  4989	; Send no reply
  4990	
  4991	NVTSNR:	SUB P,BHC+1		; No reply necessary or possible
  4992		RET
  4993	
  4994	; Send wont
  4995	
  4996	NVTXWN:	PUSH P,1		; Save option
  4997	NVTSWN:	MOVEI 1,WNTCH		; Enter here when option already pushed
  4998		JRST NVTSRP
  4999	
  5000	; Send "do"
  5001	
  5002	NVTXDO:	PUSH P,1		; Save option
  5003	NVTSDO:	MOVEI 1,DOCH		; Enter here when option already pushed
  5004		JRST NVTSRP
  5005	
  5006	; Send "dont"
  5007	
  5008	NVTXDN:	PUSH P,1		; Save option
  5009	NVTSDN:	MOVEI 1,DNTCH		; Enter here when option already pushed
  5010		JRST NVTSRP
IMPDV.VDH;1                        22-MAY-75 10:30     Page 68

  5011	
  5012	; Process "do"
  5013	
  5014	NVTDO:	CAIL A,WILOPT
  5015		 JRST NVTDO1
  5016		MOVE 3,BITS+WILOPT(1)
  5017		TDNE 3,NVTOPF(2)
  5018		 JRST NVTWI2
  5019	NVTDO1:	PUSH P,1		; Remember the option
  5020		MOVSS 3			; Put bit in "options on" half
  5021		TDNE 3,NVTOPF(2)	; Is the option on?
  5022		 JRST NVTSNR		; Yes, send no reply
  5023		CAIGE 1,NVTLOP		; Do we know about this option
  5024		 CALL @NVTDOD(1)	; Yes. attempt execution
  5025		  JRST NVTRFU		; Can't do it -- refuse
  5026		IORM 3,NVTOPF(2)	; Set option on
  5027		JRST NVTSWL		; And send "will"
  5028	
  5029	NVTDOD:	R			; Binary xmit -- refuse for now
  5030		NVTECN			; Turn echos on
  5031		R			; Reconnect -- refuse for now
  5032		NVTSGA			; Suppress ga -- wonderful news
  5033		R			; Message size -- refuse
  5034		R			; Status -- refuse
  5035		NVTDTM			; Timing mark -- try to do it
  5036		NVTDRC			; Remote controlled trans & echo
  5037	NVTLOP=.-NVTDOD
  5038	
  5039	; Action routines for "do"
  5040	; Turn echoes on
  5041	
  5042	NVTECN:	MOVEI 1,3B33
  5043		ANDCAM 1,TTFLGS(2)	; Set to full duplex
  5044		JRST RSKP
  5045	
  5046	; Set suppress ga bit
  5047	
  5048	NVTSGA:	MOVSI 1,NVTGAB
  5049		IORM 1,TTNETW(2)
  5050		JRST RSKP
  5051	
  5052	; Do timing mark protocol
  5053	
  5054	NVTDTM:	JRST RSKP
  5055	
  5056	; TURN ON RCTE
  5057	
  5058	NVTDRC:	RET			; TEMPORARILY DISABLE RCTE
  5059		MOVSI 1,NVTRCS+NVTRCP
  5060		IORM 1,TTNETW(2)
  5061		JRST RSKP		; We are happy to do RCTE
  5062	
IMPDV.VDH;1                        22-MAY-75 10:30     Page 69

  5063	
  5064	; Process "dont"
  5065	
  5066	NVTDNT:	CAIL A,WILOPT
  5067		 JRST NVTDN1
  5068		MOVE 3,BITS+WILOPT(1)
  5069		TDNE 3,NVTOPF(2)
  5070		 JRST NVTWN2
  5071	NVTDN1:	PUSH P,1
  5072		MOVSS 3			; Put bit in "option on" half
  5073		TDNN 3,NVTOPF(2)	; Option already off?
  5074		 JRST NVTSNR		; Yes. send no reply
  5075		CAIGE 1,NVTLOP		; Do we know about this option?
  5076		 CALL @NVTDND(1)	; Yes. perform action
  5077		ANDCAM 3,NVTOPF(2)	; Clear the option
  5078		JRST NVTSWN		; And send "won't"
  5079	
  5080	NVTDND:	R			; Dilemma -- he wants off, but we can't
  5081		NVTECF			; Echo off
  5082		R			; Option not on, no reply
  5083		NVTAGA			; He wont suppress ga -- nuts
  5084		R			; Message size option
  5085		R			; Status option
  5086		R			; Timing mark -- huh?
  5087		R			; Turn off RCTE
  5088	
  5089	; "dont" action routines
  5090	; Turn echos off
  5091	
  5092	NVTECF:	MOVEI 1,3B32
  5093		IORM 1,TTFLGS(2)
  5094		RET
  5095	
  5096	; Turn off suppress ga bit
  5097	
  5098	NVTAGA:	MOVSI 1,NVTGAB
  5099		ANDCAM 1,TTNETW(2)
  5100		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 70

  5101	
  5102	; Process "will"
  5103	
  5104	NVTWIL:	CAIL A,WILOPT		; Only wilopt options
  5105		 JRST NVTWI1		; Others cannot be outstanding
  5106		MOVE 3,BITS(1)		; Get the bit for the option
  5107		TDNN 3,NVTOPF(2)	; Is this option outstanding?
  5108		 JRST NVTWI1		; No.
  5109	NVTWI2:	MOVS 1,3
  5110		IORM 1,NVTOPF(2)	; Set will bit
  5111		ANDCAM 3,NVTOPF(2)	; And clear outstanding bit
  5112		RET
  5113	
  5114	NVTWI1:	PUSH P,1		; save the option
  5115		MOVSS 3			; Put bit in "optons on" half
  5116		TDNE 3,NVTOPF(2)	; Is option already on?
  5117		 JRST NVTSNR		; Yes. send no reply
  5118		CAIGE 1,NVTLOP
  5119		 CALL @NVTWID(1)	; Call action routine
  5120		  JRST NVTSDN		; Unimplemented option or can't comply
  5121		IORM 3,NVTOPF(2)	; Done. set option "on"
  5122		JRST NVTSDO		; And send "do"
  5123	
  5124	NVTWID:	R			; Will binary -- dont
  5125		R			; Will echo -- dont
  5126		R			; Reconnect -- dont
  5127		RSKP			; Suppress ga -- do, do, do , do!
  5128		R			; Message size -- dont
  5129		R			; Status -- dont
  5130		R			; Timing mark -- huh?
  5131		R			; What's he trying to do?
  5132	
  5133	; Process "wont"
  5134	
  5135	NVTWNT:	CAIL 1,MAXOPT
  5136		 JRST NVTWN1		; Option not handled
  5137		MOVE 3,BITS(1)		; Get bit for option
  5138		TDNN 3,NVTOPF(2)	; Is this option outstanding
  5139		 JRST NVTWN1		; No. request
  5140	NVTWN2:	HLR 3,3			; Yes. neg acknowledge
  5141		ANDCAM 3,NVTOPF(2)	; Clear both outstand and will flags
  5142		RET
  5143	
  5144	NVTWN1:	PUSH P,1
  5145		MOVSS 3			; Put bit in "options on" half
  5146		TDNN 3,NVTOPF(2)	; Option already off?
  5147		 JRST NVTSNR		; Yes. send no rply
  5148		ANDCAM 3,NVTOPF(2)	; Strangely enough, the user end
  5149		JRST NVTSDN		; Never has any options to turn off
IMPDV.VDH;1                        22-MAY-75 10:30     Page 71

  5150	
  5151	; Re-allocate if needed to bring allocation up to operating level
  5152	; Impun/socket table index (unit)
  5153	
  5154	NTTRC3:				; Known to ncp by this tag
  5155	NVTRAL:	CALL LCKNCP		; Prevent ncp changes
  5156		MOVSI 1,DEDF
  5157		TLO 1,EOTF
  5158		TDNE 1,NETSTS(IMPUN)
  5159		 JRST ULKNCP		; Connection dead or done
  5160		LDB 2,PNVT		; Pick up line number
  5161		LDB 3,TTIMAX		; Capacity of line
  5162		SUB 3,TTICT(2)		; Gives space now in line buffer
  5163		JUMPE 3,[LDB 1,PTINTC	; If full, check for ins received
  5164			TRNE 1,4	; Count is sync-ins, 3 bit field
  5165			MOVEI 3,1	; Ins requested, allocate 1 byte
  5166			JRST .+1]
  5167		LSH 3,3			; Imuli 3,8 (byte size)
  5168		SUB 3,NETBAL(IMPUN)	; Desired all less all now out
  5169		MOVE 4,3
  5170		LDB 1,PLIDX		; Get conn index
  5171		HRRZ 3,IMPLT4(1)	; Current msg alloc
  5172		MOVN 3,3
  5173		ADDI 3,^D6		; Raise it to 6
  5174		LDB 1,TTIMAX		; Max space in buffer
  5175		ASH 1,-1		; One-half
  5176		CAMGE 4,1		; Re-allocate if more than half a buffer
  5177		CAIL 3,4		; Or if more than 3 msgs
  5178		SKIPA
  5179		 JRST ULKNCP
  5180		LDB 1,PFHST
  5181		LDB 2,PLINK
  5182		CALL IMPALL
  5183		JRST ULKNCP
  5184	
IMPDV.VDH;1                        22-MAY-75 10:30     Page 72

  5185	
  5186	; Lookup host-link
  5187	; 1/ b20-27, host; b28-35, link; b18, direction (1=send)
  5188	
  5189	LNKLUK:	PUSH P,3
  5190		MOVSI 3,(1B1)		; Bit says no deleted entry found
  5191	LNKL6:	PUSH P,4
  5192		PUSH P,1		; Save arg
  5193		IMUL 1,[5654123]	; Compute hash
  5194		LSH 1,-^D9
  5195		IDIVI 1,IMPNLK		; Remainder gives initial index
  5196		POP P,1
  5197		PUSH P,2
  5198		HRLI 2,-IMPNLK(2)	; Setup ptr for remainder of table
  5199	LNKL2:	HRRZ 4,IMPLT1(2)
  5200		CAIN 4,0(1)		; Desired entry?
  5201		JRST [	AOS -3(P)	; Yes, return good
  5202			MOVEI 1,0(2)
  5203			JRST LNKL1]	; With table index in 1
  5204		TRNE 4,1B19		; Special? i.e. free or deleted?
  5205		JRST [	TLNE 3,(1B2)	; Yes, called by rehash or pi level?
  5206			JRST LNKL4	; Yes
  5207			TRNE 4,1B18	; This a free entry?
  5208			JRST LNKL3	; Yes, search done, not found
  5209			TLZE 3,(1B1)	; This first deleted entry encountered?
  5210			HRRI 3,0(2)	; Yes, save its position
  5211			JRST .+1]
  5212	LNKL5:	AOBJN 2,LNKL2
  5213		JUMPL 3,[TLNN 3,(1B1)	; Table full, was delete seen?
  5214			JRST LNKL3	; Yes, use it
  5215			JRST IMPB01]	; No, lossage
  5216		MOVN 2,0(P)		; Wraparound ptr, setup count
  5217		MOVSI 2,0(2)		; To look up to initial index
  5218		TLO 3,(1B0)		; Remember wraparound
  5219		JRST LNKL2
  5220	
  5221	LNKL3:	TLNN 3,(1B1)		; Not found, delete encountered?
  5222		MOVEI 2,0(3)		; Yes, use that for new entry
  5223	LNKL1:	SUB P,BHC+1		; Flush temp
  5224		POP P,4
  5225		POP P,3
  5226		RET
  5227	
  5228	LNKL4:	TLNE 3,(1B3)		; Pi level call?
  5229		 JRST LNKL5		; Yes. ignore deleted/free entries
  5230		MOVEI 4,1B19		; Make deleted
  5231		MOVEM 4,IMPLT1(2)
  5232		JRST LNKL5
IMPDV.VDH;1                        22-MAY-75 10:30     Page 73

  5233	
  5234	; Special entry used only by rehash routine
  5235	; It assumes item will be found, and it sets any 'free' entries
  5236	; Encountered to be 'deleted'
  5237	
  5238	IMPHFL:	PUSH P,3
  5239		MOVSI 3,(1B2)		; Controls action on special entries
  5240		JRST LNKL6
  5241	
  5242	; Special entry from imodn2 to find entry to store retransmit buffer
  5243	; Searches entire table for entry regardless of deletes and frees
  5244	
  5245	IMPPIL:	PUSH P,3
  5246		MOVSI 3,(1B2+1B3)
  5247		JRST LNKL6
  5248	
  5249	; Routine to garbage collect hash table.
  5250	; Sets all deleted entries to free then calls lookup
  5251	; routine to mark all needed entris deleted to enable all entries
  5252	; to be found.
  5253	; Lookup routine will change any 'free' entries passed over during
  5254	; a search to 'deleted'.  thus all 'deleted' entries not currently
  5255	; Necessary will be flushed.
  5256	
  5257	IMPGC:	IMSCLK(IMCGC)		; Charge time to imcgc
  5258		ILOCK
  5259		SETZM LNKNDL		; Clear delete count
  5260		MOVSI 7,-IMPNLK		; Prepare to scan link table
  5261		MOVEI 1,1B19
  5262		MOVEI 2,1B19!1B18
  5263	IMPGC1:	TDNE 1,IMPLT1(7)	; Free or deleted?
  5264		 MOVEM 2,IMPLT1(7)	; Yes, set it to free
  5265		AOBJN 7,IMPGC1
  5266		MOVSI 7,-IMPNLK		; Prepare to scan again
  5267	IMPGC2:	HRRZ 1,IMPLT1(7)	; For every entry
  5268		TRNE 1,1B19		; That is not
  5269		 JRST IMPGC3		; Deleted or free
  5270		CALL IMPHFL		; Marked necessary deleted entries
  5271		 BUG(CHK,<IMPGC-IMPOSSIBLE FAILURE OF IMPHFL>)
  5272	IMPGC3:	AOBJN 7,IMPGC2
  5273		IUNLK
  5274		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 74

  5275	
  5276	; Unpack byte from current msg for a connection
  5277	; 1/ connection index
  5278	; Returns byte in 3
  5279	
  5280	UPBYT:	ILOCK
  5281		HLRZ 2,IMPLT4(1)	; Get current buffer
  5282		JUMPN 2,UPBYT1
  5283		CALL UPBGNB		; No buffer, try to get one
  5284		RET			; Failed, return noskip
  5285	UPBYT1:	ILDB 3,1(2)		; Get byte, byte ptr in bfr header
  5286		SOSG 2(2)		; Count down bytes in bfr
  5287		CALL UPBRB		; Now empty, release bfr
  5288		IUNLK
  5289		AOS 0(P)
  5290		RET
  5291	
  5292	; Unpack message
  5293	; 1/	LT INDEX
  5294	; 3/	STORE BYTE POINTER
  5295	; 4/	MAX BYTE COUNT
  5296	
  5297	UPMSG:	ILOCK
  5298		PUSH P,3		; Save store pointer
  5299		HLRZ 2,IMPLT4(1)	; Get current buffer
  5300		JUMPN 2,.+3
  5301		CALL UPBGNB		; None, try to get one
  5302		JRST UPMSG5		; Failed, return bad
  5303		MOVE 3,2(2)		; Get buffer count
  5304		CAML 3,4
  5305		 MOVE 3,4		; Use minimum count
  5306		SUB 4,3			; Update count
  5307		PUSH P,4		; Save updated count
  5308		MOVN 4,3
  5309		ADDM 4,2(2)		; Update buffer count
  5310		PUSH P,1		; Save lt index
  5311		MOVE 1,1(2)		; Get buffer pointer
  5312		EXCH 2,-2(P)		; Save buffer location, get tgt
  5313		MOVEI 4,0		; Transfer monitor to monitor
  5314		PUSHJ P,BYTBLT		; Transfer the bytes
  5315		EXCH 2,-2(P)		; Save updated tgt, get buffer loc
  5316		MOVEM 1,1(2)		; Store update buffer pointer
  5317		POP P,1			; Restore lt index
  5318	UPMSG4:	POP P,4
  5319		SKIPG 2(2)		; Imp bfr now exhausted?
  5320		CALL UPBRB		; Yes, release it
  5321	UPMSG2:	AOS -1(P)
  5322		IUNLK
  5323	UPMSG5:	POP P,3
  5324		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 75

  5325	
  5326	; Try to get next input bfr
  5327	
  5328	UPBGNB:	HLRZ 2,IMPLT3(1)	; Check queue of in bfrs
  5329		JUMPE 2,UPBG1		; None
  5330		PUSH P,4
  5331		HLLZ 3,0(2)		; Unqueue this buffer
  5332		JUMPN 3,.+3
  5333		MOVEI 4,IMPLT3(1)
  5334		HRRM 4,IMPLT2(1)	; Make input buffer list empty
  5335		HLLM 3,IMPLT3(1)	; Output buffer pointer
  5336		HRLM 2,IMPLT4(1)	; Save current bfr adr
  5337		PUSH P,1(2)		; Save header in case of error
  5338		PUSH P,2(2)
  5339		HRRZ 4,0(2)		; Number words in buffer
  5340		CAIGE 4,3		; At least overhead words present?
  5341		JRST UPBGNE		; No, msg too short
  5342		LDB 3,[POINT 16,2(2),27] ; Byte count for this buffer
  5343		JUMPE 3,UPBGNE		; 0 is illegal, but in case...
  5344		LDB 4,[POINT 8,2(2),11]	; Get byte size
  5345		MOVEM 3,2(2)		; Leave byte count in full word
  5346		LDB 3,IMPLBS		; Byte size for connection
  5347		CAME 3,4		; Same?
  5348		JRST UPBGNE		; No
  5349		LSH 3,^D24		; Shift to s field of byte ptr
  5350		HRRI 3,2(2)
  5351		MOVEM 3,1(2)
  5352		MOVEI 3,^D36		; Compute max bytes which could be
  5353		IDIV 3,4		; As words*(bytes/wd)
  5354		HRRZ 4,0(2)		; Number of words
  5355		IMULI 3,-3(4)		; But not counting overhead
  5356		CAMGE 3,2(2)		; Actual greater than max?
  5357		JRST UPBGNE		; Yes, lossage
  5358		SUB P,BHC+2
  5359		POP P,4
  5360		AOS 0(P)
  5361		RET
  5362	
  5363	UPBGNE:	CALL UPBRB
  5364		PUSH P,2
  5365		MOVEI 2,-3(P)		; Pntr to 1 before saved hdr on stack
  5366		HRLI 2,9
  5367		BUG(IML,<Message has bad size or count>,X)
  5368		POP P,2
  5369		SUB P,BHC+2
  5370		POP P,4
  5371		JRST UPBGNB
  5372	
  5373	UPBGNX:	SUB P,BHC+2
  5374		POP P,4
  5375		JRST UPBGNB
IMPDV.VDH;1                        22-MAY-75 10:30     Page 76

  5376	
  5377	; No input ready, return activation test
  5378	
  5379	UPBG1:	MOVSI 1,0(1)		; Connection index
  5380		HRRI 1,UPBGT		; Wait for input or closed conn
  5381		IUNLK
  5382		RET
  5383	
  5384	; Activation test
  5385	
  5386	UPBGT:	MOVSI 3,777777
  5387		MOVSI 2,(LTDF)		; Check done flag
  5388		TDNN 2,IMPLT2(1)	; If set, or
  5389		TDNE 3,IMPLT3(1)		; If bfr(s) appeared
  5390		JRST 1(4)		; Wakeup
  5391		JRST 0(4)
  5392	
  5393	; Release input buffer
  5394	
  5395	UPBRB:	HLRZ 2,IMPLT4(1)	; Get current buffer
  5396		HRRZS IMPLT4(1)		; Clear field
  5397		PUSH P,1
  5398		CALL RLNTBF		; Release bfr back to pool
  5399		POP P,1
  5400		SOSL IMPLT4(1)		; Count msgs processed
  5401		RET
  5402		BUG(CHK,<UPBRB: Received excessive messages>)
  5403		SETZM IMPLT4(1)
  5404		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 77

  5405	
  5406	; Check connection for output possible
  5407	; Called on receipt of rfnm, allocation, etc.
  5408	; 1/ connection index
  5409	; Do output if rfnm clear, msg alloc non-0, and output exists
  5410	
  5411	IMPCKO:	ILOCK (JRST IMPROS)	; If can't check now, set request flag
  5412	IMPKO1:	MOVSI 3,(RFNMC!ILCKB)
  5413		TDNE 3,IMPLT2(1)	; Rfnm out or connection locked?
  5414		JRST IMPKO2		; Yes, will try again later
  5415		HLRZ 2,IMPLT3(1)
  5416		JUMPN 2,[
  5417			CALL IMPQO1	; If completed bfrs on output queue,
  5418			JRST IMPKO1]	; Give one to imp to send
  5419		HLRZ 2,IMPLT4(1)	; See if partial bfr exists
  5420		JUMPN 2,[
  5421			CALL PKQOB	; Complete it and send
  5422			JRST IMPKO1]
  5423		LDB 2,LTLINK		; Nothing to do here
  5424		JUMPE 2,[CALL IMPLL0
  5425			JRST IMPKO2]	; Flush conn if ctl link
  5426		MOVSI 2,(RARRF)
  5427		TDNN 2,IMPLT2(1)	; Ras requested?
  5428		 JRST IMPKO4		; No
  5429		PUSH P,1		; Yes
  5430		ANDCAM 2,IMPLT2(1)
  5431		HLRZ IMPUN,IMPLT1(1)
  5432		SETZM NETBAL(IMPUN)
  5433		HLLZS IMPLT4(1)
  5434		IUNLK
  5435		LDB 2,LTLINK
  5436		LDB 1,LTHOST
  5437		CALL IMPRAS
  5438		POP P,1
  5439		JRST IMPKO3
  5440	
  5441	IMPKO4:	IUNLK
  5442	IMPKO3:	HLRZ IMPUN,IMPLT1(1)	; Pick up pseudo-unit
  5443		MOVSI 2,(LTDF)
  5444		TDNN 2,IMPLT2(1)	; Done flag set?
  5445		 RET			; No. done
  5446		ANDCAM 2,IMPLT2(1)	; Only see it once
  5447		PUSH P,6		; Preserve ac6
  5448		CALL RCFRFN		; Yes, notify ncp
  5449		POP P,6
  5450		RET
  5451	
  5452	IMPKO2:	IUNLK			; Always returns with lock clear
  5453		RET
  5454	
  5455	IMPROS:	AOS IMPNOS
  5456		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 78

  5457	
  5458	; Pack byte for output
  5459	; 1/	CONNECTION INDEX
  5460	; 3/	BYTE
  5461	
  5462	PKBYT:	ILOCK
  5463		HLRZ 2,IMPLT4(1)
  5464		JUMPN 2,PKBY2
  5465		CALL PKBY1		; No current buffer, get a new one
  5466		 JRST PKBY5		; No buffers
  5467	PKBY2:	IDPB 3,1(2)
  5468		MOVSI 3,(ILCKB)
  5469		ANDCAM 3,IMPLT2(1)	; Clear lock
  5470		SOSG 2(2)		; Or if bfr now full
  5471		CALL PKQOB		; Put bfr on output queue
  5472		CALL IMPKO1		; Send if possible (does iunlk)
  5473		AOS 0(P)
  5474		RET
  5475	
  5476	PKBY5:	IUNLK
  5477		CALL IMPB03
  5478		JRST PKBYT
IMPDV.VDH;1                        22-MAY-75 10:30     Page 79

  5479	
  5480	; Check maximum bytes that can be sent due to msg alloc restriction
  5481	; and partial msg already constructed.  Leave connection locked.
  5482	
  5483	PKCHK:	ILOCK
  5484	PKCHK0:	PUSH P,3
  5485		SETZ 2,
  5486		MOVSI 3,(ILCKB)
  5487		TDNE 3,IMPLT2(1)	; There should only be one fork trying
  5488		 JRST PKCHK2		; at a time since files are interlocked
  5489					; by fillck, nvt transmission is done by
  5490					; Ncp fork and control links have no
  5491					; flow control.
  5492		IORM 3,IMPLT2(1)	; Lock connection so state can't change
  5493		LDB 3,IMPLBS		; Get byte size
  5494		HRRZ 2,IMPLT4(1)	; Get msg allocation
  5495		JUMPG 2,[
  5496			MOVE 2,MAXBPM	; If msg alloc, then this is limit
  5497			JRST PKCHK1]
  5498		HLRZ 2,IMPLT4(1)	; Else get current buffer
  5499		JUMPE 2,PKCHK1		; If none, limit is zero
  5500		MOVE 2,2(2)		; Get bytes left
  5501		IMUL 2,3		; Times byte size is bits
  5502	PKCHK1:	CAMLE 2,NETBAL(IMPUN)	; More than bit allocation
  5503		 MOVE 2,NETBAL(IMPUN)	; Yes. limit is that
  5504		IDIV 2,3		; Convert to bytes
  5505	PKCHK2:	POP P,3
  5506		IUNLK
  5507		RET
  5508	
  5509	; Unlock connection
  5510	
  5511	PKULCK:	MOVSI 2,(ILCKB)
  5512		ANDCAM 2,IMPLT2(1)
  5513		MOVE 2,IMPLT3(1)	; Any buffers to be sent
  5514		IOR 2,IMPLT4(1)
  5515		TLNE 2,-1
  5516		 JRST IMPCKO		; Yes
  5517		RET			; No
IMPDV.VDH;1                        22-MAY-75 10:30     Page 80

  5518	
  5519	; Pack msg
  5520	; 1/ connection index
  5521	; 3/ byte ptr
  5522	; 4/ byte count
  5523	
  5524	PKMSG:	ILOCK
  5525	PKMSG0:	HLRZ 2,IMPLT4(1)	; Get current bfr
  5526		JUMPN 2,PKMS2
  5527		PUSH P,4		; Wasn't one, get a new one
  5528	PKMS4:	CALL PKBY1
  5529		 JRST PKMS5
  5530		POP P,4
  5531		CAMLE 4,2(2)		; New buffer big enough?
  5532		 JRST PKMSL		; Message too long
  5533	PKMS3:	PUSH P,1		; Save connection index
  5534		MOVE 1,3		; Source pointer
  5535		MOVE 3,4		; Count to 3
  5536		MOVNS 4
  5537		ADDM 4,2(2)		; Update buffer count
  5538		PUSH P,2		; Save buffer loc
  5539		MOVE 2,1(2)		; Target to 2
  5540		MOVEI 4,0		; Mode is monitor to monitor
  5541		PUSHJ P,BYTBLT		; Transfer bytes
  5542		EXCH 2,0(P)		; Get buffer location, save updated ptr
  5543		POP P,1(2)		; Store updated pointer
  5544		MOVEM 3,4		; Updated count
  5545		EXCH 1,0(P)		; Save update source and get lt index
  5546	PKMSD:	MOVSI 3,(ILCKB)
  5547		ANDCAM 3,IMPLT2(1)
  5548		SKIPG 2(2)		; Bfr now full?
  5549		CALL PKQOB		; Yes
  5550		CALL IMPKO1		; Send if possible (does iunlk)
  5551		POP P,3
  5552		RET
  5553	
  5554	PKMSL:	BUG(CHK,<PKMSG - MSG TOO LARGE>)
  5555		MOVE 4,2(2)
  5556		JRST PKMS3
  5557	
  5558	PKMS2:	CAMG 4,2(2)		; Enough room in current bfr?
  5559		JRST PKMS3		; Yes
  5560		PUSH P,4
  5561		PUSH P,3
  5562		CALL PKQOB		; No, finish current bfr
  5563		POP P,3
  5564		JRST PKMS4		; Start a new one
  5565	
  5566	PKMS5:	IUNLK
  5567		POP P,4
  5568		CALL  IMPB03
  5569		JRST PKMSG
IMPDV.VDH;1                        22-MAY-75 10:30     Page 81

  5570	
  5571	; Assign and init a bfr for output use
  5572	
  5573	PKBY1:	PUSH P,3
  5574		HRRZ 3,IMPLT4(1)	; Get msg allocation
  5575		JUMPG 3,PKBY4		; Ok
  5576		BUG(CHK,<PKBY1: NO MSG ALLOCATION>)
  5577		AOS IMPLT4(1)
  5578	PKBY4:	MOVEI 2,^D36		; Compute number of bits per output wd
  5579		LDB 4,IMPLBS		; As (36/bs)*bs
  5580		IDIVI 2,0(4)
  5581		IMULI 2,0(4)
  5582		MOVEI 4,0(2)
  5583		MOVE 2,IMPLT1(1)	; Get proper size for output msg
  5584		TRNE 2,377		; For link 0?
  5585		SKIPA 2,MAXBPM		; No, usual regular max
  5586		MOVEI 2,^D<120*8>	; For ctrl link, max is 120 bytes
  5587		IDIVI 2,0(4)		; Wds = bits / (bits/wd)
  5588		ADDI 2,3		; Plus overhead
  5589		PUSH P,1
  5590		CALL ASNTBF		; Assign bfr
  5591		JRST [	POP P,1
  5592			POP P,3
  5593			RET]
  5594		MOVEI 2,0(1)
  5595		POP P,1
  5596		HRLM 2,IMPLT4(1)	; Set as current buffer
  5597		SOS IMPLT4(1)		; Consume allocate
  5598		MOVEI 3,^D36		; Compute number of bytes
  5599		LDB 4,IMPLBS		; Which will fit in buffer.
  5600		IDIVI 3,0(4)		; I.e. words*(36/bytesize)
  5601		HRRZ 4,0(2)		; Number of words in bfr
  5602		IMULI 3,-3(4)		; Less header overhead
  5603		MOVEM 3,2(2)		; Setup counter
  5604		HRLM 3,0(2)		; Remember original count
  5605		LDB 3,IMPLBS		; Byte size
  5606		LSH 3,^D24		; Construct byte ptr
  5607		HRRI 3,2(2)
  5608		MOVEM 3,1(2)
  5609		POP P,3
  5610		AOS 0(P)
  5611		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 82

  5612	
  5613	; Put output buffer on queue
  5614	
  5615	PKQOB:	HLRZ 2,IMPLT4(1)	; Get current buffer
  5616		HRRZS IMPLT4(1)		; Clear ptr
  5617		HRRZ 4,0(2)		; Shorten buffer to proper length
  5618		ADDI 4,-1(2)		; Compute adr of lst word in orig bfr
  5619		HRRZ 3,1(2)		; Last word used for data
  5620		SUB 4,3
  5621		CAIL 4,4		; Worth releasing extra storage?
  5622		JRST [	MOVEM 4,1(3)	; Yes, create new block of extra words
  5623			MOVN 4,4
  5624			ADDM 4,0(2)	; Adjust count for orig block
  5625			PUSH P,2
  5626			MOVEI 2,1(3)
  5627			PUSH P,1
  5628			CALL RLNTBF	; Release new block
  5629			POP P,1
  5630			POP P,2
  5631			JRST .+1]
  5632		HLRZ 3,0(2)		; Get original byte count
  5633		SUB 3,2(2)		; Minus current count gives bytes in bfr
  5634		LSH 3,^D8		; Shift to proper position for header
  5635		MOVEM 3,2(2)
  5636		LDB 3,IMPLBS		; Byte size
  5637		DPB 3,[POINT 8,2(2),11]	; Put in header
  5638		SETZM 1(2)		; Clear imp header
  5639		MOVE 3,IMPLT1(1)	; Get host-link
  5640		DPB 3,[POINT 16,1(2),23] ; Put in imp header
  5641		MOVE 3,IMPLT2(1)
  5642		MOVSI 4,(IMPHIP)
  5643		TLNE 3,(HIPFLG)	; If high priority connection,
  5644		 IORM 4,1(2)		; Set priority bit in leader
  5645		HRRZS 0(2)		; Put bfr on queue
  5646		HRLM 2,0(3)
  5647		HRRM 2,IMPLT2(1)
  5648					; Fall into output check
  5649	
  5650	; Put bfr on imp output queue if no rfnm outstanding
  5651	
  5652	IMPQOB:	MOVSI 3,(RFNMC!ILCKB)
  5653		TDNE 3,IMPLT2(1)	; Rfnm now out?
  5654		RET			; Yes, don't send
  5655		HLRZ 2,IMPLT3(1)
  5656		JUMPE 2,R		; Return if no bfrs to go
  5657	IMPQO1:	MOVSI 3,(RFNMC)
  5658		IORM 3,IMPLT2(1)	; Set rfnm flag
  5659		HLLZ 3,0(2)		; Get bfr off queue
  5660		JUMPN 3,.+3
  5661		MOVEI 4,IMPLT3(1)
  5662		HRRM 4,IMPLT2(1)
  5663		HLLM 3,IMPLT3(1)
  5664		CALL IMPQOA		; Actually put it on output queue
IMPDV.VDH;1                        22-MAY-75 10:30     Page 82.1

  5665		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 83

  5666	
  5667	; Entry here for queueing host-imp messages
  5668	
  5669	IMPQOA:	SKIPN IMPORD		; is output on?
  5670		 JRST RLNTBF		; No. don't queue it up
  5671		PUSH P,1		; Save ac1
  5672		CALL IMPLKB		; Lock bfr for pi service routine
  5673	IFDEF DBGBUF,<
  5674		MOVE 1,2
  5675		CALL DBGOM>
  5676		MOVSI 1,(IMPHIP)
  5677		PIOFF
  5678		HRRZS 0(2)		; Put bfr on imp out queue
  5679		TDNN 1, 1(2)		; Is priority bit set in message
  5680		 JRST IMPQOL		; No, lo priority queue
  5681		HRLM 2,@IMPHBI
  5682		HRRZM 2,IMPHBI
  5683		JRST IMPQOC
  5684	
  5685	IMPQOL:	HRLM 2,@IMPOBI
  5686		HRRZM 2,IMPOBI
  5687	IMPQOC:	PION
  5688		SKIPN IMPOB		; Output now in progress?
  5689		JSP 4,IMPXOU		; No, start it
  5690		POP P,1
  5691		RET
  5692	
  5693	; Lock imp bfr. must lock beginning and end in case crosses page bndry
  5694	
  5695	IMPLKB:	PUSH P,1		; Save 1 and 2
  5696		PUSH P,2
  5697		MOVEI 1,0(2)
  5698		CALL MLKMA		; Lock beginning
  5699		MOVE 1,0(P)
  5700		ADD 1,0(1)		; Compute end
  5701		MOVEI 1,-1(1)
  5702		CALL MLKMA		; Lock end
  5703		POP P,2
  5704		POP P,1
  5705		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 84

  5706	
  5707	; Clear imp queues
  5708	
  5709	IMPCLQ:	NOSKED			; Prevent confusion
  5710		SKIPLE 1,IMPOB		; Anything here?
  5711		 CALL IMPCQ5		; Unlock and release
  5712		SETZB 2,IMPOB
  5713		EXCH 2,IMPHBO
  5714		MOVEI 1,IMPHBO
  5715		MOVEM 1,IMPHBI
  5716		CALL IMPCQ2		; Dequeue everything
  5717		SETZ 2,
  5718		EXCH 2,IMPOBO
  5719		MOVEI 1,IMPOBO
  5720		MOVEM 1,IMPOBI
  5721		CALL IMPCQ2
  5722		SKIPE 1,IMIB		; Anything here?
  5723		 CALL IMPCQ5		; Yes, clear it
  5724		SETZB 2,IMIB
  5725		EXCH 2,IMPIBO		; Get things on input queue
  5726		MOVEI 1,IMPIBO
  5727		MOVEM 1,IMPIBI
  5728		CALL IMPCQ3		; Clear 1 locked things
  5729		SETZB 2,IMPIBO
  5730		EXCH 2,IMPFRI		; Clear input free list
  5731		HRLZS 2
  5732		CALL IMPCQ2		; Clear 2 locked things
  5733		SETZB 2,IMPNFI
  5734		EXCH 2,IMINFB		; Get release queue
  5735		HRLZS 2
  5736		CALL IMPCQ4		; Release 0 locked things
  5737		OKSKED
  5738		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 85

  5739	
  5740	; Unlock buffers on a queue twice
  5741	
  5742	IMPCQ2:	MOVEI 3,2
  5743		JRST IMPCQ0
  5744	
  5745	; Unlock buffers on a queue 0 or 1 times
  5746	
  5747	IMPCQ4:	TDZA 3,3		; Zero times
  5748	IMPCQ3:	MOVEI 3,1		; Once
  5749	IMPCQ0:	JUMPE 2,R		; Common code. 0 -- no buffers left
  5750		HLRZ 1,2
  5751		HLLZ 2,0(1)
  5752		CALL IMPCQ1		; Unlock and release
  5753		JRST IMPCQ0		; Continue with next in chain
  5754	
  5755	; Release individual buffer
  5756	
  5757	IMPCQ5:	MOVEI 3,2		; Entry for twice locked buffer
  5758	IMPCQ1:	PUSH P,3		; Common routine
  5759		PUSH P,2		; Transparent to 2
  5760		PUSH P,1
  5761		CALL @[	R
  5762			MULKMP
  5763			IMULKB](3)	; Call appropriate routine
  5764		POP P,2
  5765		CALL RLNTBF		; And release
  5766		POP P,2
  5767		POP P,3
  5768		RET
  5769	
  5770	; Unlock imp buffer at pi level
  5771	
  5772	IMULKB:	PUSH P,1
  5773		CALL MULKMP		; Unlock first adr in bfr
  5774		POP P,1
  5775		ADD 1,0(1)		; Compute end of bfr
  5776		MOVEI 1,-1(1)
  5777		CALL MULKMP		; Unlock end of bfr in case page boundary
  5778		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 86

  5779	
  5780	; Start input
  5781	; called from process level when buffers made available and input is off
  5782	; and from endin processor if more buffers are available
  5783	
  5784	IMISRT:	CONSZ IMP,1B19		; Power on
  5785	IFNDEF VDH,<	CONSZ IMP,1B22>		; And imp up?
  5786	IFDEF VDH,<SKIPGE RTSTAT>	; FOR VDH--AND RTP LINE UP
  5787		 RET			; No do nothing
  5788		SOSL IMPNFI
  5789		SKIPN 1,IMPFRI
  5790		 BUG(HLT,<NO IMP INPUT BUFFERS>)
  5791		HLRZ 2,0(1)		; Get next free
  5792		MOVEM 2,IMPFRI
  5793		MOVEM 1,IMIB
  5794		MOVN 2,0(1)		; Get count
  5795		HRLI 1,2(2)		; Blki ptr
  5796		MOVEM 1,IMPINP
  5797	IFNDEF VDH,<	MOVEI 1,IMIN0
  5798		MOVEM 1,IMIDSP
  5799		CONSZ IMP,1B21		; If error flop is set
  5800		 CALL IMIERR		; Be sure it gets noticed
  5801		CONO IMP,IMPION+1B19>	; Clear error and start input
  5802		POPJ P,
  5803	
  5804	IFNDEF VDH,<	;USE THIS PI SERVICE FOR LOCAL HOST
  5805	
  5806	; Pi service for input
  5807	; Dispatched at impsv to one of the following:
  5808	; Imin1: first word of msg
  5809	; Imis1: second word of msg
  5810	; Imi36:  36-bit msg in
  5811	; Imi32: 32-bit msg in
  5812	; Imin00: flush rest of msg in
  5813	; Impein - handles 'end input' signal
  5814	
  5815	IMIN0:	BLKI IMP,IMPINP		; Read in first word
  5816		BUG(HLT,<IMPIN-BFR NOT SETUP>)
  5817		MOVEM 1,IMIDSP
  5818		MOVEI 1,IMIS1
  5819		EXCH 1,IMIDSP
  5820		UNBRK IMP
IMPDV.VDH;1                        22-MAY-75 10:30     Page 87

  5821	
  5822	; Second word in
  5823	
  5824	IMIS1:	BLKI IMP,IMPINP
  5825		BUG(HLT,<IMPIN-BFR NOT SETUP>)
  5826		MOVEM 1,IMIDSP		; Save an ac
  5827		MOVSI 1,-^D8		; Init 36-32 bit state word
  5828		MOVEM 1,IMIS32
  5829		MOVE 1,IMIB		; Get buffer location
  5830		MOVE 1,1(1)		; Header
  5831		AND 1,[FRMIMP + 17B7 + 377B23]
  5832		CAMLE 1,[<LLINK>B23]
  5833		 JRST IMIS1A		; Special link/irreg msg do in 36 bit
  5834		MOVE 1,IMIB
  5835		LDB 1,[POINT 8,2(1),11]
  5836		CAIE 1,^D36		; 36-bit?
  5837		SKIPA 1,[IMI32]		; No, assume 32 (or 8)
  5838	IMIS1A:	MOVEI 1,IMI36		; Yes
  5839		EXCH 1,IMIDSP		; Setup dispatch for rest of msg
  5840		UNBRK IMP
  5841	
  5842	; 36-bit input
  5843	
  5844	IMI36:	BLKI IMP,IMPINP
  5845		JRST .+2		; Overflowed buffer
  5846		UNBRK IMP
  5847		MOVEM 4,IMPIAC+4
  5848		MOVEI 4,IMPIAC
  5849		BLT 4,IMPIAC+3
  5850	IMIMTL:	MOVEM P,IMINP
  5851		MOVE P,PIMSTK
  5852		BUG(IMP,<MSG TOO LONG>,X)
  5853		MOVE P,IMINP
  5854		MOVEI 1,IMIN00
  5855		MOVEM 1,IMIDSP
  5856	IMPUB:	MOVSI 4,IMPIAC		; Restore ac's
  5857		BLT 4,4
  5858		UNBRK IMP
  5859	
  5860	IMIN00:	DATAI IMP,IMIS32
  5861		UNBRK IMP
  5862	
  5863	PIMSTK:	IOWD NIMSTK,IMSTK
IMPDV.VDH;1                        22-MAY-75 10:30     Page 88

  5864	
  5865	; 32-bit input
  5866	
  5867	IMI32:	MOVEM 4,IMPIAC+4
  5868		MOVEI 4,IMPIAC
  5869		BLT 4,IMPIAC+3		; Save ac's
  5870		DATAI IMP,1
  5871		SKIPL 4,IMPINP		; Get ptr to input buffer
  5872		JRST IMIMTL		; Bfr full, msg too long
  5873		MOVE 3,IMIS32		; Get unpacking state word
  5874		AOBJP 4,IMIMTL		; Seq bfr ptr
  5875		TRNN 3,777777		; Is this the zero'th state?
  5876		 AOBJP 4,IMIMTL		; Yes point to partial word
  5877		LSHC 1,@IMISHT(3)	; Align input bytes with destination
  5878		DPB 1,IMIPT1(3)		; High order byte for n-1st word
  5879		MOVEM 2,0(4)		; Low order byte for nth word
  5880		AOBJN 3,IMI32A		; Step state
  5881		MOVSI 3,-^D8		; Reinit state word
  5882	IMI32A:	MOVEM 3,IMIS32		; Save state
  5883		MOVEM 4,IMPINP		; Save bfr ptr
  5884		JRST IMPUB
  5885	
  5886	; Tables for 36-32 bit conversion, indexed by state word
  5887	
  5888	IMISHT:	XX==4
  5889		REPEAT ^D8,<Z -XX
  5890			XX=XX+4>
  5891	
  5892	IMIPT1:	XX==^D32
  5893		REPEAT ^D8,<POINT XX,-1(4),31
  5894			XX=XX-4>
IMPDV.VDH;1                        22-MAY-75 10:30     Page 89

  5895	
  5896	; Here when end msg recd from imp
  5897	
  5898	IMPEIN:	MOVEM 4,IMPIAC+4
  5899		MOVEI 4,IMPIAC
  5900		BLT 4,IMPIAC+3		; Save ac's
  5901		MOVEM P,IMINP
  5902		MOVE P,PIMSTK		; Setup local stack
  5903		CONSZ IMP,1B21		; Error ff set?
  5904		 PUSHJ P,IMIERR		; Take care of it
  5905		CONO IMP,IMPGEB!IMPIOF
  5906		SKIPG 1,IMIB		; Bfr address
  5907		JRST IMPEI2		; Wasn't one
  5908		AOSG IMPFLS		; Flushing msgs?
  5909		 JRST IMPEI3		; Yes, return to free list
  5910		HRRZ 2,IMIDSP
  5911		CAIE 2,IMIN0		; No msg started? or
  5912		CAIN 2,IMIN00		; Were flushing msg?
  5913		JRST IMPEI2		; Yes, skip usual finish up stuff
  5914		MOVE 2,1(1)		; Get header
  5915		LDB 3,[POINT 4,2,7]	; And msg type
  5916		AND 2,[FRMIMP + 377B23]
  5917		CAIN 3,6		; Dead host status
  5918		 JRST IMPEI4		; Yes. has no message id
  5919		CAIE 3,2		; Going down?
  5920		CAMG 2,[<LLINK>B23]
  5921		JUMPN 3,IMPEI4		; Irregular msg not special link
  5922		HRRZS 0(1)		; Clear fwd ptr of this bfr
  5923		HRLM 1,@IMPIBI		; Add bfr to in queue
  5924		HRRZM 1,IMPIBI
  5925		ADD 1,0(1)		; Compute tail of bfr
  5926		MOVEI 1,-1(1)
  5927		CALL MULKMP		; Unlock it
  5928		MOVE 2,IMIB
  5929		HRRZ 4,0(2)		; Get original end address, i.e.
  5930		ADDI 4,-1(2)		; Count + start adr
  5931		HRRZ 3,IMPINP		; Last address with data
  5932		SUB 4,3
  5933		CAIL 4,20		; At least 20 unused words?
  5934		JRST [	MOVEM 4,1(3)	; Yes, make extra words into another blk
  5935			MOVN 4,4	; Reduce word count of original block
  5936			ADDM 4,0(2)
  5937			MOVEI 2,1(3)
  5938			EXCH 2,IMINFB	; Put on list to be released
  5939			HRLM 2,@IMINFB
  5940			JRST .+1]
  5941		AOS IMPFLG		; Request job 0 service
  5942	IMPEI2:	SETZM IMIB
  5943		SKIPLE IMPNFI		; More buffers available?
  5944		 PUSHJ P,IMISRT		; Yes, start new input
  5945	IMPUB1:	MOVE P,IMINP
  5946		JRST IMPUB
IMPDV.VDH;1                        22-MAY-75 10:30     Page 90

  5947	
  5948	IMPEI4:	MOVE 2,1(1)		; Get header
  5949		CALL IMP8XQ		; Put on irreg msg q
  5950		AOS IMPFLG
  5951	IMPEI3:	EXCH 1,IMPFRI
  5952		HRLM 1,@IMPFRI
  5953		AOS IMPNFI
  5954		JRST IMPEI2
  5955	
IMPDV.VDH;1                        22-MAY-75 10:30     Page 91

  5956	
  5957	; Pi service for output
  5958	; Dispatched from impsv to one of the following:
  5959	; Imo36: doing 36 bit output
  5960	; Imo32: doing 32 bit output (second word only)
  5961	; Imo321: doing 32 bit output (rest of msg)
  5962	; Impdn2: final phase of end-of-msg cleanup
  5963	
  5964	IMODN0:	MOVEM 4,IMPIAC+4
  5965		MOVEI 4,IMPIAC
  5966		BLT 4,IMPIAC+3		; Save ac's
  5967	IMODN1:	MOVEM P,IMINP
  5968		MOVE P,PIMSTK
  5969		CONO IMP,IMPEOB		; Sent last word, now send end bit
  5970		MOVE 1,IMPOB		; Get buffer location
  5971		MOVE 2,1(1)		; Get header
  5972		AND 2,[FRMIMP+377B23]
  5973		CAMLE 2,[<LLINK>B23]	; Regular link?
  5974		 JRST IMODN4		; No. just flush the message
  5975		LDB 1,[POINT 16,1(1),23]; Extract host-link
  5976		IORI 1,1B18
  5977		CALL IMPPIL		; Get lt index for this
  5978		 JRST IMODN6		; Not there
  5979		MOVSI 2,(RFNMC)		; Be sure rfnm has not returned already
  5980		TDNN 2,IMPLT2(1)
  5981		 JRST IMODN4		; Well what do you know!
  5982		HRRZ 2,IMPLT3(1)	; Be sure nothing is there
  5983		JUMPN 2,IMODN6		; Anomalous, but what can you do?
  5984		MOVE 2,IMPOB
  5985		HRRM 2,IMPLT3(1)
  5986		JRST IMODN5
  5987	
  5988	IMODN6:	BUG(NTE,<Can't find LT entry for output message>)
  5989	IMODN4:	MOVE 1,IMPOB
  5990		EXCH 1,IMINFB		; Put bfr back on free list
  5991		HRLM 1,@IMINFB
  5992		AOS IMPFLG		; Request job 0 service
  5993	IMODN5:	MOVE 1,IMPOB
  5994		CALL IMULKB		; Unlock bfr
  5995		MOVEI 1,IMODN2		; Setup dispatch for final step
  5996		MOVEM 1,IMODSP
  5997		JRST IMPUB1
  5998	
  5999	IMOIRG:	CONO IMP,IMPEOB
  6000		MOVEM 1,IMODSP
  6001		MOVEI 1,IMODN2
  6002		EXCH 1,IMODSP
  6003		UNBRK(IMP)
  6004	
  6005	IMODN2:	MOVEM 4,IMPIAC+4
  6006		MOVEI 4,IMPIAC
  6007		BLT 4,IMPIAC+3		; Save ac's
  6008		JSP 4,IMPIOU		; Start next msg if any
IMPDV.VDH;1                        22-MAY-75 10:30     Page 91.1

  6009		JRST IMPUB
IMPDV.VDH;1                        22-MAY-75 10:30     Page 92

  6010	
  6011	; Routine to start msg going out. called at pi level, and at
  6012	; Main level if no output in progress
  6013	
  6014	IMPXOU:	PIOFF
  6015		SKIPN IMPOB		; ANY OUTPUT IN PROGRESS?
  6016		 JRST IMPXO1		; NO
  6017		PION			; YES, TURN PI BACK ON
  6018		JRST (4)		; AND RETURN
  6019	
  6020	IMPXO1:	HRROS IMPOB		; MARK OUTPUT IN PROGRESS
  6021		PION			; NO IT'S OK TO TURN PI BACK ON
  6022	IMPIOU:	SKIPLE NOPCNT		; Any nop's to send?
  6023		 JRST IOUNOP		; Yes, go send them
  6024		HLRZ 1,IMPHBO		; Hi priority msg waiting?
  6025		JUMPE 1,IMPIOL		; No, check lo priority
  6026		HLLZ 2,0(1)		; Get buffer
  6027		JUMPN 2,.+3
  6028		MOVEI 3,IMPHBO
  6029		MOVEM 3,IMPHBI
  6030		MOVEM 2,IMPHBO
  6031		JRST IMPIOC
  6032	
  6033	IMPIOL:	HLRZ 1,IMPOBO		; Msg waiting to go out?
  6034		JUMPE 1,[SKIPE 2,HSTGDM
  6035			 JRST IOUIRG	; Send the host going down msg
  6036			CONO IMP,IMPSTO	; No, turn of imp pi req
  6037			SETZM IMPOB
  6038			JRST 0(4)]
  6039		HLLZ 2,0(1)		; Get bfr
  6040		JUMPN 2,.+3
  6041		MOVEI 3,IMPOBO
  6042		MOVEM 3,IMPOBI
  6043		MOVEM 2,IMPOBO
  6044	IMPIOC:	MOVEM 1,IMPOB
  6045		MOVN 2,0(1)		; Count of data words
  6046		HRLI 1,1(2)		; Construct blko ptr
  6047		MOVEM 1,IMPOUP
  6048		MOVE 2,1(1)		; Get header
  6049		AND 2,[FRMIMP + 377B23]
  6050		CAMLE 2,[LLINK*1B23]	; Special message?
  6051		 SKIPA 2,[^D36]		; Yes, assume 36-bit mode
  6052		LDB 2,[POINT 8,2(1),11]	; Byte size
  6053		MOVEI 1,IMO36
  6054		CAIE 2,^D36		; 36-bit connection?
  6055		MOVEI 1,IMO32		; No, transmit in 32-bit
  6056		MOVEM 1,IMODSP		; Setup dispatch
  6057		BLKO IMP,IMPOUP		; Send first word (always 36-bit)
  6058		JFCL
  6059		JRST 0(4)
  6060	
  6061	IOUNOP:	SOS NOPCNT
  6062		MOVE 2,[BYTE (8)4,0,0,0]
IMPDV.VDH;1                        22-MAY-75 10:30     Page 92.1

  6063	IOUIRG:	HRROS IMPOB		; Make non-zero so checks work
  6064		MOVEI 1,IMOIRG
  6065		MOVEM 1,IMODSP
  6066		DATAO IMP,2
  6067		JRST (4)
IMPDV.VDH;1                        22-MAY-75 10:30     Page 93

  6068	
  6069	; 36-bit output
  6070	
  6071	IMO36:	SKIPL IMPOUP		; Data left?
  6072		JRST IMODN0		; No
  6073		BLKO IMP,IMPOUP
  6074		JFCL
  6075		UNBRK IMP
  6076	
  6077	; 32-bit output (second word)
  6078	
  6079	IMO32:	BLKO IMP,IMPOUP		; Send second word (extended hdr)
  6080		JFCL
  6081		MOVEM 1,IMODSP		; Save an ac
  6082		MOVSI 1,-^D8		; Init 36-32 bit translation state word
  6083		MOVEM 1,IMOS32
  6084		MOVEI 1,IMO321		; Setup dispatch for rest of msg
  6085		EXCH 1,IMODSP
  6086		UNBRK IMP
  6087	
  6088	; 32-bit output (rest of msg)
  6089	
  6090	IMO321:	MOVEM 4,IMPIAC+4
  6091		MOVEI 4,IMPIAC
  6092		BLT 4,IMPIAC+3		; Save ac's
  6093		SKIPL 4,IMPOUP		; Data left?
  6094		JRST IMODN1		; No
  6095		MOVE 3,IMOS32		; Get state word
  6096		AOBJP 4,.+2		; Inc bfr ptr
  6097		MOVE 2,1(4)		; Get n+1th word
  6098		MOVE 1,0(4)		; Get nth word
  6099		LSH 1,-4		; Align high-order byte
  6100		LSHC 1,@IMOSHT(3)	; Shift bytes into output word
  6101		DATAO IMP,1
  6102		AOBJN 3,IMO32A		; Step state
  6103		AOBJN 4,.+1		; Extra inc of bfr each cycle
  6104		MOVSI 3,-^D8		; Reinit state word
  6105	IMO32A:	MOVEM 3,IMOS32		; Save state word
  6106		MOVEM 4,IMPOUP		; Save bfr ptr
  6107		JRST IMPUB
  6108	
  6109	; Table for 32-36 bit conversion, indexed by state word
  6110	
  6111	IMOSHT:	XX==4
  6112		REPEAT ^D8,<Z XX
  6113			XX=XX+4>
  6114	>	;END OF IFNDEF VDH FOR PI SERVICE
  6115	
IMPDV.VDH;1                        22-MAY-75 10:30     Page 94

  6116	
  6117	; CATCH AN ERROR OR LINE DROP
  6118	
  6119	IMIERR:	PUSH P,1
  6120		SETOM IMPRDL		; Be sure this flap gets noticed
  6121		MOVNI 1,2
  6122		MOVEM 1,IMPFLS
  6123		MOVNM 1,NOPCNT		; Send some nops
  6124	IFNDEF VDH,<	CONO IMP,1B19>		; Clear error flop
  6125		POP P,1
  6126		POPJ P,
  6127	
  6128	
  6129	; Various impbug's from above
  6130	
  6131	IMPB01:	BUG(IMP,<IMPLT FULL>,X)
  6132		JRST LNKL1
  6133	
  6134	IMPB03:	PUSH P,1
  6135		BUG(IMP,<ASNTBF FAILED>,X)
  6136		MOVEI 1,^D5000
  6137		DISMS			; Wait for 5 sec, then try again
  6138		POP P,1
  6139		RET
  6140	
  6141	IMPB06:	IUNLK
  6142		MOVE 2,1
  6143		CALL IMP8X1
  6144		BUG(IMH,<RECD EXCESS ALL>,X)
  6145		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 95

  6146	
  6147	; Bug or untreated net error
  6148	
  6149	BGRIML:	PUSH P,1
  6150		PUSH P,2
  6151		MOVE 1,2
  6152		SETZ 2,
  6153		JRST BGRIM0
  6154	
  6155	IMPBG0:
  6156	BGRIMH:	PUSH P,1
  6157		PUSH P,2
  6158		SETZ 1,			; No header
  6159		JRST BGRIM0
  6160	
  6161	BGRIMP:	PUSH P,1
  6162		PUSH P,2
  6163		SETZB 1,2
  6164	BGRIM0:	
  6165	
  6166	IFDEF DBGBUF,<			;CONFLICTS WITH VDH SCHEDULER SIDE CODE
  6167		EXCH 1,-2(P)
  6168	IFN SUMEX,<SKIPN INSKED>	;!! MAH @ SUMEX 3/75 !! DON'T CALL SWAPPABLE
  6169					;CODE FROM SCHED LEVEL
  6170		CALL DBGBG1		; Store bug info
  6171		EXCH 1,-2(P)>
  6172	
  6173		AOS IMPBGC		; Count bugs
  6174		SKIPE BUGIMP
  6175		 JRST BGRIM1
  6176		MOVEM 2,IMPBGH		; Save host/link
  6177		HLRZM 1,BADHMS
  6178		MOVE 2,1(1)		; First word ofheader
  6179		MOVEM 2,BADHDR
  6180		MOVE 2,2(1)
  6181		MOVEM 2,BADHDR+1
  6182		HRRZ 2,-2(P)		; Pc of the bug
  6183		MOVEM 2,BUGIMP
  6184	BGRIM1:	POP P,2
  6185		POP P,1
  6186		AOS JB0FLG		; Get job 0 started
  6187		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 96

  6188	
  6189	; Imp and ncp status check
  6190	
  6191	IMPSTT:	AOSE IMPRDL		; Was error flop noticed set?
  6192	IFDEF VDH,<	SKIPGE RTSTAT>		;OR VDH LINE DOWN
  6193	IFNDEF VDH,<	CONSZ IMP,1B22>		; Or is ready line off?
  6194		 JRST IMPSTA		; Yes, mark down
  6195		SKIPGE IMPRDT		; Was it down?
  6196		 JRST IMPSTB		; No, continue
  6197		SETOM IMPRDT		; Yes, reset flag
  6198		GTAD
  6199		MOVEM 1,IMPUPT		; Record time back up
  6200		JRST IMPSTB		; Continue
  6201	
  6202	; Imp is or was down.  record time thereof
  6203	
  6204	IMPSTA:	SKIPN IMPRDY
  6205		 JRST IMPSTB		; Don't record imp down if ncp is off
  6206		SKIPL 1,IMPRDT		; Was it down?
  6207		 JRST IMPSTC		; Yes, check how long
  6208		MOVE 1,TODCLK
  6209		MOVEM 1,IMPRDT		; No, record when in went off
  6210		GTAD
  6211		MOVEM 1,IMPDNT
  6212		JRST IMPSTB
  6213	
  6214	IMPSTC:
  6215	IFNDEF VDH,<	ADDI 1,^D10000>
  6216	IFDEF VDH,<ADDI 1,DWNTIM+RTIME*<K+1>> ;GIVE THE VDH MORE TIME TO COME BACK
  6217		CAMG 1,TODCLK		; Down for more than 10 sec?
  6218		 SETOM IMPDRQ		; Yes, declare imp down & recycle ncp
  6219		JRST IMPSTB
IMPDV.VDH;1                        22-MAY-75 10:30     Page 97

  6220	
  6221	; Bring state of ncp into agreement with state of imp and neton/impdrq
  6222	
  6223	IMPSTB:	SKIPLE 1,IMPRDY		; Down cycle in progress?
  6224		 JRST IMPNO1		; Yes. complete it.
  6225		JUMPL 1,IMPSTU		; No. jump if we think imp is up
  6226		SKIPE NETON		; Ncp is shut off.  do we want it off?
  6227		SKIPLE NETTCH		; No. but if state change unreported,
  6228		 RET			;  then wait. do nothing if all agrees.
  6229		JRST IMPRSS		; Else bring ncp back up.
  6230	
  6231	IMPSTU:	SKIPLE NOPCNT		; ARE ANY NOPS NEEDED
  6232		 JSP 4,IMPXOU		; YES, BE SURE OUTPUT IS GOING
  6233		SKIPN IMPDRQ		; We think it's up, want it down
  6234		SKIPN NETON
  6235		 JRST IMPNOF		; Yes, take it down
  6236		SETZM HSTGDM		; Else it's up. be sure to cancel
  6237		JRST RSKP		;  host going down msg and skip
  6238	
  6239	; Shut down ncp
  6240	
  6241	IMPNOF:	SKIPLE NETTCH
  6242		 JRST RSKP		; But not until state change reported
  6243	IMPNF1:	MOVEI 1,^D30000		; Begin down sequence
  6244		ADD 1,TODCLK
  6245		MOVEM 1,IMPRDY		; When to give up and turn ncp off.
  6246		CALL NETDWN		; Start clear of ncp
  6247		CALL CLRHRT		; Clear host ready table
  6248		SETZM IMPCCH		; Send rst's to everyone
  6249		SETZM IMPTIM		; Now.
  6250		AOS NETTCH
  6251		AOS JB0FLG
  6252		JRST IMPSTT
  6253	
  6254	; Down sequence in progress
  6255	
  6256	IMPNO1:
  6257	IFDEF VDH,<	SKIPL RTSTAT>		; IF RTP LINE DOWN
  6258	IFNDEF VDH,<	CONSO IMP,1B22>		; If imp is dead
  6259		CAMG 1,TODCLK		; or time has run out?
  6260		 JRST IMPNF3		; Yes. just pull the plug.
  6261		SKIPG NETTCH		; Else if change unreported
  6262		SKIPL IMPCCH		;  or rst's not all sent
  6263		 JRST RSKP		;  then wait.
  6264		SETZM IMPORD		; Shut off output
  6265		SKIPN IMPOBO		; Check if both output queues are empty.
  6266		SKIPE IMPHBO
  6267		 JRST RSKP		; If not, then wait.
  6268		SKIPLE IMPOB		; If last message not completely sent
  6269		 JRST RSKP		;  then wait.
  6270		SETZM HSTGDM		; Now stop sending host going down.
  6271		SKIPE IMPOB		; Are all messages sent?
  6272		 JRST RSKP		; No. wait.
IMPDV.VDH;1                        22-MAY-75 10:30     Page 97.1

  6273	IMPNF3:	SETZM IMPRDY		; Now say totally down
  6274	IFDEF VDH,<
  6275		SETZM	VDHANS		;SILENCE INPUT
  6276		SETOM RTSTAT 		;AND KILL RTP LINE
  6277		CONO IMP,IMPRES>	;KILL IMP TOO
  6278	IFNDEF VDH,<	CONO IMP,IMPSTO!IMPIOF!IMPOOF!1B20>
  6279					; Stop output, in&out off, drop rdy
  6280		AOS NETTCH		; Report final state change
  6281		AOS JB0FLG
  6282		MOVEI 2,NVTLO		; Finish clean up
  6283	IMPNO2:	SKIPGE TTFORK(2)	; Nvt in use
  6284		SKIPL TTNETW(2)
  6285		 CALL TTCOBI		; Yes, flush output
  6286		CAIGE 2,NLINES-1	; Check all net nvt lines
  6287		 AOJA 2,IMPNO2
  6288		MOVSI 1,-IMPNLK
  6289		CALL IMPCLL		; Clear all entries from link table
  6290		AOBJN 1,.-1
  6291		CALL IMPCLQ		; Clear queues
  6292		RET			; Not up - nonskip return
IMPDV.VDH;1                        22-MAY-75 10:30     Page 98

  6293	
  6294	; Initialization
  6295	
  6296	IMPINI:	MOVEI 1,IMPIBO		; Init buffer lists
  6297		MOVEM 1,IMPIBI
  6298		MOVEI 1,IMPOBO
  6299		MOVEM 1,IMPOBI
  6300		MOVEI 1,IMPHBO
  6301		MOVEM 1,IMPHBI
  6302		MOVSI 2,-NSQ
  6303		MOVEI 1,SIQIBO(2)
  6304		MOVEM 1,SIQIBI(2)
  6305		SETOM SQJOB(2)
  6306		AOBJN 2,.-3
  6307		SETOM SQLCK
  6308		MOVEI 2,1B18+1B19	; Free entry for implt1
  6309		MOVSI 1,-IMPNLK
  6310		MOVEM 2,IMPLT1(1)	; Make all links unused
  6311		AOBJN 1,.-1
  6312		MOVSI 1,-NNVTLN		; Count through nvt lines
  6313		SETOM TTNETX(1)		; Init all net lines to free
  6314		AOBJN 1,.-1
  6315	IFDEF VDH,<
  6316		SETZM	VDHANS		;PREVENT INPUT
  6317		SETOM RTSTAT		;SAY LINE OFF
  6318		CONO	IMP,IMPRES	;TURN OFF IMP
  6319		MOVEI	1,IPCTRL
  6320		MOVEM	1,IMIDSP	;SET UP DISPATCHS
  6321		MOVEI	1,IPCRSH	;FOR  IN,END, AND OUT
  6322		MOVEM	1,IPENDV
  6323		MOVEI	1,OPIDLE
  6324		MOVEM	1,IMODSP
  6325		SETZM	RTPCNT		;SET HELLO/I-HEARD-YOU COUNTER
  6326		MOVEI	1,K		;AND WE MUST GET K I-HEARD-YOU'S
  6327		MOVEM	1,HERDCT	;BEFORE DECLARING LINE UP
  6328		SETZM	RVRCNT		;ZERO STATISTICS COOUNTERS
  6329		MOVE	1,[RVRCNT,,RVRCNT+1]
  6330		BLT	1,RERCNT
  6331	>
  6332		IUNLK			;LOWER QUEUEING AND FALL INTO IMPRSN
  6333	IMPRSN:
  6334	IFDEF VDH,<
  6335		SETZM	ISFTMP		;ZERO POINTERS,BUFFERS AND OTHER STUFF
  6336		MOVE	1,[ISFTMP,,ISFTMP+1]
  6337		BLT	1,HERDCT-1	;STOP AT END OF LAST BUFFER
  6338	>
  6339		SETZM IMPNCL		; Clear irreg msg q variables
  6340		SETZM IMP8XI
  6341		SETZM IMP8XO
  6342		SETZM IMP8XC
  6343	;[EDIT] VECTORS ARE HANDLED ABOVE FOR VDH
  6344	IFNDEF VDH,<	MOVEI 1,IMIN00		; Setup pi dispatches
  6345		MOVEM 1,IMIDSP
IMPDV.VDH;1                        22-MAY-75 10:30     Page 98.1

  6346		MOVEI 1,IMODN2
  6347		MOVEM 1,IMODSP>
  6348		MOVEI 1,^D120000	; Start timers
  6349		ADD 1,TODCLK		; In two minutes
  6350		MOVEM 1,NETTIM		; Set alarm clocks to infinity
  6351		MOVEM 1,RFNTIM
  6352		SETZM IMPTIM
  6353		SETZM IGDTIM		; Clear time of last imp-going-down msg
  6354		SETZM HSTGDM		; Cancel any residual host going down
  6355		SETZM IMPCCH		; Cause send of rst to all hosts
  6356	CLRHRT:	SETZM IMPHRT		; Clear ready table
  6357		MOVE 1,[XWD IMPHRT,IMPHRT+1]
  6358		BLT 1,IMPHRT+IMPLBT-1
  6359		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 99

  6360	
  6361	; Bring up ncp
  6362	
  6363	IMPRSS:	CONSZ IMP,1B19		; Power on
  6364	IFDEF VDH,<SKIPGE RTSTAT>	; FOR VDH, AND LINE UP
  6365	IFNDEF VDH,<	CONSZ IMP,1B22>		; And ready line on
  6366		 RET			; No, stop here
  6367		CALL IMPRSN		; Reset variables
  6368	IFNDEF VDH,<	CONO IMP,1B19>	; Set host ready line, clear imp error
  6369		SETZM IMPRDL		; And notices of b21
  6370		SETZM IMPDRQ		; Forget any intervening down requests
  6371		MOVNI 1,2
  6372		MOVEM 1,IMPFLS		; Init flush count
  6373		MOVEI 1,3
  6374		MOVEM 1,NOPCNT
  6375	IFNDEF VDH,<	MOVEI 1,^D1000
  6376		DISMS>			; Allow time for ready line to settle
  6377		AOS NETTCH		; Cause change in state to be noted
  6378		AOS JB0FLG
  6379		GTAD			; Yes
  6380		MOVEM 1,NCPUPT		; Save time whe it came up
  6381	;[EDIT] WE DONT NEED THIS FOR VDH
  6382	IFNDEF VDH,<	DATAI IMP,1		; Helps to clear interface
  6383		CONO IMP,IMPSTO+IMPGEB
  6384		CONO IMP,IMPOON>		; Give output pi asmt
  6385		SKIPLE IMPNFI		; If input bfrs available,
  6386		 CALL IMISRT		; Start input
  6387		SETOM IMPRDY
  6388		SETOM IMPORD		; Allow output
  6389		MOVE 1,NLHOST		; Local host
  6390		CALL IMPRRP		; Send ourselves an rrp
  6391		RET
IMPDV.VDH;1                        22-MAY-75 10:30     Page 100

  6392	
  6393	; Take network down
  6394	; Accepts in
  6395	;	1	; Reason for going down (a la 1822)
  6396	;	2	; Time when back up (TENEX standard)
  6397	
  6398	IMPHLT:	SKIPN NETON		; IS IT ON?
  6399		 RET			; NO. DO NOTHING
  6400		PUSH P,1
  6401		GTAD			; GET NOW
  6402		CAMG 2,1		; IS SHUTDOWN LATER THAN NOW?
  6403		 JRST [	MOVEI 1,177776
  6404			JRST IMPHL1]	; TIME BACK UP NOT KNOWN
  6405		ADD 1,[6,,0]
  6406		CAMG 1,2		; MORE THAN 6 DAYS AWAY?
  6407		 JRST [	MOVEI 1,177777
  6408			JRST IMPHL1]
  6409		MOVSI 4,(1B0+1B2+0B17)	; USE GMT STANDARD TIME
  6410		ODCNV			; SEPARATE INTO DAY, SECOND ETC
  6411		HRRZ 1,3		; DAY OF WEEK
  6412		HRRZ 2,4
  6413		IDIVI 2,^D300		; CONVERT SECONDS TO 5 MIN
  6414		IDIVI 2,^D12		; SEPARATE INTO HOUR AN 5 MIN
  6415		LSH 1,5
  6416		IOR 1,2			; INSERT HOUR OF DAY
  6417		LSH 1,4
  6418		IOR 1,3			; AND 5 MIN PART OF HOUR
  6419	IMPHL1:	LSH 1,4
  6420		IOR 1,0(P)
  6421		LSH 1,4
  6422		TLO 1,(2B7)
  6423		PIOFF
  6424		SETZM NETON		; START NET DOWN
  6425		MOVEM 1,HSTGDM
  6426		PION
  6427		JSP 4,IMPXOU
  6428		SUB P,BHC+1
  6429		RET
  6430	
  6431	; Restart code. called by sysrst
  6432	
  6433	IMPRST:	SETOM IMPDRQ		; Request down cycle
  6434		MOVEI 1,1
  6435		SKIPLE IMPRDY		; Going down already?
  6436		 MOVEM 1,IMPRDY		; Shorten delay
  6437		RET
  6438	
  6439	>			; End of idfef impchn on page 1
  6440		IFNDEF VDH,<END>	;WE GET ANOTHER FILE FOR VDH


VDH.VDH;1                          22-MAY-75 10:30     Page 2

  6441	;<MON>VDH.NEW;1	    26-MAR-75 13:30:00    EDIT BY HEATHMAN
  6442	;FIXED 32 BIT INPUT STUFFING BUG
  6443	;<MON>VDH.MAC;53    19-MAR-75 12:36:39    EDIT BY LIEB
  6444	;ELIMINATE OPRLSE CALL AT OPIDLE AND FIX OPRLSE
  6445	;<MON>VDH.MAC;52    17-MAR-75 11:28:03    EDIT BY LIEB
  6446	;ELIMINATE CONFLICTS BETWEEN PI RELEASEING BUFFERS AND PROCESS
  6447	;SENDING (SPURIOUS ACKS) AND CALL SCEDULER W/ ISB SCDCHN
  6448	;<MON>VDH.MAC;50    13-MAR-75 01:42:52    EDIT BY LIEB
  6449	;PATCH OPHH TO STEP PACKET POINTER FOR 36 BIT
  6450	;<MON>VDH.MAC;49    12-MAR-75 11:59:50    EDIT BY LIEB
  6451	;CHECK INPUT PACKET BUFERS EVERY SCHED PASS
  6452	;<MON>VDH.MAC;48     6-MAR-75 18:17:00    EDIT BY LIEB
  6453	;FIXED PAGE TRAP BUG AND FORCEING LOGIC
  6454	;<MON>VDH.MAC;46     5-MAR-75 15:48:04    EDIT BY LIEB
  6455	;MINOR BUGS IN OPRLSE, OPCTRL, AND IPCTRL
  6456	;<MON>VDH.MAC;43    27-FEB-75 13:57:57    EDIT BY LIEB
  6457	;<MON>VDH.MAC;42    26-FEB-75 17:01:31    EDIT BY LIEB
  6458	;MOVED PACKET FILLING AND STUFFING TO A SCHED CLOCK
  6459	;<MON>VDH.MAC;36    18-FEB-75 16:57:51    EDIT BY LIEB
  6460	;SAVE LOOPED PACKET CONTROL WORDS
  6461	;<MON>VDH.MAC;35    13-FEB-75 14:51:38    EDIT BY LIEB
  6462	;ADD FLUSHED PACKET COUNTER, OPRLSE RELEASES BUFFERS WHEN LINE DIES
  6463	;<MON>VDH.MAC;33    12-FEB-75 01:45:38    EDIT BY LIEB
  6464	;FIX OUTPUT BUFFER RELEASING LOGIC
  6465	;<MON>VDH.MAC;30    10-FEB-75 16:30:48    EDIT BY LIEB
  6466	;ACK DUPLICATE PACKETS
  6467	;<MON>VDH.MAC;27     8-FEB-75 00:43:28    EDIT BY LIEB
  6468	;CHANGE TO FILL PACKET WITH LAST MSG WORD
  6469	;ELIMINATE IMISRC AND IPERR STATE SINCE SPECIAL PACKETS
  6470	;ARE ONLY "LOGICALLY" ONE WORD??!!
  6471	;<MON>VDH.MAC;19     4-FEB-75 17:24:11    EDIT BY LIEB
  6472	;NEW IMPCHK ROUTINE AND INTERUPT DISPATCH PREVENTS BAD VECTORS
  6473	;<MON>VDH.MAC;15     3-FEB-75 12:39:21    EDIT BY LIEB
  6474	;SAVE AC'S IN AC BLOCK INSTEAD OF DISPATCH VECTORS
  6475	;<MON>VDH.MAC;14     1-FEB-75 18:19:16    EDIT BY LIEB
  6476	;MAKE LINE UP/DOWN WORK
  6477	;<MON>VDH.MAC;12    30-JAN-75 15:08:49    EDIT BY LIEB
  6478	;MAKE LINE INIT WORK RIGHT--LIEB
  6479	;<MON>VDH.MAC;8    27-JAN-75 11:16:25    EDIT BY LIEB
  6480	;<MON>VDH.MAC;5    26-JAN-75 20:33:34    EDIT BY LIEB
  6481	;<MON>VDH.MAC;4    26-JAN-75 20:18:07    EDIT BY LIEB
  6482	;<MON>VDH.MAC;2    26-JAN-75 18:31:52    EDIT BY LIEB
  6483	;<LIEB>VDH.MAC;43    23-JAN-75 17:35:02    EDIT BY LIEB
VDH.VDH;1                          22-MAY-75 10:30     Page 3

  6484	
  6485	REPEAT 0,<
  6486	
  6487	
  6488	ON THE FEASABILITY OF NEW SYSTEMS:
  6489	
  6490		"LOOK AT ME, I'VE WORKED MYSELF UP FROM NOTHING
  6491		 TO AN EXTREME CASE OF POVERTY"
  6492						-GROCHO MARX 1951
  6493	>
VDH.VDH;1                          22-MAY-75 10:30     Page 4

  6494	
  6495		SEARCH	PROLOG
  6496	IFDEF IMPCHN,<	;THIS WHOLE FILE INCLUDED ONLY IF IMP EXISTS
  6497	IFDEF VDH,<	;AND IT IS A VERY DISTANT HOST
  6498		SUBTTL VDH--JIM LIEB , SUMEX,STANFORD UNIV MED CENTER JAN 75
  6499	
  6500	
  6501	; EXTRA CONI-CONO BITS
  6502	
  6503	IMIERB==1B21		; REC ERROR FROM VDH
  6504	IMICLR==1B19		; CLEAR REC ERR BIT
  6505	IMPRES==1B18		; RESET INTERFACE
  6506	IMISRC==1B20		; FORCE REC INTO SEARCH MODE
  6507	IMPPWR==1B19		; PWR ON IN INTERFACE
  6508	
  6509	; HELLO, I-HEARD-YOU PARAMS
  6510	
  6511	RTIME==^D1200		;1.2 SECS BETWEEN HELLOS
  6512	T==4			;MAX HELLOS CAN GET AHEAD OF I-HEARD-YOU'S
  6513	K==4			;I-HEARD-YOU'S REQUIRED TO DECLARE LINE BACK UP
  6514	DWNTIM==2*T*RTIME	;TIME TO KEEP QUIET TO MAKE IMP SAY LINE DEAD
  6515	RXMTDL==^D100		;DELAY TIME BEFORE RETRANSMISSION OF UNACKED
  6516				;PACKETS
  6517	
  6518	
  6519	;VDH PACKET CONTROL WORD BIT DEFINITIONS
  6520	
  6521	LSTPKT==400000		;LAST PACKET OF MSG
  6522	PKTODD==200000		;PACKET ODD/EVEN BIT
  6523	HSTIMP==1000		;HOST/IMP DIRECTION BIT
  6524	SPCPKT==400		;SPECIAL PACKET BIT
  6525	ACK1==40		;CHAN1 ACK BIT
  6526	ACK0==20		;CHAN0 ACK BIT
  6527	CHNUM==4		;CHANNEL NUMBER OF PACKET
  6528	HELLO==LSTPKT		;HELLO BIT OF SPECIAL PACKET
  6529	HERDU==HELLO		;I-HEARD-YOU BIT OF SPECIAL PACKET
  6530	WDS16B==176000		;WORD COUNT MASK
  6531	
  6532	
  6533	
  6534	;RTP STATUS WORDBITS --FOUND IN RTSTAT
  6535	
  6536	STUFRM==10		;STUFFING MSG BUFFER FROM CHAN#
  6537	STSTAT==7		;IPSTFR STUFF STATE
  6538	FLSTAT==3B23		;OPFILR FILL STATE
  6539	LNDOWN==400000		;LINE DECLARED DEAD
  6540	MOVNG0==20		;CH0 PACKET BEING SENT (DONT RELEASE BUFFER)
  6541	MOVNG1==40		;CH1 PACKET BEING SENT (BOTH BITS IN LH)
  6542	XPECT==PKTODD		;LH FOR CH1,RH FOR CH0 RCVR CHAN STATE
  6543	IBUFUL==100000		;LH FOR CH1,RH FOR CH0 PACKET BUFFER STATE
  6544	ENDMSG==40000		;LH FOR CH1,RH FOR CH0 LAST PACKET ON THIS  CHAN
  6545	XMTOD1==1B30		;XMIT CH1 ODD/EVEN BIT
  6546	XMTOD0==1B31		;XMIT CH0 ODD/EVEN BIT
VDH.VDH;1                          22-MAY-75 10:30     Page 4.1

  6547	LAST1==2		;CH1 THIS-IS-LAST-PACKET BIT
  6548	LAST0==1		;CH0 THIS-IS-LAST-PACKET BIT
  6549	MSGOUT==1B24		;FOR OPFILR,CURRENTLY FILLING FROM  A MSG
  6550	SENT1==1B25		;CHAN 1 HAVE-SENT-THIS
  6551	SENT0==1B26		;CHAN 0 HAVE-SENT-THIS
  6552	SNDHRD==1B27		;SEND AN I-HEARD-YOU
  6553	SNDHLO==1B28		;SEND A HELLO
  6554	SNDACK==1B29		;SEND AN ACK AT LEAST (IF NOT A BUFFER)
  6555	CURCHN==1B33		;CURRENT CHANNEL TO BE TRANSMITTED
  6556	FILNXT==1B32		;OUT PACKET BUFF TO FILL NEXT
  6557	WRK2DO==SNDHRD+SNDHLO+SNDACK ;WORK FOR OUTPUT TO DO
  6558	
  6559	
  6560	;LINKAGE TO SCHED
  6561	
  6562	INTERN VDHCHK	;SCHED LEVEL MSG TO PACKET AND PACKET  TO MSG BUFFER ROUTINES
VDH.VDH;1                          22-MAY-75 10:30     Page 5

  6563	
  6564	; VDH LOCALS
  6565	
  6566	LS IMPOAC,5		;AC STORE FOR OUTPUT SIDE
  6567	LS IPENDV,1		;VECTOR STORE FOR END INTERRUPT
  6568	LS ISFTMP,1		;TEMP STORE FOR MSG BITS BETWEEN PACKETS
  6569	LS VDHFLG,1		;SCHED LEVEL SERVICE REQ FLAG (FILL OR STUFF)
  6570	LS ENDFLG,1		;FOR IPSTFR, -1= LAST PACKET
  6571	LS ISFTFG,1		;FOR IPSTFR,STUFFING ROUTINE STATE WORD
  6572	LS IMPLUP,1		;LAST LOOPED PACKET CONTROL WORD
  6573	LS IMPAKS		;ACK BITS FROM IMP
  6574	LS OMSHFT,1		;FOR OP36 SHIFT STATE WORD
  6575	LS OMSPST,1		;FOR OP36 SPECIAL STATE  ENTRY FLAG
  6576	LS IPCNT,1		;CH1,,CH0 BUFFER WORD COUNTS FOR INPUT
  6577	LS OPCNT,1		;CH1,,CH0 BUFFER WORD COUNTS FOR OUTPUT
  6578	LS OCH0DL,1		;TIMER FOR CHAN 0 RETRANSMIT
  6579	LS OCH1DL,1		;TIMER FOR CHAN 1 RETRANSMIT
  6580	LS IPBPTR,1		;BLKI AND BLKO POINTERS
  6581	LS OPBPTR,1		;FOR INPUT AND OUTPUT
  6582	LS IPBUF0,^D33		;CHAN0 INPUT BUFFER
  6583	LS IPBUF1,^D33		;CHAN1 INPUT BUFFER
  6584	LS OPBUF1,^D31		;CHAN1 OUTPUT BUFFER
  6585	LS OPBUF0,^D31		;CHAN0 OUTPUT BUFFER
  6586	LS HERDCT,1		;I-HEARD-YOU COUNTER FOR INIT
  6587	LS VDHANS,1		;0=DON'T ANSWER WHEN LINE DOWN,-1=ANSWER NO MATTER WHAT
  6588	LS RTSTAT,1		;RTP STATUS WORD
  6589	LS ICTRWD,1		;CURRENT INPUT PACKET CONTROL WORD
  6590	LS OCTRWD,1		;CURRENT OUTPUT PACKET CONTROL WORD
  6591	LS VDHLOK,1		;OPCTRL LOCK WORD
  6592	LS KILLIT,1		;REQUEST KILL-THE-IMP FLAG
  6593	LS RTPCNT,1		;HELLO,I-HEARD-YOU COUNTER
  6594	LS RVRCNT,1		;COUNT OF RECIEVED PACKETS
  6595	LS XMTCNT,1		;COUNT OF TRANSMITTED PACKETS
  6596	LS DUPCNT,1		;COUNT OF DUPLICATE  (RECVD) PACKETS
  6597	LS FLSCNT,1		;COUNT OF FLUSHED PACKETS
  6598	LS LUPCNT,1		;COUNT OF LOOPED PACKETS
  6599	LS RPTCNT,1		;COUNT OF REPEAT TRANSMISSIONS
  6600	LS RERCNT,1		;COUNT OF ERRORS FOUND BY INP INTERFACE
VDH.VDH;1                          22-MAY-75 10:30     Page 6

  6601	
  6602	; PI DISPATCH VDH VERSION
  6603	
  6604	IMPSV:	XWD	IMPSVX,.+1
  6605		CONSO	IMP,7		;IF INPUT ISNT GOING
  6606		JRST @IMPSVX		;THEN IT ISNT FOR US
  6607		SKIPN	IMIDSP		;ARE VECTORS SET UP?
  6608		JRST [	SETOM	KILLIT		;VECTORS SCREWY REQ MURDER
  6609			UNBRK (IMP)]		;THEN CLEAR INTERRUPT
  6610		CONSZ	IMP,IMPINB	;AN INPUT WORD?
  6611		JRST @IMIDSP		;YES
  6612		CONSZ	IMP,IMPEIB	;IS IT END OF PACKET?
  6613		JRST [	CONSO IMP,IMPINB	;YES BUT DID LAST WD SNEEK IN?
  6614			JRST @IPENDV		;NO
  6615			JRST @IMIDSP]		;YES
  6616		CONSZ	IMP,IMPOUB	;AN OUTPUT WORD?
  6617		JRST @IMODSP		;YES
  6618		JRST @IMPSVX		;NO SKIP CHAIN FAILED,RETURN
  6619	
  6620	
  6621	;HELLO AND IMPCHK CLOCK SERVICE
  6622	
  6623	IMPCHK:	MOVEI	2,RTIME
  6624		MOVEM	2,IMPTM2	;COME BACK IN R SECS
  6625		SKIPN	NETON		;NET ALIVE?
  6626		SKIPE	IMPRDY		;OR IMP READY?
  6627		SKIPA			;CONTINUE ELSE
  6628		RET
  6629		CONSZ	IMP,IMPPWR	;POWER OFF?
  6630		SKIPE	KILLIT		;OR A CONTRACT OUT ONTHE IMP?
  6631		JRST [	SETZM	KILLIT	;CLEAR REQUEST AND
  6632			JRST IMPCK0]	;GO WASTE IT
  6633		SKIPGE	RTSTAT		;LINE DEAD?
  6634		JRST IMPCK1		;YES
  6635		SKIPL	RTPCNT		;NO, GET LAST REPLY IN TIME?
  6636		JRST IMPCK2		;YES, SEND ANOTHER HELLO
  6637	IMPCK0:	CONO	IMP,IMPRES	;NO, KILL IMP
  6638		MOVEI	2,DWNTIM	;BE QUIET
  6639		MOVEM	2,IMPTM2	;UNTIL IMP KILLS US
  6640		MOVEI	2,IPCTRL	;RESET VECTORS
  6641		MOVEM	2,IMIDSP
  6642		MOVEI	2,IPCRSH
  6643		MOVEM	2,IPENDV
  6644		MOVEI	2,OPIDLE
  6645		MOVEM	2,IMODSP
  6646		SETZM	RTPCNT		;INIT HELLO COUNTER
  6647		SETZM	VDHANS		;DONT ANSWER WHILE
  6648		SETOM	RTSTAT		;LINE DOWN
  6649		CALL	IMIERR		;REPORT ERROR
  6650		AOS	IMPFLG		;WAKE UP NCP FORK
  6651		RET
  6652	
  6653	IMPCK2:	SOS	RTPCNT		;COUNT THIS HELLO
VDH.VDH;1                          22-MAY-75 10:30     Page 6.1

  6654		MOVEI	2,SNDHLO	;QUEUE UP
  6655		IORM	2,RTSTAT	;HELLO REQUEST
  6656		AOSE	VDHLOK		;TRY THE LOCK
  6657		RET			;BUSY
  6658		PUSH	P,4
  6659		JSP	4,OPCTRL	;OUTPUT IDLE,SEND IT
  6660		POP	P,4
  6661		RET
  6662	
  6663	;LINE DOWN
  6664	
  6665	IMPCK1:	SKIPE	VDHANS		;CAN WE TALK?
  6666		JRST IMPCK3		;YES, KEEP INIT GOING
  6667		SETOM	VDHANS		;WAITED LONG ENOUGH, TALK NOW
  6668		HRROI	2,SNDHLO	;INIT OUTPUT SIDE
  6669		MOVEM	2,RTSTAT	;WITH HELLO QED
  6670		MOVEI	2,K		;NUMBER OF TIMES
  6671		MOVEM	2,HERDCT	;WE HAVE TO DO HANDSHAKE RIGHT
  6672		SETZM	RTPCNT		;INIT HELLO COUNTER
  6673		SETZM	VDHLOK		;LOCK THE TRANSMITTER
  6674		CONO	IMP,IMICLR	;CLEAR THE ERROR BIT FROM THE RESET
  6675		CONO	IMP,IMPION+IMPOON ;TURN ON INTERFACE
  6676		PUSH	P,4
  6677		JSP	4,OPCTRL	;SEND THE HELLO
  6678		POP	P,4
  6679		RET
  6680	
  6681	;KEEP INIT GOING
  6682	
  6683	IMPCK3:	SKIPGE	RTPCNT		;DID WE LOSE A HELLO?
  6684		JRST [	SETZM RTPCNT	;YES,BUT KEEP IT FROM GETTING
  6685			MOVEI 2,K	;IN A HOLE AND
  6686			MOVEM 2,HERDCT	;START HANDSHAKE OVER AGAIN
  6687			JRST .+1]
  6688		SOSLE	HERDCT		;ARE WE FINISHED?
  6689		JRST IMPCK4		;NO
  6690		MOVEI	2,T		;YES,BRING IT UP
  6691		MOVEM	2,RTPCNT	;RESET HELLO BANK ACCOUNT
  6692		MOVEI	2,SNDHRD	;INIT LINE UP
  6693		ANDM	2,RTSTAT	;PRESERVING Q'ED REQ
  6694		AOS	IMPFLG		;TELL SOMEONE THE GOOD NEWS
  6695	IMPCK4:	MOVEI	2,SNDHLO	;REQUEST A HELLO
  6696		IORM	2,RTSTAT
  6697		SOS	RTPCNT		;COUNT IT
  6698		AOSE	VDHLOK		;TRY THE LOCK
  6699		RET
  6700		PUSH	P,4
  6701		JSP	4,OPCTRL	;OUTPUT IDLE, SEND THE HELLO
  6702		POP	P,4
  6703		RET
VDH.VDH;1                          22-MAY-75 10:30     Page 7

  6704	
  6705	;SCHED LEVEL 8 PACKET TO MSG AND MSG TO PAKET BUFFER ROUTINES
  6706	;CALLED AT EVERY SCHEDULER PASS AND DOES FILLING OR STUFFING
  6707	
  6708	VDHCHK:	CALL	IPSTFR		;MOVE ANY FULL PACKET BUFFERS
  6709		CALL 	OPFILR		;SEE IF WE CAN MOVE SOMETHING
  6710		RET
  6711	
  6712	;IMPXOU CALLED FROM PROCESS SIDE AND SETS UP NECESSARIES FOR OPFILR
  6713	
  6714	IMPXOU:	PIOFF			;FREEZE THE WORLD SO WE CAN LOOK AT IT
  6715		SKIPN	IMPOB		;OUPUT IN PROGRESS?
  6716		JRST IMPXO1		;NO, GET IT GOING
  6717		PION		;NOTHING TO DO, THAW THE WORLD
  6718		JRST (4)	;AND GO HOME
  6719	
  6720	;SOMETHING TO DO
  6721	IMPXO1:	HRROS	IMPOB		;SAY WE ARE DOING SOMETHING
  6722		PION			;THAW THE WORLD
  6723		AOS	VDHFLG		;REQUEST FILLING SERVICE
  6724		JRST (4)
  6725	
VDH.VDH;1                          22-MAY-75 10:30     Page 8

  6726	
  6727	;HERE TO STUFF A PACKET INTO A MESSAGE BUFFER
  6728	;AND SEND IT UPSTAIRS
  6729	;CALLED FROM EITHER SCHEDULER OR PROCESS LEVEL
  6730	;CALLS NEXT STATE W/ SPECIAL POINTER TO PKT BUFFER IN 3
  6731	
  6732	IPSTFR:	SKIPL	1,RTSTAT	;GET STATUS
  6733		SKIPN	IMIB		;LINE DOWN OR NO MSG BUFFER AVAIL?
  6734		RET			;YES, DON'T GO FURTHER
  6735		SETZM	ENDFLG		;CLEAR END OF MSG FLAG
  6736		TLNE	1,STUFRM	;CHAN 1
  6737		TLNN	1,IBUFUL	;AND THERE'S A BUFFER?
  6738		JRST STFCH0		;NO
  6739		TLNE	1,ENDMSG	;IS THIS THE END?
  6740		SETOM	ENDFLG		;SAY SO
  6741		HLRZ	2,IPCNT		;GET WORD COUNT
  6742		ADDI	2,2		;PAD SO JUMP OCCURS ON EMPTY NOT LAST WD
  6743		MOVN	2,2		;MAKE IT NEGATIVE
  6744		MOVEI	3,IPBUF1-1	;POINT TO THE  BUFFER
  6745		HRL	3,2		;AND PUT IN COUNT
  6746		LDB	1,STFPTR	;GET STUFF STATE
  6747		CALL	STFTBL(1)	;DISPATCH TO EMPTY THIS BUFFER
  6748		MOVSI	1,IBUFUL+ENDMSG	;BITS TO MARK BUFFER FREE
  6749		HRRZS	IPCNT		;CLEAR COUNT
  6750		ANDCAM	1,RTSTAT	;AND MARK BUFFER FREE
  6751		JRST IPSTFR		;GO TRY THE OTHER ONE
  6752	
  6753	STFCH0:	TLNN	1,STUFRM	;CHAN 0
  6754		TRNN	1,IBUFUL	;AND THERE'S A BUFFER?
  6755		RET		;NO, NOTHING TO DO, RETURN
  6756		TRNE	1,ENDMSG	;IS THIS THE END?
  6757		SETOM	ENDFLG		;THEN SAY SO
  6758		HRRZ	2,IPCNT		;GET WORD COUNT
  6759		ADDI	2,2		;PAD SO JUMP OCCURS ON EMPTY NOT LAST WORD
  6760		MOVN	2,2		;MAKE IT NEGATIVE
  6761		MOVEI	3,IPBUF0-1	;POINT TO THE BUFFER
  6762		HRL	3,2		;AND PUT IN COUNT
  6763		LDB	1,STFPTR	;GET STUFF STATE
  6764		CALL	STFTBL(1)	;DISPATCH TO EMPTY THIS BUFFER
  6765		MOVEI	1,IBUFUL+ENDMSG	;BITS TO MARK BUFFER FREE
  6766		HLLZS	IPCNT		;CLEAR COUNT
  6767		ANDCAM	1,RTSTAT	;AND MARK IT FREE
  6768		JRST IPSTFR		;GO BACK AND TRY THE OTHER ONE
  6769	
VDH.VDH;1                          22-MAY-75 10:30     Page 9

  6770	
  6771	;STUFFER DISPATCH TABLE
  6772	
  6773	STFTBL:	JRST IPLDR	;MSG LEADER
  6774		JRST IPHH	;HOST-HOST HEADER AND DATA
  6775		JRST IP32	;32 BIT WORD DATA
  6776		JRST IP36	;36 BIT WORD DATA
  6777		JRST IPFMSG	;FLUSH MESSAGE
  6778		JFCL
  6779		JFCL
  6780		BUG(HLT,<UNDEFINED STUFF STATE>)
  6781	
VDH.VDH;1                          22-MAY-75 10:30     Page 10

  6782	
  6783	;ALL STATES RETURN THRU HERE
  6784	
  6785	IPMRTN:	MOVSI	1,STUFRM	;FINISHED W/ THIS PACKET
  6786		XORM	1,RTSTAT	;POINT TO THE OTHER ONE
  6787		RET
  6788	
  6789	
  6790	;POINTS TO STUFF STATE BYTE
  6791	
  6792	STFPTR:	POINT 3,RTSTAT,17
  6793	
  6794	;USE TO SIMULATE AOBJX ON 16 BIT WORDS
  6795	AOBJ16:	1,,0
  6796	
  6797	
VDH.VDH;1                          22-MAY-75 10:30     Page 11

  6798	
  6799	;HERE TO STUFF THE MSG LEADER
  6800	;AC3 HAS THE SPECIAL BUFFER POINTER
  6801	
  6802	IPLDR:	MOVE	1,IMPINP	;GET MSG BUFF POINTER
  6803		AOBJN	1,.+2		;DO THE BLKI SKIP
  6804		BUG(HLT,<IMPIN-BFR NOT SET UP>)
  6805		MOVEM	1,IMPINP	;UPDATE POINTER
  6806		ADD	3,AOBJ16	;COUNT THE EXTRA WORD
  6807		AOBJN	3,.+1		;ADVANCE BLKI POINTER
  6808		MOVE	2,0(3)		;MOVE THE PACKET
  6809		MOVEM	2,0(1)		;INTO MSG BUFFER
  6810		ADD	3,AOBJ16	;COUNT EXTRA WORD
  6811		AOBJP	3,.+2		;END OF BUFFER?
  6812		BUG(NTE,<IMPIN-MSG LEADER NOT 32 BITS>)
  6813		SKIPE	ENDFLG		;IF END OF MSG
  6814		JRST IMEND		;PROCESS IT
  6815		MOVEI	1,1		;ELSE NEXT STATE
  6816		DPB	1,STFPTR	;IS HOST-HOST
  6817		JRST IPMRTN		;RETURN TO DISPATCHER
  6818	
VDH.VDH;1                          22-MAY-75 10:30     Page 12

  6819	
  6820	;HERE TO STUFF HOST-HOST HEADER AND DATA OF 2ND PACKET
  6821	;3 HAS THE SPECIAL PACKET BUFFER POINTER
  6822	
  6823	IPHH:	PUSH	P,4		;SAVE THE RETURN ADDR
  6824		MOVE	4,IMPINP	;GET THE MSG BUFF PTR
  6825		AOBJN	4,.+2		;DO BLKI SKIP STUFF
  6826		BUG(HLT,<IMPIN-BFR NOT SET UP>)
  6827		ADD	3,AOBJ16	;COUNT THE EXTRA WORD
  6828		AOBJN	3,.+2		;AND INC REST OF POINTER
  6829		BUG(NTE,<HOST-HOST WORD NOT 32 BITS>)
  6830		MOVE	0,0(3)		;GET 2 16 BIT WORDS
  6831		LSH	0,4		;SHIFT IT TO MAKE IT LOOK LIKE OLD WAY
  6832		MOVEM	0,0(4)		;AND PUT IT AWAY
  6833		LDB	0,[POINT 8,0,11] ;GET MSG BYTE SIZE
  6834		MOVE	1,-1(4)		;AND MSG LEADER
  6835		AND	1,[FRMIMP +17B7 +377B23] ;KILL WHAT WE DONT WANT
  6836		CAMG	1,[<LLINK>B23]	;DO SPECIAL LINKS, IRREG MSGS
  6837		CAIN	0,^D36		;AND IMAGE MODE
  6838		JRST IPHH36		;IN 36 BIT
  6839		ADD	3,AOBJ16	;ELSE ASSUME 32BIT, COUNT EXTRA WORD
  6840		AOBJP	3,IPH32X	;AND INC PTR, JUMP ON BUFFER EMPTY
  6841		AOBJP	4,IPFMSG	;INC BLKI PTR AND FLUSH MSG ON OVFL
  6842		MOVE	1,0(3)		;GET 2 MORE PACKET WORDS
  6843		LSH	1,^D8		;SHIFT OUT THE M2 BYTE
  6844		MOVEM	1,0(4)		;AND PUT IT IN MSG BUFFER
  6845	IPH32L:	ADD	3,AOBJ16	;COUNT EXTRA WORD
  6846		AOBJP	3,IPH32X	;AND EXIT WHEN PACKET EMPTY
  6847		MOVE	1,0(3)		;GET 2 MORE WORDS
  6848		LSHC	0,^D8		;SHIFT SO IT FITS RIGHT
  6849		DPB	0,[POINT 8,0(4),31] ;FILL GAP IN LAST WORD
  6850		AOBJP	4,IPFMSG	;STEP BLKI POINTER
  6851		MOVEM	1,0(4)		;AND STORE THIS WORD
  6852		JRST IPH32L		;LOOP BACK FOR MORE
  6853	
  6854	;HERE WHEN PACKET EMPTY
  6855	
  6856	IPH32X:	MOVEM	4,IMPINP	;UPDATE MSG BUFFER PTR
  6857		POP	P,4		;AND RESTORE THE RETURN ADR
  6858		SKIPE	ENDFLG		;IF THIS IS LAST PACKET
  6859		JRST IMEND		;PROCESS IT
  6860		SETZM	ISFTFG		;SAY SHORT SHIFT
  6861		TLNE	3,-1		;IF WE GOT ONLY ONE WORD ON LAST MOVE,
  6862		SETOM	ISFTFG		;SAY LONG SHIFT
  6863		MOVEI	1,2		;SAY STUFF NEXT PACKET
  6864		DPB	1,STFPTR	;IN 32 BIT MODE
  6865		JRST IPMRTN		;RETURN TO DISPATCHER
  6866	
VDH.VDH;1                          22-MAY-75 10:30     Page 13

  6867	
  6868	;HERE TO STUFF REST OF 2ND PACKET IN 36 BIT MODE
  6869	
  6870	IPHH36:	MOVE	2,[-7,,2]	;SET UP STATE WE GO IN WITH
  6871		ADD	3,AOBJ16	;COUNT EXTRA WORD
  6872		AOBJP	3,IM36X		;AND INC PTR,EXIT WHEN EMPTY
  6873		MOVE	1,0(3)		;GET 2 WORDS
  6874		LSH	1,^D8		;SHIFT AWAY M2 BYTE
  6875		JRST IM36L		;START STUFFER W/24 BITS IN 1
  6876	
  6877	;THIS IS THE MAIN 32 TO 36 BIT SHIFTER
  6878	
  6879	IM36L:	ROTC	0,@IPX1(2)	;SHIFT ACROSS LAST OF PREV WORD
  6880		ADD	3,AOBJ16	;COUNT EXTRA WORD
  6881		AOBJP	3,IM36X		;EXIT WHEN EMPTY
  6882		MOVE	1,0(3)		;GET 2 WORDS
  6883		ROTC	0,@IPX2(2)	;SHIFT ENOUGH FOR 36 BITS
  6884		AOBJP	2,IM36L1	;INC STATE, NO MOVEM IN 0 STATE
  6885		AOBJP	4,IPFMSG	;INC MSG PTR,FLUSH ON OVERFLOW
  6886		MOVEM	0,0(4)		;PUT WORD IN MSG BUFFER
  6887		JRST IM36L		;GO BACK AND SHIFT REST OF WORD
  6888	
  6889	IM36L1:	MOVSI	2,-^D9		;RESET SHIFT STATE, NO MOVEM
  6890		JRST IM36L		;CONTINUE SHIFTING
  6891	
  6892	;HERE WHEN PACKET EMPTY
  6893	
  6894	IM36X:	TLNE	3,-1		;HOW MANY WORDS IN LAST XFER?
  6895		JRST IM36X1		;ONLY ONE,DO FUNNY THINGS TO MAKE IT WRK
  6896		MOVEM	4,IMPINP	;2 WDS,UPDATE POINTER
  6897		POP	P,4		;RESTORE RETURN ADDR
  6898		SKIPE	ENDFLG		;END OF MSG?
  6899		JRST IMEND		;THEN PROCESS IT
  6900		HRRZ	3,IPX1(2)	;GET AMOUNT OF LAST ROTC
  6901		MOVN	3,3		;MAKE NEG TO GO THE OTHER WAY
  6902		ROTC	0,(3)		;BACK IT UP
  6903		MOVEM	1,ISFTMP	;AND STORE BITS FOR NEXT PACKET
  6904		MOVEM	2,ISFTFG	;STORE STATE
  6905		MOVEI	1,3		;STUFF DATA PACKETS
  6906		DPB	1,STFPTR	;IN 36 BIT
  6907		JRST IPMRTN		;AND GO BACK TO DISPATCHER
  6908	
  6909	IM36X1:	HRRZ	3,IPX1(2)	;GET AMOUNT OF LAST ROTC
  6910		CAIG	3,^D12		;STATES 5-8?
  6911		SUB	4,[1,,1]	;YES,BACK UP MSG PTR
  6912		MOVEM	4,IMPINP	;UPDATE MSG POINTER
  6913		POP	P,4		;RESTORE RETURN ADDR
  6914		SKIPE	ENDFLG		;END OF MSG?
  6915		JRST IMEND		;YES,GO PROCESS IT
  6916		MOVN	3,3		;NEG TO REVERSE ROTC
  6917		ROTC	0,(3)		;DO IT
  6918		CAML	3,[-^D12]	;STATES 5-8?
  6919		MOVE	1,0		;THEN WE WANT TO STORE 0 INSTEAD
VDH.VDH;1                          22-MAY-75 10:30     Page 13.1

  6920		MOVEM	1,ISFTMP	;STORE AWAY FOR NEXT PACKET
  6921		MOVE	2,IPX3(2)	;GET NEW STATE
  6922		MOVEM	2,ISFTFG	;AND STORE
  6923		MOVEI	1,3		;STUFF DATA PACKETS
  6924		DPB	1,STFPTR	;IN 36 BIT
  6925		JRST IPMRTN		;RETURN TO DISPATCHER
  6926	
  6927	;BIT SHIFTING TABLES
  6928	
  6929	IPX1:	XX=0
  6930		REPEAT ^D9,<^D32-XX
  6931			XX=XX+4>
  6932	
  6933	IPX2:	XX=4
  6934		REPEAT ^D8,<XX
  6935			XX=XX+4>
  6936		0
  6937	
  6938	;NEXT PACKET STATE TABLE
  6939	
  6940	IPX3:	-5,,4
  6941		-4,,5
  6942		-3,,6
  6943		-2,,7
  6944		-1,,^D8
  6945		-^D9,,0
  6946		-^D8,,1
  6947		-7,,2
  6948		-6,,3
VDH.VDH;1                          22-MAY-75 10:30     Page 14

  6949	
  6950	
  6951	;HERE TO STUFF 3RD+ DATA PACKETS IN 32BIT
  6952	
  6953	IP32:	PUSH	P,4		;SAVE RETURN ADR
  6954		MOVE	4,IMPINP	;GET MSG BUFFER POINTER
  6955		SKIPN	ISFTFG		;LONG SHIFT?
  6956		JRST IPH32L		;NO DO SHORT IN IPHH
  6957	IPD32L:	ADD	3,AOBJ16	;COUNT EXTRA WORD
  6958		AOBJP	3,IPD32X	;EXIT WHEN PACKET BUFFER EMPTY
  6959		MOVE	1,(3)		;GET 2 WORDS
  6960		LSHC	0,^D24		;SHIFT ACROSS AN EXTRA 16BITS
  6961		DPB	0,[POINT 24,(4),31] ;8 BITS + THE EXTRA 16
  6962		AOBJP	4,IPFMSG	;INC MSG PTR,FLUSH ON OVFL
  6963		MOVEM	1,(4)		;MOVE WHAT'S LEFT
  6964		JRST IPD32L		;CONTINUE W/ NEXT WORD
  6965	
  6966	;HERE FOR LONG SHIFT EXIT
  6967	
  6968	IPD32X: TLNE	3,-1		;ODD # OF 16 BIT WORDS XFERED?
  6969		JRST   [SUB 4,[1,,1]	;YES, BACK UP POINTER FOR SHORT SHIFT
  6970			SETZM ISFTFG	;AND SAY SHORT SHIFT
  6971			JRST .+1]
  6972		MOVEM	4,IMPINP	;UPDATE POINTER
  6973		POP	P,4		;RESTORE RETURN ADDR
  6974		MOVEI	1,2		;STUFF NEXT PACKET 32BIT
  6975		DPB	1,STFPTR	;SET IN STATUS WORD
  6976		SKIPE	ENDFLG		;LAST PACKET
  6977		JRST IMEND		;YES,PROCESS EOM
  6978		JRST IPMRTN		;NO,RETURN TO DISPATCHER
  6979	
  6980	;HERE TO STUFF 3RD+ PACKETS IN 36BIT
  6981	
  6982	IP36:	PUSH	P,4		;SAVE RETURN ADDR
  6983		MOVE	4,IMPINP	;GET MSG PTR
  6984		MOVE	2,ISFTFG	;GET STATE WORD
  6985		MOVE	1,ISFTMP	;GET RESIDUE FROM LAST PACKET
  6986		SETZ	0,		;CLEAR TRASH IN 0
  6987		JRST IM36L		;STUFFER IS IN IPHH
  6988	
  6989	;HERE TO FLUSH REST OF MSG BECAUSE ITS TOO LONG
  6990	
  6991	IPFMSG:	MOVEM	4,IMPINP	;UPDATE THE BLKI POINTER
  6992		POP	P,4		;AND RESTORE THE RETURN ADR
  6993		BUG(IMP,<IPSTFR-MSG TOO LONG>,X)
  6994		MOVEI	1,4		;FLUSH REST OF PACKETS
  6995		DPB	1,STFPTR	;OF THIS MSG
  6996		SKIPE	ENDFLG		;PROCESS EOM
  6997		JRST IMEND		;IF THIS IS LAST PACKET
  6998		JRST IPMRTN		;ELSE RETURN
VDH.VDH;1                          22-MAY-75 10:30     Page 15

  6999	
  7000	;PROCESS END-OF-MESSAGE
  7001	
  7002	IMEND:	PUSH	P,4		;SAVE RETURN
  7003		SKIPG	1,IMIB		;GET BUFFER ADR
  7004		JRST IMEND2		;THERE ISNT ONE
  7005		LDB	2,STFPTR	;GET STUFF STATE
  7006		AOSLE	IMPFLS		;FLUSHING ON CMD FROM ABOVE?
  7007		CAIN	2,4		;FLUSHING THIS MSG?
  7008		JRST IMEND3		;YES, RETURN BUFFER TO FREE LIST
  7009		MOVE	2,1(1)		;GET HEADER
  7010		LDB	3,[POINT 4,2,7] ;AND MSG TYPE
  7011		AND	2,[FRMIMP +377B23] ;KILL WHAT WE DONT WANT
  7012		CAIN	3,6		;DEAD HOST STATUS?
  7013		JRST IMEND4		;YES,PUT ON SPEC MSG Q
  7014		CAIE	3,2		;GOING DOWN?
  7015		CAMG	2,[<LLINK>B23]	;OR NOT SPEC LINK
  7016		JUMPN	3,IMEND4	;AND IRREG MSG, THEN SPEC MSG Q
  7017		HRRZS	0(1)		;CLR FWD PTR OF THIS BUFFER
  7018		HRLM	1,@IMPIBI	;ADD BUFFER TO INPUT Q
  7019		HRRZM	1,IMPIBI
  7020		ADD	1,(1)	;COMPUTE TAIL WHICH IS
  7021		MOVEI	1,-1(1)		;START + COUNT
  7022		CALL	MULKMP		;UNLOCK IT
  7023		MOVE	2,IMIB
  7024		HRRZ	4,(2)		;GET ORIGINAL TAIL
  7025		ADDI	4,-1(2)		;
  7026		HRRZ	3,IMPINP	;GET ADDR OF LAST DATA WORD
  7027		SUB	4,3		;HOW MUCH NOT USED?
  7028		CAIL	4,20		;AT LEAST 20 WORDS?
  7029		JRST [	MOVEM	4,1(3)		;YES, MAKE REST INTO NEW BLOCK
  7030			MOVN	4,4		;REDUCE WORD COUNT OF ORIGINAL
  7031			ADDM	4,(2)
  7032			MOVEI	2,1(3)
  7033			EXCH	2,IMINFB	;PUT ON LIST TO BE RELEASED
  7034			HRLM	2,@IMINFB
  7035			JRST .+1]
  7036		AOS	IMPFLG
  7037		JRST IMEND2		;REQ JOB0,GET NEW BUFF,AND EXIT
  7038	
  7039	IMEND4:	MOVE	2,1(1)		;GET MSG HEADER
  7040		CALL	IMP8XQ		;PUT ON IRREG MSG Q
  7041		AOS	IMPFLG		;REQ JOB0 SERVICE
  7042	IMEND3:	EXCH	1,IMPFRI	;PUT MSG BUFFER BACK ON FREE LIST
  7043		HRLM	1,@IMPFRI
  7044		AOS	IMPNFI		;AND COUNT IT
  7045	
  7046	IMEND2:	POP	P,4		;GET RETURN ADDR BACK
  7047		SETZM	IMIB		;SAY WE DONT HAVE BUFFER
  7048		SKIPLE	IMPNFI		;ARE THERE ANY IN FREE LIST?
  7049		PUSHJ	P,IMISRT	;YES,GET ONE
  7050		MOVSI	1,STSTAT	;BITS TO SAY
  7051		ANDCAM	1,RTSTAT	;LEADER NEXT STATE
VDH.VDH;1                          22-MAY-75 10:30     Page 15.1

  7052		JRST IPMRTN		;AND RETURN TO DISPATCHER
  7053	;HERE TO FILL OUTPUT PACKET BUFFERS W/ MESSAGES
VDH.VDH;1                          22-MAY-75 10:30     Page 16

  7054	
  7055	;OUTPUT PACKET BUFFER FILLING FSM
  7056	;CALLED FROM OPIDLE AND IMPXOU ONLY W/ PUSHJ P,OPFILR
  7057	;CALLS OPFPIK WHICH CHOOSES A MESSAGE TO GO OUT
  7058	;FSM HAS FOLLOWING STATES
  7059	;	OPLDR	FILLS BUFFER W/HOST-IMP LEADER
  7060	;	OPHH	FILLS BUFFER W/ HOST-HOST HEADER AND DATA
  7061	;	OP32	FILLS W/ 32BIT DATA UNTIL MSG EXAUSTED
  7062	;	OP36	FILLS W/ 36BIT DATA UNTIL MSG BUFFER EXAUSTED
  7063	
  7064	OPFILR:	SKIPGE	1,RTSTAT	;GET RTPSTATUS
  7065		RET			;RETURN IF LINE DEAD
  7066		TRNN	1,MSGOUT	;ARE WE CURRENTLY MOVING A MSG?
  7067		CALL	OPFPIK		;NO, CHOOSE ONE
  7068		MOVE	2,OPCNT		;GET BUFFER COUNTS
  7069		TRNN	1,MSGOUT	;OR MSG TO GO?
  7070		JRST [	JUMPN	2,OPFXT	;NO, JUMP IF PACKETS STILL AROUND
  7071			RET]		;ELSE GO AWAY PEACEFULLY
  7072		TRNE	1,FILNXT	;WHICH CHAN ARE WE FILLING?
  7073		JRST OPFCH1		;CHAN 1
  7074		TRNE	2,-1		;CHAN 0, IS IT EMPTY?
  7075		JRST OPFXT		;NO COME BACK LATER
  7076		SETZM	OPBUF0
  7077		SETZM	OPBUF0+1
  7078		SETZM	OPBUF0+2	;CLEAR FIRST 3 WORDS
  7079		MOVE	2,[IOWD ^D32,OPBUF0] ;ONE EXTRA CNT TO MAKE SKIP RITE
  7080		MOVE	3,IMPOUP	;GET MSG POINTER
  7081		LDB	1,FILPTR	;GET FILL STATE
  7082		CALL	@FILTAB(1)	;DISPATCH TO STATE
  7083		MOVEM	3,IMPOUP	;UPDATE MSG POINTER
  7084		MOVEI	1,SNDACK+FILNXT ;BITS TO MOVE PACKET AND FILL CH 1 NEXT
  7085		PIOFF			;NOBODY MOVE UNTIL BUFFER SET UP
  7086		HRRM	2,OPCNT		;SET BUFF CNT
  7087		IORM	1,RTSTAT	;REQ IT  SENT
  7088		PION			;CAN MOVE NOW
  7089		JRST OPFILR		;GO TRY THE OTHER BUFFER
  7090	
  7091	OPFCH1:	TLNE	2,-1		;CHAN 1, IS IT EMPTY?
  7092		JRST OPFXT		;NO, COME BACK LATER
  7093		SETZM	OPBUF1
  7094		SETZM	OPBUF1+1
  7095		SETZM	OPBUF1+2	;CLEAR THE FIRST 3 WORDS
  7096		MOVE	2,[IOWD ^D32,OPBUF1] ;ONE EXTRA TO MAKE SKIP RITE
  7097		MOVE	3,IMPOUP	;GET MSG POINTER
  7098		LDB	1,FILPTR	;GET FILL STATE
  7099		CALL	@FILTAB(1)	;AND DISPATCH
  7100		MOVEM	3,IMPOUP	;UPDATE MSG POINTER
  7101		MOVEI	1,FILNXT	;BIT TO SAY
  7102		ANDCAM	1,RTSTAT	;FILL CHAN 0 NEXT
  7103		MOVEI	1,SNDACK	;AND ANOTHER TO MOVE IT
  7104		PIOFF			;FREEZE UNTIL BUFFER SET
  7105		IORM	1,RTSTAT	;REQ PACKET TO BE SENT
  7106		HRLM	2,OPCNT		;SET BUFFER CNT
VDH.VDH;1                          22-MAY-75 10:30     Page 16.1

  7107		PION
  7108		JRST OPFILR		;GO TRY THE OTHER BUFFER
  7109	
  7110	;HERE TO RETURN, RESET FLAG AND REQ DATA SEND
  7111	
  7112	OPFXT:	SKIPGE	RTSTAT		;HAS LINE GONE DOWN SINCE WE WERE HERE?
  7113		RET			;YES,GO AWAY QUIETLY
  7114		MOVEI	1,SNDACK	
  7115		TDNE	1,RTSTAT	;NEW DATA OUT?
  7116		JRST OPFXT2		;YES
  7117		MOVE	2,OPCNT
  7118		MOVE	3,TODCLK	;WHAT TIME IS IT?
  7119		TRNE	2,-1		;ANYTHING IN 0?
  7120		CAMGE	3,OCH0DL	;YES, TIMED OUT?
  7121		SKIPA			;NO
  7122		JRST OPFXT1
  7123		TLNE	2,-1		;ANYTHING IN 1?
  7124		CAMGE	3,OCH1DL	;YES, HAS IT TIMED OUT?
  7125		RET			;NO ,GO AWAY AND DONT BUG PI
  7126	OPFXT1:	IORM	1,RTSTAT	;FORCE OLD STUFF OUT OF HERE
  7127	OPFXT2:	AOSN	VDHLOK		;OUTPUT BUSY?
  7128		JRST [	PUSH P,4	;NO
  7129			JSP 4,OPCTRL	;WAKE IT UP
  7130			POP P,4
  7131			RET ]
  7132		RET
VDH.VDH;1                          22-MAY-75 10:30     Page 17

  7133	
  7134	;DISPATCH TABLE
  7135	
  7136	FILTAB:	OPLDR	;HOST-IMP LEADER
  7137		OPHH	;HOST-HOST AND FIRST DATA
  7138		OP32	;32 BIT DATA
  7139		OP36	;36 BIT DATA
  7140	
  7141	;POINTER INTO RTSTAT FOR FILL STATE
  7142	
  7143	FILPTR:	POINT 2,RTSTAT,23
VDH.VDH;1                          22-MAY-75 10:30     Page 18

  7144	
  7145	;PICK A MESSAGE TO SEND, IMPOUP POINTS TO IT
  7146	;1 RETURNS LATEST STATE OF RTSTAT, MSGOUT REFLECTS IF SOMETHING
  7147	;TO SEND
  7148	
  7149	OPFPIK:	SKIPG	NOPCNT		;NOPS TO SEND?
  7150		JRST OPFPKH		;NO, CHECK HIGH PRIORITY MSGS
  7151		SOS	NOPCNT		;YES, COUNT IT
  7152		MOVE	3,[IOWD 1,[BYTE (8)4,0,0,0]] ;A NOP
  7153		JRST OPFPIR		;SEND IT AS IRREG MSG
  7154	
  7155	;CHECK FOR HI PRIORITY MSGS
  7156	
  7157	OPFPKH:	HLRZ	1,IMPHBO	;GET FIRST ONE
  7158		JUMPE	1,OPFPKL	;JUMP IF NOT THERE
  7159		HLLZ	2,0(1)		;POINT TO NEXT ONE
  7160		JUMPN	2,.+3		;JUMP IF THERE IS ONE
  7161		MOVEI	3,IMPHBO	;SET UP THE BUFFER
  7162		MOVEM	3,IMPHBI	;PROPERLY AS EMPTY
  7163		MOVEM	2,IMPHBO	;PUT THAT IN LIST HEAD
  7164		JRST OPFPK1		;GO SEND IT
  7165	
  7166	;CHECK FOR LOW PRIORITY MSGS
  7167	
  7168	OPFPKL:	HLRZ	1,IMPOBO	;GET FIRST ONE
  7169		JUMPN	1,OPFPL1	;JUMP IF THERE IS ONE
  7170		SKIPN	HSTGDM		;NO, THEN HOST-GOING-DOWN?
  7171		JRST [	MOVE 1,RTSTAT	;NO, NOTHING TO SEND
  7172			SETZM	IMPOB	;SAY WE ARNT SENDING NOW
  7173			RET]		;RETURN W/OUT MSGOUT SET
  7174		MOVE	3,[IOWD 1,HSTGDM] ;BLKI PTR TO IT
  7175	OPFPIR:	MOVEM	3,IMPOUP	;MSG POINTER NOW TO THE IRREG MSG
  7176		HRROS	IMPOB		;MAKE IT DO RIGHT THING ON TESTS
  7177		MOVEI	1,MSGOUT	;SAY WE WANT IT SENT
  7178		IORB	1,RTSTAT	;IN BOTH PLACES
  7179		RET
  7180	OPFPL1:	HLLZ	2,0(1)		;POINT TO NEXT LO MSG
  7181		JUMPN	2,.+3		;JUMP IF THERE IS ONE
  7182		MOVEI	3,IMPOBO	;DO RIGHT THINGS
  7183		MOVEM	3,IMPOBI	;FOR EMPTY BUFFER
  7184		MOVEM	2,IMPOBO	;SET UP LIST HEAD
  7185	OPFPK1:	MOVEM	1,IMPOB		;SAY WE GOT A MSG,HI PRIORITY JOINS HERE
  7186		MOVN	2,0(1)		;GET ITS SIZE
  7187		HRLI	1,1(2)		;DONT CNT HEADER WD AND MAKE BLKI PTR
  7188		MOVEM	1,IMPOUP	;PUT IN THE POINTER WORD
  7189		MOVEI	1,MSGOUT	;SAY WE WANT IT SENT
  7190		IORB	1,RTSTAT	;UPDATE STATE WORD AND 1
  7191		RET
VDH.VDH;1                          22-MAY-75 10:30     Page 19

  7192	
  7193	;HERE TO FILL A PACKET BUFFER W/ A MSG LEADER
  7194	;2 HAS THE PACKET BUFFER POINTER, 3 AHS THE MSG PTR
  7195	;SETS LAST0 OR LAST1 FOR 32 BIT MSGS
  7196	
  7197	OPLDR:	AOBJN	3,.+1		;STEP MSG POINTER
  7198		MOVE	1,(3)		;GET FIRST WORD
  7199		MOVEM	1,1(2)		;AND PUT IT IN PACKET BUFFER
  7200		JUMPGE	3,OPLDR1	;JUMP IF 1 WORD BUFFER
  7201		MOVEI	1,1		;ELSE STEP
  7202		DPB	1,FILPTR	;TO HOST-HOST STATE
  7203		MOVEI	2,2		;COUNT IS 2 16BIT WORDS
  7204		RET
  7205	
  7206	OPLDR1:	MOVEI	1,LAST1		;MASK TO MARK LAST PACKET
  7207		CAMN	2,[IOWD ^D32,OPBUF0] ;CHOOSE THE BIT FOR CH 1
  7208		MOVEI	1,LAST0		;OR CH 0
  7209		IORM	1,RTSTAT	;SET IT, LEAVE STATE OPLDR
  7210		MOVEI	2,2		;COUNT IS 2 16BIT WORDS
  7211		MOVEI	1,MSGOUT	;SAY CHOOSE ANOTHER
  7212		ANDCAM	1,RTSTAT	;MSG FOR THE NEXT EMPT PACKET
  7213		RET
  7214	
  7215	;HERE TO FILL 2ND PACKET OF A MSG
  7216	;CHOOSES EITHER 32 OR 36 BIT DATA MODE
  7217	
  7218	OPHH:	PUSH	P,4		;SAVE 4
  7219		MOVE	1,(3)		;GET MSG LEADER
  7220		AND	1,[FRMIMP +377B23] ;KEEP IMP BIT AND LINK FIELD
  7221		CAMLE	1,[<LLINK>B23]	;IS IT SPEC LINK?
  7222		SKIPA	4,[^D36]	;YES ASSUME 36BIT
  7223		LDB	4,[POINT 8,1(3),11] ;ELSE USE CONNECTION BYTE SIZE
  7224		MOVEI	1,3		;SAY OP36 STATE
  7225		CAIE	4,^D36		;BYTE SIZE 36 BITS?
  7226		MOVEI	1,2		;NO, THEN ASSUME 32BITS
  7227		DPB	1,FILPTR	;PUT NEW STATE IN RTSTAT
  7228		AOBJP	3,.+1		;STEP MSG PTR
  7229		MOVE	1,(3)		;GET HOST-HOST WORD
  7230		LSH	1,-4		;PUT IT WHERE IT BELONGS IN 32 BIT WORD
  7231		AOBJP	2,.+1		;STEP PACKET PTR
  7232		MOVEM	1,(2)		;AND PUT IT IN BUFFER
  7233		CAIN	4,^D36		;WHICH STATE DID WE DECIDE?
  7234		JRST OPHH36		;36 BITS
  7235		POP	P,4		;WE DONT NEED 4 ANYMORE
  7236		AOBJP	2,.+1		;STEP TO NEXT PACKET WORD
  7237		JRST OPHH32		;JUMP INTO OP32 WHERE WE DONT WRITE FIRST 8BITS
  7238	
  7239	OPHH36:	MOVE	4,[-6,,2]	;STATE TO SHIFT STARTING WORD 8 BITS
  7240		AOBJP	2,.+1		;STEP THE PACKET POINTER
  7241		JRST OP36HE		;JUMP INTO SHIFT LOOP IN OP36
VDH.VDH;1                          22-MAY-75 10:30     Page 20

  7242	
  7243	
  7244	
  7245	;HERE TO FILL PACKETS 3-9 OF A MSG IN 32 BIT MODE
  7246	;ENTRY TO THIS STATE AT OP32
  7247	;OPHH32 IS ENTRY FROM OPHH FOR DATA PART OF 2ND PACKET
  7248	
  7249	OP32L:	LDB	1,[POINT 24,(3),23] ;GET FIRST 24 BITS OF WORD
  7250		DPB	1,[POINT 24,(2),31] ;PUT IT IN SHIFTED 8 BITS
  7251	OP32:	AOBJP	2,[MOVEI 2,^D62	;STEP PKT PTR,FULL BUFFER IS
  7252			    RET]	;62 16 BIT WORDS
  7253		LDB	1,[POINT 8,(3),31] ;GET LAST 8 BITS OF WORD
  7254		DPB	1,[POINT 8,(2),7] ;AND PUT IN FIRST PART OF NEXT WORD
  7255	OPHH32:	AOBJN	3,OP32L		;STEP MSG PTR
  7256		CAIG	3,777777	;BUT FALL THRU ONLY
  7257		JRST OP32L		;AFTER ALL BITS MOVED
  7258	OMEXIT:	MOVEI	1,MSGOUT+FLSTAT	;CHOOSE NEW MSG AND START IN LDR STATE
  7259		ANDCAB	1,RTSTAT	;CLR BITS AND GET STATE
  7260		TRNE	1,FILNXT	;WHICH CHAN DID WE FILL?
  7261		SKIPA	1,[LAST1]	;CHAN1
  7262		MOVEI	1,LAST0		;OR CHAN 0
  7263		IORM	1,RTSTAT	;SO MARK LAST PACKET BIT
  7264		PUSH	P,2		;SAVE 2 FROM GETTING IT
  7265		CALL	OMRLSE		;DECIDE WHAT TO DO W/ MSG BUFFER
  7266		POP	P,2		;RESTORE 2
  7267		HLRE	2,2		;GET COUNT OUT OF PTR
  7268		ADDI	2,^D32		;SAY WHATS IN IT, NOT WHATS LEFT
  7269		ASH	2,1		;*2 FOR 16 BIT WORDS
  7270		RET
VDH.VDH;1                          22-MAY-75 10:30     Page 21

  7271	
  7272	;HERE TO FILL PACKETS 3-9 IN 36 BIT MODE
  7273	;OP36HE IS ENTRY FROM OPHH FOR DATA PART OF 2ND PACKET IN 36 BIT MODE
  7274	
  7275	OP36:	PUSH	P,4		;SAVE RETURN ADDR
  7276		MOVE	4,OMSHFT	;GET SHIFT STATE
  7277		SKIPN	OMSPST		;SKIP IF SPECIAL STATE ENTRY
  7278		JRST OP36EN		;ENTER SHIFT LOOP NORMALLY
  7279		SETZM	OMSPST		;RESET THE FLAG
  7280		AOBJP	2,.+1		;STEP PKT POINTER
  7281	OP36L:	LDB	1,OSHFT1(4)	;GET BITS FROM NEW MSG WORD
  7282		DPB	1,OSHFT2(4)	;FILL REST OF PACKET WORD
  7283	OP36EN:	AOBJP	2,OP36X1	;STEP PKT PTR, JUMP ON OVFL
  7284		MOVE	1,(3)		;GET REST OF MSG WORD
  7285		DPB	1,OSHFT3(4)	;AND PUT IN NEW PKT WORD
  7286		AOBJN	4,OP36HE	;STEP STATE AND JUMP
  7287		MOVSI	4,-^D8		;ELSE RESET STATE
  7288		AOBJP	2,OP36X2	;AND STEP PKT PTR, JUMPING ON OVFL
  7289	OP36HE:	AOBJN	3,OP36L		;STEP MSG PTR
  7290		CAIG	3,777777
  7291		JRST OP36L		;AND CONTINUE IF STILL SOME BITS
  7292		POP	P,4		;RESTORE 4
  7293		JRST OMEXIT		;TERMINATE MSG IN OP32
  7294	
  7295	OP36X2:	AOBJN	3,OP36X3	;SPEC STATE,PKT FULL,STEP MSG PTR
  7296		CAIG	3,777777
  7297		JRST OP36X3		;JUMP IF NEED ANOTHER PACKET
  7298		POP	P,4		;PACKET AND MSG ENDED AT SAME TIME
  7299		JRST OMEXIT		;TERMINATE MSG
  7300	
  7301	OP36X3:	SETOM	OMSPST		;SAY WE NEED SPECIAL ENTRY
  7302	OP36X1:	MOVEM	4,OMSHFT	;SAVE STATE
  7303		POP	P,4		;RESTORE 4
  7304		MOVEI	2,^D62		;FULL BUFFER IS 62 16 BIT WORDS
  7305		RET
  7306	
  7307	;STATE BYTE POINTERS
  7308	
  7309	XX==0
  7310	OSHFT1:	REPEAT ^D8,<POINT 32-XX,(3),32-XX-1
  7311			XX=XX+4>
  7312	
  7313	XX==0
  7314	OSHFT2:	REPEAT ^D8,<POINT 32-XX,(2),31
  7315			XX=XX+4>
  7316	
  7317	XX==4
  7318	OSHFT3:	REPEAT ^D8,<POINT XX,(2),XX-1
  7319			XX=XX+4>
VDH.VDH;1                          22-MAY-75 10:30     Page 22

  7320	
  7321	;THIS ROUTINE DECIDES WHAT TO DO WITH AN OUT MSG BUFFER
  7322	;EITHER RELEASES OR SAVES IN CASE IMP WANTS IT AGAIN, THEN RELEASE
  7323	
  7324	OMRLSE:	MOVE	1,IMPOB		;POINT TO BUFFER
  7325		MOVE	2,1(1)		;GET LEADER WORD
  7326		AND	2,[FRMIMP+377B23] ;KILL WHAT WE DONT WANT
  7327		CAMLE	2,[<LLINK>B23]	;SPECIAL LINK OR TO IMP?
  7328		JRST OMRLS1		;YES,RELEASE IT
  7329		LDB	1,[POINT 16,1(1),23] ;GET HOST AND LINK
  7330		IORI	1,1B18
  7331		CALL	IMPPIL		;GET LT INDEX FOR MSG
  7332		JRST OMRLS2		;NOT THERE, BUMMER
  7333		MOVSI	2,(RFNMC)	;BE SURE RFNM HASNT RETURNED
  7334		TDNN	2,IMPLT2(1)	;ALREADY
  7335		JRST OMRLS1		;YES, RELEASE IT
  7336		HRRZ	2,IMPLT3(1)	;BE SURE NOTHING THERE
  7337		JUMPN	2,OMRLS2	;THERE IS DO BUG THING
  7338		MOVE	2,IMPOB		;GET BUFFER
  7339		HRRM	2,IMPLT3(1)	;PUT IT IN TABLE
  7340		JRST OMRLS3
  7341	
  7342	OMRLS2:	BUG(NTE,<CANT FIND LT ENTRY FOR THIS OUTPUT MSG>)
  7343	OMRLS1:	MOVE	1,IMPOB		;GET BUFFER
  7344		EXCH	1,IMINFB	;PUT ON FREE LIST
  7345		HRLM	1,@IMINFB
  7346		AOS	IMPFLG		;ASK FOR JOB0 SERVICE
  7347	OMRLS3:	MOVE	1,IMPOB		;UNLOCK BUFFER
  7348		CALL	IMULKB		;TO SPRING PAGES
  7349		RET
  7350	
VDH.VDH;1                          22-MAY-75 10:30     Page 23

  7351	
  7352	;PACKET INPUT PI STATES
  7353	;IPCTRL	GETS FIRST WORD (CONTROL WORD) AND DECODES TO SET UP BLKI POINTERS
  7354	;	AND STATE VECTORS
  7355	;IPDAT	INPUTS PACKET DATA 32 BITS AT A TIME
  7356	;IPSRC	HANDLES IN INTERRUPT GENERATED BY SEARCH MODE
  7357	;IPERR	CAUSES IMPBUG FOR SECOND WORD OF ONE WORD PACKETS
  7358	
  7359	;INPUT PACKET CONTROL WORD STATE
  7360	;HERE FOR FIRST WORD OF PACKET
  7361	;SET UP VECTORS DEPENDING ON PACKET TYPE
  7362	;FLUSH BAD PACKETS HERE IF YOU CAN
  7363	
  7364	IPCTRL:	MOVEM	1,IMPIAC+1	;SAVE AC1
  7365		DATAI	IMP,1		;GET CONTROL WD FROM IMP
  7366		AOS	RVRCNT		;COUNT EVERY PACKET
  7367		TLNN	1,SPCPKT	;CHECK LINE LATER IF SPEC PKT
  7368		SKIPL	RTSTAT		;IS LINE ALIVE/KEEP THIS PACKET?
  7369		SKIPA			;YES
  7370		JRST IPCL0		;NO,FLUSH IT
  7371		TLNE	1,HSTIMP	;IS PACKET GOING THE RIGHT WAY?
  7372		JRST IPCL4		;NO,LOOPED
  7373		HLRZM	1,ICTRWD	;SAVE IN USEFULL WAY FOR XMITTER
  7374		TLNE	1,SPCPKT	;SPECIAL PACKET?
  7375		JRST IPCL1		;YES,GO SET UP SPEC PKT VECTORS
  7376		SKIPN	IMPRDY		;FLUSH DATA PACKETS TILL IMP UP
  7377		JRST IPCL0
  7378		TLNN	1,WDS16B	;NULL PACKET?
  7379		JRST IPCL2		;YES,SET UP VECTORS
  7380		MOVEM	2,IMPIAC+2	;SAVE AC2
  7381		TLO	1,IBUFUL	;SET BIT FOR EQV TEST OF BUFFER AVAIL
  7382		TLNE	1,CHNUM		;WHICH CHANNEL?
  7383		SKIPA	2,RTSTAT	;GET CH1 EXPECTED PACKET BIT
  7384		HRL	2,RTSTAT	;GET CH0 EXPECTED PACKET BIT
  7385		EQV	2,1		;BASH THE BIT
  7386		TLNN	2,PKTODD	;IS IT STILL THERE?
  7387		JRST IPCL3		;NO,FLUSH THIS DUPLICATE PACKET
  7388		TLNE	2,IBUFUL	;IS THE BUFFER AVAIL?
  7389		JRST IPCL5		;NO BUFFER AVAILABLE, FLUSH
  7390		LDB	2,PKWCNT	;GET PACKET WD CNT
  7391		ADDI	2,3		;ROUND AND ADD FOR EXTRA 32 BIT WD
  7392		LSH	2,-1		;MAKE 32 BIT WD CNT AND
  7393		MOVN	2,2		;NEGATIVE
  7394		HRRI	1,IPBUF0-1	;SET UP CH0 BLKI PTR
  7395		TLNE	1,CHNUM		;WHICH CHANNEL?
  7396		HRRI	1,IPBUF1-1	;IT IS CH1 CHANGE PTR
  7397		HRL	1,2		;COMPLETE BLKI PTR W/ CNT
  7398		MOVEM	1,IPBPTR	;SET UP POINTER WORD
  7399		MOVEI	2,IPREG		;END WILL BE REGULAR
  7400		MOVEI	1,IPDAT		;DATA IS NEXT STATE
  7401		MOVEM	2,IPENDV	;SET VECTOR
  7402		MOVE	2,IMPIAC+2	;RESTORE 2
  7403	IPCLX:	MOVEM	1,IMIDSP	; SET VECTOR
VDH.VDH;1                          22-MAY-75 10:30     Page 23.1

  7404		MOVE	1,IMPIAC+1	;AND RESTORE 1
  7405		UNBRK IMP
  7406	
  7407	;SET UP VECTORS FOR SPECIAL PACKET
  7408	
  7409	IPCL1:	SKIPA	1,[IPSPEC]	;END OF SPECIAL PKT
  7410	
  7411	;SET UP VECTORS FOR NULL PACKETS
  7412	
  7413	IPCL2:	MOVEI	1,IPNULL	;END OF NULL PACKET
  7414		MOVEM	1,IPENDV	;SET UP END VECTOR
  7415		MOVEI	1,IPERR		;SPECIAL PACKETS ARE ONLY ONE WORD
  7416		JRST	IPCLX
  7417	;POINT TO PACKET WORD COUNT
  7418	PKWCNT:	POINT 6,ICTRWD,25	;CONTROL WORD IS IN RH
  7419	
  7420	;NOTE NO PACKET BUFFERS AVAILABLE
  7421	;CAN HAPPEN IF STUFFER ISNT FAST ENOUGH
  7422	
  7423	IPCL5:	;;;BUG(NTE,<IPCTRL-NO INPUT PACKET BUFFER AVAILABLE>)
  7424		JRST IPCL0		;PRETEND WE DIDNT EVEN SEE IT
  7425	
  7426	;NOTE THE LOOPED PACKET
  7427	
  7428	IPCL4:	MOVEM	1,IMPLUP	;SAVE THE CONTROL WORD
  7429		AOS	LUPCNT		;COUNT IT
  7430		BUG (NTE,<IPCTRL-MODEM LOOP STATE CHANGED>) ;AND REPORT IT
  7431		JRST IPCL0 		;FLUSH REST OF PACKET
  7432	
  7433	
  7434	;FLUSH REST OF PACKET
  7435	
  7436	IPCL3:	MOVEI	1,SNDACK	;WE WANT TO ACK THE DUPLICATE
  7437		IORM	1,RTSTAT	;PACKET TO GET IT OUT OF OUR HAIR
  7438		AOSN	VDHLOK		;START OUTPUT IF IDLE
  7439		JRST [	MOVEM	3,IMPIAC+3	;SAVE EXTRA AC'S
  7440			MOVEM	4,IMPIAC+4
  7441			JSP	4,OPCTRL	;SEND 1ST WORD
  7442			MOVE	4,IMPIAC+4
  7443			MOVE	4,IMPIAC+3
  7444			JRST .+1]
  7445		MOVE	2,IMPIAC+2
  7446		AOS	DUPCNT		;COUNT THE DUPLICATE PACKET
  7447	IPCL0:	MOVEI	1,IPFLSH	;SET UP END VECTOR
  7448		MOVEM	1,IPENDV	;FOR FLUSH
  7449		AOS	FLSCNT		;COUNT THIS FLUSHED PACKET
  7450		CONO	IMP,IMISRC	;TELL RCVR TO SEARCH
  7451		MOVEI	1,IPSRC		;PUT IN SEARCH NOP
  7452		JRST	IPCLX
  7453	
  7454	;
VDH.VDH;1                          22-MAY-75 10:30     Page 24

  7455	
  7456	;INPUT PACKET DATA STATE
  7457	; WILL READ LAST WORD BUT EXTRA WORD CAUSES NON-SKIP WHICH 
  7458	; IMPLIES  BUFF OVERFLOW
  7459	
  7460	IPDAT:	BLKI	IMP,IPBPTR	;PUT WORD IN BUFFER
  7461		SKIPA			;PACKET TOO LONG
  7462		UNBRK	IMP
  7463	
  7464	;PROCESS BUFFER OVERFLOW
  7465		MOVEM	1,IMPIAC+1	;SAVE AC1
  7466		CONO	IMP,IMISRC	;TELL RCVR TO SEARCH
  7467		BUG(NTE,<PACKET TOO LONG>)	;TELL SOMEONE ABOUT IT
  7468		AOS	RERCNT		;COUNT IT
  7469		MOVEI	1,IPFLSH	;SET UP END VECTOR
  7470		MOVEM	1,IPENDV	;FOR A FLUSH
  7471		MOVEI	1,IPSRC		;PUT IN SEARCH NOP
  7472		MOVEM	1,IMIDSP
  7473		MOVE	1,IMPIAC+1	;RESTORE AC1
  7474		UNBRK	IMP
  7475	
  7476	;INPUT PACKET ERROR STATE
  7477	;HANDLE EXTRA WORD THAT OCCURS ON ONE WORD PACKETS--SHOULDN'T GET HERE
  7478	
  7479	IPERR:	BUG(NTE,<OVERLONG NULL OR SPECIAL PACKET>) ;REPORT IT
  7480		AOS	RERCNT		;COUNT IT
  7481		MOVEM	1,IMPIAC+1	;SAVE AC1
  7482		MOVEI	1,IPFLSH	;SET UP END VECTOR
  7483		MOVEM	1,IPENDV	;FOR FLUSH
  7484		CONO	IMP,IMISRC	;TELL RCVR TO SEARCH
  7485		MOVEI	1,IPSRC		;PUT IN SEARCH NOP
  7486		MOVEM	1,IMIDSP	;SET VECTOR
  7487		MOVE	1,IMPIAC+1	;RESTORE 1
  7488		UNBRK IMP
  7489	
  7490	;INPUT PACKET SEARCH STATE
  7491	;RCVR SEARCH TERMINATES W/ AN IN AND END. DO SOMETHING W/ THE IN
  7492	
  7493	IPSRC:	MOVEM	1,IMPIAC+1	;SAVE AC1
  7494		DATAI	IMP,1		;GET THE WORD
  7495		MOVE	1,IMPIAC+1	;RESTORE 1
  7496		UNBRK IMP
VDH.VDH;1                          22-MAY-75 10:30     Page 25

  7497	
  7498	;PACKET END INPUT PI STATES
  7499	;IPREG	TERMINATES DATA PACKET, CHECKS FOR ERRORS,CHECKS LINE STILL
  7500	;	ACTIVE, AND PROCESSES ACKS FROM IMP AND CALLS MSG BUILDER
  7501	;IPSPEC	TERMINATES SPECIAL PACKETS,PROCESSES HELLOS AND I-HEARD-YOU'S
  7502	;	DOES SPECIAL THINGS FOR KEEPING LINE UP AND GETTING LINE BACK UP
  7503	;IPNULL	PROCESSES ACKS FROM IMP, CHECKS ERRORS BUT DOES NOT CALL MSG BUILDER
  7504	;IPFLSH	CLEARS END INTERRUPT FROM PACKET FLUSH
  7505	;IPCRSH	CAUSES A BUGCHK FOR AN END W/OUT A PRECEDING IN
  7506	
  7507	;INPUT PACKET REGULAR END STATE
  7508	;HERE TO CHECK LINE ACTIVE,ERRORS,AND PROCESS ACKS TO RELEASE OUTPUT BUFFERS
  7509	;MARKS PACKET BUFFER IN USE AND SETS WORD COUNT IN IPCNT
  7510	;CALLS INPUT MSG PACKER WHICH WILL COPY CONTENTS AND RELEASE BUFFER
  7511	;INITIATE SNDACK TO TRANSMIT SIDE
  7512	
  7513	IPREG:	MOVEM	4,IMPIAC+4
  7514		MOVEI	4,IMPIAC
  7515		BLT	4,IMPIAC+3	;SAVE ACS 0-4
  7516		SKIPL	RTSTAT		;IS LINE ALIVE
  7517		CONSZ	IMP,IMIERB	;AND PACKET ARRIVE ERROR FREE?
  7518		JRST [	AOS	RERCNT	;COUNT THE ERROR
  7519			JRST IENDXT]	;CLEAN UP AND GO AWAY (IN IPNULL)
  7520		SKIPL	IMPRDY		;IS READY UP?
  7521		JRST IENDXT		;NO, THEN WE DONT WANT MSGS
  7522		SKIPE	IPCNT		;IS THE OTHER BUFFER STIL AROUND?
  7523		ISB	SCDCHN		;YES WAKE UP THE SCHEDULER
  7524		MOVE	1,ICTRWD	;GET PACKET CONTROL WORD
  7525		MOVEM	1,IMPAKS	;UPDATE IMPS STATE FOR XMIT SIDE
  7526		LDB	2,PKWCNT	;AND WORD COUNT
  7527		TRNE	1,CHNUM		;WHICH CHANNEL IS IT?
  7528		JRST IPRG1		;1
  7529		MOVEI	3,IBUFUL	;MASK FOR BUFFER FULL
  7530		TRNE	1,LSTPKT	;IS LAST PACKET BIT ON?
  7531		TRO	3,ENDMSG	;YES,THEN THIS IS END OF MESSAGE
  7532		MOVEI	1,XPECT		;AND EXPECTING ODD/EVEN
  7533		HRRM	2,IPCNT		;STORE WORD COUNT
  7534		JRST IPRG2
  7535	
  7536	IPRG1:	MOVSI	3,IBUFUL	;THE OTHER MASK FOR BUFFER FULL
  7537		TRNE	1,LSTPKT	;IS LAST PACKET BIT ON/
  7538		TLO	3,ENDMSG	;THEN IT IS END OF MESSAGE
  7539		MOVSI	1,XPECT		;AND EXPECTING ODD/EVEN
  7540		HRLM	2,IPCNT		;AND STORE CHAN 1 WORD COUNT
  7541	IPRG2:	TRO	3,SNDACK	;SAY SEND AN ACK BACK TOO
  7542		IORM	3,RTSTAT	;NOW MARK BOTH BITS
  7543		XORM	1,RTSTAT	;AND COMPLEMENT THE EXPECTING BIT
  7544		JSP	4,OPRLSE	;RELEASE ANY OUTPUT BUFFERS WE CAN
  7545		AOSN	VDHLOK		;TRY THE LOCK
  7546		JSP	4,OPCTRL	;AND INIT OUTPUT IF IT IS IDLE
  7547		JRST IENDXT		;CLEAN UP AN UNBRK
  7548	
VDH.VDH;1                          22-MAY-75 10:30     Page 26

  7549	
  7550	;INPUT PACKET SPECIAL END STATE
  7551	;HERE TO CHECK FOR ERRORS AND WHETHER IT IS A HELLO OR I-HEARD-YOU
  7552	;IF HELLO INIT A SNDHRD TO TRANSMIT SIDE
  7553	;ELSE IF LINE ACTIVE COUNT IT
  7554	;	ELSE DO SPECIAL THINGS FOR THE DEAD LINE
  7555	
  7556	IPSPEC:	MOVEM	4,IMPIAC+4
  7557		MOVEI	4,IMPIAC
  7558		BLT	4,IMPIAC+3	;SAVE AC'S
  7559		CONSZ	IMP,IMIERB	;ANY ERRORS?
  7560		JRST [	AOS	RERCNT		;YES,COUNT IT
  7561			JRST IENDXT]		;CLEAN UP
  7562		MOVE	1,ICTRWD	;GET THE CONTROL WORD
  7563		SKIPGE	RTSTAT		;SKIP IF LINE UP
  7564		SKIPE	VDHANS		;LINE DOWN,CAN I ANSWER?
  7565		SKIPA			;YES
  7566		JRST IENDXT		;NO
  7567		TRNE	1,HERDU		;A HELLO?
  7568		JRST IPSPC1		;NO
  7569	IPSPCH:	MOVEI	1,SNDHRD	;YES, SET A BIT
  7570		IORM	1,RTSTAT	;TO SEND AN I-HEARD-YOU
  7571		AOSN	VDHLOK		;TRY THE LOCK
  7572		JSP	4,OPCTRL	;START UP TRANSMITTER
  7573		JRST IENDXT		;AND EXIT
  7574	
  7575	;AN I-HEARD-YOU
  7576	IPSPC1:	AOS	RTPCNT		;ADD ONE BACK TO THE BANK
  7577		JRST IENDXT		;CLEAN UP AND UNBRK
  7578	
VDH.VDH;1                          22-MAY-75 10:30     Page 27

  7579	
  7580	;INPUT PACKET NULL END STATE
  7581	;HERE TO CHECK ERRORS AND PROCESS ACKS
  7582	
  7583	IPNULL:	MOVEM	4,IMPIAC+4
  7584		MOVEI	4,IMPIAC
  7585		BLT	4,IMPIAC+3	;SAVE ACS 0-4
  7586		CONSZ	IMP,IMIERB	;WAS THERE AN ERROR?
  7587		JRST [	AOS	RERCNT	;YES,COUNT IT
  7588			JRST IENDXT]	;QUIT, NOTHING MORE TO DO
  7589		MOVE	1,ICTRWD	;GET HEADER WORD
  7590		MOVEM	1,IMPAKS	;AND UPDATE IMP  STATE FOR TRANSMITTER
  7591		JSP	4,OPRLSE	;AND TRY TO RELEASE SOME BUFFERS
  7592	IENDXT:	MOVEI	1,IPCTRL	;SET UP VECTOR FOR NEXT PACKET
  7593		MOVEM	1,IMIDSP
  7594		MOVEI	1,IPCRSH	;COVER ALL THE BASES
  7595		MOVEM	1,IPENDV
  7596		MOVSI	4,IMPIAC
  7597		BLT	4,4		;RESTORE THE ACS
  7598		CONO	IMP,IMICLR+IMPGEB ;CANCEL END AND ERROR NEEDED OR NOT
  7599		UNBRK IMP
  7600	
  7601	;INPUT PACKET FLUSH END STATE
  7602	;HERE TO FINISH OFF FLUSHED PACKETS
  7603	;CLEAR ERROR AND END INTERRUPTS
  7604	;SET UP VECTORS
  7605	
  7606	IPFLSH:	MOVEM	1,IMPIAC+1	;SAVE AC 1
  7607		MOVEI	1,IPCRSH	;COVER ALL
  7608		MOVEM	1,IPENDV	;THE BASES
  7609		MOVEI	1,IPCTRL	;SET UP FOR NEXT PACKET
  7610		MOVEM	1,IMIDSP	;SET VECTOR
  7611		MOVE	1,IMPIAC+1	;RESTORE 1
  7612		CONO	IMP,IMICLR+IMPGEB ;CLEAR THE END AND ERROR BITS
  7613		UNBRK IMP
  7614	
  7615	;INPUT PACKET END WITHOUT IN STATE
  7616	;HERE IF GOT 2 ENDS W/OUT INTERVENING IN
  7617	
  7618	IPCRSH:	BUG(CHK,<INPUT END PI WITHOUT IN PI>)
  7619		SETOM	KILLIT		;DRAG LINE DOWN
  7620		CONO	IMP,IMICLR+IMPEOB ;SET THINGS RIGHT FOR INPUT
  7621		UNBRK IMP
VDH.VDH;1                          22-MAY-75 10:30     Page 28

  7622	
  7623	;PACKET OUTPUT PI STATES
  7624	;OPCTRL	DECIDES WHAT TYPE PACKET TO SEND AND SENDS IT
  7625	;	CALLED W/ A JSP 4,OPCTRL ALL CALLS HAVE AN INTERLOCK
  7626	;	EXCEPT OPIDLE
  7627	;OPDAT	SENDS PACKET DATA WITHBLKO
  7628	;	SETS VECTOR FOR OPEND AT OVERFLOW
  7629	;OPEND	SENDS PACKET TERMINATOR, SETS VECTOR FOR OPIDLE
  7630	;OPIDLE	CALLS OPCTRL IF SOMETHING TO DO
  7631	;	IDLES TRANSMITTER AND RESETS INTERLOCK IF NOT
  7632	
  7633	
  7634	;OUTPUT PACKET CONTROL WORD STATE
  7635	;CALLED BY JSP 4,OPCTRL
  7636	;DECIDES TYPE OF PACKET TO SEND,SENDS CONTROL WORD
  7637	;SETS UP VECTOR FOR EITHER OPDAT (AND BLKO POINTER TOO) OR OPEND (FOR 1 WD PKTS)
  7638	;TRASHS AC'S 1-3
  7639	
  7640	OPCTRL:	MOVE	1,RTSTAT	;GET RTP STATUS
  7641		TRNE	1,SNDHRD	;SHOULD WE SEND AN I-HEARD-YOU?
  7642		JRST OPCHRD		;YES
  7643		TRNE	1,SNDHLO	;NO,WHAT ABOUT A HELLO?
  7644		JRST OPCHLO		;YES
  7645		TRNE	1,SNDACK	;NO,THEN MUST BE A REG PACKET
  7646		JRST OPCACK		;AND IT IS
  7647		BUG(CHK,<OUTPUT CONTROL WD CALL WITHOUT BITS SET>) ;NO IT ISN'T,YOU LOSE
  7648		JRST (4)
  7649	
  7650	;AN I-HEARD-YOU
  7651	OPCHRD:	MOVEI	1,SNDHRD	;THE BIT MASK
  7652		MOVSI	2,HERDU+SPCPKT+HSTIMP ;AN I-HEARD-YOU PACKET
  7653		JRST OPCHL1
  7654	
  7655	;A HELLO
  7656	OPCHLO:	MOVEI	1,SNDHLO	;THE OTHER BIT MASK
  7657		MOVSI	2,SPCPKT+HSTIMP	;A HELLO PACKET
  7658	OPCHL1:	ANDCAM	1,RTSTAT	;TURN OFF THE MASKED BIT
  7659		MOVEI	1,OPEND		;PACKET IS ONLY ONE WORD
  7660		JRST OPCEND		;GO SEND IT AND RETURN
  7661	
  7662	;AN ACKNOWLEDGEMENT AT LEAST (IF NOT SOME DATA)
  7663	OPCACK:	HRLZI	2,HSTIMP	;THE BASIC PACKET
  7664		TLNE	1,XPECT		;SEND THE
  7665		TLO	2,ACK1		;RIGHT ACKS
  7666		TRNE	1,XPECT		;FOR BOTH
  7667		TLO	2,ACK0		;CHANNELS
  7668		SKIPN	3,OPCNT		;GET THE WORD COUNTS AND ANY DATA TO SEND?
  7669		JRST [	MOVEI 1,OPEND		;ONLY ONE WORD
  7670			MOVEI 3,SNDACK		;CANCEL
  7671			ANDCAM 3,RTSTAT		;DATA REQUEST
  7672			JRST OPCEND]		;FINISH IT OFF
  7673		MOVSI	1,MOVNG0+MOVNG1	;MARK BOTH BUFFERS MOVING
  7674		IORB	1,RTSTAT	;UNTIL WE DECIDE WHICH TO SEND
VDH.VDH;1                          22-MAY-75 10:30     Page 28.1

  7675		TRNE	1,CURCHN	;WHICH CHANNEL SHALL WE SEND?
  7676		JRST OPCAK1		;1
  7677	OPCAK0:	TRNN	3,-1		;0 --ANYTHIING THERE?
  7678		JRST OPCAK1		;NO, GO TRY 1
  7679		MOVEI	1,CURCHN
  7680		IORB	1,RTSTAT	;START LOOKING WITH CHN 1 NEXT TIME
  7681		TRNN	1,SENT0		;HAVE WE SENT THIS BEFORE
  7682		JRST OPCAK2		;NO, IGNOR TIMEOUT STUFF
  7683		MOVE	3,OCH0DL	;GET RETRANSMIT TIME
  7684		CAMLE	3,TODCLK	;RETRANS IF TIMED OUT ELSE NULL PACKET
  7685		JRST [	MOVEI	1,OPEND
  7686			MOVE 3,[MOVNG0+MOVNG1,,SNDACK] ;CANCEL MOVEMENT FLAGS
  7687			ANDCAM 3,RTSTAT		;AND SEND REQUEST
  7688			JRST OPCEND]
  7689	OPCAK2:	HRRZ	3,OPCNT		;GET THE WORD COUNT
  7690		DPB	3,OPWCNT	;AND PUT IT IN HEADER
  7691		MOVE	1,RTSTAT	;GET BACK STATUS WORD
  7692		TRNE	1,LAST0		;LAST PACKET?
  7693		TLO	2,LSTPKT	;YES
  7694		TRNE	1,XMTOD0	;THE ODD PACKET?
  7695		TLO	2,PKTODD	;YES
  7696		TRNE	1,SENT0		;HAVE WE SENT THIS BEFORE?
  7697		AOS	RPTCNT		;YES,COUNT IT
  7698		MOVEI	3,SENT0		;MARK BUFFER AS
  7699		IORM	3,RTSTAT	;SENT
  7700		MOVEI	3,OPBUF0-1	;SET UP ADDRESS PART OF BLKO PTR
  7701		MOVEI	1,RXMTDL	;WAIT THIS LONG
  7702		ADD	1,TODCLK	;BEFORE RETRANSMITTING
  7703		MOVEM	1,OCH0DL
  7704		MOVE	1,[MOVNG1,,SNDACK] ;MARK OTHER CHAN IDLE AND CANCEL DATA REQ
  7705		JRST OPCAK4
  7706	
  7707	OPCAK1:	TLNN	3,-1		;ANYTHING THERE?
  7708		JRST OPCAK0		;NO, GO TRY 0
  7709		MOVEI	1,CURCHN
  7710		ANDCAB	1,RTSTAT	;START WITH CHAN 0 NEXT TIME
  7711		TRNN	1,SENT1		;HAVE WE SENT THIS ONE BEFORE?
  7712		JRST OPCAK3		;NO
  7713		MOVE	3,OCH1DL	;GET TIME
  7714		CAMLE	3,TODCLK	;RETRANS IF TIMEOUT ELSE NULL PACKET
  7715		JRST [	MOVEI	1,OPEND	;DO A NULL PACKET
  7716			MOVE 3,[MOVNG0+MOVNG1,,SNDACK] ;CANCEL MOVEMENT FLAGS
  7717			ANDCAM 3,RTSTAT		;AND SEND REQUEST FLAGS
  7718			JRST OPCEND]
  7719	OPCAK3:	HLRZ	3,OPCNT		;GET WORD COUNT AND
  7720		DPB	3,OPWCNT	;PUT IN PACKET HEADER
  7721		TLO	2,CHNUM		;AND SAY THIS IS A CHAN 1 PACKET
  7722		TRNE	1,LAST1		;DO THE SAME THING
  7723		TLO	2,LSTPKT	;ONLY THIS TIME
  7724		TRNE	1,XMTOD1	;DO IT
  7725		TLO	2,PKTODD	;FOR CHANNEL 1
  7726		TRNE	1,SENT1		;HAVE WE SENT THIS BEFORE?
  7727		AOS	RPTCNT		;YES, COUNT IT
VDH.VDH;1                          22-MAY-75 10:30     Page 28.2

  7728		MOVEI	3,SENT1		;MARK BUFFER
  7729		IORM	3,RTSTAT	;AS SENT
  7730		MOVEI	1,RXMTDL	;WE DONT WANT TO RETRANSMIT
  7731		ADD	1,TODCLK	;FOR RXMTDL MILLISEC
  7732		MOVEM	1,OCH1DL	;SINCE THERE IS LINE DELAY
  7733		MOVEI	3,OPBUF1-1
  7734		MOVE	1,[MOVNG0,,SNDACK] ;MARK OTHER CHAN IDLE AND CANCEL DATA REQ
  7735	OPCAK4:	ANDCAM	1,RTSTAT	;IN THE STATE WORD
  7736		MOVEM	3,OPBPTR	;PUT IT IN THE POINTER
  7737		LDB	3,OPWCNT	;GET THE WORD COUNT BACK
  7738		AOS	3		;ROUND
  7739		LSH	3,-1		;TO 32 BIT COUNT
  7740		MOVN	3,3		;MAKE NEGATIVE
  7741		HRLM	3,OPBPTR	;AND PUT IN THE PTR
  7742		MOVEI	1,OPDAT		;DATA STATE NEXT
  7743	OPCEND:	MOVEM	1,IMODSP	;STORE STATE VECTOR
  7744		AOS	XMTCNT		;COUNT THE PACKET,
  7745		MOVEM	2,OCTRWD	;SAVE THE CONTROL WORD AND
  7746		DATAO	IMP,2		;SEND THE WORD
  7747		JRST (4)		;AND RETURN
  7748	 
  7749	;OUTPUT PACKET DATA STATE
  7750	;LOOP HERE UNTIL END OF BUFFER
  7751	
  7752	OPDAT:	BLKO	IMP,OPBPTR	;MOVE OUT A WORD
  7753		JRST OPDAT1		;END OF PACKET
  7754		UNBRK IMP
  7755	
  7756	OPDAT1:	MOVEM	1,IMODSP	;SAVE AC1
  7757		MOVEI	1,OPEND		;TERMINATE THE PACKET
  7758		EXCH	1,IMODSP	;AT NEXT INTERRUPT
  7759		UNBRK IMP
  7760	
  7761	;OUTPUT PACKET END STATE
  7762	;HERE TO TERMINATE A PACKET
  7763	;TRANSITION TO OPIDLE
  7764	
  7765	OPEND:	MOVEM	1,IMODSP	;SAVE AC1
  7766		CONO	IMP,IMPEOB	;SEND END OF PACKET
  7767		MOVSI	1,MOVNG0+MOVNG1	;MARK BOTH BUFFERS
  7768		ANDCAM	1,RTSTAT	;AS NOT IN TRANSIT
  7769		MOVEI	1,OPIDLE	;DECIDE FATE
  7770		EXCH	1,IMODSP	;AT NEXT INTERRUPT
  7771		UNBRK IMP
  7772	
  7773	;CONTROL WORD WORD COUNT POINTER
  7774	OPWCNT:	POINT 6,2,7		;POINTS TO WORD BEING BULT IN 2
  7775	
  7776	;OUTPUT IDLE STATE
  7777	;HERE TO EITHER START NEXT PACKET OR GO IDLE
  7778	
  7779	OPIDLE:	MOVEM	4,IMPOAC+4	;SAVE 4
  7780		MOVEI	4,IMPOAC
VDH.VDH;1                          22-MAY-75 10:30     Page 28.3

  7781		BLT	4,IMPOAC+3	;SAVE THE REST OF THEM
  7782		AOS	VDHLOK		;SAY WE ARE BUSY
  7783		SKIPGE	4,RTSTAT	;IF LINE DEAD
  7784		TRNE	4,SNDHLO+SNDHRD	;AND NO HELLOS OR REPLYS GO IDLE ELSE
  7785		TRNN	4,WRK2DO	;ANYTHING TO DO?
  7786		JRST [	CONO	IMP,IMPSTO	;NO, KILL THE IMP
  7787			SETOM	VDHLOK		;UNLOCK THE CONTROL WORD  ROUTINE
  7788			JRST OPIDL1 ]
  7789		JSP	4,OPCTRL	;YES, SET UP AND SEND FIRST WORD
  7790	OPIDL1:	MOVSI	4,IMPOAC
  7791		BLT	4,4		;RESTORE AC'S
  7792		UNBRK IMP
  7793	
VDH.VDH;1                          22-MAY-75 10:30     Page 29

  7794	
  7795	;HERE TO RELEASE OUTPUT BUFFERS AS INDICATED BY RCV'D ACK BITS
  7796	;SETS PROPER ODD/EVEN BITS IN RTSTAT
  7797	;CALLED WITH JSP 4,OPRLSE. RETURNS RTSTAT IN AC1
  7798	
  7799	OPRLSE:	SKIPGE	3,RTSTAT	;IF LINE DOWN
  7800		SETZM	OPCNT		;RELEASE THE BUFFERS
  7801		SKIPN	OPCNT		;IF ANYTHING THERE, TRY TO RELEASE IT ELSE
  7802		JRST (4)
  7803		EQV	3,IMPAKS	;SEE IF ACK BITS CHANGED
  7804		MOVE	1,RTSTAT	;GET FRESH RTP STATE
  7805		TRNE	3,XMTOD1	;ON CHAN 1?
  7806		JRST OPRLS1		;NO
  7807		TLNE	1,MOVNG1	;IS THIS BUFFER BUSY?
  7808		JRST OPRLS1		;YES, DONT DO ANYTHING WITH IT
  7809		TRNN	1,SENT1		;IS THIS A SPURIOUS ACK?
  7810		JRST OPRLS3		;YES, CRASH LINE
  7811		HRRZS	OPCNT		;YES, RELEASE BY CLEARING WD CNT
  7812		MOVEI	1,SENT1+LAST1	;CLEAR STATUS BITS
  7813		ANDCAM	1,RTSTAT	;ON THIS BUFFER
  7814		MOVEI	1,XMTOD1	;GET A MASK
  7815		XORB	1,RTSTAT	;AND COMPLEMENT THE BIT
  7816		AOS	VDHFLG		;REQUEST FILLING THIS BUFFER
  7817	OPRLS1:	TRNE	3,XMTOD0	;ON CHAN 0?
  7818		JRST OPRLS2		;NO
  7819		TLNE	1,MOVNG0	;IS THIS BUFFER BUSY?
  7820		JRST OPRLS2		;YES, DONT TOUCH IT!
  7821		TRNN	1,SENT0		;IS IT A SPURIOUS ACK?
  7822		JRST OPRLS3		;YES, CRASH THE BUM
  7823		HLLZS	OPCNT		;YES, RELEASE BY CLEARING WD CNT
  7824		MOVEI	1,SENT0+LAST0	;CLEAR STATUS BITS
  7825		ANDCAM	1,RTSTAT	;ON THIS BUFFER
  7826		MOVEI 	1,XMTOD0	;A MASK
  7827		XORB	1,RTSTAT	;TO COMPLEMENT THE ODD/EVEN BIT
  7828		AOS	VDHFLG		;REQUEST FILL SERVICE
  7829	OPRLS2:	SKIPE	VDHFLG		;ANYTHING NEW?
  7830		ISB	SCDCHN		;YES, CALL SCEDULER
  7831		SETZM	VDHFLG		;CANCEL FLAG
  7832		JRST (4)
  7833	
  7834	
  7835	OPRLS3:	BUG(NTE,<OPRLSE-SPURIOUS ACKNOWLEDGEMENT CRASH LINE>)
  7836		SETOM	KILLIT		;ASK IMPCHK TO KILL THE LINE
  7837		SETZM	IMPTM2		;AND HURRY UP THE IMPCHK CALL
  7838		JRST (4)
  7839	
  7840	
  7841	>	;END OF VDH IFDEF
  7842	>	;END OF IMPCHN IFDEF
  7843		END

VDH.VDH;1                          22-MAY-75 10:30     Page 30

.ASNSQ	 2276  2963#
.ATNVT	  197  1071#
.ATPTY	  197  1070#
.CVHST	  197  1218#
.CVSKT	  197  1186#
.DBGIM	 2276  2706#
.FLHST	  197  1208#
.RCVIM	 2276  3033#
.RELSQ	 2276  3001#
.SNDIM	 2276  3078#
A     	  358   359   362   363   364   365   366   367   368   369   370   373 
	  374   385   386   394   402   403   408   413   414   415   425   426 
	  427   428   440   445   449   453   459   468   471   481   487   488 
	  488   489   491   494   495   498   512   513   514   515   517   518 
	  522   523   524   525   526   536   544   545   546   549   551   554 
	  555   561   562   563   565   566   569   571   576   577   585   590 
	  593   594   602   607   608   612   618   619   623   636   644   658 
	  665   666   668   669   670   673   676   677   689   690   691   692 
	  713   727   742   743   749   769   771   772   775   782   784   785 
	  799   812   850   860   861   863   864   865   873   874   876   877 
	  880   882   902   922   927   933   934   935   936   937   938   946 
	  947   965   966   968   976   977   979   980   981   985   989  1000 
	 1001  1006  1007  1008  1009  1010  1011  1012  1015  1017  1018  1031 
	 1033  1040  1042  1043  1044  1045  1046  1051  1052  1054  1055  1057 
	 1078  1089  1094  1095  1097  1103  1104  1106  1113  1114  1115  1118 
	 1119  1120  1127  1138  1139  1149  1153  1156  1165  1168  1176  1192 
	 1193  1196  1198  1202  1203  1224  1225  1232  1248  1260  1420  1421 
	 1422  1435  1436  1445  1448  1454  1467  1489  1494  1503  1506  1510 
	 1522  1537  1538  1539  1541  1543  1548  1554  1555  1563  1570  1571 
	 1575  1584  1600  1601  1602  1604  1612  1619  1622  1629  1643  1654 
	 1655  1658  1663  1665  1671  1672  1678  1679  1681  1681  1682  1683 
	 1686  1700  1702  1703  1704  1706  1707  1709  1710  1712  1713  1715 
	 1716  1720  1721  1727  1744  1746  1756  1758  1765  1784  1787  1793 
	 1797  1798  1800  1801  1803  1805  1813  1814  1815  1816  1817  1818 
	 1819  1821  1822  1824  1825  1827  1855  1856  1892  1893  1897  1899 
	 1900  1905  1907  1911  1915  1916  1917  1919  1925  1928  1956  1971 
	 1977  1985  1987  1989  1990  1991  1994  1995  1996  2028  2029  2030 
	 2032  2033  2040  2043  2045  2046  2047  2053  2054  2055  2056  2058 
	 2059  2062  2078  2079  2083  2084  2086  2087  2089  2145# 2322  2324 
	 2325  2325  3739  5014  5066  5104 
AABT  	 1298# 1395 
ABTCON	  707   742#
ACK0  	 6526# 7667 
ACK1  	 6525# 7665 
ACKA  	 1299# 1388 
ACKNOW	 7835 
ACLL  	 1293# 1386  1386  1386  1392 
ACLO  	 1294# 1391  1391  1393  1393 
ACLS  	 1289# 1383  1383  1383  1384  1385  1385  1385  1385  1387  1387  1387 
	 1387  1387  1387  1388  1390  1390 
ACPT  	  713   877  1278#
ACTAB 	 1400# 1564 
ACTION	 1343  1348  1380#
VDH.VDH;1                          22-MAY-75 10:30     Page 30.1

AEOR  	 1295# 1388 
AEOS  	 1296# 1388 
AES1  	 1297# 1388  1390 
AFNY  	 1288# 1381  1381  1381  1381  1381  1381  1381  1381  1382  1382  1382 
	 1382  1382  1382  1383  1383  1383  1383  1384  1384  1384  1384  1384 
	 1385  1385  1385  1385  1386  1386  1386  1386  1386  1386  1387  1387 
	 1387  1388  1388  1388  1388  1389  1389  1389  1389  1390  1390  1390 
	 1390  1390  1390  1391  1391  1391  1391  1391  1391  1391  1392  1392 
	 1392  1392  1392  1392  1393  1393  1393  1393  1393  1394  1394  1394 
	 1394  1394  1394  1394  1394  1394  1394  1395  1395  1395  1395  1395 
	 1395 
AFTER 	  528 
ALL   	 3746  6144 
ALLFF 	  257  1438  1450  1456 
ALLOCA	 4846  5576 
ALREAD	 4080 
AN    	 6491 
ANOP  	 1287# 1381  1381  1382  1382  1382  1383  1383  1384  1384  1384  1384 
	 1385  1386  1387  1388  1389  1389  1389  1389  1389  1389  1390  1391 
	 1392  1392  1392  1393  1393  1393  1395  1395  1395 
AOBJ16	 6795# 6806  6810  6827  6839  6845  6871  6880  6957 
AOCH  	 2178#
AOPB  	 1291# 1383  1385 
AOPL  	 1292#
ARFC  	 1290# 1382 
ASGFRE	  147  1249 
ASNLN0	 1727#
ASNLN1	 1724  1732#
ASNLNC	 1720# 1723 
ASNLNF	 1721  1726#
ASNLNK	 1662  1692#
ASNLNL	 1702# 1717 
ASNLNN	 1705  1708  1711  1717#
ASNNVT	  182  1126  2275  4346#
ASNPT1	 4348# 4351 
ASNPT2	 4350# 4356 
ASNPT3	 4349  4355#
ASNSF1	 2983  2995#
ASNSQF	 2980  2994#
ASNSQL	 2971# 2981 
ASNSQN	 2972  2974  2981#
ASNSX1	 2982 
ASNSX2	 2994 
ASNTBC	  242  1245 
ASNTBF	  190  1047  1245# 2311  3088  3237  5590  6135 
ATNVT1	 1084#
ATNVT2	 1111#
ATPER0	 1075  1076  1077  1176#
ATPER1	 1081  1173#
ATPER2	 1086  1087  1088  1165#
ATPER3	 1092  1168#
ATPER4	 1100  1109  1163  1169#
ATPER5	 1166  1170#
VDH.VDH;1                          22-MAY-75 10:30     Page 30.2

ATPERZ	 1116  1121  1128  1161#
ATPX1 	 1168  1176 
ATPX12	 1097  1120 
ATPX13	 1127 
ATPX2 	 1078  1089 
ATPX3 	 1149 
ATPX4 	 1153 
ATPX5 	 1156 
ATPX6 	 1106  1115 
ATPX7 	 1165  1168 
AYTCH 	 2177#
B     	  428   436   437   439   440   441   453   456   463   492   493   495 
	  500   501   530   531   550   551   573   574   591   592   594   607 
	  609   611   618   620   622   628   631   637   641   661   662   672 
	  674   680   681   700   701   703   712   714   728   751   759   760 
	  761   783   784   785   819   820   821   822   824   826   827   838 
	  839   840   842   843   844   845   846   846   847   849   859   862 
	  863   866   868   890   891   892   898   899   900   907   908   909 
	  929   970   973   974   975   977   978   979   988  1035  1036  1037 
	 1038  1039  1041  1042  1046  1048  1056  1098  1099  1107  1108  1130 
	 1131  1135  1152  1154  1209  1210  1221  1233  1234  1235  1236  1329 
	 1333  1343  1348  1422  1446  1447  1474  1475  1476  1480  1496  1504 
	 1505  1507  1523  1526  1542  1543  1549  1550  1551  1552  1553  1555 
	 1557  1558  1559  1561  1564  1572  1573  1575  1585  1588  1606  1607 
	 1611  1613  1618  1628  1638  1639  1659  1660  1664  1666  1669  1670 
	 1685  1692  1714  1714  1716  1726  1729  1734  1760  1761  1763  1796 
	 1799  1799  1800  1803  1823  1823  1824  1830  1853  1854  1908  1912 
	 1924  1929  1933  1935  1938  1939  1941  1942  1943  1945  1946  1948 
	 1949  1955  1984  1986  1996  2036  2037  2038  2039  2065  2066  2067 
	 2070  2072  2081  2082 
BAD   	 5367 
BADHDR	 2427  2636  6179  6181 
BADHMS	 2426  2632  2651  6177 
BADIRM	 3536  3700#
BADIRY	 3552  3604  3631  3699#
BADLKR	 3920  3993  4051#
BADLKS	 3840  3868  3906  3979  4027  4052#
BALTST	  636# 1017 
BFR   	 5816  5825  6804  6826 
BFSND 	  250   547   718   925  1021 
BGRIM0	 6153  6159  6164#
BGRIM1	 6175  6184#
BGRIMH	 6156#
BGRIML	 6149#
BGRIMP	 6161#
BHC   	  146   458   470   854  1562  1627  1673  1687  1730  1829  2305  2739 
	 3095  3274  3355  3716  3811  4064  4292  4317  4638  4740  4754  4763 
	 4972  4991  5223  5358  5369  5373  6428 
BINOPT	 2187# 4634  4640  4643 
BITS  	  146  1714  1799  1823  1838  2305  2532  2551  2563  3387  3419  3597 
	 3616  3679  3691  3770  3968  4672  4686  4692  5016  5068  5106  5137 
	 6812  6829  7647 
BLOCKW	  150  1842 
VDH.VDH;1                          22-MAY-75 10:30     Page 30.3

BOUT  	 2646 
BRKCH 	 2180#
BUFFER	 3491  5790 
BUG   	  528   596  2864  2953  3370  3467  3482  3491  3511  3703  3733  3813 
	 3952  4063  4080  4846  5271  5367  5402  5554  5576  5790  5816  5825 
	 5852  5988  6131  6135  6144  6780  6804  6812  6826  6829  6993  7342 
	 7430  7467  7479  7618  7647  7835 
BUGCHK	 2291 
BUGHLT	 2291 
BUGIMP	 2428  2573  2650  2652  6174  6183 
BUGNTE	 2291 
BYTBLT	 2306  5314  5541 
BYTES 	 4846 
C     	  273   433   450   451   452   454   455   456   465   468   469   478 
	  481   482   484   485   487   490   498   499   532   552   553   554 
	  610   612   621   623   625   626   629   630   638   639   640   642 
	  734   735   808   809   810   811   841   842   847   852   930   981 
	  982   983   984   985   986   987   988   994   995  1032  1033  1034 
	 1036  1037  1039  1044  1045  1052  1053  1055  1220  1221  1495  1508 
	 1524  1554  1556  1559  1586  1587  1591  1592  1593  1594  1598  1616 
	 1626  1641  1642  1647  1656  1657  1677  1684  1693  1719  1722  1726 
	 1733  1778  1913  1923  1930  1934  1936  1954  3739 
CALL  	 1455  2323  2331  2337  2520  2574  2576  2578  2602  2654  2805  2809 
	 2811  2882  2888  2897  2907  2946  3036  3079  3194  3214  3230  3237 
	 3240  3260  3279  3297  3299  3308  3312  3329  3365  3379  3389  3425 
	 3463  3466  3476  3481  3503  3551  3561  3568  3603  3610  3621  3622 
	 3630  3638  3656  3659  3665  3667  3725  3729  3776  3797  3802  3839 
	 3859  3867  3892  3905  3919  3935  3941  3958  3974  3978  3988  3992 
	 4013  4022  4026  4037  4041  4046  4061  4077  4083  4101  4115  4129 
	 4142  4144  4154  4180  4255  4260  4265  4270  4275  4304  4306  4316 
	 4366  4367  4380  4385  4388  4393  4394  4407  4409  4412  4450  4489 
	 4510  4514  4516  4518  4536  4539  4541  4558  4562  4565  4569  4574 
	 4586  4595  4607  4621  4635  4642  4644  4663  4677  4721  4745  4748 
	 4751  4761  4800  4808  4835  4925  4927  4959  4971  5024  5076  5119 
	 5155  5182  5270  5283  5287  5301  5320  5363  5398  5417  5421  5424 
	 5437  5448  5465  5471  5472  5477  5528  5549  5550  5562  5568  5590 
	 5628  5664  5672  5675  5698  5702  5711  5716  5721  5723  5728  5732 
	 5736  5752  5761  5765  5773  5777  5800  5927  5949  5977  5994  6143 
	 6170  6246  6247  6285  6289  6291  6367  6386  6390  6649  6708  6709 
	 6747  6764  7022  7040  7067  7082  7099  7265  7331  7348  7647 
CALLED	  596 
CAN   	 2864  5988 
CANT  	 7342 
CAPENB	  742  1210  2288  2709  3136 
CAPMSK	  484 
CASE  	 6491 
CBAFSM	 1342# 1555 
CBPFSM	 1328# 1554 
CFORK 	 2863 
CHANGE	 7430 
CHK   	 2953  5271  5402  5554  5576  7618  7647 
CHKATP	 1080  1091  1149#
CHKBG1	 2284  2654 
VDH.VDH;1                          22-MAY-75 10:30     Page 30.4

CHKH1 	 2284  2602 
CHKJFN	  149  1074  1085  1188 
CHKLK1	 1933# 1952 
CHKLK2	 1937  1940  1944  1947  1950  1952#
CHKLNK	 1928# 1962 
CHKN1 	 2574  2607#
CHKN2 	 2531# 2548  2570  2571 
CHKN3 	 2625  2632#
CHKN4 	 2616  2624#
CHKN5 	 2576  2583#
CHKN7 	 2578  2659#
CHKN8 	 2633  2645#
CHKN8L	 2639# 2647 
CHKNET	 2271  2529#
CHKNWP	 3665  3676# 4154  4255  4260  4265  4270  4275 
CHKSKT	 1890  1911# 1968 
CHKSQ 	 3036  3079  3123#
CHNSON	 2291  2878 
CHNUM 	 6527# 7382  7395  7527  7721 
CKALL 	 1412  1435#
CKALL1	 1440  1445#
CKALL2	 1449  1454#
CKNNVT	 4407  4420# 4430  4450  4562  4574  4586  4621  4856 
CKNTWZ	 2964  3135#
CLINK 	 2157#
CLOCK 	 2335  2336 
CLRHRT	 6247  6356#
CLS   	 3745 
CLSR  	 1274# 1855 
CLSS  	 1275# 1856 
CLSW  	 1311# 1361  1362  1363  1363  1365  1365  1365  1365  1367  1367  1367 
	 1367  1367  1367  1367  2083 
CLW1  	 1308# 1364  1364  1364  1364  1364  1364  1364  1366  1368  1368  2084 
CLZD  	 1304# 1360  1360  1360  1360  1360  1360  1360  1360  1654  1665  1761 
	 1893  1917  1945 
CLZF  	  254   682  1439 
CLZR  	  665   691  1276#
CLZS  	  666   692  1277#
CLZW  	 1314# 1366  1370  1370  1370  1370  1370  1370  1370  1370  1371  1371 
	 1604  1949 
CONN  	 1279# 1758 
CONNE1	 1747  1759#
CONNE2	 1762  1770# 1779  1782 
CONNE3	 1764  1778#
CONNEC	  537  1751#
CONTRO	 7647 
COUNT 	 5367 
CPOPJ 	  152   312   313   314   319   320   321   322   323   324   325   490 
	  499  1400  1571  1995 
CRASH 	 7835 
CTL   	 3813  4063 
CTOP  	 3739# 3742  3743  3744  3745  3746  3748  3749  3750  3751  3752  3754 
	 3755  3756  3757  3758  3759  3760  3761  3762 
VDH.VDH;1                          22-MAY-75 10:30     Page 30.5

CURCHN	 6555# 7675  7679  7709 
CVHST 	 2542  2560  2621 
CVSER0	 1189  1190  1191  1203#
CVSER1	 1195  1201#
CVSKX1	 1203 
CVSKX2	 1202 
D     	  426   428   430   431   439   445   448   450   460   471   533   534 
	  535   729   730   731   732   736   807   820   823   824   825   826 
	  837   838   848   851   867   868   869   957   958   971   972   973 
	  974   990   992   993   995   996   997   998  1219  1220  1222  1223 
	 1224  1525  1528  1581  1581  1582  1583  1597  1633  1694  1695  1715 
	 1718  1720  1723  1732  1741  1743  1753  1755  1766  1770  1771  1773 
	 1774  1780  1781  1786  1885  1887  1889  1894  1895  1901  1903  1904 
	 1914  1922  1931  1953  1963  1965  1967  1970 
DATW  	 1312# 1366  1368  1368  1368  1368  1368  1368  1368 
DBGBG1	 2803# 6170 
DBGBUF	 2729  2755  2831  3296  3502  5673  6166 
DBGCK1	 2840# 2850 
DBGCK2	 2839  2850#
DBGCK3	 2848# 2851 
DBGCKS	 2762  2777  2805  2838#
DBGDBL	 2721# 2737  2745 
DBGDBW	 2722  2742#
DBGFAC	 2715  2751  2838  2846  2852  2855  2856 
DBGIIM	 2760# 3503 
DBGIM 	 2771# 3297 
DBGIM0	 2711  2719#
DBGNBF	 2723  2734  2749# 2755  2829  2844 
DBGNWD	 2713  2721  2732  2742  2754  2832  2842 
DBGOM 	 2791# 5675 
DBGRP 	 2717  2718  2724  2728  2733  2735  2753 
DBGS1B	 2766  2785  2811  2816  2821  2827# 2854 
DBGS2B	 2764  2780  2809  2816#
DBGSIM	 2762#
DBGSLP	 2784# 2786 
DBGSM 	 2776# 2795  2799 
DBGSP 	 2714  2752  2828  2830 
DBGXIT	 2763  2767# 2778  2788  2806  2812 
DBUGSW	  146   373 
DEAD  	 1303# 1359  1359  1359  1359  1359  1359  1359  1359  1359  1359  1602 
	 1643  1704  1942  2029  2056 
DEDF  	  196   255   642   835   918   920   960  1497  1520  1534  2032  2081 
	 2310  4730  5156 
DEV   	  541   651   698   781   791   916  1082  1093  1101  1102  1152  1171 
	 1231 
DFRDNT	 2214# 4914 
DFRDO 	 2213# 4913 
DFRIAC	 2215# 4884 
DFRWIL	 2211# 4911 
DFRWNT	 2212# 4912 
DISG  	 2310  2743 
DISGT 	  149  2313 
DISL  	 2314 
VDH.VDH;1                          22-MAY-75 10:30     Page 30.6

DISLT 	  149 
DISMS 	  903  2948  6137  6376 
DISNT 	 2301  3073 
DMCH  	 2181# 4564 
DMPBUF	  655   723   943   953# 1002 
DMPDUN	  959  1004#
DNTCH 	 2169# 5009 
DOABT 	 1411  1429#
DOCH  	 2170# 5003 
DOEOR 	 1408  1473#
DOEOS 	 1409  1461  1465# 1475  1477  1478 
DOES1 	 1410  1461#
DOFSM 	  667   693   715   878  1533# 1775  1785  1857  1898  1906  1972  1978 
	 2041  2090 
DOFSM2	 1561#
DOFSMA	 1535  1536  1540  1547#
DOFSMB	 1538# 1544 
DUPCNT	 6596  7446 
DWNTIM	 6216  6514# 6638 
ECCH  	 2176#
ECHOPT	 2188# 4606 
ECO   	 3752 
EDISMS	  157   337   597   684   911  1820  2301  2931  3040  3143  3206  4682 
	 4945 
ELCH  	 2175#
ENDFLG	 6570  6735  6740  6757  6813  6858  6898  6914  6976  6996 
ENDMSG	 6544# 6739  6748  6756  6765  7531  7538 
EOFF  	  797   816 
EORNVT	 1478#
EOTF  	  196   252   570   642   814   835   883   886   920   960  1429  1441 
	 1465  2310  4729  5157 
ERMRTN	 2965  3037  3050# 3080  3086  3090  3103  3110  3116 
ERP   	 3754 
ERR   	 3755  3952 
ERRB  	  196   251   575   803   886   918   953  1441  1899  2081  2313 
ERRET 	  395   397#  409 
ERRF  	  657   805   919   955   961 
EXCEED	 4846 
EXCESS	 5402  6144 
EXISTS	 4080 
EXTBAD	  405   408#
EXTDE1	  449#  460 
EXTDE2	  453#  457 
EXTDE3	  455   463#
EXTDE4	  458#  464   467   469 
EXTDEC	  404   425#  527   528 
EXTDES	  432   448#
EXTREM	 6491 
FAILED	 6135 
FAILUR	  528   528  5271 
FEASAB	 6488 
FILBYN	  556   800   945   958   963   971  1004 
FILBYT	  799   809   811   947   962  1007  1009 
VDH.VDH;1                          22-MAY-75 10:30     Page 30.7

FILCNT	  795   821   829   941   966  1012 
FILDDN	  415 
FILDEV	  542 
FILEDE	  137 
FILLEN	  822 
FILNEN	  517   525  1192 
FILNXT	 6556# 7072  7084  7101  7260 
FILOFN	  557   957   964   972   978   993  1005 
FILPTR	 7081  7098  7143# 7202  7227 
FILSTS	 1172 
FILTAB	 7082  7099  7136#
FILVER	  489 
FIND  	 7342 
FIRSTI	  756   766   794   858#
FIRSTO	  924  1021#
FKINT 	  156   625 
FKRT  	 3183 
FLG   	  250   251   252   253   254   255   256   257 
FLINK 	  212# 1696  2158#
FLSCNT	 6597  7449 
FLSTAT	 6538# 7258 
FMT   	 3813 
FOR   	 3370  4063  7342 
FORK  	 2953 
FORKX 	  149   340   760   772  2301  2874  3199  4939 
FPC   	 2872  2955 
FPTA  	  160 
FREE  	  673   674  1317# 1361  1361  1362  1362  1363  1363  1364  1364  1364 
	 1365  1365  1367  1367  1367  1369  1369  1370  1370  1373  1373  1373 
	 1373  1373  1373  1373  1373  1373  1373  1601  1664  1703  1943  2030 
	 2055 
FRMIMP	 2220# 3099  3302  5831  5916  5972  6049  6835  7011  7220  7326 
FROM  	  596 
FRSTI1	  859   867#
FRSTIO	  858  1025  1030#
FSKT  	  219  1235  1495  1524  1612  1628  1670 
FULL  	 6131 
FUNNY 	 1401  1418#
FUNNYC	  244   361  1424 
GACH  	 2174# 4488 
GETSKT	 1581# 1851 
GJFX18	  394 
GJFX19	  408 
GROCHO	 6492 
GTAD  	 2819  3543  6198  6210  6379  6401 
GVB   	 3748 
HAS   	 5367 
HELLO 	 6528# 6529 
HERDCT	 6327  6337  6586  6671  6686  6688 
HERDU 	 6529# 7567  7652 
HIGH  	 3733 
HIPFLG	 2226# 4311  5643 
HLT   	  528   596  2864  3511  5790  5816  5825  6780  6804  6826 
VDH.VDH;1                          22-MAY-75 10:30     Page 30.8

HOST  	 6829  6829 
HOSTN 	  169   450   471  1220  1224  2313 
HSTCHF	 1802  1826  1829#
HSTCHK	 1739  1751  1792#
HSTCHO	 1804  1827#
HSTDED	  180  1212  2278  3614# 3667 
HSTGDM	 2410  6034  6236  6270  6354  6425  7170  7174 
HSTIMP	 6523# 7371  7652  7657  7663 
HSTNAM	  169   451  1225 
HSTSTS	 2419  3581  3583  3963  3965 
HUNG  	 1282# 1539  1784  2040  2089 
HUPTST	 1818  1835#
I8CAL 	 2406  3783 
I8CCM 	 3742# 3763  3780  3782 
I8NCCM	 3763# 3778 
IACCH 	 2168# 4443  4858  4924  4974 
IBPTIM	 2400  2929  2937 
IBUFUL	 6543# 6737  6748  6754  6765  7381  7388  7529  7536 
ICTRWD	 6589  7373  7418  7524  7562  7589 
IDVLCK	 2361  2939  3195  3211  3218 
IDVLLK	 2362  3200 
IDVTST	 3205  3218#
IENDXT	 7519  7521  7547  7561  7566  7573  7577  7588  7592#
IGDMSG	 2347  3542 
IGDTIM	 2350  3544  6353 
ILCKB 	 2227# 5412  5468  5486  5511  5546  5652 
ILL   	 3813 
ILLACC	  507   511   520   585#
ILOCK 	 2322# 3276  3307  3550  3602  3629  3645  3838  3866  3904  3918  3977 
	 3991  4025  4040  4074  4100  4128  4136  4303  5258  5280  5297  5411 
	 5462  5483  5524 
IM36L 	 6875  6879# 6887  6890  6987 
IM36L1	 6884  6889#
IM36X 	 6872  6881  6894#
IM36X1	 6895  6909#
IM8   	 3740 
IM8ALL	 3836#
IM8CLS	 3832#
IM8ECO	 3941#
IM8ERP	 3944#
IM8ERR	 3950#
IM8GVB	 3864#
IM8INR	 3901#
IM8INS	 3915#
IM8NOP	 3787  3820#
IM8NXR	 4036#
IM8NXS	 4037#
IM8RA1	 3998  4000#
IM8RA2	 4002# 4006 
IM8RA3	 4001  4007#
IM8RAP	 4022#
IM8RAR	 3974# 4261 
IM8RAS	 3988#
VDH.VDH;1                          22-MAY-75 10:30     Page 30.9

IM8RET	 3897#
IM8RRP	 3790  3960#
IM8RST	 3789  3957#
IM8RTS	 3824#
IM8STR	 3828#
IMC8XM	 2452  3496 
IMCCLK	 2444  3184  3185 
IMCCNP	 2450  3714 
IMCGC 	 2448  5257 
IMCGIB	 2449  3235 
IMCIDL	 2446  2885  2908  3180 
IMCLST	 2445  2884  3186  3187 
IMCNCC	 2458  2916 
IMCNCK	 2456  3376 
IMCNRB	 2447  3224 
IMCNVI	 2454  4797 
IMCOS 	 2455  3267 
IMCP1 	 2451  3284 
IMCRFN	 2457  3438 
IMCTS 	 2453  3254 
IMEND 	 6814  6859  6899  6915  6977  6997  7002#
IMEND2	 7004  7037  7046#
IMEND3	 7008  7042#
IMEND4	 7013  7016  7039#
IMH   	 3467  3482  3813  3952  4063  4846  6144 
IMI32 	 5837  5867#
IMI32A	 5880  5882#
IMI36 	 5838  5844#
IMIB  	 2381  3246  5722  5724  5793  5829  5834  5906  5928  5942  6733  7003 
	 7023  7047 
IMIBB 	 3310  3360#
IMICLR	 6504# 6674  7598  7612  7620 
IMIDSP	 2385  2499  2503  5798  5817  5819  5826  5839  5855  5910  6320  6345 
	 6607  6611  6615  6641  7403  7472  7486  7593  7610 
IMIERB	 6503# 7517  7559  7586 
IMIERR	 2520  5800  5904  6119# 6649 
IMIMTL	 5850# 5872  5874  5876 
IMIN0 	 5797  5815# 5911 
IMIN00	 5854  5860# 5912  6344 
IMINFB	 2387  2890  3226  5734  5938  5939  5990  5991  7033  7034  7344  7345 
IMINP 	 2434  5850  5853  5901  5945  5967 
IMINR1	 3227# 3231 
IMINRB	 2891  3224#
IMIP1 	 2901  3284#
IMIPB 	 3368#
IMIPB1	 3366  3369#
IMIPB2	 3371#
IMIPS1	 3333# 3337 
IMIPS2	 3338  3341  3353#
IMIPS3	 3351  3355#
IMIPSQ	 3304  3332#
IMIPT1	 5878  5892#
IMIS1 	 5818  5824#
VDH.VDH;1                          22-MAY-75 10:30     Page 30.10

IMIS1A	 5833  5838#
IMIS32	 2395  5828  5860  5873  5882 
IMISHT	 5877  5888#
IMISRC	 6506# 7450  7466  7484 
IMISRT	 3249  5784# 5944  6386  7049 
IML   	 3370  3703  5367 
IMN8XM	 2465 
IMNCNP	 2463 
IMNGC 	 2461 
IMNGIB	 2462 
IMNIDL	 2459  3181 
IMNNCC	 2471 
IMNNCK	 2469 
IMNNRB	 2460 
IMNNVI	 2467 
IMNOS 	 2468 
IMNP1 	 2464 
IMNRFN	 2470 
IMNTS 	 2466 
IMO32 	 6055  6079#
IMO321	 6084  6090#
IMO32A	 6102  6105#
IMO36 	 6053  6071#
IMODN0	 5964# 6072 
IMODN1	 5967# 6094 
IMODN2	 5995  6001  6005# 6346 
IMODN4	 5974  5981  5989#
IMODN5	 5986  5993#
IMODN6	 5978  5983  5988#
IMODSP	 2386  2508  5996  6000  6002  6056  6065  6081  6085  6324  6347  6617 
	 6645  7743  7756  7758  7765  7770 
IMOIRG	 5999# 6064 
IMOS32	 2396  6083  6095  6105 
IMOSHT	 6100  6111#
IMP   	 2234# 2496  2498  2500  2501  2504  2505  2509  2516  2517  2599  2953 
	 3511  3733  4080  5784  5785  5790  5799  5801  5815  5820  5824  5840 
	 5844  5846  5852  5858  5860  5861  5870  5903  5905  5969  5999  6003 
	 6036  6057  6066  6073  6075  6079  6086  6101  6124  6131  6135  6193 
	 6258  6277  6278  6318  6363  6365  6368  6382  6383  6384  6605  6609 
	 6610  6612  6613  6616  6629  6637  6674  6675  6993  7365  7405  7450 
	 7460  7462  7466  7474  7484  7488  7494  7496  7517  7559  7586  7598 
	 7599  7612  7613  7620  7621  7746  7752  7754  7759  7766  7771  7786 
	 7792 
IMP8T1	 3784# 3809 
IMP8T2	 3786  3801# 3807 
IMP8T4	 3779  3812#
IMP8T5	 3803  3811#
IMP8T6	 3776# 3788  3799 
IMP8X1	 3466  3481  3706# 6143 
IMP8XB	 2416  3492  3500  3702 
IMP8XC	 2415  2902  3493  3501  6342 
IMP8XI	 2413  3487  3489  6340 
IMP8XM	 2903  3496#
VDH.VDH;1                          22-MAY-75 10:30     Page 30.11

IMP8XO	 2414  3490  3497  3499  3701  6341 
IMP8XQ	 3487# 5949  7040 
IMP8XS	 2152# 2416  3488  3498 
IMP8XX	 3509  3701#
IMPABL	  178  1462  2274  4128#
IMPAKS	 6573  7525  7590  7803 
IMPALL	  178   853  2274  4205# 5182 
IMPB01	 5215  6131#
IMPB03	 3238  5477  5568  6134#
IMPB06	 3849  3853  6141#
IMPBEG	 2271  2862#
IMPBG0	  174  1423  2278  6155#
IMPBGC	 2424  2612  6173 
IMPBGH	 2425  2615  2624  2653  6176 
IMPBHT	  182  1800  2430  3771 
IMPBP0	 2865  2871#
IMPBP1	 2885# 2886  2957 
IMPBP2	 2910#
IMPBP3	 2889  2944#
IMPBPT	 2930  2934#
IMPCC6	 3408  3411  3431#
IMPCCH	 2411  3377  3430  6248  6262  6355 
IMPCHK	 2274  2512# 6623#
IMPCHN	 2140  2244  2244  2246  6496 
IMPCHO	  182  1868  2405  3768  3795  3812 
IMPCHU	 2404  3773  3775  3791  3792 
IMPCK0	 6632  6637#
IMPCK1	 6634  6665#
IMPCK2	 6636  6653#
IMPCK3	 6666  6683#
IMPCK4	 6689  6695#
IMPCKO	 3860  5411# 5516 
IMPCLL	  178  1490  2274  3729  4100# 6289 
IMPCLQ	 5709# 6291 
IMPCLS	  179  1498  2274  4202#
IMPCN0	 2899  3714#
IMPCN4	 3718# 3730 
IMPCN5	 3720  3731#
IMPCNP	 3725  3767#
IMPCQ0	 5743  5749# 5753 
IMPCQ1	 5752  5758#
IMPCQ2	 5716  5721  5732  5742#
IMPCQ3	 5728  5748#
IMPCQ4	 5736  5747#
IMPCQ5	 5711  5723  5757#
IMPDD1	 3589  3599  3613#
IMPDN2	 3513  3540#
IMPDNT	 2348  6211 
IMPDRQ	 2363  6218  6233  6370  6433 
IMPE10	 3522  3643#
IMPEC1	 3512  3534#
IMPEC6	 3518  3574#
IMPEC7	 3519  3593#
VDH.VDH;1                          22-MAY-75 10:30     Page 30.12

IMPEC8	 3520  3535  3627#
IMPEC9	 3521  3628#
IMPECC	 3605# 3636 
IMPECO	 4236#
IMPEET	 3392# 3426 
IMPEI2	 5907  5913  5942# 5954 
IMPEI3	 5909  5951#
IMPEI4	 5918  5921  5948#
IMPEIB	 2238# 2500  6612 
IMPEIN	 2502  5898#
IMPEOB	 2240# 5969  5999  7620  7766 
IMPERP	 3941  4239#
IMPERR	  181  1873  2277  4246#
IMPET 	 3378  3406# 3428 
IMPET0	 3427#
IMPET1	 3381  3397  3430#
IMPET3	 3412#
IMPET4	 3414  3422  3426#
IMPFLG	 2357  2521  2887  2934  4464  5941  5950  5992  6650  6694  7036  7041 
	 7346 
IMPFLS	 2407  5908  6122  6372  7006 
IMPFRI	 2365  3242  3243  5730  5789  5792  5951  5952  7042  7043 
IMPGC 	 2894  5257# 5271 
IMPGC1	 5263# 5265 
IMPGC2	 5267# 5272 
IMPGC3	 5269  5272#
IMPGDM	 2409  2577  2664  2672  2680  2694  3540 
IMPGEB	 2239# 5905  6383  7598  7612 
IMPGIB	 2897  3235#
IMPGTN	 2351#
IMPGVB	 4224#
IMPHBI	 2379  5681  5682  5715  6029  6301  7162 
IMPHBO	 2380  5713  5714  6024  6028  6030  6266  6300  7157  7161  7163 
IMPHCT	 2420  3392  3393  3393  3394  3420  3421  3423 
IMPHFL	 5238# 5270  5271 
IMPHIP	 2219# 5642  5676 
IMPHL1	 2421  2531  2533  3619  6404  6408  6419#
IMPHL2	 2422  2534  2549  2552  2566 
IMPHLT	 2272  6398#
IMPHRT	  182  1803  1824  1839  2418  2550  3388  3596  3617  3620  3774  3969 
	 6356  6357  6357  6358 
IMPIAC	 2432  5847  5848  5849  5856  5867  5868  5869  5898  5899  5900  5964 
	 5965  5966  6005  6006  6007  6090  6091  6092  7364  7380  7402  7404 
	 7439  7440  7442  7443  7445  7465  7473  7481  7487  7493  7495  7513 
	 7514  7515  7556  7557  7558  7583  7584  7585  7596  7606  7611 
IMPIBI	 2375  3291  5727  5923  5924  6297  7018  7019 
IMPIBO	 2376  2900  3285  3290  3292  5725  5726  5729  6296 
IMPIN 	 5816  5825  6804  6812  6826 
IMPINB	 2236# 2498  2501  6610  6613 
IMPINI	 2882  6296#
IMPINP	 2383  5796  5815  5824  5844  5871  5883  5931  6802  6805  6824  6856 
	 6896  6912  6954  6972  6983  6991  7026 
IMPINR	  179   732  2277  4230#
VDH.VDH;1                          22-MAY-75 10:30     Page 30.13

IMPINS	  179   731  2277  4233# 4558 
IMPIOC	 6031  6044#
IMPIOF	 2243# 5905  6278 
IMPIOL	 6025  6033#
IMPION	 2244# 5801  6675 
IMPIOU	 6008  6022#
IMPKO1	 3279  3566  3568  3857  4032  5412# 5418  5422  5472  5550 
IMPKO2	 5414  5425  5452#
IMPKO3	 5439  5442#
IMPKO4	 5428  5441#
IMPLBS	 2254# 4007  4094  5346  5493  5579  5599  5605  5636 
IMPLBT	 2156# 2271  2418  2420  2421  2422  2430  2431  2530  3394  6358 
IMPLKB	 3240  5672  5695#
IMPLL0	 4101  4105# 4142  5424 
IMPLL1	 4115  4129  4144  4165#
IMPLL2	 4180# 4187 
IMPLL9	 4110  4114#
IMPLT 	 6131 
IMPLT1	  176  2255  2256  2475  3270  3313  3322  3412  3442  3456  3465  3480 
	 3563  3607  3646  3718  3841  3869  3907  3921  3980  3994  4028  4043 
	 4088  4089  4106  4108  4308  5199  5231  5263  5264  5267  5431  5442 
	 5583  5639  6310 
IMPLT2	  176  2254  2483  3319  3321  3443  3446  3448  3461  3464  3475  3479 
	 3556  3565  3567  3606  3844  3983  4031  4091  4122  4159  4172  4175 
	 4213  4312  5334  5388  5413  5427  5430  5444  5446  5469  5487  5492 
	 5512  5547  5641  5647  5653  5658  5662  5980  7334 
IMPLT3	  176   785  2487  3452  3453  3557  3558  3633  3634  4000  4090  4092 
	 4171  4176  4177  4182  4185  5328  5333  5335  5389  5415  5513  5655 
	 5661  5663  5982  5985  7336  7339 
IMPLT4	  176   640   784   846  1448  2489  3315  3846  3850  3871  3876  3878 
	 3996  3997  4004  4093  4165  4166  4218  4310  4952  5171  5281  5299 
	 5336  5395  5396  5400  5403  5419  5433  5463  5494  5498  5514  5525 
	 5574  5577  5596  5597  5615  5616 
IMPLUP	 6572  7428 
IMPMTT	 3506  3511#
IMPNCL	 2391  2898  3316  3733  3734  4113  6339 
IMPNF1	 6243#
IMPNF3	 6260  6273#
IMPNFI	 2366  2895  3244  3247  5733  5788  5943  5953  6385  7044  7048 
IMPNLK	 2151# 2271  2475  2483  2487  2489  2893  3268  3395  3400  3429  3439 
	 3643  3717  4137  5195  5198  5260  5266  6288  6309 
IMPNO1	 6224  6256#
IMPNO2	 6283# 6287 
IMPNOF	 6235  6241#
IMPNOL	 2392  3399  4112  4307 
IMPNOP	 3425  4193#
IMPNOS	 2360  2906  2940  3269  3276  3468  3671  4123  4160  5455 
IMPNXR	 3365  4051  4270#
IMPNXS	 4052  4275#
IMPOAC	 6566  7779  7780  7781  7790 
IMPOB 	 2382  2507  5688  5710  5712  5970  5984  5989  5993  6015  6020  6037 
	 6044  6063  6268  6271  6715  6721  7172  7176  7185  7324  7338  7343 
	 7347 
VDH.VDH;1                          22-MAY-75 10:30     Page 30.14

IMPOBI	 2377  5685  5686  5720  6042  6299  7183 
IMPOBO	 2378  5718  5719  6033  6041  6043  6265  6298  7168  7182  7184 
IMPOOF	 2245# 6278 
IMPOON	 2246# 6384  6675 
IMPOP0	 4078  4083#
IMPOP1	 3312  4083  4087# 4306 
IMPOPL	  178  1509  2274  4074# 4080#
IMPORD	 2354  5669  6264  6388 
IMPOS 	 2907  3267#
IMPOS1	 3273# 3280 
IMPOS2	 3270# 3273 
IMPOSS	 5271 
IMPOSY	 3664# 3670 
IMPOUB	 2237# 2505  6616 
IMPOUP	 2384  6047  6057  6071  6073  6079  6093  6106  7080  7083  7097  7100 
	 7175  7188 
IMPPIL	 5245# 5977  7331 
IMPPWR	 6507# 6629 
IMPQO1	 5417  5657#
IMPQOA	 3117  3476  3638  5664  5669#
IMPQOB	 5652#
IMPQOC	 5683  5687#
IMPQOL	 5680  5685#
IMPRAP	 3656  4265#
IMPRAR	 4013  4255#
IMPRAS	 4260# 5437 
IMPRC1	 3379# 3391 
IMPRC2	 3384  3390#
IMPRCC	 3379  3399# 3409 
IMPRDL	 2355  6120  6191  6369 
IMPRDT	 2356  2518  6195  6197  6206  6209 
IMPRDY	  182  1792  2034  2044  2343  2514  2593  3112  3407  6204  6223  6245 
	 6273  6387  6435  6436  6626  7376  7520 
IMPRES	 6277  6318  6505# 6637 
IMPRET	 3892  4227#
IMPROS	 5411  5455#
IMPRRP	  181  2017  2277  4252# 6390 
IMPRSN	 6333# 6367 
IMPRSS	 6229  6363#
IMPRST	 2277  6433#
IMPRSY	 3644# 3662 
IMPRTS	  181  1529  2274  4196#
IMPSC3	 4300  4327#
IMPSC4	 4298# 4336 
IMPSCM	 4194  4197  4200  4203  4222  4225  4228  4231  4234  4237  4240  4247 
	 4250  4253  4258  4263  4268  4273  4278  4284#
IMPSDB	  178  1468  2279  4121#
IMPSSY	 3652  3659#
IMPSTA	 6194  6204#
IMPSTB	 6196  6200  6205  6212  6219  6223#
IMPSTC	 6207  6214#
IMPSTO	 2241# 2509  6036  6278  6383  7786 
IMPSTR	  181  1527  2274  4199#
VDH.VDH;1                          22-MAY-75 10:30     Page 30.15

IMPSTT	 2888  6191# 6252 
IMPSTU	 6225  6231#
IMPSV 	 2274  2495# 6604#
IMPSV1	 2497  2504#
IMPSVX	 2398  2495  2506  2510  6604  6606  6618 
IMPSYN	  178  1455  2274  3659  4152#
IMPTB2	 2201# 4824 
IMPTIM	 2399  2911  2921  2922  3432  6249  6352 
IMPTM2	 2301  2513  6624  6639  7837 
IMPTS 	 2905  3254#
IMPTS1	 3257# 3261 
IMPUB 	 5856# 5884  5946  6009  6107 
IMPUB1	 5945# 5997 
IMPUN 	 2147# 3322  3324  3563  3569  3607  3609  3841  3842  3851  3869  3870 
	 3880  3886  3907  3909  3921  3923  3933  3934  3980  3981  3994  3995 
	 4009  4028  4029  4043  4044  4089  4220  4384  4387  4397  4404  4410 
	 4411  4415  4552  4554  4560  4727  4728  4758  4833  4837  4843  4847 
	 4949  4954  5158  5168  5431  5432  5442  5502  5503 
IMPUPT	 2349  6199 
IMPUXI	 2876  2953#
IMPXLL	 4138# 4145 
IMPXLN	 4140  4143  4145#
IMPXLT	 3621  4135#
IMPXO1	 6016  6020# 6716  6721#
IMPXOU	 5689  6014# 6232  6427  6714#
IMPXSY	 3657  3661#
IMPZSY	 3648  3650  3660#
IMRFNM	 3517  3549#
IMSCLK	 2335# 2885  2908  2916  3224  3235  3254  3267  3284  3376  3438  3496 
	 3714  4797  5257 
IMSRST	  181  1213  1809  2277  3389  3793  4249#
IMSTK 	 2433  5863 
IMUCLK	 2337  3179#
IMULKB	 5763  5772# 5994  7348 
IN    	 3482  7618 
INPUT 	 5790  7618 
INR   	 3750 
INS   	 3751 
INSKED	  162   595  2301  6168 
INTERR	 2953 
IOS   	  208#  250   251   252   253   254   255   256   257   543   548   568 
	  569   682   683   699   792   803   804   806   814   815   834   883 
	  884   886   887   917   953   954   956  1429  1430  1442  1451  1456 
	 1457  1465  1466  1533  2002  2003  2009  2010 
IOUIRG	 6035  6063#
IOUNOP	 6023  6061#
IOX5  	  658 
IP32  	 6775  6953#
IP36  	 6776  6982#
IPBPTR	 6580  7398  7460 
IPBUF0	 6582  6761  7394 
IPBUF1	 6583  6744  7396 
IPCH  	 2179#
VDH.VDH;1                          22-MAY-75 10:30     Page 30.16

IPCL0 	 7370  7377  7424  7431  7447#
IPCL1 	 7375  7409#
IPCL2 	 7379  7413#
IPCL3 	 7387  7436#
IPCL4 	 7372  7428#
IPCL5 	 7389  7423#
IPCLX 	 7403# 7416  7452 
IPCNT 	 6576  6741  6749  6758  6766  7522  7533  7540 
IPCRSH	 6321  6642  7594  7607  7618#
IPCTRL	 6319  6640  7364# 7430  7592  7609 
IPD32L	 6957# 6964 
IPD32X	 6958  6968#
IPDAT 	 7400  7460#
IPENDV	 6322  6567  6614  6643  7401  7414  7448  7470  7483  7595  7608 
IPERR 	 7415  7479#
IPFLSH	 7447  7469  7482  7606#
IPFMSG	 6777  6841  6850  6885  6962  6991#
IPH32L	 6845# 6852  6956 
IPH32X	 6840  6846  6856#
IPHH  	 6774  6823#
IPHH36	 6838  6870#
IPLDR 	 6773  6802#
IPMRTN	 6785# 6817  6865  6907  6925  6978  6998  7052 
IPNULL	 7413  7583#
IPREG 	 7399  7513#
IPRG1 	 7528  7536#
IPRG2 	 7534  7541#
IPSPC1	 7568  7576#
IPSPCH	 7569#
IPSPEC	 7409  7556#
IPSRC 	 7451  7471  7485  7493#
IPSTFR	 6708  6732# 6751  6768  6993 
IPX1  	 6879  6900  6909  6929#
IPX2  	 6883  6933#
IPX3  	 6921  6940#
IRREG 	 3491  3511  3703 
ISB   	 7523  7830 
ISFTFG	 6571  6860  6862  6904  6922  6955  6970  6984 
ISFTMP	 6335  6336  6336  6568  6903  6920  6985 
ITFPC 	 2876 
ITRAP 	 2301 
IUNLK 	 2330# 3323  3360  3368  3608  3637  3655  3660  3699  3858  3891  3908 
	 3922  4010  4045  4053  4079  4084  4102  4130  4146  5273  5288  5322 
	 5381  5434  5441  5452  5476  5506  5566  6141  6332 
JB0   	 2953 
JB0FLG	 2301  3541  6186  6251  6281  6378 
JFN   	  415   489   500   517   525   542   556   557   795   799   800   809 
	  811   821   822   829   941   945   947   957   958   962   963   964 
	  966   971   972   978   993  1004  1005  1007  1009  1012  1072  1073 
	 1083  1084  1141  1170  1172  1187  1192 
JFNSS 	  149  1226 
JOBBIT	 2881 
JOBNO 	 2988  3020  3127 
VDH.VDH;1                          22-MAY-75 10:30     Page 30.17

JOBRTT	 2316  3182 
JSYS  	  337   597   684   911  1071  1186  1208  1218  1820  2706  2873  2931 
	 2956  2963  3001  3033  3040  3078  3143  3206  4682  4945 
K     	 6216  6326  6513# 6670  6685 
KILLIT	 6592  6608  6630  6631  7619  7836 
L     	  250   251   252   253   254   255   256   257 
LARGE 	 5554 
LAST0 	 6548# 7208  7262  7692  7824 
LAST1 	 6547# 7206  7261  7722  7812 
LCKID0	 3197# 3207 
LCKID1	 3196  3203#
LCKIDV	 2323  3192#
LCKNCP	  191   203   332# 2315  5155 
LEADER	 6812 
LEVEL.	  596 
LHOSTN	 2263 
LINE  	 7835 
LINK  	 3370  3703  4063  4080 
LISN  	 1280# 1746 
LISTEN	  580  1739#
LLINK 	  213#  214  1698  2159# 3100  3303  5832  5920  5973  6050  6836  7015 
	 7221  7327 
LNDOWN	 6539#
LNKL1 	 5203  5223# 6132 
LNKL2 	 5199# 5212  5219 
LNKL3 	 5208  5214  5221#
LNKL4 	 5206  5228#
LNKL5 	 5212# 5229  5232 
LNKL6 	 5191# 5240  5247 
LNKLUK	 3308  3551  3603  3630  3839  3867  3905  3919  3978  3992  4026  4041 
	 4077  4304  5189#
LNKNDL	 2393  2892  4114  5259 
LODBUF	  796   803#  830 
LONG  	 5852  6993  7467 
LOOP  	 7430 
LS    	  218   219   220   225   226   227   229   233   237   238   239   240 
	  241   242   243   244   246  2343  2344  2345  2346  2347  2348  2349 
	 2350  2354  2355  2356  2357  2358  2359  2360  2361  2362  2363  2364 
	 2365  2366  2367  2368  2369  2370  2371  2372  2373  2374  2375  2376 
	 2377  2378  2379  2380  2381  2382  2383  2384  2385  2386  2387  2391 
	 2392  2393  2395  2396  2398  2399  2400  2401  2402  2403  2404  2405 
	 2406  2407  2408  2409  2410  2411  2413  2414  2415  2416  2418  2419 
	 2420  2421  2422  2424  2425  2426  2427  2428  2430  2431  2432  2433 
	 2434  2436  2438  2444  2445  2446  2447  2448  2449  2450  2451  2452 
	 2453  2454  2455  2456  2457  2458  2459  2460  2461  2462  2463  2464 
	 2465  2466  2467  2468  2469  2470  2471  2475  2483  2487  2489  2751 
	 2752  2753  2754  6566  6567  6568  6569  6570  6571  6572  6573  6574 
	 6575  6576  6577  6578  6579  6580  6581  6582  6583  6584  6585  6586 
	 6587  6588  6589  6590  6591  6592  6593  6594  6595  6596  6597  6598 
	 6599  6600 
LSKT  	  218   689   729  1435  1496  1504  1523  1606  1657  1659  1667  1709 
	 1853  1938 
LSNG  	  882  1306# 1360  1362  1362  1362  1362  1362  1362  1362  1919  1948 
VDH.VDH;1                          22-MAY-75 10:30     Page 30.18

	 2079 
LSTERR	 2288 
LSTPKT	 6521# 6528  7530  7537  7693  7723 
LT    	 7342 
LTDF  	 2225# 4121  5387  5443 
LTHOST	 2255# 3654  3767  3890  4012  4138  4153  4557  4845  5436 
LTLINK	 2256# 3653  3889  4011  4141  4556  5423  5435 
LUPCNT	 6598  7429 
MAKSK1	 1603  1638#
MAKSK3	 1609#
MAKSK5	 1645# 1677 
MAKSK6	 1610  1626#
MAKSKE	 1633  1677#
MAKSKF	 1617  1658#
MAKSKL	 1600# 1634  1636 
MAKSKN	 1605  1608  1615  1620  1633# 1640  1644 
MAKSKQ	 1661  1669#
MAKSKR	 1646  1668  1679#
MAKSKT	 1582# 1742  1754  1886  1964 
MAKSKV	 1623  1680#
MAKSKW	 1678#
MAKSKX	 1590  1682#
MARX  	 6492 
MAXBPM	  264#  266#  861  1038  2309  5496  5585 
MAXOPT	 2196# 4668  5135 
MAXWPM	 2258# 2279  3084  3236 
MENTR 	 1071  1186  1208  1218  2291  2706  2873  2956  2963  3001  3033  3078 
MESSAG	 3482  3511  5367  5402 
MHOSTS	  169   448  1219 
MLKMA 	 2311  5698  5702 
MLKPG 	  158 
MODEM 	 7430 
MONBK 	 2877 
MONCHN	 2879 
MOVNG0	 6540# 7673  7686  7716  7734  7767  7819 
MOVNG1	 6541# 7673  7686  7704  7716  7767  7807 
MPP   	  149   889   897   906 
MRETN 	  895   904   912  1211  1214  1223  2291  2710  2997  3012  3051 
MRETNE	  155  1174  1177  1204 
MRKNWP	 3688# 3974  3988  4022  4037 
MSFRK 	 2866 
MSG   	 3370  3491  3703  3813  4063  5554  5576  5852  6812  6993  7342 
MSGALL	  263#  841   864 
MSGOUT	 6549# 7066  7069  7177  7189  7211  7258 
MULKMP	  153  2311  3299  5762  5773  5777  5927  7022 
MULKPG	  159 
NAMBAD	  385   388   394#  402 
NAMDE1	  480   498#
NAMDE2	  483   489#  502 
NAMDEC	  387   478#  519  1194 
NAMOPT	 2191#
NCP   	 3952 
NCPERR	  186  1425  1852  1863# 1888  1966 
VDH.VDH;1                          22-MAY-75 10:30     Page 30.19

NCPFRK	 2358  2875  4940 
NCPLCK	  238   333   346   352   372 
NCPLCN	  240   332 
NCPLFC	  241   334 
NCPLKT	  336   346#
NCPLLK	  239   341 
NCPOFF	  203#  733   833  1112  1484  1547  1599  1759 
NCPON 	  201#  737   855  1137  1161  1479  1565  1630  1674  1680  1767  1772 
	 1783 
NCPUPT	 2346  6380 
NE    	  389   416   506   508   521   529   575   657   718   721   755   764 
	  793   797   835   918   920   923   925   960  1079  1090  1438  1520 
NEGCHK	 2919  4701#
NEGCKE	 4703  4707  4711#
NEGCKL	 4702# 4711 
NEGTIM	 2403  2918  2927  2928  4714 
NEGTM0	 2164# 4713 
NEGTMO	 2204# 4683  4704  4709 
NETACP	  704   712#
NETAWD	  220   269   270   271   272   273  1650 
NETBAL	  225   641   827   848   936   998  1447  1651  2314  3851  3880  3886 
	 3934  4009  4220  4411  4758  4843  4847  4954  5168  5432  5502  5503 
NETBTC	  237   825   934   996  1652 
NETBUF	  227   278   661   808   987  1006  1051  1132  1136  1474  1480  1649 
	 1989  2065  2308  4397 
NETCA1	 4408  4410#
NETCAP	 2271  4402#
NETCH0	 2912  3376#
NETCHK	  192  2027# 2313  2917  2946 
NETCK1	 2035  2040#
NETCKL	 2028# 2042 
NETCKN	 2031  2039  2042#
NETCL1	  654   657#
NETCL2	  671   676#
NETCLB	 1407  1493#
NETCLL	 1406  1489# 1493 
NETCLW	  656   680#
NETCLZ	  318   651#  685 
NETCNC	  243   360 
NETDAL	  226   837   869 
NETDMP	  705   718#
NETDTB	  308# 1154 
NETDWN	  192  2021# 2313  6246 
NETENT	 2345 
NETEXT	  310   402#
NETFAL	  710   764#
NETFRE	  246   363   365   368   370   371  1248  1260 
NETFRK	  233   274   275   660   761   771   773  1570  1653  1994 
NETGST	  327  1231#
NETHDL	 2054# 2061 
NETHDN	  192  2016  2052# 2313  3622 
NETHDX	 2057  2061#
NETINI	  184   357#
VDH.VDH;1                          22-MAY-75 10:30     Page 30.20

NETINT	  708   759#
NETKF1	  771#  774 
NETKFK	  193   768#
NETMTP	  326   698#
NETN  	  138 
NETNAM	  185   309   385#
NETON 	  178   375  2344  2587  6226  6234  6398  6424  6625 
NETOP1	  541#  583 
NETOPB	 1404  1515#
NETOPL	 1405  1503# 1515 
NETOPN	  315   506#  528#
NETRAL	  188   828   833#  870  2314  4017 
NETRAX	  836   855#
NETRD1	  748   755#
NETRDY	  709   747#
NETSET	  308   380#
NETSQI	  316   791#
NETSQO	  317   916#
NETSST	  328  1241#
NETSTS	  229   276   277   357   358   358   359   548   568   574   639   677 
	  683   699   792   804   806   815   834   884   887   917   954   956 
	 1131  1135  1232  1418  1430  1442  1451  1457  1466  1533  1639  1648 
	 1771  1900  2003  2010  2033  2082  2311  4728  5158 
NETTC1	 4746  4749  4766#
NETTC2	 4742# 4768 
NETTC4	 4742  4754#
NETTC8	 4722# 4959 
NETTCH	 2364  2575  2601  6227  6241  6250  6261  6280  6377 
NETTCS	 3260  3859  4719# 4764 
NETTEO	 4745  4783#
NETTIM	  165  2047  2401  2915  2923  2924  2945  6350 
NETTOO	 4748  4772#
NETVER	  311   413#
NETWIZ	  743  2708  3135 
NEW   	 6488 
NEWNVB	 2205# 4359  4421  4892 
NGS   	 2755 
NHOSTS	 2313 
NIMSTK	 2155# 2433  5863 
NIN   	  434   443   466   479 
NLHOST	 2263# 2279  3383  3460  6389 
NLINES	 3327  3856  3927  4350  4483  4584  4619  6286 
NLNKBW	  214# 1697  1698  1718  1730 
NN    	  509   510   570   652   653   664   719   747  1021  1150  1157  1439 
	 1497  1534 
NNTBFS	  245   364   367 
NNVTLN	 2265  2436  2438  3256  6312 
NO    	 5576  5790 
NOINT 	  380  2966  3002  3034  3087  4406  4551 
NON   	  528 
NOP   	 3742 
NOPCH 	 2182#
NOPCNT	 2408  6022  6061  6123  6231  6374  7149  7151 
VDH.VDH;1                          22-MAY-75 10:30     Page 30.21

NOSKED	 2712  2841  3056  3111  3298  4347  4743  4834  4933  5709 
NOT   	 5816  5825  6804  6812  6826  6829 
NOTTST	  590   607#
NOUT  	 2543  2561  2613  2622  2630  2643  2667  2675 
NRP   	  245 
NSKED 	  163 
NSKT  	  192   218   219   220   225   226   227   229   233   237   359   770 
	 1596  1597  1635  1701  1932  2021  2027  2052 
NSQ   	 2153# 2367  2368  2369  2370  2371  2372  2373  2969  3008  3014  3124 
	 3154  3332  6302 
NTBUFS	  245   362   366   367   367 
NTE   	 3491  5988  6812  6829  7342  7430  7467  7479  7835 
NTSIBE	  189   781#
NTSQO1	  926   941#
NTSQO2	  942   945#
NTSQO3	  929   950#
NTTCS1	 4460  4463#
NTTCSO	 2271  4458#
NTTRC3	  173  1144  2278  5154#
NTWZX1	 3138 
NULL  	 7479 
NUSE  	 1316# 1372  1372  1372  1372  1372  1372  1372  1372  1372  1372 
NVT   	 4846 
NVTAGA	 5083  5098#
NVTCAP	 4401#
NVTCHO	 2273  4430#
NVTCL1	 4865  4872# 4902 
NVTCL2	 4867  4878#
NVTCL3	 4869  4877#
NVTCL4	 4860  4884#
NVTCLZ	  196   689# 2310  4385  4388 
NVTCO1	 4563  4568#
NVTCOB	 2271  4549#
NVTCOF	 2295  4380 
NVTCRP	 2200# 4433  4452 
NVTCT0	 4857  4862#
NVTCTL	 4821  4854#
NVTDCH	 4822# 4855  4859  4870  4896 
NVTDET	  182  1482  2275  4378#
NVTDN1	 5067  5071#
NVTDND	 5076  5080#
NVTDNT	 4815  5066#
NVTDO 	 4814  5014#
NVTDO1	 5015  5019#
NVTDOB	 2271  4574#
NVTDOD	 5024  5029# 5037 
NVTDRC	 5036  5058#
NVTDT1	 4383  4389#
NVTDTB	 4895  4900#
NVTDTM	 5035  5054#
NVTECF	 5081  5092#
NVTECN	 5030  5042#
NVTGAB	 2202# 4485  5048  5098 
VDH.VDH;1                          22-MAY-75 10:30     Page 30.22

NVTHI 	 2066  4015  4470 
NVTIAC	 4816  4890#
NVTLO 	 2067  2265  2437  2440  3257  3326  3855  3926  4016  4346  4469  4482 
	 4583  4618  6282 
NVTLOP	 5023  5037# 5075  5118 
NVTMO1	 4628  4639  4648  4649#
NVTMO2	 4653  4656#
NVTMOD	 2273  4618#
NVTNGC	 4663  4668#
NVTNGF	 4605  4632  4644  4667#
NVTNGT	 4577  4604  4631  4662#
NVTNRM	 4811  4817  4818  4820#
NVTNTT	 4681  4691#
NVTOPF	 2440# 4361  4390  4474  4493  4651  4673  4687  4695  4705  4710  5017 
	 5021  5026  5069  5073  5077  5107  5110  5111  5116  5121  5138  5141 
	 5146  5148 
NVTOPX	 2438  2440 
NVTPA1	 4601  4612#
NVTPAR	 2271  4583#
NVTPAX	 4590  4596  4613#
NVTPTR	 2265# 2279  4701 
NVTRAL	 3935  4018  4412  4844  4848  5155#
NVTRCC	 2272  4469#
NVTRCP	 2206# 4461  4490  4542  4719  5059 
NVTRCS	 2207# 4496  4542  4654  5059 
NVTRFU	 4965# 5025 
NVTRR1	 4498  4506#
NVTRR2	 4520  4540#
NVTRRR	 4492# 4721 
NVTRSV	 4510  4921  4933# 4947  4961  4971 
NVTRV1	 4941  4949#
NVTSDN	 5009# 5120  5149 
NVTSDO	 5003# 5122 
NVTSGA	 5032  5048#
NVTSNR	 4991# 5022  5074  5117  5147 
NVTSRP	 4969# 4987  4998  5004  5010 
NVTSSP	 4489  4514  4541  4565  4919#
NVTSTD	 4808  4811#
NVTSTP	 2253# 4805  4807  4885  4897 
NVTSWL	 4986# 5027 
NVTSWN	 4997# 5078 
NVTUPB	 4823  4832#
NVTUPD	 4801  4840#
NVTUPI	 3329  4796#
NVTUPL	 4799# 4809 
NVTWI1	 5105  5108  5114#
NVTWI2	 5018  5109#
NVTWID	 5119  5124#
NVTWIL	 4812  5104#
NVTWN1	 5136  5139  5144#
NVTWN2	 5070  5140#
NVTWNT	 4813  5135#
NVTXCR	 2273  4450#
VDH.VDH;1                          22-MAY-75 10:30     Page 30.23

NVTXDN	 4667  5008#
NVTXDO	 4662  5002#
NVTXG1	 4487  4490#
NVTXGA	 2273  4409  4482#
NVTXWL	 4662  4985#
NVTXWN	 4667  4996#
NWPBT 	 2431  3680  3692 
NXR   	 3761 
NXS   	 3762 
NXTSTT	 1329  1333  1358#
O     	  547   558   582   805   816   919   955   961  1441 
OCH0DL	 6578  7120  7683  7703 
OCH1DL	 6579  7124  7713  7732 
OCTRWD	 6590  7745 
ODCNV 	 6410 
OE    	  559 
OF    	 5271  6488  6491 
OKINT 	  391   397   418  3039  4413  4561 
OKRET 	  389#  406 
OKSKED	 2716  2767  3067  3071  3113  3118  3305  3350  3353  4352  4362  4544 
	 4753  4766  4836  4928  4938  4980  5737 
OMEXIT	 7258# 7293  7299 
OMRLS1	 7328  7335  7343#
OMRLS2	 7332  7337  7342#
OMRLS3	 7340  7347#
OMRLSE	 7265  7324#
OMSHFT	 6574  7276  7302 
OMSPST	 6575  7277  7279  7301 
ON    	 3511  6488 
OP32  	 7138  7251#
OP32L 	 7249# 7255  7257 
OP36  	 7139  7275#
OP36EN	 7278  7283#
OP36HE	 7241  7286  7289#
OP36L 	 7281# 7289  7291 
OP36X1	 7283  7302#
OP36X2	 7288  7295#
OP36X3	 7295  7297  7301#
OPBPTR	 6581  7736  7741  7752 
OPBUF0	 6585  7076  7077  7078  7079  7207  7700 
OPBUF1	 6584  7093  7094  7095  7096  7733 
OPCACK	 7646  7663#
OPCAK0	 7677# 7708 
OPCAK1	 7676  7678  7707#
OPCAK2	 7682  7689#
OPCAK3	 7712  7719#
OPCAK4	 7705  7735#
OPCEND	 7660  7672  7688  7718  7743#
OPCHL1	 7653  7658#
OPCHLO	 7644  7656#
OPCHRD	 7642  7651#
OPCNT 	 6577  7068  7086  7106  7117  7668  7689  7719  7800  7801  7811  7823 
OPCTRL	 6659  6677  6701  7129  7441  7546  7572  7640# 7789 
VDH.VDH;1                          22-MAY-75 10:30     Page 30.24

OPDAT 	 7742  7752#
OPDAT1	 7753  7756#
OPEND 	 7659  7669  7685  7715  7757  7765#
OPFCH1	 7073  7091#
OPFILR	 6709  7064# 7089  7108 
OPFPIK	 7067  7149#
OPFPIR	 7153  7175#
OPFPK1	 7164  7185#
OPFPKH	 7150  7157#
OPFPKL	 7158  7168#
OPFPL1	 7169  7180#
OPFXT 	 7070  7075  7092  7112#
OPFXT1	 7122  7126#
OPFXT2	 7116  7127#
OPHH  	 7137  7218#
OPHH32	 7237  7255#
OPHH36	 7234  7239#
OPIDL1	 7788  7790#
OPIDLE	 6323  6644  7769  7779#
OPLDR 	 7136  7197#
OPLDR1	 7200  7206#
OPND  	  571   735   874  1099  1108  1114  1119  1310# 1361  1363  1366  1366 
	 1366  1366  1366  1366  1987  2087 
OPNF  	 1150 
OPNFAI	  573#
OPNLSN	  536   580#
OPNX10	 1744  1756 
OPNX14	  585 
OPNX19	 1793 
OPNX20	 1801  1825 
OPNX21	  577 
OPNX22	  576  1787 
OPNX9 	 1765 
OPR   	  485  1209 
OPRLS1	 7806  7808  7817#
OPRLS2	 7818  7820  7829#
OPRLS3	 7810  7822  7835#
OPRLSE	 7544  7591  7799# 7835 
OPWCNT	 7690  7720  7737  7774#
OSHFT1	 7281  7310#
OSHFT2	 7282  7314#
OSHFT3	 7285  7318#
OUTPUT	 3482  7342  7647 
OVERDU	 3467 
OVERFL	 3491 
OVERLO	 7479 
P     	  201   203   335   338   340   341   342   353   376   387   398   404 
	  425   427   435   438   442   444   449   452   454   458   459   461 
	  470   486   516   519   524   527   532   537   538   567   578   580 
	  581   586   598   655   663   667   675   693   694   702   715   716 
	  720   722   723   725   736   738   744   750   752   756   757   762 
	  765   768   769   775   776   777   786   794   796   798   801   813 
	  817   828   831   840   844   851   852   853   854   856   858   860 
VDH.VDH;1                          22-MAY-75 10:30     Page 30.25

	  865   866   870   871   875   878   879   885   888   889   890   892 
	  893   894   897   898   900   901   906   907   909   910   921   922 
	  924   928   930   931   939   943   946   948   950   969   990   991 
	  992  1016  1019  1022  1024  1025  1026  1030  1040  1047  1054  1059 
	 1074  1080  1082  1083  1085  1091  1096  1101  1105  1111  1117  1124 
	 1125  1126  1129  1133  1134  1140  1141  1142  1143  1144  1151  1155 
	 1158  1162  1169  1170  1171  1173  1188  1194  1197  1201  1212  1213 
	 1226  1237  1241  1246  1247  1249  1251  1252  1253  1254  1258  1259 
	 1261  1262  1263  1264  1423  1431  1461  1462  1463  1468  1469  1473 
	 1478  1481  1482  1483  1485  1490  1491  1493  1498  1499  1509  1511 
	 1515  1521  1536  1538  1540  1542  1545  1548  1552  1557  1558  1560 
	 1561  1562  1563  1564  1566  1574  1576  1577  1583  1584  1585  1586 
	 1607  1609  1614  1616  1618  1619  1621  1626  1627  1645  1656  1658 
	 1662  1667  1669  1671  1673  1683  1684  1685  1686  1687  1688  1692 
	 1693  1694  1695  1696  1697  1698  1699  1700  1707  1727  1728  1730 
	 1731  1732  1733  1734  1735  1739  1740  1741  1742  1743  1745  1751 
	 1752  1753  1754  1755  1757  1766  1768  1773  1775  1781  1785  1786 
	 1788  1794  1796  1797  1805  1806  1807  1808  1809  1810  1811  1812 
	 1817  1821  1827  1828  1829  1830  1831  1851  1857  1858  1863  1864 
	 1865  1866  1867  1873  1874  1875  1876  1877  1878  1880  1885  1886 
	 1887  1889  1890  1895  1898  1901  1902  1903  1906  1909  1911  1912 
	 1913  1914  1920  1921  1922  1923  1924  1925  1926  1928  1929  1930 
	 1931  1935  1936  1951  1953  1954  1955  1956  1957  1962  1963  1964 
	 1965  1967  1968  1972  1973  1978  1979  1988  1993  1997  1998  2004 
	 2005  2011  2012  2016  2022  2041  2048  2053  2059  2060  2062  2063 
	 2069  2070  2071  2072  2074  2075  2076  2080  2085  2088  2090  2091 
	 2659  2660  2690  2693  2719  2720  2736  2739  2743  2744  2760  2762 
	 2764  2766  2768  2769  2771  2777  2779  2780  2783  2785  2787  2791 
	 2803  2810  2816  2817  2821  2822  2823  2827  2833  2834  2840  2845 
	 2847  2848  2850  2854  2857  2886  2920  2964  2968  3004  3010  3016 
	 3022  3024  3025  3026  3027  3028  3038  3047  3068  3074  3088  3091 
	 3097  3101  3108  3114  3117  3126  3131  3139  3141  3144  3145  3159 
	 3160  3161  3163  3165  3166  3167  3168  3173  3179  3187  3192  3197 
	 3198  3199  3200  3203  3212  3215  3249  3274  3294  3318  3354  3355 
	 3371  3401  3409  3553  3562  3593  3598  3644  3661  3666  3668  3676 
	 3677  3681  3682  3683  3688  3689  3693  3694  3716  3721  3723  3724 
	 3726  3727  3731  3794  3798  3801  3804  3811  3879  3888  3957  3959 
	 4054  4059  4060  4062  4064  4135  4139  4147  4152  4155  4157  4167 
	 4169  4170  4181  4186  4193  4196  4199  4202  4209  4211  4214  4215 
	 4217  4219  4221  4224  4227  4230  4233  4236  4239  4246  4249  4252 
	 4257  4262  4267  4272  4277  4284  4285  4286  4287  4288  4289  4290 
	 4291  4292  4294  4314  4317  4318  4319  4320  4321  4322  4323  4324 
	 4373  4378  4381  4386  4389  4404  4405  4414  4415  4420  4423  4424 
	 4430  4432  4440  4441  4444  4445  4472  4476  4477  4506  4508  4511 
	 4517  4519  4534  4537  4552  4553  4559  4560  4577  4587  4591  4598 
	 4602  4609  4611  4613  4624  4626  4629  4633  4637  4638  4641  4647 
	 4649  4656  4657  4664  4670  4671  4675  4676  4678  4685  4688  4725 
	 4732  4734  4736  4740  4750  4752  4754  4760  4762  4763  4796  4798 
	 4799  4802  4833  4837  4840  4841  4856  4919  4921  4922  4926  4942 
	 4946  4950  4956  4957  4960  4969  4972  4975  4976  4977  4978  4979 
	 4985  4991  4996  5002  5008  5019  5071  5114  5144  5189  5191  5192 
	 5196  5197  5201  5216  5223  5224  5225  5238  5245  5289  5298  5307 
	 5310  5312  5314  5315  5317  5318  5321  5323  5330  5337  5338  5358 
VDH.VDH;1                          22-MAY-75 10:30     Page 30.26

	 5359  5360  5364  5365  5368  5369  5370  5373  5374  5397  5399  5429 
	 5438  5447  5449  5473  5484  5505  5527  5530  5533  5538  5541  5542 
	 5543  5545  5551  5560  5561  5563  5567  5573  5589  5591  5592  5595 
	 5609  5610  5625  5627  5629  5630  5671  5690  5695  5696  5699  5703 
	 5704  5758  5759  5760  5764  5766  5767  5772  5774  5802  5850  5851 
	 5853  5901  5902  5904  5944  5945  5967  5968  6119  6125  6126  6134 
	 6138  6149  6150  6156  6157  6161  6162  6167  6171  6182  6184  6185 
	 6400  6420  6428  6658  6660  6676  6678  6700  6702  6823  6857  6897 
	 6913  6953  6973  6982  6992  7002  7046  7049  7128  7130  7218  7235 
	 7264  7266  7275  7292  7298  7303 
PACKET	 7467  7479 
PBFSIZ	  195   278#  555   807   819  1010  1041  1056  1057 
PBOUT 	 2597 
PBPBYT	  195   277#  637   823   862   867   933   994  1035  1446  1508  1525 
	 1774  1780  1894  1904 
PBYTPO	  148 
PBYTSZ	  148   512   533   550   975   980  1032 
PCLKS 	  271#  630   681   938  1001  1550  2036  2038 
PFHST 	  194   270#  727   850  1233  1421  1494  1503  1522  1611  1629  1672 
	 1706  1934  2058  2310  5180 
PFSM  	  194   276#  565   610   621   672   712   734   873  1094  1098  1103 
	 1107  1113  1118  1537  1541  1551  1556  1600  1655  1663  1666  1702 
	 1760  1892  1915  1941  1985  2028  2054  2078 
PFSMCH	  275# 1572 
PI    	 7618  7618 
PIMSTK	 5851  5863# 5902  5968 
PINTCH	  274# 1984 
PIOFF 	 3241  3287  3451  3555  3632  4173  5677  6014  6423  6714  7085  7104 
PION  	 3245  3293  3454  3559  3635  4178  5687  6017  6021  6426  6717  6722 
	 7088  7107 
PKBY1 	 5465  5528  5573# 5576#
PKBY2 	 5464  5467#
PKBY4 	 5575  5578#
PKBY5 	 5466  5476#
PKBYT 	  177   931  2279  5462# 5478 
PKCHK 	  177   750   928   969  2279  4734  5483#
PKCHK0	 5484#
PKCHK1	 5497  5499  5502#
PKCHK2	 5488  5505#
PKMS2 	 5526  5558#
PKMS3 	 5533# 5556  5559 
PKMS4 	 5528# 5564 
PKMS5 	 5529  5566#
PKMSD 	 5546#
PKMSG 	  177   991  2279  4761  5524# 5554  5569 
PKMSG0	 4316  5525#
PKMSL 	 5532  5554#
PKQOB 	 5421  5471  5549  5562  5615#
PKTODD	 6522# 6542  7386  7695  7725 
PKULCK	  177   751  1016  2279  4737  4755  5511#
PKWCNT	 7390  7418# 7526 
PLIDX 	  194   272#  638   749   782   812   845   927   968   989  1015  1445 
	 1454  1467  1489  1510  2314  4210  4555  4733  4759  4951  5170 
VDH.VDH;1                          22-MAY-75 10:30     Page 30.27

PLIDXC	  273#
PLINK 	  194   269#  728   849  1507  1528  1712  1729  1908  1933  1970  2310 
	 5181 
PNDG  	 1305# 1361  1361  1361  1361  1361  1763 
PNVT  	 3325  3854  3925  4014  4397# 4803  5160 
POLLF 	 2421  2422  2529  3618 
POVERT	 6491 
PREVIO	  528 
PROGF 	  256   573   676  1130  1638  1770 
PROLOG	  136  2139  6495 
PSIBW 	  161 
PSIRQ 	  154  1576  1997 
PSOUT 	 2536  2547  2554  2569  2585  2589  2591  2595  2609  2618  2627  2635 
	 2649 
PTINTC	 2252# 3930  3932  4872  4874  5163 
PTNETI	  175  2073  2250# 2280  3933  4364  4384  4410 
PTNETO	  175  2251# 2280  4365  4387  4554  4727  4949 
QQ    	 1326# 1329  1330# 1330  1331# 1333  1334# 1334  1341# 1343  1344# 1344 
	 1345# 1348  1349# 1349 
QUEUE 	 3482  3511 
R     	 2305  3227  3286  3324  3609  3732  3909  3923  4183  5029  5031  5033 
	 5034  5080  5082  5084  5085  5086  5087  5124  5125  5126  5128  5129 
	 5130  5131  5656  5749  5761 
RAP   	 3760 
RAR   	 3758 
RARF  	 2229# 3843  3982  4030  4158  4212 
RARRF 	 2230# 4030  4158  5426 
RAS   	 3759 
RCFRFN	  194  1977# 2311  5448 
RCNOPT	 2189#
RCSTR0	 1886# 1891 
RCTOPT	 2194# 4473  4492  4515  4650 
RCVIM1	 3034# 3041 
READF 	  508   510   529  1079 
RECCL1	 1853# 2088 
RECCLS	  194  1851# 2310  3832 
RECD  	 3952  4063  6144 
RECEIV	 3370  3703  4846  5402 
RECINR	  193  1983# 2314  3911 
RECINS	  193  1984# 2314  3928 
RECRST	  192  2016# 2314  3958 
RECRTS	  194  1962# 1969  2310  3824 
RECSTR	  194  1885# 2310  3828 
REGULA	 3511 
REL1S1	 3024# 3029 
REL1SQ	 3010  3016  3020#
RELAS1	 3015# 3017 
RELASQ	 3006  3014#
RELFRE	  147  1261 
RELJFN	  149  1140  1142 
RELSQ1	 3009  3011# 3018 
RERCNT	 6330  6600  7468  7480  7518  7560  7587 
RESCD 	 2697 
VDH.VDH;1                          22-MAY-75 10:30     Page 30.28

RESPC 	  261   344   605  1833  3175 
RET   	  659  1437  1443  1452  1458  2515  2519  2522  2579  2603  2655  2695 
	 2867  2932  2949  3069  3188  3201  3216  3248  3250  3262  3275  3277 
	 3328  3330  3356  3402  3433  3473  3494  3507  3545  3570  3575  3587 
	 3611  3623  3639  3672  3684  3695  3704  3709  3735  3749  3772  3777 
	 3814  3820  3893  3897  3936  3942  3946  3953  3970  4047  4065  4081 
	 4085  4095  4103  4107  4116  4124  4131  4148  4156  4161  4216  4256 
	 4266  4271  4276  4325  4353  4374  4395  4403  4416  4425  4431  4446 
	 4451  4454  4465  4478  4484  4494  4512  4545  4550  4566  4570  4575 
	 4579  4585  4614  4620  4622  4658  4665  4669  4689  4715  4773  4779 
	 4784  4790  4829  4838  4863  4875  4880  4886  4891  4898  4900  4901 
	 4903  4909  4910  4923  4929  4958  4973  4981  4992  5058  5094  5100 
	 5112  5142  5226  5274  5284  5290  5324  5361  5382  5401  5404  5445 
	 5450  5453  5456  5474  5507  5517  5552  5593  5611  5654  5665  5691 
	 5705  5738  5768  5778  5787  6139  6145  6187  6228  6292  6359  6366 
	 6391  6399  6429  6437  6628  6651  6657  6661  6679  6699  6703  6710 
	 6734  6755  6787  7065  7071  7113  7125  7131  7132  7173  7179  7191 
	 7204  7213  7252  7270  7305  7349 
RFCR  	  714   876  1307# 1361  1363  1363  1363  1363  1363  2086 
RFCS  	  566   880  1095  1104  1309# 1360  1365  1365  1365  1365  1916  1946 
RFN1  	 1313# 1368  1369  1369  1369  1369  1369  1369  1369  1369  1371  1371 
RFN2  	 1315# 1366  1371  1371  1371  1371  1371  1371 
RFNCHK	 2914  3438#
RFNCK0	 3440# 3469 
RFNCK1	 3444# 3449 
RFNCK2	 3442# 3444 
RFNCK3	 3455  3479#
RFNCK4	 3445  3470#
RFNCK5	 3447  3451#
RFNCK6	 3469# 3477  3483 
RFNCK7	 3462  3475#
RFNM  	 3467 
RFNMC 	 2224# 3440  3554  4174  5412  5652  5657  5979  7333 
RFNTIM	 2402  2913  2925  2926  3472  6351 
RFNTMO	 2160# 3470 
RLNTBF	  190   663  1258# 2311  3027  3047  3101  3108  3114  3165  3230  3354 
	 3372  3463  3561  4169  4180  5398  5628  5670  5765 
RNDF  	  506 
RPTCNT	 6599  7697  7727 
RRFB  	 1283# 1897 
RRFC  	 1273# 1905  1971 
RRFN  	 1281# 1977 
RRP   	 3757 
RSKED 	  164 
RSKP  	 2305  3129  3137  4937  5044  5050  5054  5061  5127  6237  6242  6263 
	 6267  6269  6272 
RST   	 3756 
RTIME 	 6216  6511# 6514  6623 
RTPCNT	 6325  6593  6635  6646  6653  6672  6683  6684  6691  6697  7576 
RTS   	 3743 
RTSTAT	 2600  5786  6192  6257  6276  6317  6364  6588  6633  6648  6655  6669 
	 6693  6696  6732  6750  6767  6786  6792  7051  7064  7087  7102  7105 
	 7112  7115  7126  7143  7171  7178  7190  7209  7212  7259  7263  7368 
VDH.VDH;1                          22-MAY-75 10:30     Page 30.29

	 7383  7384  7437  7516  7542  7543  7563  7570  7640  7658  7671  7674 
	 7680  7687  7691  7699  7710  7717  7729  7735  7768  7783  7799  7804 
	 7813  7815  7825  7827 
RVRCNT	 6328  6329  6329  6594  7366 
RXMTDL	 6515# 7701  7730 
RXMTF 	 2228# 3459  3564  3605 
SBCH  	 2173# 4513 
SCDCHN	 7523  7830 
SCHEDU	  596 
SECH  	 2183# 4540  4890  4895 
SENT0 	 6551# 7681  7696  7698  7821  7824 
SENT1 	 6550# 7711  7726  7728  7809  7812 
SET   	 6804  6826  7647 
SETUP 	 5816  5825 
SFBSX2	  515 
SGAOPT	 2190#
SIQCHK	 2920  3153#
SIQCKE	 3156  3171#
SIQCKL	 3155# 3171 
SIQCKX	 3158  3169#
SIQEMT	 3058  3071#
SIQGET	 3024  3038  3053# 3163 
SIQIBI	 2367  3063  3344  3348  3349  6304 
SIQIBO	 2368  3057  3060  3062  3072  6303 
SIQMAX	 2154# 3340 
SIQSPC	 2370  3066  3339  3347 
SIQTIM	 2369  3055  3157  3169  3170  3345 
SIQTM0	 2163# 3054  3343 
SIZE  	 5367 
SIZF  	  558 
SJFN  	  501 
SK2DWN	  187  1921  1951  2065# 2312  4046 
SK2RET	  151   381   390   392 
SKMRTN	  151  1145  1199  1227  2291  2740  2992  3048  3119 
SKPRET	  152   417   419   429   446   472   496   560   564   572   678   787 
	  967  1013  1159  1631  1675  1776  1795  4471 
SKTCK1	 1918  1920#
SKTDW2	 2085  2088#
SKTDWN	  745  2022  2060  2068  2071  2074  2078#
SNDACK	 6554# 6557  7084  7103  7114  7436  7541  7645  7670  7686  7704  7716 
	 7734 
SNDCLS	 1402  1473  1494#
SNDHLO	 6553# 6557  6654  6668  6695  7643  7656  7784 
SNDHRD	 6552# 6557  6692  7569  7641  7651  7784 
SNDINT	  706   727#
SNDIX1	 3085 
SNDIX2	 3089 
SNDIX3	 3102 
SNDIX4	 3109 
SNDIX5	 3115 
SNDRFC	 1403  1516  1520#
SOUT  	 2663  2671  2679  2689  2730 
SPCPKT	 6524# 7367  7374  7652  7657 
VDH.VDH;1                          22-MAY-75 10:30     Page 30.30

SPECIA	 7479 
SPURIO	 7835 
SQJOB 	 2371  2971  2989  3021  3023  3128  3155  3335  6305 
SQLCK 	 2374  2967  2990  2996  3003  3011  3147  6307 
SQLTST	 3142  3147#
SQLWAT	 2968  3004  3141#
SQMSK 	 2373  2976  2985  3107  3336 
SQVAL 	 2372  2978  2987  3106  3334 
SQX1  	 3125 
SQX2  	 3130 
STATE 	 6780  7430 
STCPSI	 1560  1570# 2004  2011 
STENEX	  137  2142 
STFCH0	 6738  6753#
STFPTR	 6746  6763  6792# 6816  6864  6906  6924  6975  6995  7005 
STFTBL	 6747  6764  6773#
STMINQ	 2301  3194  3214 
STR   	 3744 
STS   	  544   561  1172 
STSOPT	 2192#
STSTAT	 6537# 7050 
STUCK 	 3482 
STUFF 	 6780 
STUFRM	 6536# 6736  6753  6785 
SUMEX 	 6168 
SVCIF 	  253  2002  2009 
SVCINT	  194  2002# 2314  3610 
SVCRST	  194  2009# 2314  3569 
SWAPCD	 2527 
SWAPPC	  306   350   647  1844 
SYSTEM	 6488#
T     	 6512# 6514  6690 
TCOB  	 2296  4518  4536  4539  4569  4595  4925  4975 
TCOBQ 	 2296  4440  4444  4516  4927  4977  4979 
TCOTST	 2297  4943 
TEST  	  389   416   506   508   509   510   521   529   539   547   558   559 
	  570   575   582   652   653   657   664   718   719   721   747   755 
	  764   793   797   805   816   835   918   919   920   923   925   955 
	  960   961  1021  1023  1058  1079  1090  1150  1157  1438  1439  1441 
	 1450  1497  1520  1534 
THE   	 6488 
THIS  	 7342 
TMKOPT	 2193# 4576 
TO    	 6491 
TODCLK	  151  1813  2046  2316  2910  2936  2944  3053  3342  3431  3471  4712 
	 6208  6217  6244  6259  6349  7118  7684  7702  7714  7731 
TOO   	 3733  5554  5852  6993  7467 
TTCHI 	 2295  4835 
TTCIBF	 2295  4367  4394 
TTCOBI	 2295  4366  4393  4723  4731  6285 
TTECT 	 2295  3259  4744  4789 
TTEOUT	 2296  4783  4787  4788 
TTFLGS	 2296  4369  4371  4500  4521  4588  4599  4625  4879  5043  5093 
VDH.VDH;1                          22-MAY-75 10:30     Page 30.31

TTFORK	 2295  4355  4379  4458  6283 
TTICT 	 2295  5162 
TTIMAX	 2296  5161  5174 
TTMSG 	 2692 
TTNETW	 2250  2251  2252  2253  2275  2437# 4348  4360  4382  4391  4402  4422 
	 4434  4435  4453  4462  4486  4491  4497  4543  4549  4655  4684  4694 
	 4702  4706  4708  4720  4722  4825  4826  4831  4854  4893  5049  5060 
	 5099  6284 
TTNETX	 2436  2437  6313 
TTNOF 	 2359  2904  3255  4463 
TTOCT 	 2295  3258  4747  4778  4935 
TTOMAX	 2296  4934 
TTOOUT	 2296  4772  4776  4777 
TTPSI 	 2295  4392 
TTRLOB	 2296  4751 
TTSIZ 	 4775  4786 
TTYLMD	 2295  4822 
TYPE  	 3703 
ULKID0	 3204  3213#
ULKIDV	 2331  3211# 3842  3845  3870  3981  3984  3995  4029  4042  4044 
ULKNCP	  191   201   352# 2315  5159  5179  5183 
UMODF 	 2871  2954 
UMOVE 	  668   759  1072  1084  1122  1123  2975  2977  2984  3035  3042  3081 
	 3082  3104 
UMOVEM	 1139  1198  1234  1236  2738  2995  3050 
UNBRK 	 5820  5840  5846  5858  5861  6003  6075  6086  6609  7405  7462  7474 
	 7488  7496  7599  7613  7621  7754  7759  7771  7792 
UNDEFI	 6780 
UNEXPE	 2953 
UNIT  	  207#  269   270   271   272   274   275   276   277   278   541   542 
	  548   568   574   591   609   611   620   622   628   631   636   639 
	  641   644   651   660   661   677   683   689   698   699   729   761 
	  768   770   771   773   774   776   781   791   792   804   806   808 
	  815   825   827   834   837   848   869   884   887   916   917   934 
	  936   954   956   987   996   998  1006  1018  1051  1093  1102  1111 
	 1117  1129  1131  1132  1133  1134  1135  1136  1143  1162  1231  1232 
	 1235  1418  1419  1430  1435  1442  1447  1451  1457  1466  1474  1480 
	 1481  1483  1495  1496  1504  1523  1524  1533  1570  1587  1588  1589 
	 1592  1594  1595  1596  1606  1612  1628  1634  1635  1639  1642  1647 
	 1648  1649  1650  1651  1652  1653  1657  1659  1667  1670  1699  1701 
	 1709  1717  1728  1771  1853  1900  1907  1932  1938  1952  1989  1994 
	 2003  2010  2021  2023  2027  2033  2042  2052  2061  2065  2069  2073 
	 2075  2082 
UNKNOW	 3370  3703  4063 
UNLCKF	  149   893   901   910  1169  1173  1197  1201 
UNLKF 	  389   416 
UP    	 6804  6826 
UPBG1 	 5329  5379#
UPBGNB	 5283  5301  5328# 5371  5375 
UPBGNE	 5341  5343  5348  5357  5363#
UPBGNX	 5373#
UPBGT 	 5380  5386#
UPBRB 	 5287  5320  5363  5395# 5402#
VDH.VDH;1                          22-MAY-75 10:30     Page 30.32

UPBYT 	 2279  3776  3802  4800  5280#
UPBYT1	 5282  5285#
UPMSG 	  177   813  2279  5297#
UPMSG2	 5321#
UPMSG4	 5318#
UPMSG5	 5302  5323#
UPROBI	 2161# 3396 
UPROBT	 2162# 3396  3429 
USE   	  261   306   344   350   605   647  1833  1844  3175 
VDH   	  264   266  2394  2493  2599  2600  5785  5786  5797  5804  6124  6192 
	 6193  6215  6216  6257  6258  6274  6278  6315  6334  6344  6364  6365 
	 6368  6375  6382  6440  6497 
VDHANS	 6275  6316  6587  6647  6665  6667  7564 
VDHCHK	 6562  6708#
VDHFLG	 6569  6723  7816  7828  7829  7831 
VDHLOK	 6591  6656  6673  6698  7127  7438  7545  7571  7782  7787 
WAS   	  596 
WATBAL	  752   950   970  1015#
WATBUF	  897# 1050 
WATFOR	  602#  675 
WATLS1	  881   889#
WATLSN	  873# 1022  1030 
WATNO1	  591#  603 
WATNOT	  567   590#  596#  894  1096  1105 
WATTS1	  614   625#
WATTST	  602   618#
WATXXX	  724   753   818   906#  944   951 
WD    	 7647 
WDS16B	 6530# 7378 
WHEEL 	  485  1209  2708 
WILCH 	 2172# 4986 
WILOPT	 2195# 4473  4492  4606  4640  4650  4674  5014  5016  5066  5068  5104 
WITH  	 3703 
WITHOU	 7618  7647 
WNDF  	  539   559   582   652   721   755   764   793   923  1023  1058  1157 
WNTCH 	 2171# 4965  4997 
WORD  	 6829 
WRK2DO	 6557# 7785 
WRPMSK	 2296  4774  4785 
WRTF  	  509   510   521   653   664   719   747   764  1090 
X     	 3370  3467  3482  3703  3733  3813  3952  4063  4080  4846  5367  5852 
	 6131  6135  6144  6993 
XCTBU 	  552 
XCTF  	  506 
XCTMU 	 3046 
XCTUM 	 3096 
XCTUU 	 2986  2991  3092 
XMTCNT	 6595  7744 
XMTOD0	 6546# 7694  7817  7826 
XMTOD1	 6545# 7724  7805  7814 
XPECT 	 6542# 7532  7539  7664  7666 
XX    	 3509# 3514  3523  3524  3525  3526  3528  5888# 5889  5890# 5890  5892#
	 5893  5894# 5894  6111# 6112  6113# 6113  6929# 6930  6931# 6931  6933#
VDH.VDH;1                          22-MAY-75 10:30     Page 30.33

	 6934  6935# 6935  7309# 7310  7310  7311# 7311  7313# 7314  7315# 7315 
	 7317# 7318  7318  7319# 7319 
